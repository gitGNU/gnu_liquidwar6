/*
  Liquid War 6 is a unique multiplayer wargame.
  Copyright (C)  2005, 2006, 2007, 2008, 2009  Christian Mauduit <ufoot@ufoot.org>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.


  Liquid War 6 homepage : http://www.gnu.org/software/liquidwar6/
  Contact author        : ufoot@ufoot.org
*/

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "map.h"

static int
_default_source (lw6map_meta_layer_t * one_way, int width, int height)
{
  int ret = 0;

  one_way->shape.w = width;
  one_way->shape.h = height;
  one_way->shape.d = 1;		// allways 1
  one_way->data =
    (u_int8_t *) LW6SYS_CALLOC (one_way->shape.w * one_way->shape.h *
				sizeof (u_int8_t));
  if (one_way->data)
    {
      // for now, nothing special, we just "zero" things
      ret = 1;
    }
  if (!ret)
    {
      lw6map_meta_layer_clear (one_way);
    }

  return ret;
}

/**
 * lw6map_one_way_north_builtin_whd
 *
 * @one_way: the one_way to init
 * @w: width
 * @h: height
 *
 * Creates a default one-way-north meta-layer.
 *
 * Return value: none
 */
void
lw6map_one_way_north_builtin_whd (lw6map_meta_layer_t * one_way, int w, int h)
{
  lw6map_meta_layer_clear (one_way);

  if (!_default_source (one_way, w, h))
    {
      lw6sys_log (LW6SYS_LOG_WARNING,
		  _("unable to construct default one-way-north meta-layer"));
      one_way->shape.w = 0;
      one_way->shape.h = 0;
      one_way->shape.d = 0;
    }
}

/**
 * lw6map_one_way_east_builtin_whd
 *
 * @one_way: the one_way to init
 * @w: width
 * @h: height
 *
 * Creates a default one-way-east meta-layer.
 *
 * Return value: none
 */
void
lw6map_one_way_east_builtin_whd (lw6map_meta_layer_t * one_way, int w, int h)
{
  lw6map_meta_layer_clear (one_way);

  if (!_default_source (one_way, w, h))
    {
      lw6sys_log (LW6SYS_LOG_WARNING,
		  _("unable to construct default one-way-east meta-layer"));
      one_way->shape.w = 0;
      one_way->shape.h = 0;
      one_way->shape.d = 0;
    }
}

/**
 * lw6map_one_way_south_builtin_whd
 *
 * @one_way: the one_way to init
 * @w: width
 * @h: height
 *
 * Creates a default one-way-south meta-layer.
 *
 * Return value: none
 */
void
lw6map_one_way_south_builtin_whd (lw6map_meta_layer_t * one_way, int w, int h)
{
  lw6map_meta_layer_clear (one_way);

  if (!_default_source (one_way, w, h))
    {
      lw6sys_log (LW6SYS_LOG_WARNING,
		  _("unable to construct default one-way-south meta-layer"));
      one_way->shape.w = 0;
      one_way->shape.h = 0;
      one_way->shape.d = 0;
    }
}

/**
 * lw6map_one_way_west_builtin_whd
 *
 * @one_way: the one_way to init
 * @w: width
 * @h: height
 *
 * Creates a default one-way-west meta-layer.
 *
 * Return value: none
 */
void
lw6map_one_way_west_builtin_whd (lw6map_meta_layer_t * one_way, int w, int h)
{
  lw6map_meta_layer_clear (one_way);

  if (!_default_source (one_way, w, h))
    {
      lw6sys_log (LW6SYS_LOG_WARNING,
		  _("unable to construct default one-way-west meta-layer"));
      one_way->shape.w = 0;
      one_way->shape.h = 0;
      one_way->shape.d = 0;
    }
}
