@deftypefun {lw6dyn_dl_handle_t *} {lw6dyn_dlopen_backend_so} (char * @var{so_file})
Opens a .so file directly, using a valid (full) path name.

@strong{Return value:}  a handle to the module, once it's opened. You might still
need to call a module specific @code{init}() function, but it's another story.
@end deftypefun

@deftypefun {lw6dyn_dl_handle_t *} {lw6dyn_dlopen_backend} (int @var{argc}, char * [] @var{argv}, char * @var{top_level_lib}, char * @var{backend_name})
@var{argc}:  the number of command-line arguments as passed to @code{main}

@var{top_level_lib}:  the top-level library concerned, this means is it
"cli", "gfx", "snd" or "srv". This will tell the function to search
for the .so file in the correct subdirectory. Think of this as a
category.

Opens a .so file corresponding to the given backend,
it is capable to search for system libraries installed after "make install"
but if not found, it will also search in the current build directory,
finding the .so files in hidden .libs subdirectories.

@strong{Return value:}  a handle to the module, once it's opened. You might still
need to call a module specific @code{init}() function, but it's another story.
@end deftypefun

@deftypefun {int} {lw6dyn_dlclose_backend} (lw6dyn_dl_handle_t * @var{handle})
@var{handle}:  the backend to close.

Closes an opened backend. Note that you must call any backend
specific clear, destroy, deinit, exit, function before.

@strong{Return value:}  1 if success, 0 on error.
@end deftypefun

@deftypefun {void *} {lw6dyn_dlsym} (lw6dyn_dl_handle_t * @var{handle}, char * @var{func_name})
@var{handle}:  the backend concerned

@var{func_name}:  the function name, as a NULL terminated string

Finds a C function in the given backend.

@strong{Return value:}  a pointer to the function, NULL if not found.
@end deftypefun

@deftypefun {lw6sys_assoc_t *} {lw6dyn_list_backends} (int @var{argc}, char * [] @var{argv}, char * @var{top_level_lib})
@var{argc}:  the number of command line args, as passed to main

@var{argv}:  the commind line args, as passed to main

@var{top_level_lib}:  the library category to query (gfx, snd, cli, srv ...)

Returns an assoc which lists all the available modules. The key
of the assoc entries in the module internal name such as 'gl'
and the value associated is a NULL terminated string describing
the module, for instance 'OpenGL'.

@strong{Return value:}  an assoc object containing key/label pairs.
@end deftypefun

@deftypefun {char *} {lw6dyn_path_find_backend} (int @var{argc}, char * [] @var{argv}, char * @var{top_level_lib}, char * @var{backend_name})
@var{argc}:  the number of command-line arguments as passed to @code{main}

@var{top_level_lib}:  the top-level library concerned, this means is it
"cli", "gfx", "snd" or "srv". This will tell the function to search
for the .so file in the correct subdirectory. Think of this as a
category.

@var{backend_name}:  the actual name of the backend, this is the name of the
.so file, between "libmod_" and ".so". For instance, to find
"libmod_gl.so", the right argument is "gl".

Get the full path to a .so file corresponding to the given backend,
it is capable to search for system libraries installed after "make install"
but if not found, it will also search in the current build directory,
finding the .so files in hidden .libs subdirectories.

@strong{Return value:}  the full path of the .so file, needs to be freed.
@end deftypefun

@deftypefun {int} {lw6dyn_test} (int @var{mode})
@var{mode}:  0 for check only, 1 for full test

Runs the @code{dyn} module test suite, testing most (if not all...)
functions. Will try to load libraries and query them for
standard LW6-expected functions.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

