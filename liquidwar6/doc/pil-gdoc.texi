@deftypefun {int} {lw6pil_bench} (float * @var{bench_result}, lw6sys_progress_t * @var{progress})
@var{bench_result}:  pointer to float, will contain the bench result

@var{progress}:  to inform the caller of the process advancement

Runs a standard, normalized bench on a default map. Results can
be interpreted as an estimated speed/power of your computer.

@strong{Return value:}  1 on success, 0 if failure
@end deftypefun

@deftypefun {lw6pil_command_t *} {lw6pil_command_new} (const char * @var{command_text}, int64_t @var{seq_0})
@var{command_text}:  readable text of the command

@var{seq_0}:  sequence offset (difference between sequence and rounds)

Creates a new command from its text representation.

@strong{Return value:}  newly allocated object
@end deftypefun

@deftypefun {lw6pil_command_t *} {lw6pil_command_dup} (lw6pil_command_t * @var{command})
@var{command}:  object to duplicate

Creates a copy of a command struct.

@strong{Return value:}  newly allocated object.
@end deftypefun

@deftypefun {void} {lw6pil_command_free} (lw6pil_command_t * @var{command})
@var{command}:  command to free

Frees a command struct, with all its members.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {char *} {lw6pil_command_repr} (lw6pil_command_t * @var{command})
@var{command}:  command to represent

Gives a readable representation of a command.

@strong{Return value:}  dynamically allocated string.
@end deftypefun

@deftypefun {int} {lw6pil_command_execute} (lw6pil_dump_t * @var{dump}, int64_t @var{timestamp}, lw6ker_game_state_t * @var{game_state}, lw6pil_command_t * @var{command})
@var{dump}:  pointer on dump structure (out param, can be NULL)

@var{timestamp}:  current timestamp (can be 0 if dump is NULL)

@var{game_state}:  game state to work on, can be NULL (usefull for DUMP)

@var{command}:  command to process

Interprets a command and runs it against game_state. If
dump and timestamp are set, then any DUMP command will fill
the dump structure with the right values. If not running
from a pilot context, this is useless, use NULL and 0LL.

@strong{Return value:}  1 if ok, 0 if failed.
@end deftypefun

@deftypefun {int} {lw6pil_command_execute_text} (lw6pil_dump_t * @var{dump}, int64_t @var{timestamp}, lw6ker_game_state_t * @var{game_state}, const char * @var{command_text}, int64_t @var{seq_0})
@var{dump}:  pointer on dump structure (out param, can be NULL)

@var{timestamp}:  current timestamp (can be 0 if dump is NULL)

@var{game_state}:  game state to work on, can be NULL (typically for DUMP)

@var{command_text}:  command text to process

@var{seq_0}:  sequence offset (diffrerence between sequence and round)

Interprets a command text and runs it against game_state. If
dump and timestamp are set, then any DUMP command will fill
the dump structure with the right values. If not running
from a pilot context, this is useless, use NULL and 0LL.

@strong{Return value:}  1 if ok, 0 if failed.
@end deftypefun

@deftypefun {int} {lw6pil_command_execute_local} (lw6pil_local_cursors_t * @var{local_cursors}, lw6pil_command_t * @var{command})
@var{local_cursors}:  local cursors information

@var{command}:  command to execute

Executes a local command, typically a cursor move, on the
local_cursor struct, without changing any game state.

@strong{Return value:}  1 if success, 0 if failure.
@end deftypefun

@deftypefun {int} {lw6pil_command_execute_local_text} (lw6pil_local_cursors_t * @var{local_cursors}, const char * @var{command_text})
@var{local_cursors}:  local cursors information

@var{command_text}:  command text to execute

Executes a local command text, typically a cursor move, on the
local_cursor struct, without changing any game state.

@strong{Return value:}  1 if success, 0 if failure.
@end deftypefun

@deftypefun {void} {lw6pil_coords_fix} (lw6map_rules_t * @var{rules}, lw6sys_whd_t * @var{shape}, float * @var{x}, float * @var{y}, float * @var{z})
@var{rules}:  the set of rules to use (defines polarity)

@var{shape}:  the shape of the map (logical part)

@var{x}:  the x coord to fix

@var{y}:  the y coord to fix

@var{z}:  the z coord to fix

Similar to @code{lw6map_coords_fix} but using floats, this function
can be used to check cursor position boundaries. Any float pointer
can be NULL.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6pil_coords_fix_x10} (lw6map_rules_t * @var{rules}, lw6sys_whd_t * @var{shape}, float * @var{x}, float * @var{y}, float * @var{z})
@var{rules}:  the set of rules to use (defines polarity)

@var{shape}:  the shape of the map (logical part)

@var{x}:  the x coord to fix

@var{y}:  the y coord to fix

@var{z}:  the z coord to fix

Similar to @code{lw6pil_coords_fix} but does use a wider range, say 10 times
the actual size of the map, this is not to contain the cursor within
the map but just to avoid overflow errors.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6pil_dump_zero} (lw6pil_dump_t * @var{dump})
@var{dump}:  object to initialize

Fills a dump object with zero, regardless of what was there before.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6pil_dump_clear} (lw6pil_dump_t * @var{dump})
@var{dump}:  object to clear

Clears a dump object, that is, frees all existing object if they are here,
and sets pointers to NULL.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6pil_dump_exists} (const lw6pil_dump_t * @var{dump})
@var{dump}:  object to test

Tests wether there's actually a dump in the structure, or if it's empty.

@strong{Return value:}  1 if there's a dump, 0 if all fields set to NULL.
@end deftypefun

@deftypefun {char *} {lw6pil_dump_command_generate} (lw6pil_pilot_t * @var{pilot}, u_int64_t @var{server_id})
@var{pilot}:  the pilot to transform as a DUMP.

@var{server_id}:  ID of server issuing the command

Creates the DUMP command for a given pilot, that is, a command that
describes the whole data and state.

@strong{Return value:}  newly allocated string
@end deftypefun

@deftypefun {int} {lw6pil_dump_command_execute} (lw6pil_dump_t * @var{dump}, int64_t @var{timestamp}, lw6pil_command_t * @var{command}, lw6sys_progress_t * @var{progress})
@var{dump}:  will contain the dump data, pilot and game state, struct, and level

@var{timestamp}:  current timestamp

@var{command}:  the command to execute

@var{progress}:  progress object to show the advancement of process


Interprets a DUMP command. A new pilot will be returned, along with game state, game struct and
level. Old objects won't be deleted, but you could (should) get rid of them at they are useless now.

@strong{Return value:}  newly allocated string
@end deftypefun

@deftypefun {void} {lw6pil_local_cursors_reset} (lw6pil_local_cursors_t * @var{local_cursors})
Resets a local cursors struct. Note that this need not be called very often,
in fact the local cursors can cope with "dead" cursors easily. In practise,
in a local game, there are only 4 of them, great maximum.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {lw6pil_local_cursor_t *} {lw6pil_local_cursors_get_cursor} (lw6pil_local_cursors_t *      @var{local_cursors}, u_int16_t @var{cursor_id})
@var{cursor_id}:  the id of the cursor to query

Returns a pointer on the cursor with the given id.

@strong{Return value:}  a pointer (must *not* be freed) which is NULL is cursor
does not exist.
@end deftypefun

@deftypefun {int} {lw6pil_local_cursors_get_info} (lw6pil_local_cursors_t * @var{local_cursors}, int * @var{x}, int * @var{y}, int * @var{mouse_controlled}, u_int16_t @var{cursor_id})
@var{x}:  a pointer to the x position, may be NULL

@var{y}:  a pointer to the y position, may be NULL

@var{mouse_controlled}:  a pointer to the mouse_controlled flag, may be NULL

@var{cursor_id}:  the id of the cursor to query

Gets the x,y position of the cursor, and tells if it's mouse controlled.

@strong{Return value:}  1 on success (cursor exists), 0 on failure (no such cursor).
@end deftypefun

@deftypefun {int} {lw6pil_local_cursors_set_xy} (lw6pil_local_cursors_t * @var{local_cursors}, u_int16_t @var{cursor_id}, int @var{x}, int @var{y})
@var{cursor_id}:  the id of the cursor to modify

@var{x}:  the x position

@var{y}:  the y position

Sets the position of a cursor in the local cursors struct. If cursor does
not exists, it's appended to the list.

@strong{Return value:}  1 on success (cursor exists), 0 on failure (no such cursor).
@end deftypefun

@deftypefun {int} {lw6pil_local_cursors_set_mouse_controlled} (lw6pil_local_cursors_t *         @var{local_cursors}, u_int16_t @var{cursor_id}, int @var{mouse_controlled})
@var{cursor_id}:  the id of the cursor to modify

@var{mouse_controlled}:  the mouse_controlled attribute

Sets which cursor is mouse controlled. If mouse_controlled is 1,
the flag is set for this cursor and cleared for all others. If set 
to 0, only this cursor's flag is cleared.

@strong{Return value:}  1 on success (cursor exists), 0 on failure (no such cursor).
@end deftypefun

@deftypefun {int} {lw6pil_local_cursors_get_main_info} (lw6pil_local_cursors_t *         @var{local_cursors}, u_int16_t * @var{cursor_id}, int * @var{x}, int * @var{y}, int * @var{mouse_controlled})
@var{cursor_id}:  the id of the main cursor, may be NULL

@var{x}:  a pointer to the x position, may be NULL

@var{y}:  a pointer to the y position, may be NULL

@var{mouse_controlled}:  a pointer to the mouse_controlled flag, may be NULL

Gets the x,y position of the main cursor, and tells if it's mouse controlled.

@strong{Return value:}  1 on success (cursor exists), 0 on failure (no such cursor).
@end deftypefun

@deftypefun {int} {lw6pil_local_cursors_set_main} (lw6pil_local_cursors_t *           @var{local_cursors}, u_int16_t @var{cursor_id})
@var{cursor_id}:  the id of the cursor to be labelled as main cursor

Sets the main cursor attribute, the main cursor is later used,
for instance, to decide how to display the map (centered on it,
for instance).

@strong{Return value:}  1 on success (cursor exists), 0 on failure (no such cursor).
@end deftypefun

@deftypefun {int} {lw6pil_nopilot_poll_dump} (lw6pil_dump_t * @var{dump}, const char * @var{command_text}, int64_t @var{seq_0}, int64_t @var{timestamp})
@var{dump}:  will contain the dump information if needed, can be NULL

@var{command_text}:  the command received from the network.

@var{seq_0}:  reference seq for the beginning of the game

@var{timestamp}:  timestamp, used to initialize the pilot

Normally, it's the commit function of the pilot which will automatically
return a dump if needed. But... when a client connects, at first, it has
absolutely no pilot/map whatsoever yet, so this is just to bootstrap the
process, this function will take network messages, any message, and if
it's about a dump -> it will create the dump.

@strong{Return value:}  1 on success, 0 on failure.
@end deftypefun

@deftypefun {lw6pil_pilot_t *} {lw6pil_pilot_new} (lw6ker_game_state_t * @var{game_state}, int64_t @var{seq_0}, int64_t @var{timestamp}, lw6sys_progress_t * @var{progress})
@var{game_state}:  the game state we're going to work on

@var{seq_0}:  the start sequence to use, that is, the seq at round=0

@var{timestamp}:  the current ticks (1000 ticks per sec, used to calibrate)

@var{progress}:  object used to show the advancement of the process

Initializes a 'pilot' object, this object is responsible for
interpreting messages, transform them into low-level 'ker' module
function calls, and handle all the thread-spooky stuff.

@strong{Return value:}  a working pilot object. May be NULL on memory failure.
@end deftypefun

@deftypefun {void} {lw6pil_pilot_free} (lw6pil_pilot_t * @var{pilot})
@var{pilot}:  the object to free.

Frees a 'pilot' object, note that this might involve joining
some threads, so it can 'take some time'.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6pil_pilot_send_command} (lw6pil_pilot_t * @var{pilot}, const char * @var{command_text}, int @var{verified})
@var{pilot}:  the object to send commands to.

@var{command_text}:  the text of the command, as received form network

@var{verified}:  wether we're sure this message is valid.

Sends a command and handles it internally.

@strong{Return value:}  1 if OK, 0 if not.
@end deftypefun

@deftypefun {int} {lw6pil_pilot_local_command} (lw6pil_pilot_t * @var{pilot}, const char * @var{command_text})
@var{pilot}:  the object to apply the local command on

@var{command_text}:  the command text

This function is used to fix the annoying fact that by only sending
commands a limited number of times per sec to the game state, the
display always reflect an outdated position for cursors. But players
do not want to see this, they want to see the cursor in the right place.
So what we do is that the pilot can process "local" commands which have
absolutely no effect on the game but simply update a local cursor state,
only used for display. It's here in the pil module for it's where the
command interpreting code is, and the fact that there's this lag is
directly linked with the pilot way of doing things.

@strong{Return value:}  1 on success, 0 on failure.
@end deftypefun

@deftypefun {int} {lw6pil_pilot_commit} (lw6pil_dump_t * @var{dump}, lw6pil_pilot_t * @var{pilot})
@var{dump}:  will contain the dump information if needed, can be NULL

@var{pilot}:  the object to commit.

Commits all commands sent and actually send them to the
corresponding threads. This commit system allows better performance
by sending, for instance, all the commands for a given round together.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6pil_pilot_make_backup} (lw6pil_pilot_t * @var{pilot})
@var{pilot}:  the object to perform the backup on

Makes a new backup in the pilot, that is, copy 'reference'
to 'backup'.

@strong{Return value:}  1 if OK, 0 if not.
@end deftypefun

@deftypefun {int} {lw6pil_pilot_can_sync} (lw6ker_game_state_t * @var{target}, lw6pil_pilot_t * @var{pilot})
@var{target}:  the target game_state we would sync on

@var{pilot}:  the object to perform the backup on

Tests wether sync functions are callable with a given game state.
It verifies if the internal game_state and the target look the same.

@strong{Return value:}  1 if sync functions can be called, 0 if not.
@end deftypefun

@deftypefun {int} {lw6pil_pilot_sync_from_backup} (lw6ker_game_state_t * @var{target}, lw6pil_pilot_t * @var{pilot})
@var{target}:  the game_state structure which will get the informations.

@var{pilot}:  the object to get informations from.

Gets the backup from the pilot object. This is the last snapshot
taken by @code{make_backup} or, by default, the game_state the pilot
was constructed with.

@strong{Return value:}  1 if OK, 0 if not.
@end deftypefun

@deftypefun {int} {lw6pil_pilot_sync_from_reference} (lw6ker_game_state_t * @var{target}, lw6pil_pilot_t * @var{pilot})
@var{target}:  the game_state structure which will get the informations.

@var{pilot}:  the object to get informations from.

Gets the latest reference game_state, that is, a stable snapshot
of the game, with no inconsistency, a game position that exists
and that we can rely on. Note that getting this can take time
since a global mutex is required, and computations must end
before you get the data.

@strong{Return value:}  1 if OK, 0 if not.
@end deftypefun

@deftypefun {int} {lw6pil_pilot_sync_from_draft} (lw6ker_game_state_t * @var{target}, lw6pil_pilot_t * @var{pilot}, int @var{dirty_read})
@var{target}:  the game_state structure which will get the informations.

@var{pilot}:  the object to get informations from.

@var{dirty_read}:  wether to allow dirty read or not

Gets the informations from the pilot object, not being worried about
game consistency, this one will just return the latest version available.
It might even be in an inconsistent state, the position could reflect
a position which will never exist. Still, the data returned will not
correspond to a half-spread or half-moved game_state if dirty_read
is set to 0. In this case the data has at least some basic consistency 
and getting this does require some mutex lock, however wait time should 
be fairly small (max. a round). But, in a general manner, this function
is only used for display, and we do not care much if there's a small
glitch, we prefer fast & smooth display.

@strong{Return value:}  1 if OK, 0 if not.
@end deftypefun

@deftypefun {lw6ker_game_state_t *} {lw6pil_pilot_dirty_read} (lw6pil_pilot_t * @var{pilot})
@var{pilot}:  the object to get informations from.

Returns a direct access to the most up-to-date game_state, without
locking anything whatsoever. This is clearly to implement a dirty read
mode as the name of the function suggests.

@strong{Return value:}  1 if OK, 0 if not.
@end deftypefun

@deftypefun {char *} {lw6pil_pilot_repr} (lw6pil_pilot_t * @var{pilot})
Returns a string describing the pilot. This is a very short description,
use it for logs, and to debug stuff. By no means it's a complete exhaustive
description. Still, the string returned should be unique.

@strong{Return value:}  a dynamically allocated string.
@end deftypefun

@deftypefun {void} {lw6pil_pilot_calibrate} (lw6pil_pilot_t * @var{pilot}, int64_t @var{timestamp}, int64_t @var{seq})
@var{pilot}:  the object to calibrate

@var{timestamp}:  the current ticks setting (1000 ticks per second)

@var{seq}:  the round expected to be returned with this ticks value

Calibrates the pilot, that is, initializes it so that subsequent calls
to @code{lw6pil_pilot_get_round} return consistent values.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6pil_pilot_speed_up} (lw6pil_pilot_t * @var{pilot}, int @var{seq_inc})
@var{pilot}:  the pilot to speed up

@var{seq_inc}:  the number of seqs

Re-calibrates the pilot so that it speeds up a bit.
This will basically increase next_seq by seq_inc.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6pil_pilot_slow_down} (lw6pil_pilot_t * @var{pilot}, int @var{seq_dec})
@var{pilot}:  the pilot to speed up

@var{seq_dec}:  the number of seqs

Re-calibrates the pilot so that it slows down a bit.
This will basically decrease next_seq by seq_inc.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int64_t} {lw6pil_pilot_get_seq_0} (lw6pil_pilot_t * @var{pilot})
@var{pilot}:  pilot object to query

Get the initial seq (the one passed at object construction) which
says what the seq was at round=0, it's just an offset.

@strong{Return value:}  64-bit integer
@end deftypefun

@deftypefun {int} {lw6pil_pilot_seq2round} (lw6pil_pilot_t * @var{pilot}, int64_t @var{seq})
@var{pilot}:  pilot object to work on

@var{seq}:  the seq to convert

Converts a seq (64-bit) to a round (32-bit). 64-bit seqs are used
to avoid out-of-range errors on very long games, OTOH a round is 32-bit
to garantee the atomicity of its affection, even on platforms which
are not native 64-bit.

@strong{Return value:}  the round (32-bit integer)
@end deftypefun

@deftypefun {int64_t} {lw6pil_pilot_round2seq} (lw6pil_pilot_t * @var{pilot}, int @var{round})
@var{pilot}:  pilot object to work on

@var{round}:  the round to convert

Converts a round (32-bit) to a seq (64-bit). 64-bit seqs are used
to avoid out-of-range errors on very long games, OTOH a round is 32-bit
to garantee the atomicity of its affection, even on platforms which
are not native 64-bit.

@strong{Return value:}  the seq (64-bit integer)
@end deftypefun

@deftypefun {int64_t} {lw6pil_pilot_get_next_seq} (lw6pil_pilot_t * @var{pilot}, int64_t @var{timestamp})
@var{pilot}:  the object to query

@var{timestamp}:  the current ticks setting (1000 ticks per second)

Returns the seq one should use to generate new events/commands
at a given time (given in ticks).

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int64_t} {lw6pil_pilot_get_last_commit_seq} (lw6pil_pilot_t * @var{pilot})
@var{pilot}:  the object to query

Returns the seq of the last commit (reference game_state) for
this object.

@strong{Return value:}  the commit seq (reference object)
@end deftypefun

@deftypefun {int64_t} {lw6pil_pilot_get_reference_target_seq} (lw6pil_pilot_t * @var{pilot})
@var{pilot}:  the object to query

Returns the seq which is targetted in the reference game_state,
this is 'how far computation will go in the reference game_state
if no new commands are issued'. Note that there can always
be some commands which are not yet processed, so you should not
rely on this too heavily, however it gives a good idea of how
things are going.

@strong{Return value:}  the target seq (reference object)
@end deftypefun

@deftypefun {int64_t} {lw6pil_pilot_get_reference_current_seq} (lw6pil_pilot_t * @var{pilot})
@var{pilot}:  the object to query

Returns the current seq in the reference game_state. There's no
lock on this call so don't rely on this too heavily, it just
gives you an idea of wether the pilot is very late on its
objectives or just on time.

@strong{Return value:}  the current seq (reference object)
@end deftypefun

@deftypefun {int64_t} {lw6pil_pilot_get_max_seq} (lw6pil_pilot_t * @var{pilot})
@var{pilot}:  the object to query

Returns the max current seq in the reference or draft
game states. No lock on this call so don't rely on this
too heavily, it just gives you an idea of computation state.

@strong{Return value:}  the current seq (reference object)
@end deftypefun

@deftypefun {int} {lw6pil_pilot_is_over} (lw6pil_pilot_t * @var{pilot})
@var{pilot}:  the object to query

Tells wether the game is over or not.

@strong{Return value:}  1 if over, 0 if not
@end deftypefun

@deftypefun {int} {lw6pil_pilot_did_cursor_win} (lw6pil_pilot_t * @var{pilot}, u_int16_t @var{cursor_id})
@var{pilot}:  the object to query

@var{cursor_id}:  the cursor_id concerned

Tells wether a given cursor was winner or not.

@strong{Return value:}  1 if over, 0 if not
@end deftypefun

@deftypefun {int} {lw6pil_pilot_get_winner} (lw6pil_pilot_t * @var{pilot})
@var{pilot}:  the object to query

Gets the winner color.

@strong{Return value:}  a team color, -1 if no winner and/or error.
@end deftypefun

@deftypefun {int} {lw6pil_pilot_get_looser} (lw6pil_pilot_t * @var{pilot})
@var{pilot}:  the object to query

Gets the looser color.

@strong{Return value:}  a team color, -1 if no looser and/or error.
@end deftypefun

@deftypefun {lw6pil_local_cursors_t *} {lw6pil_pilot_get_local_cursors} (lw6pil_pilot_t * @var{pilot})
@var{pilot}:  object to query

Returns a pointer on the local_cursors struct used within
the object. Beware, this is the *real* pointer, not a copy...

@strong{Return value:}  pointer on internal object
@end deftypefun

@deftypefun {void} {lw6pil_pilot_checksum_log_set_interval} (lw6pil_pilot_t * @var{pilot}, int @var{checksum_log_interval})
@var{pilot}:  the pilot to track

@var{checksum_log_interval}:  dump interval, if 0, feature is disabled


Debugging function used to set automatically an interval at which engine
will log a checksum automatically. This is typically to track down where
and when there starts to be a difference between two game_states that have
evolved separately. This function will propagate the parameter to all
the game_states handled by the pilot, each will log its informations
separately.

@strong{Return value:}  none
@end deftypefun

@deftypefun {char *} {lw6pil_seed_command_generate} (lw6pil_pilot_t * @var{pilot}, u_int64_t @var{server_id})
@var{pilot}:  the pilot to transform as a SEED.

@var{server_id}:  ID of server issuing the command

Creates the SEED command for a given pilot, that is, a command that
contains macro informations about the game state such as current seq.
It should be followed by a dump.

@strong{Return value:}  newly allocated string
@end deftypefun

@deftypefun {int64_t} {lw6pil_seq_random_0} ()

Gets a pseudo-random start seq, why do we use this? Just to make
sure even in non-network situations, seq are always very high and
random, this way this is one less bug to check in networked context.

@strong{Return value:}  random integer value, always greater than INT_MAX
@end deftypefun

@deftypefun {int64_t} {lw6pil_suite_get_seq_0} ()

Get the base seq_0 for the reference test suite.

@strong{Return value:}  64-bit integer.
@end deftypefun

@deftypefun {const char *} {lw6pil_suite_get_command_by_node_index} (int @var{node_index}, int @var{stage}, int @var{step})
@var{node_index}:  index of the node (not its id)

@var{stage}:  major stage of the test suite

@var{step}:  minor step of the test suite

Get the reference test suite message by node_index, stage and step.

@strong{Return value:}  static string, must not be freed.
@end deftypefun

@deftypefun {const char *} {lw6pil_suite_get_command_by_stage} (int @var{stage}, int @var{step})
@var{stage}:  major stage of the test suite

@var{step}:  minor step of the test suite

Get the reference test suite message by stage and step.
Messages from various nodes are mixed and sorted.

@strong{Return value:}  static string, must not be freed.
@end deftypefun

@deftypefun {const char *} {lw6pil_suite_get_command_by_step} (int @var{step})
@var{step}:  minor step of the test suite

Get the reference test suite message by step.
Messages from various nodes and stages are mixed and sorted.

@strong{Return value:}  static string, must not be freed.
@end deftypefun

@deftypefun {void} {lw6pil_suite_get_checkpoint} (u_int32_t * @var{checksum}, int64_t * @var{seq}, int * @var{round}, int @var{stage})
@var{checksum}:  expected checksum for the given checkpoint (out param)

@var{seq}:  expected seq for the given checkpoint (out param)

@var{round}:  expected round for the given checkpoint (out param)

@var{stage}:  stage to query checksum and other info about

Gives the values which are expected for a given checkpoint.
If the right messages have been feeded, then these values
are expected.

@strong{Return value:}  none, everything in out params
@end deftypefun

@deftypefun {int} {lw6pil_test} (int @var{mode})
@var{mode}:  0 for check only, 1 for full test

Runs the @code{pil} module test suite.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

