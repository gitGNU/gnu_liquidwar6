@deftypefun {int} {lw6srv_init} (lw6srv_backend_t * @var{backend}, lw6srv_listener_t * @var{listener})
@var{backend}:  backend to use

@var{listener}:  listener object to use when constructing the backend.

Initializes a server backend. Must be performed before any other call.

@strong{Return value:}  1 on success, 0 on failure
@end deftypefun

@deftypefun {void} {lw6srv_quit} (lw6srv_backend_t * @var{backend})
@var{backend}:  unitialize a srv backend

Closes a srv, but does not free all ressources.
@end deftypefun

@deftypefun {int} {lw6srv_analyse_tcp} (lw6srv_backend_t * @var{backend}, lw6srv_tcp_accepter_t * @var{tcp_accepter}, lw6nod_info_t * @var{node_info}, u_int64_t * @var{remote_id}, char ** @var{remote_url})
@var{backend}:  server backend to use

@var{tcp_accepter}:  TCP mode accepter

@var{node_info}:  this node information

@var{remote_id}:  remote host id (out param)

@var{remote_url}:  remote host URL (out param, dynamically allocated)

Analyzes new TCP messages, typically handled within the accepter
object. The result is a combination of bitwise flags, namely
namely @code{LW6SRV_ANALYSE_DEAD}, @code{LW6SRV_ANALYSE_UNDERSTANDABLE},
and @code{LW6SRV_ANALYSE_OOB} which helps knowing what to do with
message.

@strong{Return value:}  bitwise flag.
@end deftypefun

@deftypefun {int} {lw6srv_analyse_udp} (lw6srv_backend_t * @var{backend}, lw6srv_udp_buffer_t * @var{udp_buffer}, lw6nod_info_t * @var{node_info}, u_int64_t * @var{remote_id}, char ** @var{remote_url})
@var{backend}:  server backend to use

@var{udp_buffer}:  UDP buffer

@var{node_info}:  this node information

@var{remote_id}:  remote host id (out param)

@var{remote_url}:  remote host URL (out param, dynamically allocated)

Analyzes an UDP buffer, received on a socket.
The result is a combination of bitwise flags, namely
namely @code{LW6SRV_ANALYSE_DEAD}, @code{LW6SRV_ANALYSE_UNDERSTANDABLE},
and @code{LW6SRV_ANALYSE_OOB} which helps knowing what to do with
message.

@strong{Return value:}  bitwise flag.
@end deftypefun

@deftypefun {int} {lw6srv_process_oob} (lw6srv_backend_t * @var{backend}, lw6nod_info_t * @var{node_info}, lw6srv_oob_data_t * @var{oob_data})
@var{backend}:  server backend to use

@var{node_info}:  this node information

@var{oob_data}:  OOB data received

Processes an OOB message sent from a client.

@strong{Return value:}  1 if OK, 0 if not.
@end deftypefun

@deftypefun {lw6cnx_connection_t *} {lw6srv_open} (lw6srv_backend_t * @var{backend}, lw6srv_listener_t * @var{listener}, const char * @var{local_url}, const char * @var{remote_url}, const char * @var{remote_ip}, int @var{remote_port}, const char * @var{password}, u_int64_t @var{local_id}, u_int64_t @var{remote_id}, int @var{dns_ok}, int @var{network_reliability}, lw6cnx_recv_callback_t @var{recv_callback_func}, void * @var{recv_callback_data})
@var{backend}:  server backend to use

@var{local_url}:  local url to use (to send to peer)

@var{remote_url}:  remote url to communicate with

@var{remote_ip}:  remote ip to communicate with

@var{remote_port}:  remote port to communicate with

@var{password}:  password to use (the real password, not a hash)

@var{local_id}:  the local 64-bit id

@var{remote_id}:  the remove 64-bit id

@var{dns_ok}:  1 if no DNS mismatch, 0 if situation is unclear

@var{network_reliability}:  the greater, the more reliable it is

@var{recv_callback_func}:  callback fired when receiving data

@var{recv_callback_data}:  additionnal data passed to callback

Opens a server connection. One might wonder, clients open
connections, but servers? To some extent, this is the equivalent
of @code{accept} in the socket API, it will actually create an object
one can then use to communicate. Be carefull with the implementation
of the callback, keep in mind it can be called any time in
multithreaded mode, you need to set up locks when accessing shared
objects, including, but not limited to, your own data buffers.

@strong{Return value:}  new connection object.
@end deftypefun

@deftypefun {int} {lw6srv_feed_with_tcp} (lw6srv_backend_t * @var{backend}, lw6cnx_connection_t * @var{connection}, lw6srv_tcp_accepter_t * @var{tcp_accepter})
@var{connection}:  connection to use

@var{tcp_accepter}:  TCP accepter holding data

When data is receivedm feeds the server object with data.
Will typically fire the callback receive function if there
are actually some data stuff.

@strong{Return value:}  1 some data processed, else 0
@end deftypefun

@deftypefun {int} {lw6srv_feed_with_udp} (lw6srv_backend_t * @var{backend}, lw6cnx_connection_t * @var{connection}, lw6srv_udp_buffer_t * @var{udp_buffer})
@var{connection}:  connection to use

When data is receivedm feeds the server object with data.
Will typically fire the callback receive function if there
are actually some data stuff.

@strong{Return value:}  1 some data processed, else 0
@end deftypefun

@deftypefun {void} {lw6srv_close} (lw6srv_backend_t * @var{backend}, lw6cnx_connection_t * @var{connection})
@var{backend}:  server backend to use

@var{connection}:  connection to close

Closes a connection, will also free it.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6srv_send} (lw6srv_backend_t * @var{backend}, lw6cnx_connection_t * @var{connection}, int64_t @var{now}, u_int32_t @var{physical_ticket_sig}, u_int32_t @var{logical_ticket_sig}, u_int64_t @var{logical_from_id}, u_int64_t @var{logical_to_id}, const char * @var{message})
@var{backend}:  server backend to use

@var{connection}:  connection to use

@var{now}:  current timestamp

@var{physical_ticket_sig}:  physical ticket

@var{logical_ticket_sig}:  logical ticket

@var{logical_from_id}:  logical id of sender

@var{logical_to_id}:  logical id of receiver

@var{message}:  string with the message to send

Sends a message. The added value with a plain send is that it handles
all the special ticket fields.

@strong{Return value:}  1 on success, 0 if not
@end deftypefun

@deftypefun {void} {lw6srv_poll} (lw6srv_backend_t * @var{backend}, lw6cnx_connection_t * @var{connection})
@var{backend}:  server backend to use

@var{connection}:  connection to use

Polling function, to be called on a regular basis.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {char *} {lw6srv_repr} (lw6srv_backend_t * @var{backend}, lw6cnx_connection_t * @var{connection})
@var{backend}:  backend to use

@var{connection}:  connection to represent

Gives a human readable representation of the connection.

@strong{Return value:}  dynamically allocated string.
@end deftypefun

@deftypefun {lw6srv_listener_t *} {lw6srv_start} (const char * @var{ip}, int @var{port})
@var{ip}:  ip address to listen on

@var{port}:  port IP to bind to

Starts a server, binds the socket(s) and returns a listener
object which can in turn be used to create connections.

@strong{Return value:}  new listener object.
@end deftypefun

@deftypefun {void} {lw6srv_stop} (lw6srv_listener_t * @var{listener})
@var{listener}:  listener to stop

Stops a listener object, and frees it.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {lw6srv_oob_t *} {lw6srv_oob_new} (const char * @var{remote_ip}, int @var{remote_port}, int @var{sock}, const char * @var{first_line})
@var{remote_ip}:  remote IP address

@var{remote_port}:  remote port

@var{sock}:  the socket handler (either TCP or UDP)

@var{first_line}:  the first line of data (can be NULL)

Create a new OOB structure, copying required objects.
We need to make copies for this is for usage in a 
separate thread. The thread member is not set
here since the right way to do things is first to
set up data then to fire the thread.

@strong{Return value:}  new object
@end deftypefun

@deftypefun {void} {lw6srv_oob_free} (lw6srv_oob_t * @var{oob})
@var{oob}:  the object to free

Frees an OOB structure.

@strong{Return value:}  none
@end deftypefun

@deftypefun {char *} {lw6srv_default_backends} ()

Returns the list of the default srv backends.

@strong{Return value:}  comma separated string, must not be freed.
@end deftypefun

@deftypefun {lw6sys_assoc_t *} {lw6srv_get_backends} (int @var{argc}, const char * [] @var{argv})
@var{argc}:  argc, as passed to @code{main}

@var{argv}:  argv, as passed to @code{main}

List available srv backends. The hash contains pairs with id and name
for each backend. The id is the technical key you can use to
load the backend, the name is something more readable you can display
in an interface. The backend objects themselves are not instanciated
by this (in fact, they are, but released on the fly) you need to
load and initialize them afterwards.

@strong{Return value:}  hash containing id/name pairs.
@end deftypefun

@deftypefun {lw6srv_backend_t *} {lw6srv_create_backend} (int @var{argc}, const char * [] @var{argv}, const char * @var{name})
@var{argc}:  argc, as passed to @code{main}

@var{argv}:  argv, as passed to @code{main}

@var{name}:  string containing srv key, typically got from @code{lw6srv_get_backends}

Creates a srv backend, this is just about loading the dynamic
library if needed, and/or check srv engine is available, and
connect to it. It does not perform initialization.

@strong{Return value:}  srv backend.
@end deftypefun

@deftypefun {void} {lw6srv_destroy_backend} (lw6srv_backend_t * @var{backend})
@var{backend}:  backend to destroy

Destroys a srv backend.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {lw6srv_tcp_accepter_t *} {lw6srv_tcp_accepter_new} (char * @var{client_ip}, int @var{client_port}, int @var{sock})
@var{client_ip}:  the client ip, will be freed when accepter is freed, do not copy it

@var{client_port}:  the client port

@var{sock}:  the socket used

Creates a tcp_accepter object.

@strong{Return value:}  none
@end deftypefun

@deftypefun {void} {lw6srv_tcp_accepter_free} (lw6srv_tcp_accepter_t * @var{tcp_accepter})
@var{tcp_accepter}:  the object to free

Frees a tcp_accepter object.

@strong{Return value:}  none
@end deftypefun

@deftypefun {int} {lw6srv_test} (int @var{mode})
@var{mode}:  0 for check only, 1 for full test

Runs the @code{srv} module test suite.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

@deftypefun {lw6srv_udp_buffer_t *} {lw6srv_udp_buffer_new} (char * @var{client_ip}, int @var{client_port}, char * @var{line})
@var{client_ip}:  the client ip, will be freed when object is freed, do not free it

@var{client_port}:  the client port

@var{line}:  the line received, will be freed when object is freed, do not free it

Creates an udp_buffer object.

@strong{Return value:}  none
@end deftypefun

@deftypefun {void} {lw6srv_udp_buffer_free} (lw6srv_udp_buffer_t * @var{udp_buffer})
@var{udp_buffer}:  the object to free

Frees a udp_buffer object.

@strong{Return value:}  none
@end deftypefun

