@deftypefun {int} {lw6snd_play_fx} (lw6snd_backend_t * @var{backend}, int @var{fx_id})
@var{backend}:  sound backend to use

@var{fx_id}:  sound fx id

Plays a sound fx.

@strong{Return value:}  1 on success, 0 on error
@end deftypefun

@deftypefun {int} {lw6snd_is_music_file} (lw6snd_backend_t * @var{backend}, char * @var{map_dir}, char * @var{music_path}, char * @var{music_file})
@var{backend}:  sound backend to use

@var{map_dir}:  map directory, to search additionnal files

@var{music_path}:  config entry containing multiple paths

@var{music_file}:  relative/local name of a music file

Tells wether a file is a valid music file, typicallly based on file 
existence and extension. Not bullet proof, file might actually not
be loadable, but chances are 99%.

@strong{Return value:}  1 if music file, 0 if not
@end deftypefun

@deftypefun {int} {lw6snd_play_music_file} (lw6snd_backend_t * @var{backend}, char * @var{map_dir}, char * @var{music_path}, char * @var{music_file})
@var{backend}:  sound backend to use

@var{map_dir}:  map directory, to search additionnal files

@var{music_path}:  config entry containing multiple paths

@var{music_file}:  relative/local name of a music file

Plays a music file.

@strong{Return value:}  1 if OK, 0 if not.
@end deftypefun

@deftypefun {int} {lw6snd_play_music_random} (lw6snd_backend_t * @var{backend}, char * @var{music_path}, char * @var{music_filter}, char * @var{music_exclude})
@var{backend}:  sound backend to use

@var{music_path}:  config entry containing multiple paths

@var{music_filter}:  string filter, must be present

@var{music_exclude}:  string filter, must not be present

Plays a random music file. The filter and exclude mecanisms
are not complete regex filters, only a quick and dirty feature
which should still help in some cases, such as sorting musics
for the menus and for the rest.

@strong{Return value:}  1 if OK, 0 if not.
@end deftypefun

@deftypefun {void} {lw6snd_stop_music} (lw6snd_backend_t * @var{backend})
@var{backend}:  sound backend to use

Stops the music.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6snd_init} (lw6snd_backend_t * @var{backend}, float @var{fx_volume}, float @var{water_volume}, float @var{music_volume})
@var{backend}:  the graphical backend to use

@var{fx_volume}:  sound fx volume

@var{water_volume}:  water sounds volume

@var{music_volume}:  music volume

Sets up the sound backend for good, initializing a playback engine
ready to play sounds and set to defaults.
This call can typically fail if there's no device available, if
the user doesn't have enough rights to access the hardware, and so on.

@strong{Return value:}  1 on success, 0 if not
@end deftypefun

@deftypefun {void} {lw6snd_set_fx_volume} (lw6snd_backend_t * @var{backend}, float @var{volume})
@var{backend}:  sound backend to use

@var{volume}:  sound fx volume

Changes sound fx volume.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6snd_set_water_volume} (lw6snd_backend_t * @var{backend}, float @var{volume})
@var{backend}:  sound backend to use

@var{volume}:  water sounds volume

Changes water sounds volume.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6snd_set_music_volume} (lw6snd_backend_t * @var{backend}, float @var{volume})
@var{backend}:  sound backend to use

@var{volume}:  music volume

Changes music volume.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6snd_poll} (lw6snd_backend_t * @var{backend})
@var{backend}:  sound backend to use

Polling function, must be called on a regular basis.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6snd_quit} (lw6snd_backend_t * @var{backend})
@var{backend}:  the backend to quit

Uninitializes the backend, that is, releases resources, stops playback.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {char *} {lw6snd_repr} (lw6snd_backend_t * @var{backend})
@var{backend}:  the backend to represent

Returns a readable version of the backend object.

@strong{Return value:}  a newly allocated pointer.
@end deftypefun

@deftypefun {lw6sys_assoc_t *} {lw6snd_get_backends} (int @var{argc}, const char * [] @var{argv})
@var{argc}:  argc, as passed to @code{main}

@var{argv}:  argv, as passed to @code{main}

List available snd backends. The hash contains pairs with id and name
for each backend. The id is the technical key you can use to
load the backend, the name is something more readable you can display
in an interface. The backend objects themselves are not instanciated
by this (in fact, they are, but released on the fly) you need to
load and initialize them afterwards.

@strong{Return value:}  hash containing id/name pairs.
@end deftypefun

@deftypefun {lw6snd_backend_t *} {lw6snd_create_backend} (int @var{argc}, const char * [] @var{argv}, const char * @var{name})
@var{argc}:  argc, as passed to @code{main}

@var{argv}:  argv, as passed to @code{main}

@var{name}:  string containing snd key, typically got from @code{lw6snd_get_backends}

Creates a snd backend, this is just about loading the dynamic
library if needed, and/or check snd engine is available, and
connect to it. It does not perform initialization.

@strong{Return value:}  snd backend.
@end deftypefun

@deftypefun {void} {lw6snd_destroy_backend} (lw6snd_backend_t * @var{backend})
@var{backend}:  snd backend to destroy

Frees the ressources associated to a snd, which must have been
properly uninitialized before.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6snd_test_register} (int @var{mode})
@var{mode}:  test mode (bitmask)

Registers all tests for the libsnd module.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

@deftypefun {int} {lw6snd_test_run} (int @var{mode})
@var{mode}:  test mode (bitmask)

Runs the @code{snd} module test suite, testing most (if not all...)
functions.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

