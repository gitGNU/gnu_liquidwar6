

  
@deftp {Struct} {lw6dsp_backend_s}

    
The dsp backend is the first argument passed to any dsp function, it contains reference to all the functions which can be used as well as a pointer on associated data. In OO, this would just be an object, with members and methods, using polymorphism through opaque pointers.     
@end deftp

@defcv {Member} {lw6dsp_backend_s} {id}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6dsp_backend_s::id}


        
The id of the object, this is non-zero and unique within one run session, incremented at each object creation.         
@end defcv

@defcv {Member} {lw6dsp_backend_s} {thread}
@strong{Type:} @code{lw6sys_thread_handler_t *}

@strong{Definition:} @code{lw6sys_thread_handler_t* lw6dsp_backend_s::thread}


        
Thread running the display code. In fact running in a separate thread is the whole point of this display object.         
@end defcv

@defcv {Member} {lw6dsp_backend_s} {data}
@strong{Type:} @code{void *}

@strong{Definition:} @code{void* lw6dsp_backend_s::data}


        
Data used by the display code. This is an opaque pointer, the internal structure will store details such as mutexes, parameters, information about the graphics backend, and so on.         
@end defcv

@defcv {Member} {lw6dsp_backend_s} {input}
@strong{Type:} @code{lw6gui_input_t *}

@strong{Definition:} @code{lw6gui_input_t* lw6dsp_backend_s::input}


        
Input structure, will be updated by the display thread, so that it contains up-to-date information. This is actually the only way to get input from the user.         
@end defcv



  
@deftp {Struct} {lw6dsp_misc_s}

    
Miscellaneous parameters for display. One of the idea with this structure is that one must be able to compare two of them with a simple memcmp. Even the progress pointer can be compared this way, the rest is just plain data.     
@end deftp

@defcv {Member} {lw6dsp_misc_s} {mask}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6dsp_misc_s::mask}


Display mask, define what must be displayed.         
        
@end defcv

@defcv {Member} {lw6dsp_misc_s} {target_fps}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6dsp_misc_s::target_fps}


How many frames per second the engine needs to display.         
        
@end defcv

@defcv {Member} {lw6dsp_misc_s} {gfx_cpu_usage}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6dsp_misc_s::gfx_cpu_usage}


        
How much CPU need be used, the maximum is 1.0f, the idea behind this parameter is that if you set it to a low value, the display thread will yield timeslices letting other threads speed up. On a single-core CPU this can be usefull if the main calculation thread, the one that updates the game state, is falling behind.         
@end defcv

@defcv {Member} {lw6dsp_misc_s} {dirty_read}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6dsp_misc_s::dirty_read}


Dirty read mode.         
        
@end defcv

@defcv {Member} {lw6dsp_misc_s} {capture}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6dsp_misc_s::capture}


Wether we want to capture screen and dump it on disk.         
        
@end defcv

@defcv {Member} {lw6dsp_misc_s} {gfx_debug}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6dsp_misc_s::gfx_debug}


Wether to enable GFX debug mode.         
        
@end defcv

@defcv {Member} {lw6dsp_misc_s} {debug_team_id}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6dsp_misc_s::debug_team_id}


Parameter for debug mode, team ID to show info about.         
        
@end defcv

@defcv {Member} {lw6dsp_misc_s} {debug_layer_id}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6dsp_misc_s::debug_layer_id}


Parameter for debug mode, layer ID to show info about.         
        
@end defcv

@defcv {Member} {lw6dsp_misc_s} {repeat_settings}
@strong{Type:} @code{lw6gui_repeat_settings_t}

@strong{Definition:} @code{lw6gui_repeat_settings_t lw6dsp_misc_s::repeat_settings}


Repeat settings, used by the input module.         
        
@end defcv

@defcv {Member} {lw6dsp_misc_s} {log_timeout}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6dsp_misc_s::log_timeout}


Delay after which messages disappear, in milliseconds.         
        
@end defcv

@defcv {Member} {lw6dsp_misc_s} {progress}
@strong{Type:} @code{float *}

@strong{Definition:} @code{volatile float* lw6dsp_misc_s::progress}


Pointer on progress float, provides feedback to user.         
        
@end defcv



  
@deftp {Struct} {lw6dsp_param_s}

    
Parameters used by the display thread. Be carefull, those need be modify with adequate functions, else a (serious) race condition could occur.     
@end deftp

@defcv {Member} {lw6dsp_param_s} {misc}
@strong{Type:} @code{lw6dsp_misc_t}

@strong{Definition:} @code{lw6dsp_misc_t lw6dsp_param_s::misc}


Miscellaneous parameters, things that didn't fit elsewhere.         
        
@end defcv

@defcv {Member} {lw6dsp_param_s} {video_mode}
@strong{Type:} @code{lw6gui_video_mode_t}

@strong{Definition:} @code{lw6gui_video_mode_t lw6dsp_param_s::video_mode}


        
Video mode. This is separated from the misc parameters for it requires special handling, indeed changing resolution might need calls to special functions to set up a new graphical context.         
@end defcv

@defcv {Member} {lw6dsp_param_s} {look}
@strong{Type:} @code{lw6gui_look_t *}

@strong{Definition:} @code{lw6gui_look_t* lw6dsp_param_s::look}


Visual parameters.         
        
@end defcv

@defcv {Member} {lw6dsp_param_s} {menu}
@strong{Type:} @code{lw6gui_menu_t *}

@strong{Definition:} @code{lw6gui_menu_t* lw6dsp_param_s::menu}


        
Menu object, the main interface to gather and transmit informations to the user, when not playing.         
@end defcv

@defcv {Member} {lw6dsp_param_s} {level}
@strong{Type:} @code{lw6map_level_t *}

@strong{Definition:} @code{lw6map_level_t* lw6dsp_param_s::level}


The level, as loaded from disk.         
        
@end defcv

@defcv {Member} {lw6dsp_param_s} {game_struct}
@strong{Type:} @code{lw6ker_game_struct_t *}

@strong{Definition:} @code{lw6ker_game_struct_t* lw6dsp_param_s::game_struct}


        
The game struct, that is the level post-processed to be usable by game algorithms.         
@end defcv

@defcv {Member} {lw6dsp_param_s} {game_state}
@strong{Type:} @code{lw6ker_game_state_t *}

@strong{Definition:} @code{lw6ker_game_state_t* lw6dsp_param_s::game_state}


        
Changeable state of the game. Not that this pointer must really always be available, you can technically change its value but any value passed to it must be available and valid as long as the display is running, else you end up with a good old segfault.         
@end defcv

@defcv {Member} {lw6dsp_param_s} {pilot}
@strong{Type:} @code{lw6pil_pilot_t *}

@strong{Definition:} @code{lw6pil_pilot_t* lw6dsp_param_s::pilot}


        
If in dirty-read mode, then game_state will be fetched from this object. It can be NULL if you don't want to use the pilot.         
@end defcv


