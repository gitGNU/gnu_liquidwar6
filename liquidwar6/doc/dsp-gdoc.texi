@deftypefun {lw6dsp_backend_t *} {lw6dsp_create_backend} (int @var{argc}, char * [] @var{argv}, char * @var{gfx_backend_name})
@var{argc}:  argc as passed to @code{main}

@var{argv}:  argv as passed to @code{main}

@var{gfx_backend_name}:  the id/name of the gfx backend to use

Creates a dsp_backend object. The created object won't be displaying
things until @code{lw6dsp_init} is called. No thread is created,
but the graphics backend is loaded into memory. If video mode is
not available, it will appear later, when trying to start displaying
things, this function only allocates memory and checks code is
available in case of a dynamically loaded gfx backend.

@strong{Return value:}  a newly allocated object.
@end deftypefun

@deftypefun {void} {lw6dsp_destroy_backend} (lw6dsp_backend_t * @var{dsp_backend})
@var{dsp_backend}:  the dsp_backend object to free

Frees all ressources used by a dsp_backend object. Note that you must
call this on a inactive 'stopped' dsp_backend object.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {char *} {lw6dsp_repr} (lw6dsp_backend_t * @var{dsp_backend})
@var{dsp_backend}:  the object to represent

Gives a short human-readable description of the object.

@strong{Return value:}  a newly allocated string, must be freed.
@end deftypefun

@deftypefun {int} {lw6dsp_init} (lw6dsp_backend_t * @var{dsp_backend}, lw6dsp_param_t * @var{param}, lw6gui_resize_callback_func_t @var{resize_callback})
@var{dsp_backend}:  the dsp_backend to start

@var{param}:  parameters to pass to the display funcs

@var{resize_callback}:  a function which will be called when there's a resize event

Starts a dsp_backend object, that is, fire a separate thread
and start rendering. This will set up a video mode, so it's
very likely to fail if for some reason the video context isn't
right, for instance if you try to set up graphical stuff but
only have console access.

@strong{Return value:}  1 if success, 0 if error.
@end deftypefun

@deftypefun {void} {lw6dsp_quit} (lw6dsp_backend_t * @var{dsp_backend})
@var{dsp_backend}:  the dsp_backend to stop

Stops a dsp_backend, that is, cancel rendering and unset the
video mode, hardware shouldn't be used any more after this
call.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6dsp_update} (lw6dsp_backend_t * @var{dsp_backend}, lw6dsp_param_t * @var{param})
@var{dsp_backend}:  the dsp_backend to update

@var{param}:  parameters to pass to the dsp_backend funcs

Passes a new set of parameters to the display function.
This is in fact the only way to pass informations to the
dsp_backend object once it's been started. This function will
acquire a mutex, copy parameters, then give control back
to the main thread while display keeps on going with new
parameters in the background. It will get input informations.
You really must call it often otherwise the screen won't get
updated, or, at least, it will always display the same informations.
It should be reasonnable to call this 10 or 20 times per second,
the display itself can be faster, run at 60 or 100 fps to show
smooth animation (eye candy).

@strong{Return value:}  1 if success, 0 if error.
@end deftypefun

@deftypefun {int} {lw6dsp_get_nb_frames} (lw6dsp_backend_t * @var{dsp_backend})
@var{dsp_backend}:  the dsp_backend to query

Returns the number of frames displayed since the display was started.

@strong{Return value:}  the number of frames displayed.
@end deftypefun

@deftypefun {int} {lw6dsp_get_last_frame_rendering_time} (lw6dsp_backend_t * @var{dsp_backend})
@var{dsp_backend}:  the dsp_backend to query

Returns the rendering time of the last frame. Gives clues about performance.

@strong{Return value:}  the number of milliseconds it took to draw screen
@end deftypefun

@deftypefun {int} {lw6dsp_get_instant_fps} (lw6dsp_backend_t * @var{dsp_backend})
@var{dsp_backend}:  the dsp_backend to query

Returns the current frames per sec display rate. This is the instant value,
it changes very often even if display seems smooth.

@strong{Return value:}  the current instant display rate.
@end deftypefun

@deftypefun {int} {lw6dsp_get_average_fps} (lw6dsp_backend_t * @var{dsp_backend})
@var{dsp_backend}:  the dsp_backend to query

Returns the current frames per sec display rate. This is not absolutely
accurate but fits for displaying info to the player, it's an average.

@strong{Return value:}  the current averaged display rate.
@end deftypefun

@deftypefun {int} {lw6dsp_get_video_mode} (lw6dsp_backend_t * @var{dsp_backend}, lw6gui_video_mode_t * @var{video_mode})
@var{dsp_backend}:  the dsp_backend to query

@var{video_mode}:  a structure which will contain the results

Returns the current video mode, the one obtained by the driver.
This function is also a way to know wether display is running correcly
or not, by testing its return value.

@strong{Return value:}  1 if ok, 0 if failure (mode not set)
@end deftypefun

@deftypefun {int} {lw6dsp_get_fullscreen_modes} (lw6dsp_backend_t * @var{dsp_backend}, lw6gui_fullscreen_modes_t * @var{fullscreen_modes})
@var{dsp_backend}:  the dsp_backend to query

@var{fullscreen_modes}:  a structure which will contain the results

Returns the current available fullscreen modes. Note that this one
will only work if display is started, unlike @code{lw6gfx_get_fullscreen_modes} which
is used internally. The reason is that in this dsp module context, we need
the thread to be launched, and the thread does start/stop display on its own.

@strong{Return value:}  1 if ok, 0 if failure (mode not set)
@end deftypefun

@deftypefun {void} {lw6dsp_param_zero} (lw6dsp_param_t * @var{param})
@var{param}:  the structure to initialize

Fills a display param struct with zeros, this is mandatory
before any use. Think of it as a raw memset.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6dsp_test} (int @var{mode})
@var{mode}:  0 for check only, 1 for full test

Runs the test suite for the dsp module. In check (0) mode, won't
test much to avoid failure because of missing graphical environment.

@strong{Return value:}  1 if OK, 0 if error.
@end deftypefun

