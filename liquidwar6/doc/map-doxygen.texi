

  
@deftp {Struct} {lw6map_body_s}

    
Logical layers for the map. This is the big collection of bytes arrays containing most of the information, anything loaded from images (JPEG, PNG) from disk and having some logical (and not pure eye candy) meaning.     
@end deftp

@defcv {Member} {lw6map_body_s} {checksum}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_body_s::checksum}


        
Checksum for this map body, we could recalculate it dynamically but it's cached here for convenience and speed.         
@end defcv

@defcv {Member} {lw6map_body_s} {shape}
@strong{Type:} @code{lw6sys_whd_t}

@strong{Definition:} @code{lw6sys_whd_t lw6map_body_s::shape}


Shape of the map, all layers need to be compatible with this.         
        
@end defcv

@defcv {Member} {lw6map_body_s} {layers}
@strong{Type:} @code{lw6map_layer_t}

@strong{Definition:} @code{lw6map_layer_t lw6map_body_s::layers[LW6MAP_MAX_BODY_DEPTH]}


        
Layers, layer 0 is the top layer, the one stored in map.png, other layers are layerN.png. Not all layers are defined, just depends on body shape.         
@end defcv

@defcv {Member} {lw6map_body_s} {glue}
@strong{Type:} @code{lw6map_meta_layer_t}

@strong{Definition:} @code{lw6map_meta_layer_t lw6map_body_s::glue}


Informations stored in glue.png.         
        
@end defcv

@defcv {Member} {lw6map_body_s} {boost}
@strong{Type:} @code{lw6map_meta_layer_t}

@strong{Definition:} @code{lw6map_meta_layer_t lw6map_body_s::boost}


Informations stored in boost.png.         
        
@end defcv

@defcv {Member} {lw6map_body_s} {danger}
@strong{Type:} @code{lw6map_meta_layer_t}

@strong{Definition:} @code{lw6map_meta_layer_t lw6map_body_s::danger}


Informations stored in danger.png.         
        
@end defcv

@defcv {Member} {lw6map_body_s} {medicine}
@strong{Type:} @code{lw6map_meta_layer_t}

@strong{Definition:} @code{lw6map_meta_layer_t lw6map_body_s::medicine}


Informations stored in medicine.png.         
        
@end defcv

@defcv {Member} {lw6map_body_s} {one_way_north}
@strong{Type:} @code{lw6map_meta_layer_t}

@strong{Definition:} @code{lw6map_meta_layer_t lw6map_body_s::one_way_north}


Informations stored in one-way-north.png.         
        
@end defcv

@defcv {Member} {lw6map_body_s} {one_way_east}
@strong{Type:} @code{lw6map_meta_layer_t}

@strong{Definition:} @code{lw6map_meta_layer_t lw6map_body_s::one_way_east}


Informations stored in one-way-east.png.         
        
@end defcv

@defcv {Member} {lw6map_body_s} {one_way_south}
@strong{Type:} @code{lw6map_meta_layer_t}

@strong{Definition:} @code{lw6map_meta_layer_t lw6map_body_s::one_way_south}


Informations stored in one-way-south.png.         
        
@end defcv

@defcv {Member} {lw6map_body_s} {one_way_west}
@strong{Type:} @code{lw6map_meta_layer_t}

@strong{Definition:} @code{lw6map_meta_layer_t lw6map_body_s::one_way_west}


Informations stored in one-way-west.png.         
        
@end defcv



  
@deftp {Struct} {lw6map_bot_info_s}

    
Bot information, contains the relevant generic parameters for a bot.     
@end deftp

@defcv {Member} {lw6map_bot_info_s} {color}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_bot_info_s::color}


Team/color the bot is associated to.         
        
@end defcv

@defcv {Member} {lw6map_bot_info_s} {ai}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6map_bot_info_s::ai}


AI engine used by bot, the name of the backend to load.         
        
@end defcv



  
@deftp {Struct} {lw6map_color_couple_s}

    
This structure simply binds 2 colors together, one being foreground and the other background. There's a good reason to bind those together, indeed foreground and background need to be different enough so that text written in fg over bg is readable, and they need to go together well.     
@end deftp

@defcv {Member} {lw6map_color_couple_s} {fg}
@strong{Type:} @code{lw6sys_color_8_t}

@strong{Definition:} @code{lw6sys_color_8_t lw6map_color_couple_s::fg}


Foreground color.         
        
@end defcv

@defcv {Member} {lw6map_color_couple_s} {bg}
@strong{Type:} @code{lw6sys_color_8_t}

@strong{Definition:} @code{lw6sys_color_8_t lw6map_color_couple_s::bg}


Background color.         
        
@end defcv



  
@deftp {Struct} {lw6map_color_set_s}

    
Holds the complete color set for the game, including all color couples used for background, hud, menu, view, as well as team colors.     
@end deftp

@defcv {Member} {lw6map_color_set_s} {color_base}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_color_set_s::color_base}


Base color couple.         
        
@end defcv

@defcv {Member} {lw6map_color_set_s} {color_alternate}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_color_set_s::color_alternate}


Alternate color couple.         
        
@end defcv

@defcv {Member} {lw6map_color_set_s} {background_color_root}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_color_set_s::background_color_root}


Background color couple for root image.         
        
@end defcv

@defcv {Member} {lw6map_color_set_s} {background_color_stuff}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_color_set_s::background_color_stuff}


Background color couple for drawn stuff.         
        
@end defcv

@defcv {Member} {lw6map_color_set_s} {hud_color_frame}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_color_set_s::hud_color_frame}


Hud color couple for frames.         
        
@end defcv

@defcv {Member} {lw6map_color_set_s} {hud_color_text}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_color_set_s::hud_color_text}


Hud color couple for text.         
        
@end defcv

@defcv {Member} {lw6map_color_set_s} {menu_color_default}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_color_set_s::menu_color_default}


Menu default color couple.         
        
@end defcv

@defcv {Member} {lw6map_color_set_s} {menu_color_selected}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_color_set_s::menu_color_selected}


Menu color couple for selected items.         
        
@end defcv

@defcv {Member} {lw6map_color_set_s} {menu_color_disabled}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_color_set_s::menu_color_disabled}


Menu color couple for disabled items.         
        
@end defcv

@defcv {Member} {lw6map_color_set_s} {view_color_cursor}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_color_set_s::view_color_cursor}


Map view color couple for cursor.         
        
@end defcv

@defcv {Member} {lw6map_color_set_s} {view_color_map}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_color_set_s::view_color_map}


Map view color couple for map.         
        
@end defcv

@defcv {Member} {lw6map_color_set_s} {system_color}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_color_set_s::system_color}


System color couple (log messages).         
        
@end defcv

@defcv {Member} {lw6map_color_set_s} {team_color_dead}
@strong{Type:} @code{lw6sys_color_8_t}

@strong{Definition:} @code{lw6sys_color_8_t lw6map_color_set_s::team_color_dead}


Color to use for dead fighters.         
        
@end defcv

@defcv {Member} {lw6map_color_set_s} {team_colors}
@strong{Type:} @code{lw6sys_color_8_t}

@strong{Definition:} @code{lw6sys_color_8_t lw6map_color_set_s::team_colors[LW6MAP_NB_TEAM_COLORS]}


Team colors.         
        
@end defcv



  
@deftp {Struct} {lw6map_cursor_texture_layer_s}

    
Contains a cursor texture layer, this is basically a fixed (64x64) sized array of colors.     
@end deftp

@defcv {Member} {lw6map_cursor_texture_layer_s} {data}
@strong{Type:} @code{lw6sys_color_8_t}

@strong{Definition:} @code{lw6sys_color_8_t lw6map_cursor_texture_layer_s::data[LW6MAP_CURSOR_TEXTURE_SIZE][LW6MAP_CURSOR_TEXTURE_SIZE]}


Color for each pixel.         
        
@end defcv



  
@deftp {Struct} {lw6map_cursor_texture_s}

    
A cursor texture. It's divided between a texture that will be colorized depending on the map and another texture which will be colorized depending on the team playing the cursor.     
@end deftp

@defcv {Member} {lw6map_cursor_texture_s} {fg_bg_layer}
@strong{Type:} @code{lw6map_cursor_texture_layer_t}

@strong{Definition:} @code{lw6map_cursor_texture_layer_t lw6map_cursor_texture_s::fg_bg_layer}


Layer to be colorized using foreground and background colors.         
        
@end defcv

@defcv {Member} {lw6map_cursor_texture_s} {color_layer}
@strong{Type:} @code{lw6map_cursor_texture_layer_t}

@strong{Definition:} @code{lw6map_cursor_texture_layer_t lw6map_cursor_texture_s::color_layer}


Layer to be colorized using team colors.         
        
@end defcv



  
@deftp {Struct} {lw6map_layer_s}

    
A layer contains the actual data for a layer.     
@end deftp

@defcv {Member} {lw6map_layer_s} {shape}
@strong{Type:} @code{lw6sys_whd_t}

@strong{Definition:} @code{lw6sys_whd_t lw6map_layer_s::shape}


Shape of the layer. Z should be 1, logically.         
        
@end defcv

@defcv {Member} {lw6map_layer_s} {data}
@strong{Type:} @code{u_int8_t *}

@strong{Definition:} @code{u_int8_t* lw6map_layer_s::data}


Raw (byte) data.         
        
@end defcv



  
@deftp {Struct} {lw6map_level_s}

    
This structure contains everything about a level, once it's loaded from disk. It's immutable, it cannot be changed once it's loaded, and does not have any algorithm aware struct, this is just plain raw data, file data transformed into C struct.     
@end deftp

@defcv {Member} {lw6map_level_s} {id}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6map_level_s::id}


        
The id of the object, this is non-zero and unique within one run session, incremented at each object creation.         
@end defcv

@defcv {Member} {lw6map_level_s} {metadata}
@strong{Type:} @code{lw6map_metadata_t}

@strong{Definition:} @code{lw6map_metadata_t lw6map_level_s::metadata}


Metadata (title, copyright, description, ...)         
        
@end defcv

@defcv {Member} {lw6map_level_s} {local_info}
@strong{Type:} @code{lw6map_local_info_t}

@strong{Definition:} @code{lw6map_local_info_t lw6map_level_s::local_info}


Informations that depend on the host loading the map.         
        
@end defcv

@defcv {Member} {lw6map_level_s} {body}
@strong{Type:} @code{lw6map_body_t}

@strong{Definition:} @code{lw6map_body_t lw6map_level_s::body}


All layers (bytes array) forming the map.         
        
@end defcv

@defcv {Member} {lw6map_level_s} {texture}
@strong{Type:} @code{lw6map_texture_t}

@strong{Definition:} @code{lw6map_texture_t lw6map_level_s::texture}


Texture used by the map.         
        
@end defcv

@defcv {Member} {lw6map_level_s} {cursor_texture}
@strong{Type:} @code{lw6map_cursor_texture_t}

@strong{Definition:} @code{lw6map_cursor_texture_t lw6map_level_s::cursor_texture}


Cursor texture.         
        
@end defcv

@defcv {Member} {lw6map_level_s} {param}
@strong{Type:} @code{lw6map_param_t}

@strong{Definition:} @code{lw6map_param_t lw6map_level_s::param}


All map parameters.         
        
@end defcv



  
@deftp {Struct} {lw6map_local_info_s}

    
Local info is for fields which can be exploited locally, but make no sense if transfered to another computer, over the network for instance. This is typically something which will be updated by the ldr module or some other external code, but it's not directly linked to the content of the map itself.     
@end deftp

@defcv {Member} {lw6map_local_info_s} {music_dir}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6map_local_info_s::music_dir}


Directory where music files can be loaded.         
        
@end defcv



  
@deftp {Struct} {lw6map_metadata_s}

    
Content of metadata.xml stored into a C struct.     
@end deftp

@defcv {Member} {lw6map_metadata_s} {title}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6map_metadata_s::title}


Title of the map.         
        
@end defcv

@defcv {Member} {lw6map_metadata_s} {author}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6map_metadata_s::author}


Author of the map.         
        
@end defcv

@defcv {Member} {lw6map_metadata_s} {description}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6map_metadata_s::description}


Description of the map.         
        
@end defcv

@defcv {Member} {lw6map_metadata_s} {license}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6map_metadata_s::license}


License of the map (short, like GPLv2+ or GPLv3+).         
        
@end defcv

@defcv {Member} {lw6map_metadata_s} {vanilla_exp}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_metadata_s::vanilla_exp}


Exp as stored in the XML file of the map.         
        
@end defcv



  
@deftp {Struct} {lw6map_meta_layer_s}

    
A meta layer is a special layer which contains, for instance, informations such as where there's a special trick like glue.     
@end deftp

@defcv {Member} {lw6map_meta_layer_s} {shape}
@strong{Type:} @code{lw6sys_whd_t}

@strong{Definition:} @code{lw6sys_whd_t lw6map_meta_layer_s::shape}


Shape of the metalayer.         
        
@end defcv

@defcv {Member} {lw6map_meta_layer_s} {data}
@strong{Type:} @code{u_int8_t *}

@strong{Definition:} @code{u_int8_t* lw6map_meta_layer_s::data}


Raw (byte) data.         
        
@end defcv



  
@deftp {Struct} {lw6map_param_s}

    
All parameters in a map, indludes rules, style and teams.     
@end deftp

@defcv {Member} {lw6map_param_s} {rules}
@strong{Type:} @code{lw6map_rules_t}

@strong{Definition:} @code{lw6map_rules_t lw6map_param_s::rules}


Content of rules.xml.         
        
@end defcv

@defcv {Member} {lw6map_param_s} {style}
@strong{Type:} @code{lw6map_style_t}

@strong{Definition:} @code{lw6map_style_t lw6map_param_s::style}


Content of style.xml.         
        
@end defcv

@defcv {Member} {lw6map_param_s} {teams}
@strong{Type:} @code{lw6map_teams_t}

@strong{Definition:} @code{lw6map_teams_t lw6map_param_s::teams}


Content of teams.xml.         
        
@end defcv



  
@deftp {Struct} {lw6map_rules_s}

    
Content of rules.xml stored into a C struct. This structure is used a lot, it needs to be like this for we don't want to parse (even a hash) each time we want a param so we need it in a real C struct. In this structure, it's important, fundamental, that floats are never ever used in map rules. In fact, we need maps to be 100,00 (lots of zeroes) predictable, given some identical user actions. Using floats could lead us to very slight differences (floats are never accurate, especially when you run calculus on different hardwares) which could, with time, become very important. Sort of a "butterfly effect". So well, we use int. Int32 to be exact.     
@end deftp

@defcv {Member} {lw6map_rules_s} {total_time}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::total_time}


total_time parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {respawn_team}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::respawn_team}


respawn_team parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {respawn_position_mode}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::respawn_position_mode}


respawn_position_mode parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {respawn_delay}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::respawn_delay}


respawn_delay parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {moves_per_round}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::moves_per_round}


moves_per_round parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {spreads_per_round}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::spreads_per_round}


spreads_per_round parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {rounds_per_sec}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::rounds_per_sec}


rounds_per_sec parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {fighter_attack}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::fighter_attack}


fighter_attack parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {fighter_defense}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::fighter_defense}


fighter_defense parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {fighter_new_health}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::fighter_new_health}


fighter_new_health parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {fighter_regenerate}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::fighter_regenerate}


fighter_regenerate parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {side_attack_factor}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::side_attack_factor}


side_attack_factor parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {side_defense_factor}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::side_defense_factor}


side_defense_factor parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {nb_move_tries}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::nb_move_tries}


nb_move_tries parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {nb_attack_tries}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::nb_attack_tries}


nb_attack_tries parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {nb_defense_tries}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::nb_defense_tries}


nb_defense_tries parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {vertical_move}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::vertical_move}


vertical_move parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {spread_mode}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::spread_mode}


spread_mode parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {single_army_size}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::single_army_size}


single_army_size parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {total_armies_size}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::total_armies_size}


total_armies_size parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {max_nb_teams}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::max_nb_teams}


max_nb_teams parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {max_nb_cursors}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::max_nb_cursors}


max_nb_cursors parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {max_nb_nodes}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::max_nb_nodes}


max_nb_nodes parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {exp}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::exp}


exp parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {highest_team_color_allowed}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::highest_team_color_allowed}


highest_team_color_allowed parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {highest_weapon_allowed}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::highest_weapon_allowed}


highest_weapon_allowed parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {x_polarity}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::x_polarity}


x_polarity parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {y_polarity}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::y_polarity}


y_polarity parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {z_polarity}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::z_polarity}


z_polarity parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {max_zone_size}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::max_zone_size}


max_zone_size parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {round_delta}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::round_delta}


round_delta parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {max_round_delta}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::max_round_delta}


max_round_delta parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {max_cursor_pot}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::max_cursor_pot}


max_cursor_pot parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {cursor_pot_init}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::cursor_pot_init}


cursor_pot_init parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {max_cursor_pot_offset}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::max_cursor_pot_offset}


max_cursor_pot_offset parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {start_x}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::start_x[LW6MAP_MAX_NB_TEAMS]}


start_x parameters, stored as a per team integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {start_y}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::start_y[LW6MAP_MAX_NB_TEAMS]}


start_y parameters, stored as a per team integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {start_position_mode}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::start_position_mode}


start_position_mode parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {color_conflict_mode}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::color_conflict_mode}


color_conflict_mode parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {spread_thread}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::spread_thread}


spread_thread parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {glue_power}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::glue_power}


glue_power parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {boost_power}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::boost_power}


boost_power parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {danger_power}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::danger_power}


danger_power parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {medicine_power}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::medicine_power}


medicine_power parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {frags_mode}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::frags_mode}


frags_mode parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {frags_to_distribute}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::frags_to_distribute}


frags_to_distribute parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {frags_fade_out}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::frags_fade_out}


frags_fade_out parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {use_team_profiles}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::use_team_profiles}


use_team_profiles parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {team_profile_aggressive}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::team_profile_aggressive[LW6MAP_MAX_NB_TEAMS]}


team_profile_aggressive parameters, stored as a per team integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {team_profile_vulnerable}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::team_profile_vulnerable[LW6MAP_MAX_NB_TEAMS]}


team_profile_vulnerable parameters, stored as a per team integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {team_profile_mobile}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::team_profile_mobile[LW6MAP_MAX_NB_TEAMS]}


team_profile_mobile parameters, stored as a per team integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {team_profile_fast}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::team_profile_fast[LW6MAP_MAX_NB_TEAMS]}


team_profile_fast parameters, stored as a per team integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {team_profile_handicap}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::team_profile_handicap[LW6MAP_MAX_NB_TEAMS]}


team_profile_handicap parameters, stored as a per team integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {team_profile_weapon_id}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::team_profile_weapon_id[LW6MAP_MAX_NB_TEAMS]}


team_profile_weapon_id parameters, stored as a per team integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {team_profile_weapon_alternate_id}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::team_profile_weapon_alternate_id[LW6MAP_MAX_NB_TEAMS]}


team_profile_weapon_alternate_id parameters, stored as a per team integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {team_profile_weapon_mode}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::team_profile_weapon_mode[LW6MAP_MAX_NB_TEAMS]}


team_profile_weapon_mode parameters, stored as a per team integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {weapon_duration}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::weapon_duration}


weapon_duration parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {weapon_charge_delay}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::weapon_charge_delay}


weapon_charge_delay parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {weapon_charge_max}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::weapon_charge_max}


weapon_charge_max parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {weapon_tune_berzerk_power}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::weapon_tune_berzerk_power}


weapon_tune_berzerk_power parameter, stored as an integer.         
        
@end defcv

@defcv {Member} {lw6map_rules_s} {weapon_tune_turbo_power}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6map_rules_s::weapon_tune_turbo_power}


weapon_tune_turbo_power parameter, stored as an integer.         
        
@end defcv



  
@deftp {Struct} {lw6map_style_s}

    
Content of style.xml stored into a C struct.     
@end deftp

@defcv {Member} {lw6map_style_s} {keep_ratio}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_style_s::keep_ratio}


Boolean, wether to keep the map ratio or not.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {zoom}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6map_style_s::zoom}


Default zoom.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {zoom_min}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6map_style_s::zoom_min}


Min zoom.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {zoom_max}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6map_style_s::zoom_max}


Max zoom.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {x_wrap}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_style_s::x_wrap}


Wether to wrap on X axis.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {y_wrap}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_style_s::y_wrap}


Wether to wrap on Y axis.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {background_style}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6map_style_s::background_style}


Background style to use (for instance, bubbles).         
        
@end defcv

@defcv {Member} {lw6map_style_s} {hud_style}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6map_style_s::hud_style}


Hud style to use (for instance, floating).         
        
@end defcv

@defcv {Member} {lw6map_style_s} {menu_style}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6map_style_s::menu_style}


Menu style to use (for instance, cylinder).         
        
@end defcv

@defcv {Member} {lw6map_style_s} {view_style}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6map_style_s::view_style}


View style to use (for instance, flat).         
        
@end defcv

@defcv {Member} {lw6map_style_s} {animation_density}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6map_style_s::animation_density}


How dense animations should be (many or few sprites).         
        
@end defcv

@defcv {Member} {lw6map_style_s} {animation_speed}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6map_style_s::animation_speed}


How fast animations should be (sprites speed).         
        
@end defcv

@defcv {Member} {lw6map_style_s} {cursor_size}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6map_style_s::cursor_size}


Cursor size.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {colorize_cursor}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_style_s::colorize_cursor}


Wether to colorize cursors or not.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {blink_cursor}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_style_s::blink_cursor}


Wether to make cursors blink or not.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {hidden_layer_alpha}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6map_style_s::hidden_layer_alpha}


Alpha value used to represent fighters hidden behind a layer.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {colorize}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_style_s::colorize}


Wether to use colorization or not.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {pixelize}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_style_s::pixelize}


Wether to pixelize the map and fighters or not.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {color_set}
@strong{Type:} @code{lw6map_color_set_t}

@strong{Definition:} @code{lw6map_color_set_t lw6map_style_s::color_set}


All colors used by the game.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {music_file}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6map_style_s::music_file}


Music file to play.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {music_filter}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6map_style_s::music_filter}


Music files to keep.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {music_exclude}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6map_style_s::music_exclude}


Music files to exclude.         
        
@end defcv

@defcv {Member} {lw6map_style_s} {waves}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_style_s::waves}


Wether to turn on the wave effect or not.         
        
@end defcv



  
@deftp {Struct} {lw6map_teams_s}

    
Content of teams.xml stored into a C struct.     
@end deftp

@defcv {Member} {lw6map_teams_s} {player_color}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_teams_s::player_color[LW6MAP_TEAMS_NB_PLAYERS]}


Players colors.         
        
@end defcv

@defcv {Member} {lw6map_teams_s} {nb_bots}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_teams_s::nb_bots}


Number of bots.         
        
@end defcv

@defcv {Member} {lw6map_teams_s} {bot_speed}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6map_teams_s::bot_speed}


Bots speed.         
        
@end defcv

@defcv {Member} {lw6map_teams_s} {bot_iq}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_teams_s::bot_iq}


Bots IQ (how strong they are)         
        
@end defcv

@defcv {Member} {lw6map_teams_s} {bot}
@strong{Type:} @code{lw6map_bot_info_t}

@strong{Definition:} @code{lw6map_bot_info_t lw6map_teams_s::bot[LW6MAP_TEAMS_MAX_NB_BOTS]}


        
Per-bot parameters, including their color and the ai engine they use.         
@end defcv



  
@deftp {Struct} {lw6map_texture_s}

    
Texture information, this is a bit different from a layer, since this is RGBA data, plus some meta-informations such as guessed colors.     
@end deftp

@defcv {Member} {lw6map_texture_s} {w}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_texture_s::w}


Texture width.         
        
@end defcv

@defcv {Member} {lw6map_texture_s} {h}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_texture_s::h}


Texture height.         
        
@end defcv

@defcv {Member} {lw6map_texture_s} {has_alpha}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6map_texture_s::has_alpha}


        
True if texture has an alpha channel. If it has an alpha channel on disk (for instance, it's a PNG) and if in practice it has nothing else than full opaque 255 alpha values, then this will be set to 0 anyway, the idea is to detect textures that really need the engine to handle transparency.         
@end defcv

@defcv {Member} {lw6map_texture_s} {data}
@strong{Type:} @code{lw6sys_color_8_t *}

@strong{Definition:} @code{lw6sys_color_8_t* lw6map_texture_s::data}


Color for each pixel.         
        
@end defcv

@defcv {Member} {lw6map_texture_s} {guessed_color_base}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_texture_s::guessed_color_base}


        
Base guessed color couple. This is typically the best or more representative color couple (fg and bg) the program was able to automatically extract from the map.         
@end defcv

@defcv {Member} {lw6map_texture_s} {guessed_color_alternate}
@strong{Type:} @code{lw6map_color_couple_t}

@strong{Definition:} @code{lw6map_color_couple_t lw6map_texture_s::guessed_color_alternate}


        
An alternate color couple which still comes from the map but is a bit different from the base one.         
@end defcv


