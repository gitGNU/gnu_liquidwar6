\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename liquidwar6.info
@settitle Liquid War 6
@finalout
@setchapternewpage odd
@c %**end of header

@include version.texi
@include const.texi

@copying
Liquid War 6, a unique multiplayer wargame.

Copyright (c)  2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015  Christian Mauduit <ufoot@@ufoot.org>

@quotation
Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License,
Version 1.3 or any later version published by the Free Software
Foundation; with no Invariant Sections, no Front-Cover Texts and
no Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.
@end quotation
@end copying

@ifinfo

@direntry
* Liquid War 6: (liquidwar6).   A unique multiplayer wargame.
@end direntry

@end ifinfo


@titlepage
@title Liquid War 6
@subtitle A unique multiplayer wargame
@subtitle Documentation for version @value{VERSION} codename ``@value{LW6_CODENAME}''
@subtitle @value{UPDATED}
@author by Christian Mauduit <ufoot@@ufoot.org>

@page
@vskip 0pt plus 1filll
@insertcopying

@end titlepage

@node Top, , ,(dir)

@ifinfo
Liquid War 6, a unique multiplayer wargame.
@end ifinfo

@ifhtml
@uref{http://www.gnu.org/software/liquidwar6/, Liquid War 6}, 
a unique multiplayer wargame.
@end ifhtml

@menu
* Introduction::        What's all this about.
* User's manual::       README!
* Hacker's guide::      How to hack the game and make it better.
* Reference::  Command line options, configuration file entries.
* C API::               Internal C functions documentation.

Introduction

* In a nutshell::       Quick introduction to Liquid War 6.
* Project status::      Where we are, where we are heading.
* How you can help::    How you can help Liquid War 6 and the GNU Project.

User's manual

* Mailing lists::       Mailing lists related to Liquid War 6.
* Getting the game::    Get the latest version.
* Installation::        How to install Liquid War 6.
* Extra maps::          More and more maps.
* Troubleshooting::     Problems running the game?
* Quick start::         Ready, set, go!
* Strategy tips::       Keep this under your pillow.
* User interface::      How to control the game.
* Solo game::           Playing alone.
* Network games::       Set up and run network games.
* Graphics::            3D-acceleration issues.
* Sound & music::       Let's get noisy.
* Config file::         How to use the config file.
* Logs::                Log file contains valuable information.
* Report bugs::         How to report bugs.

Hacker's guide

* Designing levels::    How to draw new maps.
* Translating::         Translation HOWTO.
* Architecture::        C, Scheme, modules and the rest.
* Graphics backends::   How gfx modules work, how to write them.
* Core algorithm::      About shortest path & moving fighters.
* Compilation tips::    Advice for developpers and packagers.
* Coding guidelines::   Ensure code remains maintainable.
* Using the console::   How to interact with the game.
* Advanced tweaking::   Do this at your own risk.
* Writing modules::     How to develop your own extensions.
* Use as a library::    Liquid War 6 can be embedded in your own programs.
* Network protocol::    How the game communicates with others.
* Technical HOWTOs::    Recipes for the maintainer(s).
* Using GNU Arch::      A quick tla survival guide.
* Using GIT::           GIT is used to handle source code.
* Jenkins builds::      Continuous integration with Jenkins.

Reference

* Basic options::       Basic command-line parameters.
* Doc options::         Liquid War 6 is self-documented.
* Show options::        Show informations about the program.
* Path options::        Change default paths.
* Players options::     Define local players.
* Input options::       Customize input.
* Graphics options::    Change display settings.
* Sound options::       Change audio settings.
* Network options::     Tweak network parameters.
* Map parameters::      Global map parameters.
* Map rules.xml::       Change game rules.
* Map hints.xml::       Tune map loader.
* Map style.xml::       Modify map appearance.
* Map teams.xml::       Per map teams and bots settings.
* Advanced settings::   You probably don't want to change these.
* C to Guile::          C functions exported to Guile.
* Script hooks::        Available script hooks.

C API

* libliquidwar6::       Top-level functions.
* libbot::              Bot algorithms.
* mod-brute::           Brute-force bot.
* mod-follow::          A bot that follows others.
* mod-idiot::           Basic idiot bot.
* mod-random::          Totally random bot.
* libcfg::              Loading and saving config files.
* libcli::              Network clients.
* mod-http::            Web client.
* mod-tcp::             Tcp client using native protocol.
* mod-udp::             Udp client using native protocol.
* libcns::              Console handling.
* libcnx::              Connection common code.
* libdat::              Storing network data.
* libdef::              Keywords definitions.
* libdsp::              Threaded display.
* libdyn::              Dynamic module loading.
* libgen::              Pseudo-random map generation.
* libgfx::              Graphics.
* mod-gl1::             Initial 3D graphics backend.
* mod-gles2::           Embedded 3D graphics backend.
* mod-soft::            Software only graphics backend.
* shared-sdl::          SDL utils shared in some graphics backends.
* mod-caca::            TTY/xterm text graphics backend.
* libglb::              Gnulib embedded routines.
* libgui::              GUI utilities.
* libhlp::              Built-in help system.
* libimg::              Generating screenshots.
* libker::              Main kernel module (core algorithm).
* libldr::              Loading maps.
* libmap::              Map, AKA levels.
* libmat::              Math and matrix utilities.
* libmsg::              Network messages.
* libnet::              Low-level network routines.
* libnod::              Manipulating node data.
* libp2p::              A la peer to peer network system.
* libpil::              Dealing with game lag.
* libscm::              Guile wrapper.
* libsim::              Simulating fights.
* libsnd::              Sound.
* mod-csound::          Csound sound backend (vaporware).
* mod-ogg::             Ogg/libSDL default sound backend.
* libsrv::              Network servers.
* mod-httpd::           Embedded web server.
* mod-tcpd::            Tcp server using native protocol.
* mod-udpd::            Udp server using native protocol.
* libsys::              Low-level system utilities.
* libtsk::              Asynchronous loading.
* libvox::              Voxel-based 3D rendering.

Appendices

* Authors::             List of contributors.
* 2005 .plan::          This is how it started.                     
* Fanfic::              A historical Liquid War fanfic.
* Links::               Liquid War on the web
* Copying::             GNU General Public License version 3.
* GNU Free Documentation License:: The license for this documentation.
* Indexes::             Concept, function and keyword indexes.

@end menu

@contents

@c ===========================================================================
@c Introduction
@c ===========================================================================

@node Introduction, User's manual, , Top
@chapter Introduction

Read this chapter to discover Liquid War 6.

@menu
* In a nutshell::       Quick introduction to Liquid War 6.
* Project status::      Where we are, where we are heading.
* How you can help::    How you can help Liquid War 6 and the GNU Project.
@end menu

@c ---------------------------------------------------------------------------
@c In a nutshell
@c ---------------------------------------------------------------------------

@node In a nutshell, Project status, , Introduction
@section In a nutshell

Liquid War 6 is a unique multiplayer wargame. Your army is a blob of liquid and you have to try and eat your opponents. Rules are very simple yet original, they have been invented by Thomas Colcombet. It is possible to play alone against the computer but the game is really designed to be played with friends, on a single computer, on a LAN, or on Internet.

An older version, @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5},
is available, but is not part of the GNU Project.
Only Liquid War 6 is part of the @uref{http://www.gnu.org/,GNU Project},
it is a complete rewrite.

The official page of Liquid War 6 is 
@uref{http://www.gnu.org/software/liquidwar6/}.
For more information, you can read the @uref{http://en.wikipedia.org/wiki/Liquid_War, Wikipedia article} about Liquid War.

@c ---------------------------------------------------------------------------
@c Project status
@c ---------------------------------------------------------------------------

@node Project status, How you can help, In a nutshell, Introduction
@section Project status

@subsection What works, and what does not (yet)

As of today, the game is in beta state. It can be installed, and you
can toy arround with. You can even play with. It is still far from
being complete as some key features are still missing.

What works:

@itemize
@item
The whole framework is here, some functions are not implemented yet, but
the bases are set up, and they are believed solid. The game is very modular,
and is fully threaded.
It is designed so that graphics, sound, network and bot backends can be hacked
at will. It has a complete self-test suite, many debugging built-in tools,
and is regularly checked with automated tools. For instance, you can check
reports concerning
@uref{http://www.ufoot.org/liquidwar/v6/doc/global/, global references},
@uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/, code coverage} and
@uref{http://www.ufoot.org/liquidwar/v6/doc/cyclo/, cyclomatic complexity}.
This is not a quick hack.
@item
Documentation. Yes, you're reading it.
@item
Version 0.0.7beta is playable. Local game between humans (up to 4 players)
is possible. Two bots are implemented, named random and stupid. No great
players but well, they move the cursor. A new ``deatchmatch'' mode,
different from LW5, is in place.
@item
Liquid War 6 already has some features which are nowhere to be found
in Liquid War 5, such as multiple layers. It can be worth the upgrade.
@item
Maps. A number of interesting maps have already been designed (thanks
to Kasper Hviid).
@item
The game runs natively on GNU/Linux and 
has been ported to Microsoft Windows and Mac OS X.
Binaries are available for all those platforms. Use at your own risk.
If in doubt, get the source and compile.
@end itemize

In the near future:
@itemize
@item
Network play. Top-level priority. Yes, network has been promised for months
(years? ...yes, years) and is still not there. I said ``when it's done''.
@item
Fix bugs ;) The current engine is somewhat buggy, fighters might loose
the cursor, it clearly needs polishing.
@end itemize

In the long run:
@itemize
@item
Write new graphical backends so that the game does not require Mesa or
any OpenGL-like subsystem. The idea is to get rid of the 3D-accelerator
dependency.
@item
Implement all the fancy 3D features, make it possible to play
Liquid War 6 on a Moebius ring.
@item
Use the cool features of CSound to provide dynamic, contextualized
sounds & musics.
@item
Optimize the bot algorithm, which is probably a complex AI problem.
@end itemize

You might be interested in checking the following URLs, which give
a view on opened tasks and bugs:

@itemize
@item
bug list: @uref{http://savannah.gnu.org/bugs/?group=liquidwar6}
@item
task list: @uref{http://savannah.gnu.org/task/?group=liquidwar6}
@end itemize

@subsection What has changed since Liquid War 5.x?

Liquid War 6 is a complete rewrite of @uref{http://www.ufoot.org/liquidwar/v5, Liquid War 5}.
The rewrite started in 2005. So a good question is ``was the rewrite worth it?''...

Here's a list of key improvements:
@itemize
@item
appearance, global rendering quality. Call it the way you want, Liquid War 6 simply
looks nicer than any previous release. Period.
@item
level features, including multi-layer (allowing the map designer to create
bridges and tunnels), wrapping (fighters disappearing on the left
can reappear on the right). Those really change the gameplay.
@item
deathmatch mode. Give it a try, it's now the default mode, and definitely
changes the rules.
@item
team profiles, as well as special ``weapons'', which are tricks you can
play on opponents.
@item
modularity, overall code quality. While this is not a user-visible change, the game
is far less monolithic, therefore hacking to revamp the graphics engine,
the algorithm, whatever, is easier. The situation has changed from
``this is impossible to hack'' to ``OK, how much time can this take?''.
So while one can't promise every idea will be implemented some day,
at least many more things become possible with the new codebase.
@end itemize

The most interesting change is still to come, and concerns network games.

Stay tuned.

@subsection Revision history

Liquid War 6 releases are ``codenamed'' after famous, historical,
real or mythical characters. Here is a short revision history.
For details, see the @code{ChangeLog}
and @code{NEWS} files distributed with the game. Additionnally, there's
an ever-increasing ``stamp'' number which is incremented each time
a build is done with a different source. Latest versions use the stamp
as the revision number (the version 3rd number).

@itemize
@item
2006-12-18 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.0.1beta/,0.0.1beta}
@item
2007-09-07 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.0.2beta/,0.0.2beta}
@item
2008-01-30 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.0.3beta/,0.0.3beta}, codename ``Napoleon'', stamp 549
@item
2008-09-19 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.0.4beta/,0.0.4beta}, codename ``Clovis'', stamp 756
@item
2008-12-20 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.0.5beta/,0.0.5beta}, codename ``Henri IV'', stamp 1082
@item
2009-01-10 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.0.6beta/,0.0.6beta}, codename ``Cesar'', stamp 1124
@item
2009-10-03 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.0.7beta/,0.0.7beta}, codename ``Geronimo'', stamp 1465
@item
2010-07-05 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.0.8beta/,0.0.8beta}, codename ``Attila'', stamp 1658
@item
2010-08-23 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.0.9beta/,0.0.9beta}, codename ``Chuck'', stamp 2096
@item
2011-07-29 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.0.10beta/,0.0.10beta}, codename ``Gengis Kahn'', stamp 2562
@item
2011-10-02 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.0.11beta/,0.0.11beta}, codename ``Ho Chi Minh'', stamp 2785
@item
2011-12-18 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.0.12beta/,0.0.12beta}, codename ``Aguirre'', stamp 2938
@item
2011-12-24 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.0.13beta/,0.0.13beta}, codename ``Blackbeard'', stamp 2950
@item
2014-01-04 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.2.3551/,0.2.3551}, codename ``Davy Crockett''
@item
2014-03-26 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.4.3681/,0.4.3681}, codename ``Hannibal''
@item
2015-05-06 : @uref{http://download.savannah.gnu.org/releases/liquidwar6/0.6.3902/,0.6.3902}, codename ``Goliath''
@end itemize

@subsection Road map

The game will probably be labelled ``6.0.0'' when network mode is up
and running. Until then there will probably be other improvements 
concerning gameplay and appearance (``eye candy''). There's a balance
to keep between the major goals such as ``make that network thingy work''
and the very real fact that ``hacking must be fun''.

@c ---------------------------------------------------------------------------
@c How you can help
@c ---------------------------------------------------------------------------

@node How you can help, , Project status, Introduction
@section How you can help

@subsection Help GNU

Please remember that development of Liquid War 6 is a volunteer effort, and you can also contribute to its development. For information about contributing to the GNU Project, please read @uref{http://www.gnu.org/help/help.html, How to help GNU}.

@subsection Todo list

Here's a short list of todo items. It is probably too early to start
hacking the core engine itself, for it is still under heavy development,
might undergo major rewrites, and it's hard for documentation to keep
up with the reality of the code. However, there are still many things to
do.

@itemize
@item
Try the game. Play. Test. Send bug reports.
Without bug reports, bugs don't get fixed.
@item
Write maps. Obviously, this is something which can perfectly be delegated.
Experience shows user-contributed maps are, on average, better than
maps conceived by the author...
@item
Translate texts. Liquid War 6 uses GNU gettext, so all messages can
be translated.
@item
...any help is welcome.
@end itemize

Feel free to join the mailing-lists, this is clearly the best place to start with.

There's also a list of opened tasks on Savannah at
@uref{http://savannah.gnu.org/task/?group=liquidwar6}
which you can browse online. Maybe there's some task for you!

Alternatively, you can contact @uref{mailto:ufoot@@ufoot.org, Christian Mauduit}.


@c ===========================================================================
@c User's manual
@c ===========================================================================

@node User's manual, Hacker's guide, Introduction, Top
@chapter User's manual

The Liquid War 6 user's manual hopefully contains any usefull
information to install the program and play the game.
If you just want to enjoy Liquid War 6 without diving into
map creation and programming, this is just for you.

@menu
* Mailing lists::       Mailing lists related to Liquid War 6.
* Getting the game::    Get the latest version.
* Installation::        How to install Liquid War 6.
* Extra maps::          More and more maps.
* Troubleshooting::     Problems running the game?
* Quick start::         Ready, set, go!
* Strategy tips::       Keep this under your pillow.
* User interface::      How to control the game.
* Solo game::           Playing alone.
* Network games::       Set up and run network games.
* Graphics::            3D-acceleration issues.
* Sound & music::       Let's get noisy.
* Config file::         How to use the config file.
* Logs::                Log file contains valuable information.
* Report bugs::         How to report bugs.
@end menu

@c ---------------------------------------------------------------------------
@c Mailing lists
@c ---------------------------------------------------------------------------

@node Mailing lists, Getting the game, , User's manual
@section Mailing lists

@subsection General discussion

The main discussion list is 
@uref{mailto:help-liquidwar6@@gnu.org,<help-liquidwar6@@gnu.org>},
and is used to discuss all aspects of Liquid War 6, including installation, development, game strategies, and whatever subject players and hackers might want to talk about, provided it is Liquid War 6 related. If you don't know
on which list to subscribe, this is the one.

To subscribe to it, please send an empty mail with a Subject: header line of just "subscribe" to the @code{-request} list, that is 
@uref{mailto:help-liquidwar6-request@@gnu.org,<help-liquidwar6-request@@gnu.org>}.

You can also subscribe to the list using the Mailman
@uref{http://lists.gnu.org/mailman/listinfo/help-liquidwar6,web interface for help-liquidwar6} and consult
@uref{http://lists.gnu.org/archive/html/help-liquidwar6/,help-liquidwar6 archives}.

@subsection Announcements

Announcements about LiquidWar 6 are made on 
@uref{mailto:info-liquidwar6@@gnu.org,<info-liquidwar6@@gnu.org>}. 
Subscribe to it to be informed of major releases, and other significant news.

To subscribe to it, please send an empty mail with a Subject: header line of just "subscribe" to the @code{-request} list, that is 
@uref{mailto:info-liquidwar6-request@@gnu.org,<info-liquidwar6-request@@gnu.org>}.

You can also subscribe to the list using the Mailman
@uref{http://lists.gnu.org/mailman/listinfo/info-liquidwar6,web interface for info-liquidwar6} and consult
@uref{http://lists.gnu.org/archive/html/info-liquidwar6/,info-liquidwar6 archives}.

Please also consider reading the
@uref{http://savannah.gnu.org/news/?group=liquidwar6, latest news on Savannah}.

@subsection Bugs

@cindex Bug report

There is also a special list used for reporting bugs, 
@uref{mailto:bug-liquidwar6@@gnu.org,<bug-liquidwar6@@gnu.org>}. 
Please try and describe the bug as precisely as possible. The more accurate the description, the more chances it will get to be fixed.

While this is the standard GNU way of reporting bugs, modern SPAM standards
make it very hard to filter real bug reports from junk on this list.
It is more convenient to use a web interface, the URL is:
@uref{http://savannah.gnu.org/bugs/?func=additem&group=liquidwar6}
and you're really encouraged to use it instead of sending emails.

Please take a look at the
@uref{http://savannah.gnu.org/bugs/?group=liquidwar6, bug list}
before submitting new bugs.

@subsection IRC channel

IRC can be an interesting alternative to mailing-lists.
There's an open channel dedicated to Liquid War on freenode.net,
you can access it on @uref{irc://irc.freenode.net/liquidwar} that is,
channel @code{#liquidwar} on irc.freenode.net.

@c ---------------------------------------------------------------------------
@c Getting the game
@c ---------------------------------------------------------------------------

@node Getting the game, Installation, Mailing lists, User's manual
@section Getting the game

@subsection Download source

@cindex Download

Liquid War 6 can be found on:
@itemize
@item
@uref{http://ftp.gnu.org/gnu/liquidwar6/}
@item
@uref{http://download.savannah.gnu.org/releases/liquidwar6/}
@item
@uref{http://www.ufoot.org/download/liquidwar/v6/}
@end itemize

Downloading the latest file from this place, and compile
it yourself on your computer with a classical
@code{./configure && make && make install} is the recommended
way to install Liquid War 6.

@subsection Download binaries

Some binary packages might be available. Your mileage may vary.

GNU/Linux based systems are supported, through
@uref{http://www.debian.org/,Debian} @code{.deb} and
@uref{http://www.redhat.com/,Red Hat} @code{RPM} packages.
There is also a Microsoft Windows installer.

However these binaries are not necessarly available for every
single version of the game.

@subsection GIT repository

Latest work in progress versions can be obtained with @uref{http://git-scm.com/,GIT}.
Here's the typicall command which will fetch the latest version:

@example
git clone git://git.sv.gnu.org/liquidwar6.git
@end example

If you are behing a firewall and can't use the native GIT protocol, you
can rely on the (slower) http protocol:

@example
git clone http://git.sv.gnu.org/r/liquidwar6.git
@end example

You can browse the code online, consult log summary, and in a general manner ``follow'' the project on @uref{http://git.savannah.gnu.org/gitweb/?p=liquidwar6.git} and @uref{http://git.savannah.gnu.org/cgit/liquidwar6.git}.

Beware, git does not contain all the files included in the official source tarball.
For instance, the @code{./configure} script is not present. You need to run :
@example
autoreconf
./configure
make
make install
@end example
The @code{autoreconf} call is really mandatory the first time, @code{autoconf}
is not enough. You will also need all the prerequisites needed to build the docs,
generally speaking, getting the source from git requires more tools to build the
package than picking a ready-to-use tarball.

@subsection Daily snapshots

Alternatively, you can download daily snapshots on
@uref{http://www.ufoot.org/liquidwar/v6/snapshots/}
These files used to be built every day, now they are generated
by @uref{http://jenkins-ci.org/,Jenkins} whenever there's a source change (commit).
A simple @code{make} is done before generating source tarballs however
a @code{make distcheck} is performed before generating binaries, therefore sometimes
you can have the source but no associated tarballs.

Beware of revision numbers, snapshots can make you believe version X.Y is out when
it's only a release candidate at best, and most of the time just a work-in-progress.

Still, if you want bleeding edge versions, this is the way to go.

Documentation is automatically updated as well, and available
on @uref{http://www.ufoot.org/liquidwar/v6/doc/}.

@subsection Check integrity

Most binary packages (at least @code{.deb} and @code{RPM} GNU/Linux binaries) should
be signed using @uref{http://www.gnupg.org/,GnuPG}. The following keys are used when
generating upstream/vendor packages:

@itemize
@item 
1024D/FD409E94 2002-01-31 Christian Mauduit (U-Foot) <ufoot@@ufoot.org>
@verbatim
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.12 (GNU/Linux)

mQGiBDxZRPIRBACxPI8ZYEtkIGUliwLanAlZbIqVCI38d/SONo8MS3VUZkO82XRo
EAoj4KwX39fbUM3knpLK6SijzxKef/7Mw0w3W7lnQ/NegqSelTxiHmJxEQmeLulk
drP89CpXQPdir8ediZseR9/BAroiWgckDJK8YgMKsmBCjE62xfPrtxM2nwCghH0X
JAT/iD2uP0FdLpQGbM1dCnMD/jM3OcWIqQ1uGO8gp/lKTb7Kv7vEFQX0waLaIWOk
KJ45kx4guYuT7u4dVg1Y01PCbtnWTYJ9t1SW6GHhpNsdGybrw8izRk6zXE5TYFtN
9LN0kYYx5V+/Szjl4z5JabdEAt2OXZ9/N8Pb4PYInmG1jRr5fl78IO4SC1Gy03vK
9rL7A/9iXSGnN77/aNJ2qN3btTagwdLv4AYbk0ySneIpzKT9nmnM6MYs+seOwYeS
8e7i/SPISqblS5G10WZ4o/j5te0jotT7QFZdT3diO2NuUQXqqXIvRNxBGVKfX7Sg
TqvjZWlXMNAvH5KiuZ8vqgfEMqLS0hwjpJNVaZIPF4cifFgPFbQsQ2hyaXN0aWFu
IE1hdWR1aXQgKFUtRm9vdCkgPHVmb290QHVmb290Lm9yZz6IVwQTEQIAFwUCPFlE
8gULBwoDBAMVAwIDFgIBAheAAAoJEN4/K839QJ6Uk+YAnRuBRpn/rdD/JZNGHz0w
bJaVon9eAJ0YEdl0agCwJaWjKeZGWJl/f8TZqYhXBBMRAgAXBQI8WUTzBQsHCgME
AxUDAgMWAgECF4AACgkQ3j8rzf1AnpS+kgCeNl528f7waryDPBnEGJ0FjevrdNMA
oIDB+UCj1U65teCEbA3sEPyfkndFuQENBDxZRPUQBAD/PoWU0T2R4p0Fft5WQvCE
RqFSk+QZl0YXZCtwW59/v3ai0xEYzv193kjhojHqcDifoeHbO7bkEU5ZrbtwDt33
++/LZ4JqCi8wBXH2I+2msau/92Vn+WGZZf1fFRYJiputKyQrDnd05q41FvPI3knP
FBIMV/eKu0twqgGkLfHntwADBQP+PE4YN1NU01bScHiwkz62E5Xf/MwgOkBPFJ+D
L1o18xaUaNwrHSaI+nJc04de6QzxNrVfDdREwdjIm+M7CkK+ru4agmECyE3Ek3YL
76dFkE9geeOZTQ9A6MY9u/D1h+QHODg1r2sNfqoMnsFaNWOLXtivjjH4XWMN6Qze
N9H8UUqIRgQYEQIABgUCPFlE9QAKCRDePyvN/UCelJT4AJ94wSFLzyLxZLT29cBW
xybTpyt/jQCZAXEQi6LWVEo5jt/99FWRwDVNHK4=
=fcJV
-----END PGP PUBLIC KEY BLOCK-----
@end verbatim

@item
2048R/406FFCAB 2013-07-12 Jenkins Daemon (Christian Mauduit) <jenkins@@ufoot.org>
@verbatim
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.12 (GNU/Linux)

mQGiBDxZRPIRBACxPI8ZYEtkIGUliwLanAlZbIqVCI38d/SONo8MS3VUZkO82XRo
EAoj4KwX39fbUM3knpLK6SijzxKef/7Mw0w3W7lnQ/NegqSelTxiHmJxEQmeLulk
drP89CpXQPdir8ediZseR9/BAroiWgckDJK8YgMKsmBCjE62xfPrtxM2nwCghH0X
JAT/iD2uP0FdLpQGbM1dCnMD/jM3OcWIqQ1uGO8gp/lKTb7Kv7vEFQX0waLaIWOk
KJ45kx4guYuT7u4dVg1Y01PCbtnWTYJ9t1SW6GHhpNsdGybrw8izRk6zXE5TYFtN
9LN0kYYx5V+/Szjl4z5JabdEAt2OXZ9/N8Pb4PYInmG1jRr5fl78IO4SC1Gy03vK
9rL7A/9iXSGnN77/aNJ2qN3btTagwdLv4AYbk0ySneIpzKT9nmnM6MYs+seOwYeS
8e7i/SPISqblS5G10WZ4o/j5te0jotT7QFZdT3diO2NuUQXqqXIvRNxBGVKfX7Sg
TqvjZWlXMNAvH5KiuZ8vqgfEMqLS0hwjpJNVaZIPF4cifFgPFbQsQ2hyaXN0aWFu
IE1hdWR1aXQgKFUtRm9vdCkgPHVmb290QHVmb290Lm9yZz6IVwQTEQIAFwUCPFlE
8gULBwoDBAMVAwIDFgIBAheAAAoJEN4/K839QJ6Uk+YAnRuBRpn/rdD/JZNGHz0w
bJaVon9eAJ0YEdl0agCwJaWjKeZGWJl/f8TZqYhXBBMRAgAXBQI8WUTzBQsHCgME
AxUDAgMWAgECF4AACgkQ3j8rzf1AnpS+kgCeNl528f7waryDPBnEGJ0FjevrdNMA
oIDB+UCj1U65teCEbA3sEPyfkndFuQENBDxZRPUQBAD/PoWU0T2R4p0Fft5WQvCE
RqFSk+QZl0YXZCtwW59/v3ai0xEYzv193kjhojHqcDifoeHbO7bkEU5ZrbtwDt33
++/LZ4JqCi8wBXH2I+2msau/92Vn+WGZZf1fFRYJiputKyQrDnd05q41FvPI3knP
FBIMV/eKu0twqgGkLfHntwADBQP+PE4YN1NU01bScHiwkz62E5Xf/MwgOkBPFJ+D
L1o18xaUaNwrHSaI+nJc04de6QzxNrVfDdREwdjIm+M7CkK+ru4agmECyE3Ek3YL
76dFkE9geeOZTQ9A6MY9u/D1h+QHODg1r2sNfqoMnsFaNWOLXtivjjH4XWMN6Qze
N9H8UUqIRgQYEQIABgUCPFlE9QAKCRDePyvN/UCelJT4AJ94wSFLzyLxZLT29cBW
xybTpyt/jQCZAXEQi6LWVEo5jt/99FWRwDVNHK4=
=fcJV
-----END PGP PUBLIC KEY BLOCK-----
@end verbatim
@end itemize

@c ---------------------------------------------------------------------------
@c Installation
@c ---------------------------------------------------------------------------

@node Installation, Extra maps, Getting the game, User's manual
@section Installation

This section covers installation from source. Other ways of installing
the program are not described here.

@subsection Requirements

All these libraries are mandatory to compile the game.
Liquid War 6 won't compile, let alone run, without them.
Some of them could probably be replaced by equivalent tools,
but this would certainly require a programming effort and
some changes in Liquid War 6 source code.

@itemize

@item
@uref{http://www.gnu.org/software/make/, GCC}.
Liquid War 6 does require the GNU C Compiler to build, while other compilers might
be able to build the game, this is untested.

@item
@uref{http://gcc.gnu.org/projects/gomp/, Gomp}.
Liquid War 6 uses OpenMP @code{#pragma} directives, this should help the game
run faster on SMP systems.

@item
@uref{http://www.gnu.org/software/make/, GNU Make}.
Liquid War 6 might and certainly does use GNU Make extensions.

@item
@uref{http://www.gnu.org/software/libc/, GNU C library}. 
Sounds obvious, but you need a standard C library. It happens
that glibc has some rather usefull extensions (yes, as of 2006, some
vendors continue to offer C libraries without @code{snprintf}...)
and Liquid War 6 might use them. In a general manner, Liquid War 6
is part of and designed for GNU. You might however manage to compile
it with limited libc support, this is the case with mingw32 for instance
but, do it at your own risk.

@item
@uref{http://www.perl.com/, Perl}.
Some Makefile commands require Perl. You don't need any Perl
devel packages, and you can probably use any Perl 5.x version,
since no fancy recent feature of Perl is used. Just plain Perl.

@item
@uref{http://www.gnu.org/software/guile/, Guile}.
Possibly the most required library, since Liquid War 6
is a scheme program which uses a set of functions
coded in standard C. You need at least Guile 1.8.

@item
@uref{http://gmplib.org/, GNU MP}.
GMP is a free library for arbitrary precision arithmetic,
required by Guile.

@item
@uref{https://launchpad.net/libgc, libgc}.
This is a a garbage collector library, recent versions of Guile
might require this so in case your version of Guile requires it,
then Liquid War 6 will need it too.

@item
@uref{http://www.gnu.org/software/libtool/, ltdl}. 
This library, which comes with libtool, provides a portable
alternative to @code{dlopen} and @code{dlclose}. Check
that you have a @code{/usr/include/ltdl.h} file, or install
the corresponding package.

@item
@uref{http://www.zlib.net/, zlib}. Required by other
libraries, but can also be used directly by Liquid War 6 to
compress network messages for instance.

@item
@uref{http://www.libexpat.org/, expat}.
Used to read and write XML files, which contain constants
and configuration data.

@item
@uref{http://www.libpng.org/pub/png/libpng.html, libpng}.
Liquid War 6 uses libpng to read levels (maps), not
to speak of other optional libraries (SDL and the rest)
who need it themselves.

@item
@uref{http://www.ijg.org/, libjpeg}.
Maps can also be provided as jpeg files, so libjpeg
is required as well.

@item
@uref{http://www.sqlite.org, SQLite 3}.
Used to handle the list of available servers.

@end itemize

@subsection Optional libraries

While all these libraries are theorically optional (the game will
successfully compile without them), you'll obviously need, for instance,
one graphics backend. Otherwise, you'll simply have no display. This is
not acceptable. As of today, one can reasonnably consider all SDL-related
libraries are required. The rest is truely optional.

@itemize

@item
@uref{http://cunit.sourceforge.net/, libcunit}.
Provides (hopefully) more readable test output. It's not strictly
mandatory but still highly recommended. Building without is just allowed
in case some rare and bizarre platform would not have a libcunit port.

@item
@uref{http://www.gnu.org/software/ncurses/, ncurses}.
Required by readline, needs to be there otherwise readline
might not be detected properly on some systems.

@item
@uref{http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html, GNU readline}.
Used to handle input on the console. Console is not absolutely
mandatory, but it's a must-have if you want to hack the game.
Console unavailable does not mean you won't get anything on stdout but,
the interactive script shell just won't work.

@item
@uref{http://www.gtk.org/, GTK+}.
Used to display error/critical messages, so that users who launch the game
by clicking on a icon (that is, not from the console) are still visually
informed of important messages.

@item
@uref{http://www.mesa3d.org/, Mesa}. This library
provides an API similar to OpenGL and enables 2-D and 3-D
drawing.

@item 
@uref{http://www.libsdl.org/, SDL}.
SDL is used to set up a working OpenGL environnement,
and handle input (mouse and keyboard).

@item
@uref{http://www.libsdl.org/projects/SDL_image/, SDL_image}.
This SDL extension is used to read textures and
other graphics from disk.

@item
@uref{http://freetype.sourceforge.net/, FreeType 2}.
This library is required by SDL_ttf, to draw fonts.

@item
@uref{http://www.libsdl.org/projects/SDL_ttf/, SDL_ttf}.
This SDL extension is used to draw fonts. It is UTF-8
enabled.

@item
@uref{http://caca.zoy.org/, libcaca}. This library
transforms bitmaps into ascii-art images, allowing an
alternative style of display, TTY compatible.

@item
@uref{http://www.csounds.com/, libcsound}.
While this tool is not used yet, it is meant to be
the final sound backend, as CSounds offers great power to the composer,
enabling truely dynamically generated sound & music.
For now Liquid War 6 tries to detect csound 4 but as the mainstream
stable release is now 5 an update is needed. It will probably be
updated/fixed (Liquid War 6 using csounds 5) some day, for now you
can safely *not* install csound on your system and enjoy all the
possibilities of the game.

@item
@uref{http://www.libsdl.org/projects/SDL_mixer/, SDL_mixer}.
This SDL extension is used to allow dynamic mixing of
sounds, and it also provides a builtin @code{OGG/Vorbis}
file renderer.

@item
@uref{http://curl.haxx.se/libcurl/, libcURL}.
Used to handle HTTP requests, the idea being not to re-invent the
wheel but use a robust standards-compliant generic library.
@end itemize

@subsection Optional tools

Those tools are used upstream to maintain the game, you normally
do not need them to build the game ``as is'' but if you modify the
source code and hack the game, you might be interested in installing
them.

@itemize

@item
@uref{http://www.perl.org/, Perl 5}.
Liquid War 6 uses Perl for many tedious task, including, but not
limited to, parsing documentation.

@item
@uref{http://www.gnu.org/software/indent/, GNU Indent}.
Code is regularly indented using the script @code{src/indent.sh} which
calls @code{indent} automatically and recursively on the whole source tree.

@item
@uref{http://www.gnu.org/software/coreutils/, md5sum (GNU core utilities)}
This is used to stamp the source code and help tracking exact
build versions. 

@item
@uref{http://www.stack.nl/~dimitri/doxygen/, Doxygen}.
Used to generate documentation concerning C structs, more precisely,
include the struct members documentation into the official texinfo
manual.

@item
@uref{http://xmlsoft.org/XSLT/xsltproc2.htm, xsltproc}.
Used to post-process Doxygen output and transform it to texinfo.

@item
@uref{http://www.graphviz.org/, dot}.
Used to generate Doxygen call graphs.

@item
@uref{http://code.google.com/p/google-perftools/, Google Performance Tools}.
This tool is convenient to optimize the program and find out what
parts of it take most of the CPU power to execute.

@item
@uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov}.
Gives nice output about code coverage.

@item
@uref{http://www.ufoot.org/liquidwar/v6/doc/global/, GNU global}.
Shows global references through the code.

@item
@uref{http://parisc-linux.org/~bame/pmccabe/, pmccabe}.
Cyclomatic complexity, shows what part of the code are bloated.

@item
@uref{http://www.valgrind.org/,Valgrind}.
Usefull to track down memory leaks and many other programming errors.

@end itemize

@subsection Installing requirements using RPM/DEB packages

You might find it convenient not to install all the requirements
from source, but use your favorite GNU/Linux distribution packages.

On an RPM based GNU/Linux 
system, a typical command
(tested with @uref{http://www.fedoraproject.org/, Fedora} 15 ``Lovelock'')
could be:

@example
yum install \
make gcc glibc glibc-devel binutils \
libgomp \
guile guile-devel gmp gmp-devel libgc1c2 libgc-dev \
libtool libtool-ltdl libtool-ltdl-devel \
zlib zlib-devel expat expat-devel \
libpng libpng-devel libjpeg libjpeg-devel \
sqlite sqlite-devel \
ncurses ncurses-devel readline readline-devel \
libGL libGL-devel libGLU libGLU-devel \
SDL SDL-devel SDL_image SDL_image-devel \
SDL_mixer SDL_mixer-devel \
freetype freetype-devel SDL_ttf SDL_ttf-devel \
libcaca libcaca-devel \
libcurl libcurl-devel \
gtk2-devel \
perl lcov global valgrind graphviz gv ImageMagick \
texinfo-tex \
indent emacs doxygen libxml \
CUnit CUnit-devel \
rpm-build
@end example

On a DEB package based GNU/Linux system this command
(tested with @uref{http://www.debian.org/, Debian} 6.0 ``squeeze'')
would be:

@example
apt-get install \
make autoconf automake \
gcc libc6 libc6-dev binutils \
libgomp1 \
guile-2.0 guile-2.0-dev guile-2.0-libs libgmp10 libgmp3-dev \
libtool libltdl7 libltdl-dev \
zlib1g zlib1g-dev libexpat1 libexpat1-dev \
libpng12-0 libpng12-dev libjpeg8 libjpeg-dev \
libsqlite3-0 libsqlite3-dev \
libncurses5 libncurses5-dev libreadline6 libreadline6-dev \
libgl1-mesa-glx libgl1-mesa-dri libgl1-mesa-dev libglu1-mesa libglu1-mesa-dev \
libgles2-mesa libgles2-mesa-dev \
libsdl1.2debian libsdl1.2-dev libsdl-image1.2 libsdl-image1.2-dev \
libsdl-mixer1.2 libsdl-mixer1.2-dev \
libfreetype6 libfreetype6-dev libsdl-ttf2.0-0 libsdl-ttf2.0-dev \
libcaca0 caca-utils libcaca-dev \
libcurl4-gnutls-dev \
libgtk2.0-dev \
perl lcov global valgrind graphviz gv imagemagick \
texinfo texlive-base texlive-generic-extra \
texlive-fonts-recommended texlive-latex-extra \
indent emacs doxygen xsltproc pmccabe \
libcunit1-ncurses libcunit1-ncurses-dev \
google-perftools libgoogle-perftools-dev \
git git2cl \
zip nsis \
debhelper devscripts
@end example

Note that those requirements really depend on the exact distribution you
have, package names may vary from one to another.

@subsection Compiling

Liquid War 6 uses @uref{http://www.gnu.org/software/automake/, GNU Automake},
@uref{http://www.gnu.org/software/autoconf/, Autoconf} and
@uref{http://www.gnu.org/software/libtool/, GNU Libtool}.

Once all the requirements are installed, run:

@example
./configure
make
make install
@end example

Liquid War 6 supports the standard @code{./configure --prefix=/my/path} option
(in fact, it supports much more than that) so you can install the game
in any directory. You do not need to be @code{root} to install Liquid War 6.

@c ---------------------------------------------------------------------------
@c Extra maps
@c ---------------------------------------------------------------------------

@node Extra maps, Troubleshooting, Installation, User's manual
@section Extra maps

@subsection The extra maps package

The main package contains some maps so that you can try out
the game. Still, an additionnal package, called @code{extra-maps}
or @code{liquidwar6-extra-maps} is available, containing more maps.
It really does contain many of them, including most Liquid War 3
and Liquid War 5 legacy maps, plus new Liquid War 6 maps.

@subsection Install extra maps on GNU/Linux and POSIX systems

On GNU/Linux systems (and possibly any POSIX unixish system)
running: 

@example
./configure
make
make install
@end example

will install the extra maps on your system automatically,
they will then be available in the @code{extra/} sub-directory
when browsing maps.

The @code{./configure} script has a @code{--enable-liquidwar6} switch
which will try and find automatically if there's an existing @code{liquidwar6}
binary in the path. If there's such a binary, it will run it and
ask for its @code{map-path} and use this value automatically.

@subsection Raw install of extra maps (all-platforms)

Another solution, which works on all platforms including Microsoft Windows and Mac OS X
but also works on GNU/Linux, is to simply unpack the @code{extra-maps}
package (unzip or untar) in your custom map directory, or in the
system map directory. There's nothing else to do to install these maps
but simply put them on your hard drive in the right directory.

Typically on an Microsoft Windows system, you would unpack the extra maps in
@code{C:\Program Files\Liquid War 6\map\} (system directory)
and on a Mac OS X system you would unpack the extra maps in
@code{Liquid War 6.app/Contents/Resources/map/} (system directory)
or @code{$HOME/Library/Application Support/Liquid War 6/map} (user directory).
On a GNU/Linux or POSIX system
you would unpack them in @code{$HOME/.liquidwar6/map/} (user directory).

Next time you run the game, the maps should be browsable.

If you can't see them, run @code{liquidwar6 --audit} and check that
the place where you unpacked the files is actually searched by the binary.

@c ---------------------------------------------------------------------------
@c Troubleshooting
@c ---------------------------------------------------------------------------

@node Troubleshooting, Quick start, Extra maps, User's manual
@section Troubleshooting

@subsection Compilation problems

@cindex Compilation

A quick survival guide:

@itemize
@item
Check that you have all dependencies installed.
Also check their version number. Double-check that you
have devel packages installed, not only run-time binaries.
@item
Read carefully the output of @code{./configure}. Running @code{./configure > configure.log 2> configure.err} does help.
@item
Editing @code{/etc/ld.so.conf} and running @code{ldconfig} as @code{root} 
can help if some dependencies are installed in exotic places.
@item
Check the values of the 
environment variables @code{CFLAGS}, @code{LDFLAGS} and @code{LD_LIBRARY_PATH}.
@item
Try @code{./configure --enable-allinone}, this will disable
some fancy but somewhat complicated dynamic @code{.so} file support,
it can help if shared libraries are handled differently on your system
than on a plain GNU/Linux box.
@end itemize

If none of these help, consider reporting a bug, or search
the mailing-lists for help.

@subsection Check installation

Here's a check-list to ensure that your installation is correct:
@itemize
@item
What was the output of @code{make install}? @code{make check}?
@item
Is the @code{liquidwar6} binary in your @code{PATH} environment variable?
It might be in @code{/usr/games}.
@item
Run @code{liquidwar6 --pedigree}. Look at the output. Check the
compilation date & time, the version number.
@item
Run @code{liquidwar6 --audit}. What do these paths look like?
Are they absolute paths? Do they exist? What's there?
Normally, once the game is installed, all of them should exist,
and be populated with sub-directories and files.
@item
Run @code{liquidwar6 --modules}, to know which modules where compiled.
You need at least one graphical module, for instance @code{mod-gl1},
else the game won't run.
@item
Run @code{liquidwar6 --host}, this displays informations about
the host system the binary has been built for.
@end itemize

@subsection Problems running the game

Now, game looks correctly installed, but you have problems running it.

@itemize
@item
Run the game from a terminal, not from a Gnome or KDE launcher, you
need to see the console output.
@item
In the @code{$HOME/.liquidwar6/} directory, you'll find some files, the main log file @code{log.csv} and maybe @code{dump.txt} or @code{backtrace.txt}. They might contain valuable information, read them. Note that while @code{log.csv} is overwritten each time you start the game, @code{dump.txt} or @code{backtrace.txt} are conserved until a new problem arises. So check the date of these files to be sure you're analyzing the right ones.
Note that byt default on Microsoft Windows @code{$HOME/.liquidwar6/} is replaced by
@code{C:\Documents and Settings\<username>\Liquid War 6} and on Mac OS X it is
in @code{/Users/<username>/Library/Application Support/Liquid War 6/}.
@item
Run @code{liquidwar6 --defaults}. This will reset all options to defaults.
You might need to run this when upgrading from a version to another, since
some options might appear, disappear, or defaults values can change.
@item
Run @code{liquidwar6 --test}. This should run a complete test suite, many functions in the game will be tested automatically, and errors reported.
@item
Run @code{liquidwar6 --show-script-file}. Are you really running the right code?
@item
Game segfaults: try @code{make uninstall && make clean && make && make install}.
Many problems can come from using a wrong shared module. You can also launch
the game with the @code{--trap-errors=false} switch, this will disable the custom
popup window and allow you to get the real error.
@item
Game (still) segfaults: try @code{gdb liquidwar6}. Type @code{run --trap-errors=false} and watch output.
@item
The dynamic library loader can sometimes have problemes, and does not
always report explicit messages on @code{stdout} or @code{stderr}.
You can change this
by modifying some environment variables: @code{export LD_DEBUG=all}.
This is very verbose but does help finding bugs.
@item
Consider compiling the game using @code{./configure --enable-valgrind} and
then run it using @uref{http://valgrind.org/, Valgrind}.
@item
Try @code{find / -type d -a -name "liquidwar6*" 2> /dev/null} to ensure you don't
have an old version of Liquid War 6 somewhere else...
@end itemize

@c ---------------------------------------------------------------------------
@c Quick start
@c ---------------------------------------------------------------------------

@node Quick start, Strategy tips, Troubleshooting, User's manual
@section Quick start

@subsection Quick start

Once the game is installed, run it,
click on @code{Quick start} with the mouse, and control
the red @code{'a'} cursor with the mouse, or keyboard, both work.
Try and surround the green team, it's a stupid bot, you should win ;)

You army is formed by all the red pixels on the screen, they should
try and rejoin the cursor (the blinking @code{'a'} letter) using the
shortest path. When red and green meet, they fight. Try it, toy arround.

The @code{Quick start} button will always make you play red against
a green stupid bot, whatever other options you have set up.

@c ---------------------------------------------------------------------------
@c Strategy tips
@c ---------------------------------------------------------------------------

Todo...

@node Strategy tips, User interface, Quick start, User's manual
@section Strategy tips

@c ---------------------------------------------------------------------------
@c User interface
@c ---------------------------------------------------------------------------

@node User interface, Solo game, Strategy tips, User's manual
@section User interface

@subsection A reduced set of keys

Liquid War 6 can be controlled using a reduced set of keys. This is
to make the game more portable and allow possible ports to platforms
where a full keyboard is not available. Depending on the graphics backend,
exact mapping might change, they should hopefully be obvious and intuitive.

Those keys are:
@itemize
@item
@code{up} : the arrow up key
@item
@code{down} : the down arrow key
@item
@code{left} : the left arrow key
@item
@code{right} : the right arrow key
@item
@code{enter} : the enter / return key
@item
@code{esc} : the escape key
@item
@code{ctrl} : the control key
@item
@code{alt} : the alt / meta key
@item
@code{pgup} : the page up key
@item
@code{pgdown} : the page down key
@end itemize

Basically,

@subsection Combining mouse, keyboard and joysticks

It's also possible to control the game with the mouse only, or with a joystick.
By default the interface will trap all events and respond on any of these possible 
devices.

@multitable @columnfractions .2 .2 .2 .2 .2
     @headitem Keyboard @tab Mouse @tab Joystick @tab Menu action @tab In-game

     @item @code{up}
     @tab mouse pointer
     @tab stick
     @tab previous menu item
     @tab move cursor up

     @item @code{down}
     @tab mouse pointer
     @tab stick
     @tab next menu item
     @tab move cursor down

     @item @code{left}
     @tab mouse pointer
     @tab stick
     @tab change menu item value
     @tab move cursor left

     @item @code{right}
     @tab mouse pointer
     @tab stick
     @tab change menu item value
     @tab move cursor right

     @item @code{enter}
     @tab left-click
     @tab button A
     @tab validate menu
     @tab validate chat line

     @item @code{esc}
     @tab right-click
     @tab button B
     @tab back to previous menu
     @tab quit game

     @item @code{ctrl}
     @tab right-click or double-click on any button
     @tab button C
     @tab N/A
     @tab fire

     @item @code{alt}
     @tab middle-click or triple-click on any button
     @tab button D
     @tab N/A
     @tab alternate fire

     @item @code{pgup}
     @tab wheel up
     @tab button E
     @tab previous menu item
     @tab zoom in

     @item @code{pgdown}
     @tab wheel down
     @tab button F
     @tab next menu item
     @tab zoom out

@end multitable


A final word about joystick buttons: there's no such thing as standard
joystick buttons, some will come with @code{A,B,C,D}, others will
have @code{A,B,start,select,L,R}, there's no way to know. By default,
the game will use the buttons with the lowest indexes (returned by
your driver) for the most usefull functions. Validate menu entries is
the most usefull action, zooming in and out the one you can live without.

@subsection Quit with F10

There's also an (almost) hardcoded shortcut which will quit the game
immediately, or at least as quickly as possible, without any prompt or warning.

It is the @code{F10} key.

Think of this feature as the procastinator's ``whoops, here comes my boss!!!''
emergency function.

@c ---------------------------------------------------------------------------
@c Solo game
@c ---------------------------------------------------------------------------

@node Solo game, Network games, User interface, User's manual
@section Solo game

@subsection Current state

As of today, Liquid War 6 is essentially a solo game since network
is not working. It allows you to toy arround in arcade mode on any
map you wish.

A real solo mode with campaign and goals to reach is planned, how
it will be implemented is yet to be defined.

@subsection Team profiles

By default, teams behave differently, some of them move more rapidly,
some are more aggressive but vulnerable, some are more defensive but
do not attack as strong as others. This aspect of the game is under
active tuning, things might be unfair by now, you can toy arround
with the various @code{team-profile-...} options, any report is
appreciated.

Note that this is very different from Liquid War 5, and can give
very different gaming experiences, you can artificially set up arbitrary
strong bots, for instance.

Here's a description of the default color settings:

@itemize
@include team-colors-selfdoc.texi
@end itemize

@subsection Weapons

Additionnally, when profiles are used, each team has two weapons, 
a primary weapon and an alternate one. Think of weapons as special
(usually nasty) tricks you can play on your opponents.

Here's a description of available weapons:

@itemize
@include weapons-selfdoc.texi
@end itemize

Note that this is in progress, some of them are NOT IMPLEMENTED YET.

@c ---------------------------------------------------------------------------
@c Network games
@c ---------------------------------------------------------------------------

@node Network games, Graphics, Solo game, User's manual
@section Network games

@subsection Choose your ``public url''

Liquid War 6 needs to name your ``node'' (you can think as your
server instance of the game) and have a unique URL (address) to
publish and give to other nodes.

If only one network adapter is attached to your computer and
your address IP is @code{A.B.C.D} then by default the game will
pick automatically the address @code{http://A.B.C.D:8056/} and
it should work flawlessly.

Problems can arise if you have a peculiar network configuration,
if you have multiple non-loopback network interfaces, if you use
NAT to protect yourself from intruders and/or if your 
context forces you to do so.
In that case, Liquid War won't be able to guess a correct URL
automatically. So you need to set it up manually either
by editing the @code{public-url} entry in the config file, 
changing environment variable @code{LW6_PUBLIC_URL} or
passing the @code{--public-url=http://<host>:<port>/} argument
when running the game. Typically, if you are behind a firewall
which does NAT, use the firewall address. The right address is
the address which, given to remote hosts, will allow them
to connect on your game instance.

@subsection Starting a node

A node is started automatically when you run the game. Even
if you don't start to play, node starts in the background
and exchanges data with other nodes, mostly to discover
them and maintain its internal map of existing nodes and games.

So even without starting a network game, you should be able
to point a web browser on your node and see a web page
describing it. Your node address is displayed on @code{stdout}
(console) when starting the game. If in doubt, try @uref{http://localhost:8056/}
which should work unless you modified defaults settings.

When you start a network game, the program simply changes
your node state from ``idle'' to ``accepting connections''.

@subsection Connecting to a node

The interface should show you the list of available nodes,
just pick one and try and connect to it.

Note that once you're connected on a remote node, you're
still acting as an independant node, and other nodes might
connect to your node as well as to the other nodes. In
short, there's no real server or client, everyone is a
client for someone, and can act as a server.

Nodes connected together form a ``community'', which can
disband, accept new nodes, and in a general manner has
its own immaterial life, the first node which created
the game might disappear, game can continue without it.

This is why the main network module is called @code{libp2p},
this is a reference to the term ``peer to peer''.

@subsection Communities

Once a node is connected to another one, they've started 
a ``community''. Formally, a stand-alone node accepting for
connection is already a community, even if it has only one
member, but the only really interesting communities are
those formed with several nodes.

A community can't be reached through a given server, to
connect to one you just need to connect on one of its member
nodes. All nodes are equivalent, there's no master, no root
node, nodes collaborate to share the same real-time information
and maintaine an up-to-date game state.

Of course, conflicts can arise, and in that case nodes need
to agree on an acceptable solution. Normally, the program takes
decisions automatically (for instance, it could decide to ``kick''
a node out of the community) so the player does not have to
care about this, but this is expected to be one of the most tricky
(and passionating) part of Liquid War 6 hacking.

@subsection Firewall settings

By default, Liquid War 6 will communicate on port 8056, in both TCP
and UDP, and in both ways too (in/out). It's possible to play with
partial connectivity, in extreme case, you can even play without
direct internet access, using only a mere web proxy.

However, things will go faster and be much easier if the program
can use its default native protocol.

Here's an example of a typicall @uref{http://www.netfilter.org/, iptables}
configuration which allows you to play the game full-featured. It's assumed
that by default all packets are dropped, this configuration will just open
the necessary ports.

@example
# outgoing TCP on port 8056 (liquidwar6)
iptables -A OUTPUT -p tcp --dport 8056 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A INPUT -p tcp --sport 8056 -m state --state ESTABLISHED -j ACCEPT
# incoming TCP on port 8056 (liquidwar6)
iptables -A INPUT -p tcp --dport 8056 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p tcp --sport 8056 -m state --state ESTABLISHED -j ACCEPT
# outgoing UDP on port 8056 (liquidwar6)
iptables -A OUTPUT -p udp --dport 8056 --sport 1024:65535 -j ACCEPT
iptables -A INPUT -p udp --sport 8056 --dport 1024:65535 -j ACCEPT
# incoming UDP on port 8056 (liquidwar6)
iptables -A INPUT -p udp --dport 8056 --sport 1024:65535 -j ACCEPT
iptables -A OUTPUT -p udp --sport 8056 --dport 1024:65535 -j ACCEPT
@end example

If you can't change firewall settings and only have access to the web
through a web proxy, it can still be possible to play (with some restrictions
such as your node not being seen by others) if @code{mod-http} is available.
This in turn depends on wether @uref{http://curl.haxx.se/,libcurl} support was
activated when compiling the game. To use the proxy, you can set
the @code{http_proxy} environment variable. For detailed informations,
please refer to @uref{http://curl.haxx.se/docs/,libcurl doccumentation}.

@subsection Is the game secure?

As stated in the license, the program comes with NO WARRANTY. Period.

However, an important effort has been made so that it
can reasonnably be used online, exposed to various ``common'' attacks.

As far as security is concerned, there are two different issues:
@itemize
@item
vulnerability to general security attacks, people typically trying
to gain prililedged access on your computer, relying on a security
flaw in the program. A good firewall is a must-have, as you can
never know for sure a program has no bugs. Running Liquid War 6 as
an unpriviledged user (certainly not ``root'') is also a good practice.
@item
vulnerability to players ``cheating'' and sending malicious
informations to fake their moves, scores, and/or modify
informations concerning other players. This is a very important
point in Liquid War 6 since it has a multi-channel way of
exchanging data (think of the web interface, you have no
garantee of who the client is).
@end itemize

Here's a list of various steps which have been taken
to make the program more secure:

@itemize
@item
a @code{--skip-network} option is here if you really do
not want to be bothered by networking risks;
@item
program has basic password support so that you can deny access 
to unknown players;
@item
passwords are never sent in clear text over the network,
only a hash (checksum) is sent;
@item
no use of well-known buffer overflow friendly functions like @code{strcpy}, 
equivalents such as @code{strncpy} are used;
@item
program never trusts what comes from network peers, when
it wants to know something, it checks it out by itself, for
instance, the node list is systematically verified by the
local node before being used and/or published;
@item
the built-in web server is not a general purpose web server
which will end up revealing some of your private files, it
can only serve game-related pages;
@item
the very fact that the game has no central server makes it
hard to attack it, because if someone wants to play ``Oscar'' 
annoying ``Alice'' and ``Bob'' he well need to fool
all the nodes participating in a game, sending wrong
informations to a single node won't have much effect.
@end itemize

This being said, Liquid War 6 does not use any strong encryption
library to protect the data it sends. All the checksum machinery
might be vulnerable to a brute-force and/or strong cryptographic
attack, so in theory it's possible to fool the program.

In practise, if you want real privacy, play over a VPN
(Virtual Private Network).

@c ---------------------------------------------------------------------------
@c Graphics
@c ---------------------------------------------------------------------------

@node Graphics, Sound & music, Network games, User's manual
@section Graphics

@subsection Standard, high and low resolution

Liquid War 6 will try and pick up a default resolution when the game
is launched the first time. It won't use your maximum screen resolution
but will instead list all available fullscreen modes, and pick up one which
is usually something like two thirds of the highest mode. This is to allow
switching back and forth between fullscreen and windowed mode using the same
settings. This automatically picked-up resolution really depends on your hardware
and driver. It is called ``standard'' in the graphics options menu.

Then it is possible to automatically select the minimum and maximum resolution
your hardware allows in fullscreen mode. These are called ``low'' and ``high''
in the graphics options menu. Just click on the button that display the
resolution, it will change and use the next setting. In windowed mode, the game
won't accept the highest available mode but will instead use a percentage of it,
defined by the @code{--windowed-mode-limit} parameter.

You might still be in a case where this is not enough. For instance your maximum
resolution is 1600x1200, Liquid War 6 picks a default mode of 1280x960 for you but
for some reason you want to play in 800x600, fullscreen. In this case, simply switch
to windowed mode, resize the window with the mouse (the resolution button will
show you the current resolution) and just choose a resolution near 800x600. It does not
even need to be exactly 800x600, 798x603 would probably fit. Then when switching
back to fullscreen, you'll be in 800x600, the game will automatically pick up
the fullscreen mode which is closest to the current windowed mode resolution.

@subsection Display rate

By default the game will try and run at 60 frames per second. Given the nature
of Liquid War 6, this is probably enough. Higher values will maybe give a slightly
smoother display, but barely noticeable.

You can activate the display of frames per seconds (aka ``fps'') through the
menu (``options -> system'') or with the command line (``--display-fps'').

On a single processor system, reducing the number of frames per second might
allow the rest of the game run faster. So if you notice the game is really
slow, in terms of ``fighters move slowly'' then you might be happy reducing
the display rate and therefore giving power back to the other parts of the
program. On a dual-core (or more) or on a multi-processor system, this is
probably useless since the game is threaded and has a dedicated thread for
display purposes. The command line option to reduce the number of frames
per second is @code{--target-fps}.

Additionnally, the parameter @code{--gfx-cpu-usage} allows you to force
the display thread to ``take a rest'' and go idle for some time. This is
advanced settings, most users won't touch this.

@c ---------------------------------------------------------------------------
@c Sound & music
@c ---------------------------------------------------------------------------

@node Sound & music, Config file, Graphics, User's manual
@section Sound & music

@subsection Current status

As of today, the game is capable of playing @uref{http://www.vorbis.com/, Ogg Vorbis}
audio files. That's it.

@subsection The future

In the long run, what is planned is to support @uref{http://www.csounds.com/, Csound}
which would allow very cool effects, such as dynamically changing the music while
the game is running, typically following the action. If there's a lot of fight,
the music could reflect this.

For now this is only vaporware, just a nice idea among others, nothing implmented yet.

@c ---------------------------------------------------------------------------
@c Config file
@c ---------------------------------------------------------------------------

@node Config file, Logs, Sound & music, User's manual
@section Config file

The config file is a simple XML file. It uses XML only to benefit
standard parsing tools, but it's not a structured XML file, in the
sense that the tree is so simple that all items are at the same level.
It is just a simple key-value binding.

This file is in @code{$HOME/.liquidwar6/config.xml} on GNU/Linux and POSIX
systems, in @code{C:\Documents and Settings\<username>\Liquid War 6\config.xml}
on Microsoft Windows and in @code{/Users/<username>/Library/Application Support/Liquid War 6/config.xml} on Mac OS X.

You're free to edit it manually, but all parameters are changeable with command line
options. The program will overwrite this file each time it exits, so
if you put comments in it, they will disappear. The advantage of this
is that if you mispell something, or if for some reason the game does
not understand a value, then when rewriting the file, it will show
you it just did not get it.

The file embeds the documentation for all its entries, 
it is therefore rather verbose. The documentation is the same you will
find online or by quering the game with the @code{--about} option,
also the same you would get reading this manual.

@c ---------------------------------------------------------------------------
@c Logs
@c ---------------------------------------------------------------------------

@node Logs, Report bugs, Config file, User's manual
@section Logs

@cindex Log file

Liquid War 6 uses @code{stdout} to output important messages,
and @code{stderr} to log warnings and errors.
It will also use @uref{http://en.wikipedia.org/wiki/Syslog, syslog} if available.

Additionnally, a verbose log is available in @code{$HOME/.liquidwar6/log.csv}
 on GNU/Linux and POSIX
systems, in @code{C:\Documents and Settings\<username>\Liquid War 6\log.csv}
on Microsoft Windows and in @code{/Users/<username>/Library/Application Support/Liquid War 6/log.csv} on Mac OS X.


You can read this using any spreadsheet software capable of reading
csv file. It uses the tab (@code{\t}) character as a separator.
It contains valuable informations including version and most default
values for the game, and for each line logged, it says where in the
code the log function was called. A must-have for debugging.

@c ---------------------------------------------------------------------------
@c Report bugs
@c ---------------------------------------------------------------------------

@node Report bugs, , Logs, User's manual
@section Report bugs

@cindex Bug report

There are two ways to report bugs:

@itemize
@item
send a mail to 
@uref{mailto:bug-liquidwar6@@gnu.org,<bug-liquidwar6@@gnu.org>};
@item
use the web-based Savannah bug tracker:
@uref{http://savannah.gnu.org/bugs/?func=additem&group=liquidwar6}.
@end itemize

The latter (@uref{http://savannah.gnu.org,Savannah}) is much preferred,
because the mailing-list is bloated with spam... 
It also offers a @uref{http://savannah.gnu.org/bugs/?group=liquidwar6, list of bugs} which you should read before submitting a new one. 

@c ===========================================================================
@c Hacker's guide
@c ===========================================================================

@node Hacker's guide, Reference, User's manual, Top
@chapter Hacker's guide

This hacker's guide is for anyone who is curious about the game,
and wants to know how it works. It covers many aspects from
simple map creation to technical program internals.
A great effort has been done in Liquid War 6 so that it should
be much more hackable than previous versions. Any feedback
is welcome.

@menu
* Designing levels::    How to draw new maps.
* Translating::         Translation HOWTO.
* Architecture::        C, Scheme, modules and the rest.
* Graphics backends::   How gfx modules work, how to write them.
* Core algorithm::      About shortest path & moving fighters.
* Compilation tips::    Advice for developpers and packagers.
* Coding guidelines::   Ensure code remains maintainable.
* Using the console::   How to interact with the game.
* Advanced tweaking::   Do this at your own risk.
* Writing modules::     How to develop your own extensions.
* Use as a library::    Liquid War 6 can be embedded in your own programs.
* Network protocol::    How the game communicates with others.
* Technical HOWTOs::    Recipes for the maintainer(s).
* Using GNU Arch::      A quick tla survival guide.
* Using GIT::           GIT is used to handle source code.
* Jenkins builds::      Continuous integration with Jenkins
@end menu

@c ---------------------------------------------------------------------------
@c Designing levels
@c ---------------------------------------------------------------------------

@node Designing levels, Translating, , Hacker's guide
@section Designing levels

@subsection Why is level design so important?

As of @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}, most levels 
have been contributed by players.
While the maintainer of Liquid War 6 has technical knowledge to
develop the game, artistic talent and taste might not be his domain
of excellence 8-)

Therefore contribution are truely welcomed when they take the
form of a new, original, fun and good looking level.
It's believed the levels often make the game much more than
its engine. This is true for any type of game, and Liquid War
is no exception.

So this section is here to help players understand how to
hack existing levels, and create new ones, in the hope that 1) they
can enjoy their own creations and 2) possibly share their work
with others.

Note that this manual might refer to levels and maps: they
are just two different names to describe the very same thing.
It's an alias.

@subsection Format overview

Liquid War 6 stores level information in a plain directory.

There is no such thing as an opaque @code{.dat} binary file.
The name of the level is the name of the directory itself,
and its elements are the files contained in it.

Files must follow a precise naming scheme. For instance
Liquid War 6 expects a @code{map.png} file to be present
in each map directory.

All image files in a level use the
@uref{http://www.w3.org/Graphics/PNG/,Portable Network Graphics}
or @uref{http://www.jpeg.org/,JPEG} format.
It is possible that in the long term, Liquid War 6 will
be able to handle levels as @code{.tar.gz} or @code{.zip}
files. In that case these files will only be a compressed
image of the actual level directory.

See the @code{./map/} directory of the source Liquid War 6
distribution to see example of maps.

@subsection Resolution (map size)

Liquid War 6 does enforce a limit on map size. This is
not to frustrate map designers and/or players, simply, it would
be a lie to pretend the game can handle arbitrary big maps.

They might look great on your computer but will become
unplayable soon on an older machine. And most of the time
they don't look that great, carefully crafted 1280×720
just looks awesome and can represent a great level complexity.

Here are the technical limits:

@multitable @columnfractions .25 .25 .25 .25
     @headitem Type @tab Max width @tab Max height @tab Max surface

     @item Texture
     @tab 3 000
     @tab 2 000
     @tab 6 000 000

     @item Logical map
     @tab 1 500
     @tab 1 000
     @tab 1 000 000

@end multitable

The texture can be somewhat bigger than the logical map, this allows
for pretty levels while limiting the horsepower needed to move
the fighters and animate everything. Note that you could technically
feed the game with a @code{map.png} that is bigger than the logical map
limit, only it will be downscaled when being loaded.

The texture limits are generous enough to accept a full-HD 1920x1080
image, or a 4/3 1600x1200 image, while the ``one million pixels''
logical map limit is enough to store a 16/9 1280x720 map or a 4/3 1024x768.

Keep in mind that the logical map (@code{map.png}) will probably be
scaled whatsoever, even if it's within the absolute limits 
(the game adapts the resolution to your computer speed)
and your texture will rarely appear in its native
resolution, will probably be distorted, and so on.

@subsection Metadata

Older versions of Liquid War 6 used to load a plain @code{README} file
and use this as metadata. Title was take from map directory name. This is
still supported, but it now also supports the addition of a @code{metadata.xml} file
in which you can describe your map.

The following files can be defined:

@itemize
@item
@code{title}: map title, what will appear in the menus
@item
@code{author}: map author
@item
@code{description}: description of the map, to help players when browsing folders
@item
@code{license}: map license (short version, just a simple one-liner, don't use lenghtly copyright
notices here, the @code{README} file would be the file to put long legal sections)
@end itemize

@subsection map.png

This is the only required file in a level.

In fact, the existence of @code{map.png} makes a
directory a level. When checking wether a directory
is a correct level, Liquid War 6 simply tests the
existence and validity of @code{map.png}.

This image is a simple black & white area, where
white zones are the background, the sea, the places
where fighters can move, and black zones are the
foreground, the walls, the places where fighters
can't go.

This informations can be stored in a 2-color indexed
file, or in a grayscaled or even truecolor RGB file,
but color information won't be used. Internally,
Liquid War 6 will read the color of every point. If
it is over 127 on a 0 to 255 scale, it will be considered
as background, if it is below 127, it will be considered
as foreground.

@subsection layer2.png ... layer7.png

Liquid War 6 can handle mutiple layer maps. Think of a pile
of maps, one being on top of the other. This allows you to
create a volume, the game considers every layer has two axis
x and y, and the z axis is to travel through layers. First
layer corresponds to z=0, second layer to z=1, and so on.

Here are the files you can use to define layers:
@itemize
@item
@code{map.png} this one is on top, it's always defined (z=0)
@item
@code{layer2.png} (z=1)
@item
@code{layer3.png} (z=2)
@item
@code{layer4.png} (z=3)
@item
@code{layer5.png} (z=4)
@item
@code{layer6.png} (z=5)
@item
@code{layer7.png} (z=6)
@end itemize

A @code{layerX.png} file should be designed exactly like @code{map.png}.
In fact, @code{map.png} could simply have been called @code{layer1.png}.

Up to 6 extra layers can be defined
(from @code{layer2.png} to @code{layer7.png}).
This is a hardcoded limit.
It allows you to define 7 different layers, including 
the top @code{map.png} layer.
Keep in mind this layer system is not real 3D,
it's more a ``2D and a half''
model. Adding layers can considerably slow down the game, so it's
wise to try and use as few layers as possible. Technically, 3 layers
will allow you to build bridges and tunnels, which is probably
the most usefull construction using layers. Fighters can also
have difficulties navigating through layers so piling up layers
in narrow ``vertical'' z-axis based tunnels is probably not a
great idea.

The @code{ufoot/concept/pass} map of the @code{liquidwar6-extra-maps}
demonstrates basic layer usage.

@subsection texture.png, texture.jpeg and texture-alpha.jpeg

It is possible to define a texture for the map by
putting a @code{texture.png} or @code{texture.jpeg} file.
It does not need to have the
same dimensions as the map itself. Indeed, textures can
be much more precise than the actual logical map.

There's no theorical limit on how big a texture can be, more
precisely, it can be much bigger than any hardware/driver
maximum texture size. In practice, a too big texture will
waste your video card RAM, and slow everything down.
Sizes ranging from 640x480 to 1600x1200 are reasonable
texture sizes.

If you don't define this, the @code{map.png} file will
be used as the texture, and also import colors from
@code{style.xml} if defined.

Note that the shape of the texture defines the shape of the map,
that is, the ratio with which it will appear on the screen.

The PNG alpha layer will be used for transparency.
But to save disk space, it can be convienient to prefer the JPEG
format, use @code{texture.jpeg} instead of @code{texture.png}
 and store the alpha layer in a separated file,
called @code{texture-alpha.jpeg}. This avoids handling heavy
PNG files, PNG compression not being performant on most textures.

In @code{texture-alpha.jpeg}, black is considered opaque,
and white is transparent. Different levels of gray correspond to
different levels of opacity. Previous versions of the game
used the other way of doing things (black is transparent) because
this is technically, the most obvious way to do things. Black is 0
and transparent is 0. But for a human ``reader'' of the map
this does not make sense. One generally expects white to be the
equivalent of ``undrawn'' or ``blank'', well, if it's undecided,
void, transparent, whatever, it's white. When @uref{http://www.gimp.org/, the Gimp}
flattens an image, it becomes white, not black.

So white is transparent. Period.

@subsection glue.png and boost.png

If there's a @code{glue.png} or @code{boost.png} file in the map directory
(you can use one of them or both) then they will be interpreted as follow:

@itemize
@item
on areas where @code{glue.png} and @code{boost.png} are white, nothing special
happens, fighters follow their default behavior
@item
on areas where @code{glue.png} is black, fighters will be slowed down. How
slowish they will be depends on the 'glue-power' parameter. If 'glue-power' is
3 then fighters will move three times slower.
@item
on areas where @code{boost.png} is black, fighters will behave faster. How
fast they will be depends on the 'boost-power' parameter. If 'boost-power' is
2 then fighters will move two times faster.
@item
on areas where @code{glue.png} or @code{boost.png} are gray, they will
be slowed down less or speeded up less depending on how dark the grey is.
@end itemize

There can be, at the same place, some gray or black in both @code{boost.png}
and @code{glue.png}. How this will behave exactly is not really clear at this
stage, the recommendation is not to do this (it does not really make sense
anyway) but if you do it, game won't complain.

It's also wise not to abuse of @code{boost.png} for obviously, a map
filled with ``boosted'' zones at a X10 pace will require much more CPU
than the same map with no such setting. This might fool the automatic
resampling algorithm and lead to maps that are unplayable. The spirit of
@code{boost.png} is just to make a few spots go faster.

It's also important to note that behaving faster or slower means moving
faster or slower but also attacking faster or slower, and, in a general
manner  doing any action with a different pace.

@subsection danger.png and medicine.png

If there's a @code{danger.png} or @code{medicine.png} file in the map directory
(you can use one of them or both) then they will be interpreted as follow:

@itemize
@item
on areas where @code{danger.png} and @code{medicine.png} are white, nothing special
happens, fighters follow their default behavior
@item
on areas where @code{danger.png} is black, fighters die automatically, that is,
they become black and loose health. How dangerous these zones are depends
on the 'danger-power' parameter.
@item
on areas where @code{medicine.png} is black, fighters regenerate faster, they
become bright and shiny as if auto-healing. How efficient this medicine is
depends on the 'medicine-power' parameter.
@item
on areas where @code{danger.png} or @code{medicine.png} are gray, well,
it's in between, the ``danger'' and ``medicine'' effect will be proportional
to the level of gray.
@end itemize

There can be, at the same place, some gray or black in both @code{medicine.png}
and @code{danger.png}. How this will behave exactly is not really clear at this
stage, the recommendation is not to do this (it does not really make sense
anyway) but if you do it, game won't complain.

@subsection one-way-<direction>.png

The four files:

@itemize
@item 
@code{one-way-north.png} (AKA ``up'')
@item 
@code{one-way-east.png} (AKA ``right'')
@item 
@code{one-way-south.png} (AKA ``down'')
@item 
@code{one-way-west.png} (AKA ``left'')
@end itemize

can be used to force the fighters to go in one given direction, on some parts of
the map. If an area is black on one of this meta-layers, then fighters will go
in the given direction. For instance, a black zone in @code{one-way-north} will
make fighters go to the north (AKA ``up'' direction) regardless of the cursor
position. The fact that this is a one-way path is understood by fighters and they
will take this in account when choosing the shortest path to go somewhere.
You can combine vertical and horizontal one-way informations, making diagonal
one-way paths.

@subsection cursor.png and cursor-color.png

By default, a simple cursor will be displayed, but you can use a custom per-map
cursor. Cursors are defined by two 64x64 bitmaps:

@itemize
@item 
@code{cursor.png} is a PNG file, very likely to use transparency, which will
be default be colorized according to the map colors. You can draw it any color,
only greyscale informations will be used. You can keep the original colors if
you really want to by setting @code{colorize-cursor} to false, but the default
is to ignore the hue.
@item 
@code{cursor-color.png} is another PNG file, very likely to use transparency too,
which will always be colorized, replacing white by the team color, and black by the
``dead'' color, which by default is black and is usually a dark color. This colorization
is a way to recognize your cursor and know which team it belongs to.
@end itemize

You can define only one of those bitmaps, if doing so, then the other layer
will be empty, and won't be filled with the default cursor data. Note that additionnally,
a little letter (single character) will be displayed using the team color, so that's 
yet another way to identify which teams the cursor belongs too. The PNG files really
need to be PNG (JPEG won't work) and need to be 64x64, any other size will be ignored.

@subsection rules.xml

@cindex rules.xml

Whereas @code{style.xml} is only about the appearance
of the map, @code{rules.xml} allows the map designer
to change pretty much any parameter.

Ultimately, the player can still ignore these settings
and overide them with its own values, but the idea is:
most game options are only pertinent in a given context.
For instance, on some maps it's interesting to move
slowly, on some other it's interesting to move fast. Some
maps might be playable packed with fighters everywhere,
some other might be much more fun with almost nobody on
them.

The approach in @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}
was to make the options available, but let the player himself
find the right settings for the right map. The consequence is that
no one ever used all those cryptic options in the advanced options
menu, and probably 99% of the players ended up playing with default
settings. This is not that bad, but given the fact that changing
a few parameters one can totally transform the gameplay, it has decided
been that in Liquid War 6, the map designer suggests the right
options that matches his map.

This does not prevent the player from toying with options himself,
he can still do it.

There's also one important point to note: all these options are
technically implemented as integer parameters. We certainly do not
want any float here, since, and it is a Liquid War specific behavior,
the game must be 100,00% predictable and behave the same on every platform.
As there is nothing like exactness when speaking of floats, those are
forbidden here. As for strings, we are dealing here with low-level
internals, and this section is not about telling a story. They
are technical options only. Booleans are implemented with the usual
@code{false = 0} and @code{true = 1} convention. Note that other
config files in Liquid War 6 might rely on floats, strings, and
booleans with conventionnal @code{true} and @code{false} values,
but not this one. @code{rules.xml} is special.

This @code{rules.xml} file is a direct image of the internal
``rules'' structure, so it contains technical, sometimes not very
user-friendly parameters. While hacking @code{rules.xml} directly
is a good way to test things, most of the time, the other file
@code{hints.xml} contains more high-level informations that do
the job the right way. A typicall example is speed.

@xref{Map rules.xml, rules.xml reference}.

@subsection hints.xml

@cindex hints.xml

This parameter is only used by the map loader. The map itself
contains none of these parameters, they are only clues (hints, in fact..)
on ``how to load the map'' which are passed to the loader.

Let's take an example : speed. This @code{rules.xml} file has
a (rather) easy to use ``speed'' parameter, which will do all the job
of finding the right resolution for your map, the right ``rounds-per-sec''
and ``moves-per-round'' parameters, in short, it will set many
other parameters to fit your needs.

As far as the map designer is concerned, @code{rules.xml} and @code{hints.xml}
could have been merged (but so would have @code{style.xml}) but internally
they are very different: @code{rules.xml} contains the real parameters,
the one used by the algorithm whereas @code{hints.xml} contains only instructions
which are used once when loading the map and then disappear. The core algorithm
has no idea of what was in @code{hints.xml}, once it's loaded.

@xref{Map hints.xml, hints.xml reference}.

@subsection style.xml

@cindex style.xml

This is a simple XML file defining various appearance parameters.
It has absolutely no effect on gameplay. These settings can
ultimately be overriden by the player, but the idea is that
if the map designer thinks this level looks better with this
or that option, let him say it in this file.

@xref{Map style.xml, style.xml reference}.

@subsection teams.xml

@cindex teams.xml

In this file one can specify per-map team settings. In short, this
is where you can say how many bots you want, which color, and so on.
This can be on a per-map basis, so that each map has different
customized settings, some maps might be fun with only one bot,
some other maps might be fun packed with 8 opponents.

Technically, @code{teams.xml} will allow you to define up to 
4 players and 9 bots. This is an awfull lot considering there are
only 10 colors. Basically, it's OK to simply define:
@itemize
@item
2 players (@code{player1} and @code{player2})
@item
4 bots (@code{bot1} and @code{bot2})
@end itemize
It might also be a clever idea to just set up @code{player2} and @code{bot1} being
the same color, in case of a conflict the game will pick up another color, but
in practice those two entries often correspond to ``the second player, bot or human,
coming on the battlefield''.

All in all, this represents 5 entries to set up (main player, other player or first bot
which can be the same, then 3 more bots), it's OK to have the rest undefined or set
to defaults.

Note that this can also simply be unset, and in that case the game defaults will
apply, and the user will be able to change them, whereas if you set these up, the
player will somewhat force to used the map settings.

@xref{Map teams.xml, teams.xml reference}.

@subsection Resampling

This is a very important point. Liquid War almost *always* resamples
maps, unless you ask it not to do it. This is not recommended, it is believed
in the general case, letting the internal algorithm make its own decisions
is better than trying to figure out oneself ``which is the best resolution''.

The reason is, the right resolution (we're talking here of the logical resolution,
how many fighters wide is the battlefield) often depends on the speed and
general ressources the of the computer the program is running on. The map
designer does not have this information. The program does. It runs a
bench at startup. So this way it can choose, at runtime, the resolution
which fits best.

The recommended way of doing things is not to try to be too picky about
@code{rules.xml} parameters related to speed and also let the default
map size limits in @code{hints.xml} to their defaults. Do not use them
unless debugging stuff.
Then the program will resample the map so that the player can play
on it at a reasonnable speed.
If map is too big, and it's often the case, then it will downsize it until
there are sufficiently few fighters so that the CPU can handle the job.
This, of course, is not rocket science. The bench calculation is a
somewhat brute-force approach of doing things. Formally, we would have
to run the map for good to figure out what is the right speed. Still,
this bench gives good approximations.

Previous versions of the game relied heavily on 'fighter-scale' to
resample maps, but this is not the case anymore. The 'fighter-scale' is now
a minor parameter which is used to upsize maps if they are too small.
In 99.9% of the cases, the map is first upsized by 'fighter-scale' for
this parameter is by default set low (1.0) then downsized by 'bench-value'
for real-life personnal computers can't handle 1600x1200 maps in real-time.
Not yet.

There are a bazillion options to control map size, including
'min-map-surface'. They are here because it's important that, ultimately,
people can do whatever they want with the game. But for map design, this
is another story. Don't use them. Rely on 'bench-value' and just
care about game speed. This is achieved by changing the ``speed'' parameter.

@subsection Music

It is possible to store your own custom music file within the map directory.
You can call it whatever you want (you can keep its original name, which is
something music authors usually appreciate, even if there's no strong
``attribution'' clause on the license, it can be considered fair use not
to fiddle to much with the name) you just have to place it in the same
directory than the other files like @code{map.png} or @code{texture.jpeg}.

The following formats are known to work with the default 
@uref{http://www.libsdl.org/projects/SDL_mixer/, SDL_mixer} based @code{mod_ogg}
backend:
@itemize
@item
@code{ogg} (@uref{http://www.vorbis.com/, Ogg Vorbis} files)
@item
@code{wav}
@item
@code{midi} (extensions @code{.mid} and @code{.midi} should both work)
@item
@code{mod}, @code{s3m} and @code{xm} files, AKA ``modules''.
@end itemize

To be more precise, here's how things work:
@itemize
@item
step 1: the game tries to find the file @code{music-file} (parameter taken
from @code{style.xml} or defined/overriden by player) in the current map
directory;
step 2: if not found, it will try every path in @code{music-path} to find
this file. This includes the ``system'' music directory with musics that
ship with the game, but also the @code{./music} subfolder in the user
directory;
step 3: if still not found, it will try to play a random file, relying
on @code{music-filter} to ignore some files.
@end itemize

@subsection Experience (``exp'')

In @code{rules.xml} you can set a special parameter which is @code{exp}
and allows you to tell ``a player can't load this map if he doesn't have
at least @code{N} at his/her @code{exp} rating''. Gaining @code{exp} (stands
for ``experience'') isn't hard, you just need to win a level with @code{exp=N}
to gain @code{exp=N+1}.

By default, the player's @code{exp} is 0 and levels default to 1, so this means
only levels with @code{exp} set explicitely to 0 in @code{rules.xml} might be
used. Then player wins that level and is given access to all maps by default,
unless these are explicitely set with @code{exp} greater than 1.

In solo game, when a player wins a level, he's automatically redirected
to the map which is in the same directory and has exactly the @code{exp}
he just gain. For instance, if you win a map with @code{exp=5} then you're
chained to the first map (in alphabetical order) which has @code{exp=6}.
By setting up the @code{exp} parameter the right way, with a map for each
@code{exp} level one can transform a simple map directory in a scenario
that player will automatically follow.

Last, but not least, the game, at startup, only allows you to play
red, green, blue and yellow. Other colors are unlocked as you progress
among levels. Same things with weapons, there are ``liberated'' 
continuously through the game.

This mechanics allows the following behavior:
@itemize
@item
when game is launched first, only a small subset of maps are accessible
@item
after you win one map (sort of quite easy) you gain access to the next level,
plus many of the maps of the @code{extra} package.
@item
after each map you win, you're redirected to the next map, and
regularly, you gain access to new colors/weapons
@end itemize

As a final word, yes, it's possible to cheat, fool the exp system,
but it's believed this is moot and lame.

@c ---------------------------------------------------------------------------
@c Translating
@c ---------------------------------------------------------------------------

@node Translating, Architecture, Designing levels, Hacker's guide
@section Translating

@subsection Using gettext

Liquid War 6 uses @uref{http://www.gnu.org/software/gettext/,GNU gettext} for all
its messages. There's an @uref{http://www.gnu.org/software/gettext/manual/gettext.html, online manual}
about this tool. In practice, what you have to do as a translator is to
edit the @code{po/xx.po} file with @code{xx} being your language / country code.
For instance, to translate the game in French, one needs to edit @code{po/fr.po}.

@subsection Formatted strings

This is very important, you might already be aware of it if you are familiar
with gettext, but still it's worth mentionning : when a string contains special
characters such as @code{%d} or @code{%s} (in a general manner, anything with
a @code{%} it's important that all translations contain exactly the same number
of @code{%d}s and @code{%s}s than the original.

For instance:

@example
"foo has %d bars (%s)"
@end example

can be translated to:

@example
"ziblug zdonc %d zuc - %s - tac"
@end example

The number, order and type of @code{%} entries is preserved. To learn more
about these formats, use @code{info printf} or @code{man 3 printf}. In a
general manner, get informations about @uref{http://en.wikipedia.org/wiki/Printf, printf}.

Additionnally, some strings are used by Scheme (Guile) code and not
by C code. Thus, they don't use the standard C/printf convention.
In these strings, what you must preserve and be aware of is the tilde
character @code{~}. Very often you'll see @code{~a} in a string. As
with the printf @code{%}, you must preserve the number, order and type
of those. There is a complete
@uref{http://www.gnu.org/software/guile/manual/html_node/Formatted-Output.html, online reference}
about this way of formatting strings.

@subsection Partial translation

Liquid War 6 has thousands and thousands of messages which could theorically
be translated. In practise it's counter-productive to spend time to translate
those, as the game is still evolving constantly, and as most of these messages
are technical messages which inform about rare bugs and strange conditions. All sort
of informations which, while valuable, are not intented for end-users and are more
destinated to be reported in bug reports. To select only the interesting messages
to translate, the current gettext configuration only uses a reduced set of files.

@itemize
@item
@code{src/scriptpo.c} : the most important file. It contains the definitions used
by all the Guile code, this is where you'll find all the menu labels.
@item
@code{src/lib/sys/sys-log.c} : log messages and keywords. These are not the log
messages themselves, it only concerns the log engine. One can for instance
replace @code{WARNING} by @code{ATTENTION}.
@item
@code{src/lib/hlp/hlp-credits.c} : the credits, which are
displayed at game startup in the splash screen.
@item
@code{src/lib/lw6-print.c} : contains some messages printed on the console.
@end itemize

As a side note, the file @code{src/lib/hlp/hlp-reference.c} contains all the
entries for the various configuration options, anything that can be queried
by @code{liquidwar6 --about=<keyword>}. This is several hundred messages. It
might be interesting to translate them some day, but it's obviously not a
priority today.

@c ---------------------------------------------------------------------------
@c Architecture
@c ---------------------------------------------------------------------------

@node Architecture, Graphics backends, Translating, Hacker's guide
@section Architecture

@subsection C + Guile

Technically, Liquid War 6 is a collection of C functions
which are exported to Guile. The main binary embeds a Guile interpreter,
which will run a Guile script. This script calls the exported C functions,
and glues them together.

It should be possible to implement the game without using Guile at all,
using C code to make the various modules communicate together. This might
seem an easier way to go, not involving several languages. However, using
this script level is a good way to achieve several important goals:

@itemize
@item
it's possible, at any time, to query the game about its internal state,
dump objects, take actions. That's what the console is about. It's a bit
like having an embedded debugger, it's really a very convenient tool to
develop, make experiments and track problems.
@item
many hacks can be done without recompiling anything at all. Simply edit
a few files with an editor, and your patch is running. Once the binary
base is set up, hacking scripts on top of it is (almost) a piece of cake.
@item
forcing the program to use scripts to transfer informations from a module
to another is a good way to avoid ``spaghetti'' code, when modules cross-use
each other in an uncontrollable way. Of course in some cases, modules 
communicate directly, especially when performance is important. But for
many tasks, it's just very comfortable and safe to have module A send
orders to module B through a high-level script API.
@end itemize

Having Guile to implement high-level stuff also decreases, to some extent,
the need for object-oriented features of C++. The big picture is : low level code
that require speed, optimized data processing, is written in C. Code which
is more high level and requires abstraction is written in scheme.

@subsection Threading and SMP

Liquid War 6 makes a heavy usage of threads. Early versions of the game
did not have this feature but starting with 0.0.7beta, one can really consider
the game is heavily threaded.

There's basically:
@itemize
@item
a thread to handle the main control flow. This thread runs scheme code
which Guile. It's not the most CPU-greedy thread, but when it's stalled,
there's no more interaction between the user and the program.
@item
a thread to handle the display. Depending on rendering options, this thread
can consume lots of CPU cycle. On a single processor/core system, it can be
interesting to lower rendering options in order to gain speed on other
aspects of the game. On a quad-core system, it's probably useless, just
play with all bells and whistles activated.
@item
two threads to run the core algorithm. One maintains the so-called reference
state, the other being dedicated to the draft sate. In a local game there's
no draft state so only one of those two threads is used. There's even a
technical optimization which can be turned on and can theorically use
even more threads and be efficient on very big maps but well, it's rather
untested and still has to prove its real efficiency.
@item
a thread to handle map loading. This one is not active all the time, it's
just here to keep a preemptive interface while loading complex maps.
@item
network code can also fire threads, especially when connecting on remote
systems.
@end itemize

So globally, if you have an SMP system, the game will be happy with it.
It will also run on a single processor, as the program uses POSIX pthreads
it's capable to run on any computer which has pthreads implemented for it.

But, and this is a strong limitation, without pthreads, the game won't run.
At all. Or at least, not unless it's almost completely rewritten.

@subsection Internal libraries

The C code is splitted into several internal libraries. This allow
independant testing of various game modules.

The main module, the most important one, is @code{libker}, (stands for ``kernel'').
This is were the core algorithm is. To some extent, the rest of the code is
just about how to provide this module with the right data and environment.
Logically, if you profle the game, you should find out that a great part
of the CPU time is spent here. Code here is about spreading gradients, moving
fighters and cursors.

The @code{libmap} module is here to handle maps, it contains the code to manipulate
maps in memory. But it does not know how to load them from disk. This is the
responsability of another module, @code{libldr}, which is linked against libraries
such as @uref{http://www.libpng.org/pub/png/libpng.html, libpng} or
@uref{http://www.ijg.org/, libjpeg} and does the job of transforming those
standard formats into a usable in-memory structure. The @code{libgen} module
also works the same way, creating pseudo-random maps. There's still a another
moduled involved in map handling, it's @code{libtsk}, whose job is to load a
level in the background. It has a 2-steps asynchronous loading system which allows
the game to load maps while the user interface is still responsive, and give
a preview of the map as soon as possible, when loading continues in the background,
building optimizing structures which are usefull when playing but not mandatory
just to show the map.

At the other end of the algorithm-chain, the @code{libpil} module will ``pilot''
things. It's this module which will translate text readable orders (typically
adapted for network usage) into function calls. It has event lists, keeps
them in the right order, and will also permanently maintain
three different states of the game. A backup state which can be used any time
to go back in time and get the game in a stable 100% sure state. A reference state which
is correct but ever changing. Basically backup plus all the orders received
between backup and reference gives reference. And finally a draft state which
is as up to date as possible but might be wrong. This is typically interesting
in network game, where we want to show something moving, something fast, even
if there's lag on the network and other computers fail to send information in time. 
In this case we display draft while still keeping reference and updating it
when we finally receive valid informations. Backup would be used to send
bootstrap information when people are joining a new game, or to check up if
things are going right.

A special @code{libbot} module is here to handle bot algorithms. A bot is just
a simple @code{move} function which takes a game state as an input, and returns
an @code{x,y} position, just the way a mouse handler would. How complex a 
bot is ``under the hood'' depends on the type of bot. Current bots are really
basic. Additionnally, @code{libsim} will run dummy fight simulations to find
out wether some team has a real advantage on another one, speaking of team
profiles depending on colors.

The @code{libgfx} module handles all the graphics stuff. It is itself splitted
in several sub-modules, that is, it does not do anything but load a module
such as @code{mod-gl1} which will actually contain the implementation. In an
object-oriented language, it would be an abstract class, an inteface. The
implementation does not need to be thread-safe. It's better if it is, for
theorically it could be possible to fire Liquid War 6 with two display
backends running at the same time on the same game instance, but this code
has yet to be written, and it's a rare dual headed configuration which
probably has no real-life usage. If only one graphics backend is activated
at a time, the rest of the implementation garantees there will never
be two concurrent calls to a function is this module. It is the
@code{libdsp} (``display'') which handles this. It fires a thread for
rendering purposes, and sends information to this thread, detecting
automatically if it's necessary to acquire a mutex and update rendering
informations. For the caller, this is transparent, one just has to
call an update function from time to time. The module will even perform
``dirty-reads'' on a game state being calculated, to render things
in real time, as soon as possible.

An experimental @code{libvox} module is under design/development and
might, in the future, provide a real-time voxel renderer. Still pre-alpha
stage.

To ease up the implementation of different graphics backends, a @code{libgui}
module contains code which is meant to be used by any graphics backend.
It's just a factorisation module, containing common code and interfaces,
related to displaying things. This is where, for instance, one can find
a high level menu object. In the same spirit, @code{libmat} contains
generic math, vector and matrix code, which is commonly used in 3D interfaces.

The @code{libsnd} module handles sound. It's also an abstract class, an interface,
which uses dynamic backends as implementations.

The @code{libnet} module is a wrapper over different network APIs, it
handles Winsock and POSIX sockets in a uniform manner. 
The @code{libcli} and @code{libsrv} contain network client and server code,
implementing the various protocols in dynamically loadable sub-modules.
It's the role of @code{libp2p} to glue this together, handle the list
of available servers, the message queue, verifying nobody is cheating,
and so on. All this modules share information about current game
state using code & structures defined in @code{libnod},use message
utilities (format, parse) defined in @code{libmsg} and share code concerning connections in @code{libcnx}. Additionnally, @code{libdat}
provides facilities to store old network messages and sort them.

The @code{libsys} module contains most system and convenience functions, it handles
logs, type conversions, timer, memory allocation, it's the fundamental
module every other module depends on. It has a compation @code{libglb}
module with all the @uref{http://www.gnu.org/software/gnulib/,Gnulib} shared code.

The @code{libhlp} is used to handle keywords and internal self-documentation
(this is what is used by @code{--list} and @code{--about}), @code{libcfg}
knows how to read and save config files,  @code{libcns} handles the console,
and @code{libdyn} can load @code{.so} shared files dynamically.

To glue all this, there are some Guile bindings with helper functions
available in @code{libscm} which fills two needs, one being an easy way
to check if Guile linking is working correctly without requiring all other
modules to be available, and also performing automatic checks on some actions
such as registering or executing a function.

Finally there are small modules like @code{libimg} (to make screenshots of the game)
which 
have been separated because they required special libraries to link with
and/or did not really fit in existing modules for dependencies reasons.

So well, this is a lot of modules. The list might move a bit, but the
big picture is here. Each module is testable separately.

Below is a @uref{http://www.graphviz.org/, Graphviz} diagram, which shows
the modules dependencies.

@ifhtml
@image{deps,,,Diagram showing modules and libraries dependencies}
@end ifhtml

@iftex
@image{deps,17cm,,Diagram showing modules and libraries dependencies}
@end iftex

@section Memory structures

The most important memory structures in Liquid War 6 are:

@itemize
@item
map (@code{lw6map_level_t}) : this contain the map immutable informations.
This is what resides in memory after a map has been loaded from the disk.
It contains all the various @code{.png} and @code{.jpeg} files stored
as pixel arrays, resampled if need, and also contains the various map
attributes. Once this structure is ready, the game is capable of displaying
the map on the screen, but it can not do anything with it yet.
@item
game_struct (@code{lw6ker_game_struct_t}) : this one contains the same informations
as the previous structure, only the information has been post-treated so that it's
ready for use by the core algorithm. It will, for instance, contain the famous
mesh structure, which groups squares by packets of 1, 4, 16, 64 or more. The reason
it's been separated from the level is that operations such as creating the mesh
might require a lot of time. So to allow players to see the level while black magic
is still running in the background, it was required to make a difference between
what is required to view the map (``level'') and what is required to play on
it (``game_struct'').
@item
game_state (@code{lw6ker_game_state_t}) : contains all the variable, ever
changing game data. This is where the position of fighters is stored, their
health, and such things. It is designed to be synchronizable by using mostly
simple calls to @code{memcpy}. It heavily relies on the previous structures,
the idea is that one can have several ``game_state'' plugged on a 
single ``game_struct''.
@end itemize

All these structures are defined in the @code{ker/ker.h} header.

@section 100% predictable algorithm

The core Liquid War 6 algorithm is 100% predictable, that is to say, given
the same input, it will produce the same results, on any computer. Previous
versions of the game also had this property. This is very important for network
games, since in a network only informations such as ``cursor A is at position x,y''
are transmitted. Every node maintains its own internal game state, so it's very
important that every node comes with the same output given the same input.

For this reason Liquid War 6 never uses floating point numbers for its core
algorithm, it uses fixed point numbers instead. It also never relies on a
real ``random'' function but fakes random behavior by using predictable
pseudo-random sources, implementation independant, such as checksums, or modulos.

There are also some optimizations which are not possible because of
the predictability requirement, for instance one can not spread a gradient
and move the fighters in concurrent threads, or move fighters from different
teams in different threads.

If you read the code, you'll find lots of checksums here and there, a global
checksum not being enough for you never know where the problem happened.
The test suite uses those facilities to garantee that the game will run
the same on any platform.

Not being able to rely on a predictable algorithm would require to send
whole game states on the network, and this is certainly way too much data
to transmit. A moderate 200x200 map has a memory footprint of possibly
several megabytes, so serializing this and sending it to multiple computers
at a fast-paced rate is very hard, if possible at all, even with a high
bandwidth. We're talking about Internet play here.

@c ---------------------------------------------------------------------------
@c Graphics backends
@c ---------------------------------------------------------------------------

@node Graphics backends, Core algorithm, Architecture, Hacker's guide
@section Graphics backends

@subsection Modularity

Liquid War 6 has a modular architecture which allows the programmer
(and the player) to plug pretty much any rendering/graphics backend,
provided this one is... developped.

As of 2009 the only available backend was  @code{mod-gl1}, it would
display the game using 3D acceleration, if available, through the
@uref{http://www.libsdl.org/,SDL} library, using its GL bindings.

As of 2012, other backends are begin developped, the idea is that
each backend can provide the user with enough visual feedback to
play, and convey input informations to the core engine.

The rest of the game is exactly the same, this means playing with
@code{mod-gl1} you can do exactly the same things than with @code{mod-caca}.

@subsection List of backends

@itemize
@item mod-gl1

Liquid War 6 has a modular architecture which allows the programmer
(and the player) to plug pretty much any rendering/graphics backend,
provided this one is... developped.

As of 2009 the only available backend is still @code{mod-gl1}, it will
display the game using 3D acceleration, if available, through the
@uref{http://www.libsdl.org/,SDL} library, using its GL bindings.

Additionnally, versions available for Microsoft Windows and Mac OS X will
probably never any other backends available. For technical reasons, those
platforms do not have the flexibility of GNU/Linux and do not allow
graphical libraries to be loaded dynamically. In practice, both of them
require hacks that override the standard @code{main} function. Microsoft Windows
has its @code{WinMain} instead, and Mac OS X is even more pedantic,
requiring graphical functions to be executed in the main thread.
So @code{mod-gl1} is just linked statically in those versions, and
the modularity of the game is purely theorical on these platforms.

This @code{mod-gl1} module is really one of the key stones of
Liquid War 6, and if you want to change graphical things, it's definitely
the place to hack on. The source is in @code{src/lib/gfx/mod-gl1}.

The @code{mod-gl1} backend requires ``moderate'' hardware, but it
still does require hardware acceleration. Pure software rendering
through @uref{http://www.mesa3d.org/, mesa} for instance, won't
be enough.

So if you're running Xorg on GNU/Linux and there's a DRI driver 
for your card, the game should run fine.

On the programmer side, the counterpart is that one should not rely
on fancy OpenGL features. Textures have a maximum size of 512x512
for instance. Of course some maps are bigger than this but this
means that internally, @code{mod-gl1} splits them into smaller tiles,
and displays those tiles one by one.

Inside the @code{mod-gl1} backend, the @code{src/lib/gfx/mod-gl1/gl-utils}
directory contains lots of common structures, factorized functions which
can (and should, if appliable) be used.

@item mod-gles2

This is under development, the idea is to provide an alternative
renderer based on OpenGL ES 2, which could be used on standard computers
but also on mobile platforms.

Work in progress, don't hold your breath.

@item mod-soft

This is under development, the idea is to provide a very basic
rendered which can be compiled pretty much anywhere as long as SDL
is available, since it does use software rendering only.

Work in progress, don't hold your breath.

@item mod-caca

This is under heavy development, the idea is to provide a basic
yet surprising alternative text-based renderer, using libcaca.

@end itemize

@subsection How to write a new backend

The starting point for any hack are the files @code{src/lib/gfx/gfx.h}.
This is where the API is defined.

Basically, the type @code{lw6gfx_backend_t} contains all the required
callbacks. You must provide an implementation for each function.

Let's take an example, taken from @code{mod-gl1}. When calling
@code{lw6gfx_get_video_mode} and passing it a first argument which
is a valid @code{mod-gl1} backend, the function
@code{mod_gl1_utils_get_video_mode} will be called. How this is done
is a little C casting wizardry.

To understand how this works, read the files:

@itemize
@item
@code{src/lib/gfx/gfx-api.c}: contains all the functions which
are part of the API and can be called elsewhere in the code.
@item
@code{src/lib/gfx/gfx-register.c}: contains the code that allows
a module to be loaded/unloaded at runtime. Will act differently
if the games is compile with the @code{--allinone} flag, but
for the caller this is transparent, just create and destroy 
backend, period.
@item
@code{src/lib/gfx/mod-gl1/mod-gl1-backend.c}: this is where the
module actually binds its internal functions with the callbacks
defined in the @code{lw6gfx_backend_s} struct. None of these
internal functions should be called directly, code in
@code{libdsp} for instance should only refer to the @code{lw6gfx_...}
bindings. Reading the code in @code{src/lib/gfx/gfx-test.c}
shows how these functions can be called, and in which order.
@end itemize

All the functions should be defined, but some of them are
obviously more important. The two most critical functions are:

@itemize
@item
@code{pump_events}
This is used to process inputs. The function should update
a @code{lw6gui_input_s} struct and return it to the caller.
How this done is really up to the backend, it happens that
all SDL based backends (@code{mod-gl1}, @code{mod-gles2} and @code{mod-soft})
share the same code for this, but another backend could
do this differently, there's no real need to use SDL.

Only, the returned input should behave correctly when queried
with function from @code{libgui}. As a consequence, one needs
to have a look at @code{libgui} to understand how input works.
A look at @code{src/lib/gfx/shared-sdl/shared-sdl-event.c} is a good example
of this, as this file contains the implementation for SDL-based input.

@xref{libgfx, libgfx reference}.
@xref{libgui, libgui reference}.

@item
@code{display}
By far the most complicated function, this one is called
on each display loop to render the game. It's always used in the
same thread, so need not be reentrant,
and on some platforms (eg Mac OS X) it will even be 
called in the main thread (this can be of some importance regarding
some libraries such as SDL).

Still, beware, the @code{game_state} object it uses can change
on the fly while rendering. In that case ``changing'' means that
fighters can move and gradients be updated but the global structure
won't change. So any pointer on a fighter will still be valid after
it's been obtained, but the renderer should not expect the game
to be static. In practice this is not really a problem. If you are
curious, you can look in @code{libdsp} how and when this function
is called.

A very important parameter is @code{mask}, depending on its value,
the backend should, or not, display the menu, or the map, or both, etc.
The reference for this are the @code{LW6GUI_DISPLAY_...} constants
in @code{src/lib/gui/gui.h}.

As a starting point, implementing menu display before anything
else is probably the best bet, since without menus it's hard to
do anything within the game.

To test out a backend, one can either launch the full game using
the ``under development'' backend, or launch the test suite by
typing @code{./liquidwar6gfx-test 1} in @code{./src/lib/gfx}.

@xref{libdsp, libdsp reference}.

@end itemize

@c ---------------------------------------------------------------------------
@c Core algorithm
@c ---------------------------------------------------------------------------

@node Core algorithm, Compilation tips, Graphics backends, Hacker's guide
@section Core algorithm

@subsection Introduction

Since @uref{http://ufoot.org/liquidwar/v5/techinfo/algorithm, Liquid War 3} the algorithm
to power Liquid War is pretty much unchanged, at least, there has been no revolution,
the basic principles remain the same. This has been 
@uref{http://ufoot.org/liquidwar/v5/techinfo/algorithm, explained in Liquid War 5 doc},
but is repeated here, along with the specific Liquid War 6 stuff.

The very important things to remember are:
@itemize
@item
The algorithm is 100.00% predictable. This means given the same input,
it will give exactly the same output. This is very important for the
network games to work correctly, therefore, the algorithm does not ever
use any call to @code{rand} / @code{random} functions, it also does not use
any float value either, since different type of processors/contexts might give slightly different
results because of rounding problems.
@item
It's a two-pass algorithm, the first step is to calculate the distance from any
point of the map to the closest cursor. This step is always imperfect, the shortest
path is never really found, the naive approach is to consider that if a place on the map
is at distance @code{N} of the cursor, then in the worst case, all adjacent places are at distance @code{N+1}.
As of Liquid War 6, the corresponding code is in @code{src/lib/ker/ker-spread.c}. The second
step is to move the fighters, make them act. In Liquid War 6, the corresponding code is in
@code{src/lib/ker/ker-move.c}. One can have a look at the code source for the
function @code{lw6ker_game_state_do_round} in @code{src/lib/ker/ker-gamestate.c} to see
how these are called.
@end itemize

@subsection Level, game struct, game state and pilot

Most of the algorithm code has something to do with the following types (which are structs):

@itemize
@item
@code{lw6map_level_t} defined in  which is used to store the level data.
@item
@code{lw6ker_game_struct_t} defined in @code{src/lib/map/map.h} which is used to store the memory data required by the
algorithm, but which are immutable. There's a difference between those data and the ones stored in the level
struct. For instance, those data are ``private'' since @code{lw6ker_game_struct_t} is opaque, while
everything is @code{lw6map_level_t} is ``public''. Also, data in @code{lw6ker_game_struct_t} might be
highly redundant for performance issues and is optimized for speed while data in @code{lw6map_level_t} is
just plain data and won't change if the algorithm is updated.
@item
@code{lw6ker_game_state_t} defined in @code{src/lib/ker/ker.h} which is used to store the level data required by the
algorithm, and which changes during the game. This is typically where an information such as ``there's a red
fighter in slot (3,23,1)'' will be stored.
@item
@code{lw6pil_pilot_t} defined in @code{src/lib/pil/pil.h} which is used to handle all the threading issues. It keeps
a track of 3 game states. A ``reference'' state which is the state of the game considering all input has been received
from the network, and is validated. A ``draft'' state which might be anticipated and updated ``as if the
players we did not get input from did not move there cursors''. This can give the illusion that the game
is running smoothly while in reality input from other players on the network is choppy. In a local game,
``draft'' and ``reference'' are equivalent, since there's no doubt about what's on the network. And finally,
a ``backup'' state which can be pulled in case of a serious flaw and is a good way to solve the ``hey, someone
untrusted is throwing garbage on the net''. One can always pull a backup. 
@end itemize

Most of the time, hacking on the algorithm, changing the gameplay, does not require
to touch anything but the code in @code{src/lib/ker}.

See @xref{libmap}.
See @xref{libker}.
See @xref{libpil}.

@subsection Getting informations about where fighters are

One of the key functions is @code{lw6ker_game_state_get_fighter_id}, which will return
the id of a fighter at a given position.
Then its companion function @code{lw6ker_game_state_get_fighter_by_id} can be called,
it will return a @code{lw6ker_fighter_t}, which contains the real data.

The type @code{lw6ker_fighter_t} is not opaque and can be freely accessed by the caller,
which, typically, is a graphics backend trying to display informations. Try and grep
for the string ``lw6ker_game_state_get_fighter_id'' withing the @code{src/lib/gfx} source tree
for examples.

One thing that is very important when hacking on @code{libker}: you should always
leave the @code{lw6ker_game_state_t} struct in a state that is compatible with a
correct usage of public ``getters'' in @code{src/lib/ker/ker.h}. The reason is that
this code can be executed by separate threads, more precisely, in ``dirty read'' mode,
the rendering thread will try and display a ``game state'' while this very ``game state'' is
being updated by another thread.

@c ---------------------------------------------------------------------------
@c Compilation tips
@c ---------------------------------------------------------------------------

@node Compilation tips, Coding guidelines, Core algorithm, Hacker's guide
@section Compilation tips

@subsection Advanced ./configure options

In addition to all the common
@uref{http://www.gnu.org/software/autoconf/, Autoconf} switches
such as @code{--prefix}, Liquid War 6 has some custom switches:

@itemize
@item
@code{--disable-console}: allows you to turn on/off console support.
Normally this is detected automatically but in case you really want
to disable it on platforms which support it, you can. This will cause
the program no to link against @code{libreadline}, among other things.
@item
@code{--disable-gtk}: allows you to turn on/off gtk support.
Normally this is detected automatically but in case you really want
to disable it on platforms which support it, you can. This will cause
the program not to link against GTK libs.
@item
@code{--disable-cunit}: allows you to turn on/off 
@uref{http://cunit.sourceforge.net/, CUnit}
support.
Normally this is detected automatically but in case you really want
to disable it on platforms which support it, you can. This will cause
the program not to link against CUnit libs.
@item
@code{--enable-optimize}: will turn on optimizations. This will
turn on compiler options such as @code{-fomit-frame-pointer}
but also disable some code in the program. Indeed, most of
the advanced memory checking in the game - which ensures it
does not leak - will be turned of. This will certainly speed up
things, however, it's not recommended to turn this on until
program is not stable enough so that memory leaks and other
problems can be declared 'impossible'. Turn this on if you
really have some speed problem, otherwise it's safer to use
the full-featured 'slow' version of the game.
@item
@code{--enable-paranoid}: will turn on very picky and pedantic
checks in the code, try this when you suspect a serious memory
bug, a race condition whatsoever, and want to track it down.
Useless for players.
@item
@code{--enable-headless}: will allow compilation without any
graphics backend. The game is unplayable in that state but one
can still wish to compile what is compilable, for testing purposes.
@item
@code{--enable-silent}: will allow compilation without any
sound backend. The game won't play any music in that state but one
can still wish to compile what is compilable, for testing purposes.
@item
@code{--enable-allinone}: will stuff all the internal libraries
into one big executable.
Very convenient for profiling. The major drawback is that
you need to have all the optional libraries installed
to compile all the optional modules. Another side effect is that
with this option there's no more dynamic loading of binary modules,
so if your platform has a strange or buggy support for @code{.so}
files, this option can help.
@item
@code{--enable-fullstatic}: will build a totally static
binary, that is using the @code{--static} option
for @code{gcc} and the @code{-all-static} option
for @code{libtool}. Currently broken, this option could
in the future allow for building binaries that run
pretty much everywhere, without requiring any dependency
but a Kernel.
@item
@code{--enable-gprof}: will enable profiling informations.
This will activate @code{--enable-allinone}, else you would
only track the time spent in functions
in the main @code{liquidwar6} executable, and exclude lots
of interesting code contained in dynamic libraries.
@item
@code{--enable-instrument}: will instrument functions for
profiling. This will turn on the @code{-finstrument-functions}
switch when compiling, so that the hooks 
@code{__cyg_profile_func_enter} and @code{__cyg_profile_func_exit}
are called automatically. Then you can link against tools like
@uref{http://cprof.sourceforge.net/, cprof} or
@uref{http://sourceforge.net/projects/fnccheck/, FunctionCheck}.
@item
@code{--enable-profiler}: will enable 
@uref{http://code.google.com/p/google-perftools/, Google Performance Tools}
support. Basically, this means linking against @code{libtcmalloc}
and @code{libprofiler}. You could activate those by using
@code{LD_PRELOAD} or by using your own @code{LDFLAGS} but
using this option will also make the game tell you if
@code{CPUPROFILE} or @code{HEAPPROFILE} are set
when it starts. The @code{pprof -gv} output is very handy.
Note that on some systems @code{pprof} is renamed @code{google-pprof}.
@item
@code{--enable-gcov}: will enable coverage informations,
to use with @uref{http://gcc.gnu.org/onlinedocs/gcc/Gcov.html,gcov}
and @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov}.
This is for developpers only. It will activate @code{--enable-allinone},
else there would be some link errors when opening dynamic libraries.
The obtained information is available online:
@uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/, coverage}.
and
@uref{http://www.ufoot.org/liquidwar/v6/doc/global/, GNU global}.
@item
@code{--enable-valgrind}: will enable some @code{CFLAGS}
options which are suitable for the use of
@uref{http://www.valgrind.org/,Valgrind}, to track
down memory leaks and other common programming errors.
Use for debugging only, usually together with
@code{--enable-allinone}.
@end itemize

@subsection Debian packages

Liquid War 6 does have a @code{./debian} in both main and extra maps packages,
so it's ``debianized''.
To build the main @code{.deb} package, untar the main source tarball, then:

@verbatim
make dist
cd pkg
cp ../liquidwar6-X.Y.Z.tar.gz . # X.Y.Z is the version
make deb
@end verbatim  

Note that you have to copy the source tarball to @code{./pkg} and move
to this directory before typing @code{make deb}. This is, among other things,
to simplify the main @code{Makefile}.

To build the extra maps @code{.deb} package, untar the extra maps tarball, then:

@verbatim
make deb
@end verbatim

@subsection Red Hat packages

Liquid War 6 does have a @code{.spec} files in both main and extra maps packages.
To build the main @code{.rpm} package, untar the main source tarball, then:

@verbatim
make dist
cd pkg
cp ../liquidwar6-X.Y.Z.tar.gz . # X.Y.Z is the version
make rpm
@end verbatim  

Note that you have to copy the source tarball to @code{./pkg} and move
to this directory before typing @code{make rpm}. This is, among other things,
to simplify the main @code{Makefile}.

To build the extra maps @code{.rpm} package, untar the extra maps tarball, then:

@verbatim
make rpm
@end verbatim

@subsection Microsoft Windows msys/mingw32 port

@cindex Microsoft Windows
@cindex Compilation

This section describes how to compile the game from source under 
Microsoft Windows. Note that players are encouraged to use a free
system such as GNU/Linux, which is the platform Liquid War 6 is
being hacked on by default. If you encounter problems with this
port, you'll probably save time by installing a double-boot with
GNU/Linux coexisting with your previous Microsoft Windows install.

Basically, Liquid War 6 requires
@uref{http://www.mingw.org/,MinGW}.
More precisely, it requires @uref{http://www.mingw.org/msys.shtml,MSYS}.
A standard @uref{http://www.cygwin.com/,Cygwin} installation won't
work, because it is too UNIXish to allow third party libraries
like @uref{http://www.libsdl.org/,SDL} to compile natively.
You might argue that SDL is available for Cygwin, but in reality,
the Cygwin port of SDL is a MinGW port. Indeed, Cygwin brings
all standard POSIX functions including the use of @code{main}
instead of @code{WinMain} and I suspect this is a problem for
graphical libraries like SDL which do require some sort of direct
access to the OS low-level functions. Therefore, MinGW is more
adapted for it does not define all these functions, and
allows any library to hook on Microsoft Windows internals directly.
Point is then, you also loose the cool effect of Cygwin which
is to have a complete @uref{http://www.gnu.org/software/libc,glibc}
available,
including network functions like @code{select} defined the
POSIX way, and not the WinSock way. If you ever ported code from
POSIX sockets to WinSock 2, you know what I mean. Using MinGW
is also embarassing for some libraries won't compile easily, and
for instance programs which heavily rely on a real @code{TTY}
interface to work are usually hard to port. This includes
@uref{http://www.gnu.org/software/ncurses/, ncurses}
and
@uref{http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html, GNU readline}.
Liquid War 6 tries to have workarrounds for all this, and in
some cases the workarround is simply that embarassing code
is not compiled on Microsoft Windows. For this reason, some
features are not available on this platform. Period.

Now the reason you need MSYS and not only MinGW is that MSYS
will allow @code{./configure} scripts to run, and this eases
up the porting process a lot. MinGW and MSYS packages are
downloadable on the
@uref{http://sourceforge.net/project/showfiles.php?group_id=2435, SourceForge MinGW download page}. Alternatively, there is a
@uref{http://www.ufoot.org/download/liquidwar/v6/mingw32/pkg/, mirror on ufoot.org},
but files might be outdated.

To compile Liquid War 6, first download and unzip all the
following files in
the same directory, for instance @code{C:\MSYS}.
If you do not have any tool to handle @code{.tar.gz} and @code{.tar.bz2}
files under Microsoft Windows, which is likely to be the case
when MSYS is not installed yet, you can untar these on any GNU/Linux box,
then upload the whole directory to the target Windows host.

@itemize
@item autoconf2.5-2.61-1-bin.tar.bz2
@item autoconf-4-1-bin.tar.bz2
@item autogen-5.9.2-MSYS-1.0.11-1-bin.tar.gz
@item autogen-5.9.2-MSYS-1.0.11-1-dev.tar.gz
@item autogen-5.9.2-MSYS-1.0.11-1-dll25.tar.gz
@item automake1.10-1.10-1-bin.tar.bz2
@item automake-3-1-bin.tar.bz2
@item bash-3.1-MSYS-1.0.11-1.tar.bz2
@item binutils-2.18.50-20080109-2.tar.gz
@item bison-2.3-MSYS-1.0.11-1.tar.bz2
@item coreutils-5.97-MSYS-1.0.11-snapshot.tar.bz2
@item crypt-1.1-1-MSYS-1.0.11-1.tar.bz2
@item csmake-3.81-MSYS-1.0.11-2.tar.bz2
@item cvs-1.11.22-MSYS-1.0.11-1-bin.tar.gz
@item diffutils-2.8.7-MSYS-1.0.11-1.tar.bz2
@item findutils-4.3-MSYS-1.0.11-1.tar.bz2
@item flex-2.5.33-MSYS-1.0.11-1.tar.bz2
@item gawk-3.1.5-MSYS-1.0.11-1.tar.bz2
@item gcc-core-3.4.5-20060117-3.tar.gz
@item gcc-g++-3.4.5-20060117-3.tar.gz
@item gcc-g77-3.4.5-20060117-3.tar.gz
@item gcc-objc-3.4.5-20060117-3.tar.gz
@item gdb-6.8-mingw-3.tar.bz2
@item gdbm-1.8.3-MSYS-1.0.11-1.tar.bz2
@item gettext-0.16.1-1-bin.tar.bz2
@item gettext-0.16.1-1-dll.tar.bz2
@item gettext-0.16.1-MSYS-1.0.11-1.tar.bz2
@item gettext-devel-0.16.1-MSYS-1.0.11-1.tar.bz2
@item inetutils-1.3.2-40-MSYS-1.0.11-2-bin.tar.gz
@item libiconv-1.11-1-bin.tar.bz2
@item libiconv-1.11-1-dll.tar.bz2
@item libiconv-1.11-MSYS-1.0.11-1.tar.bz2
@item libtool1.5-1.5.25a-1-bin.tar.bz2
@item libtool1.5-1.5.25a-1-dll.tar.bz2
@item libtool1.5-1.5.25a-20070701-MSYS-1.0.11-1.tar.bz2
@item lndir-6.8.1.0-MSYS-1.0.11-1.tar.bz2
@item lpr-1.0.1-MSYS.tar.gz
@item lzma-4.43-MSYS-1.0.11-1-bin.tar.gz
@item make-3.81-MSYS-1.0.11-2.tar.bz2
@item mingw-runtime-3.14.tar.gz
@item mingw-utils-0.3.tar.gz
@item minires-1.01-1-MSYS-1.0.11-1.tar.bz2
@item MSYS-1.0.11-20071204.tar.bz2
@item msysCORE-1.0.11-2007.01.19-1.tar.bz2
@item openssh-4.7p1-MSYS-1.0.11-1-bin.tar.gz
@item openssl-0.9.8g-1-MSYS-1.0.11-2-bin.tar.gz
@item openssl-0.9.8g-1-MSYS-1.0.11-2-dev.tar.gz
@item openssl-0.9.8g-1-MSYS-1.0.11-2-dll098.tar.gz
@item perl-5.6.1-MSYS-1.0.11-1.tar.bz2
@item perl-man-5.6.1-MSYS-1.0.11-1.tar.bz2
@item regex-0.12-MSYS-1.0.11-1.tar.bz2
@item tar-1.19.90-MSYS-1.0.11-1-bin.tar.gz
@item texinfo-4.11-MSYS-1.0.11-1.tar.bz2
@item vim-7.1-MSYS-1.0.11-1-bin.tar.gz
@item w32api-3.11.tar.gz
@item zlib-1.2.3-MSYS-1.0.11-1.tar.bz2
@end itemize

This file list might contain file which are not absolutely mandatory
for Liquid War 6, for instance the Fortran 77 compiler is absolutely
useless, but installing it won't harm either. Some packages might
unzip things the right way, but some do it in a subfolder. You might
need to run commands like:

@example
cp -r coreutils*/* .
rm -rf coreutils*
@end example

Get rid of useless files:
@example
rm ._.DS_Store .DS_Store 
@end example

It's also mandatory to move everything that has been installed in
@code{/usr} or @code{/usr/local} to @code{/} since MSYS has some
builtin wizardry which maps @code{/usr} on @code{/}.
You need to do this if you don't unzip files from a MinGW shell,
which is obviously the case when you first install it. Usefull command
can be:

@example
mv usr/* .
rmdir usr
@end example

Next, @code{libintl} is not correctly handled/detected by LW6,
and can raise an error like 
@code{"gcc.exe: C:/msys/local/lib/.libs/libintl.dll.a: No such file or directory"}
so one needs to copy some libraries in @code{/usr/local/lib/.libs/}:

@example
mkdir local/lib/.libs
cp local/lib/libintl.* local/lib/.libs/
@end example

Another step is to edit @code{/etc/profile} and add lines like:

@example
export CFLAGS="-g -I/usr/local/include"
export LDFLAGS="-L/usr/local/lib"
export GUILE_LOAD_PATH="C:\\MSYS\\local\\share\\guile\\1.8\\"
@end example

Close and re-launch your msys shell (rxvt) so that these changes take effect.
Check that those values are correctly set:

@example
env | grep FLAGS
env | grep GUILE
@end example

Finally, your MSYS environment is (hopefully...) working.

Now you need to compile the following programs, from source.
Files are @uref{http://www.ufoot.org/download/liquidwar/v6/mingw32/src/, mirrored on ufoot.org} for your convenience, however these might be outdated.
Still, there are known to work.
Proceed like if you were under a POSIX system.
Some packages use the @code{--disable-rpath} swith, there are various
reasons for which @uref{http://wiki.debian.org/RpathIssue, rpath is an issue}.
In the same manner, @code{--disable-nls} when linking against @code{libintl}
or @code{libiconv} was painful.

@itemize
@item
@uref{http://sourceware.org/pthreads-win32/, pthreads-win32},
untar pthreads-w32-2-8-0-release.tar.gz
then @code{make clean GC; cp pthread.h sched.h /usr/local/include/; cp pthreadGC2.dll /usr/local/bin/; cp libpthreadGC2.a /usr/local/lib/}
@item
@uref{http://gmplib.org/, GNU MP},
untar @code{gmp-4.2.2.tar.gz}
then @code{./configure && make && make install}
@item
@uref{http://www.gnu.org/software/guile/, Guile},
untar @code{guile-1.8.5.tar.gz}.
Edit @code{libguile/guile.c}
and insert  @code{#undef SCM_IMPORT}
just before @code{#include <libguile.h>}.
Edit @code{./libguile/threads.c} and place @code{struct timespec @{ long tv_sec; long tv_nsec; @};} just before @code{#include "libguile/_scm.h"}.
Then @code{./configure --disable-nls --disable-rpath --disable-error-on-warning --without-threads && make && make install}. The @code{GUILE_LOAD_PATH} value must be correctly
set for @code{guile-config} to work. For unknown reasons, running @code{guile}
can throw a stack overflow error. Don't panic.
See @uref{https://sourceforge.net/tracker/?func=detail&atid=102435&aid=2007506&group_id=2435, bug 2007506 on SourceForge.net} for an explanation on
why the Guile binary shipped with MSYS is not suitable for Liquid War 6.
@item
@uref{http://www.libexpat.org/, expat},
untar @code{expat-2.0.1.tar.gz}
then @code{./configure && make && make install}
@item
@uref{http://www.sqlite.org/, SQLite},
untar @code{sqlite-amalgamation-3.5.9.tar.gz}
then @code{./configure && make && make install}
@item
@uref{http://www.libpng.org/pub/png/libpng.html, libpng},
untar @code{libpng-1.2.29.tar.gz}
then @code{./configure && make && make install}
@item
@uref{http://www.ijg.org/, libjpeg},
untar @code{jpegsrc.v6b.tar.gz}
then @code{./configure && make && make install && make install-lib}
@item
@uref{http://curl.haxx.se/libcurl/, libcURL},
untar @code{curl-7.18.1.tar.gz}
then @code{./configure --without-ssl && make && make install}
@item
@uref{http://freetype.sourceforge.net/, FreeType 2},
untar @code{freetype-2.3.5.tar.gz}
then @code{./configure && make && make install}
@item
@uref{http://www.xiph.org/, libogg},
untar @code{libogg-1.1.3.tar.gz}
then @code{./configure && make && make install}
@item
@uref{http://www.xiph.org/, libvorbis},
untar @code{libvorbis-1.2.0.tar.gz}
then @code{LDFLAGS="$LDFLAGS -logg" && ./configure && make && make install}
@item
@uref{http://www.libsdl.org/, SDL},
untar @code{SDL-1.2.13.tar.gz}
then @code{./configure && make && make install}
@item
@uref{http://www.libsdl.org/projects/SDL_image/, SDL_image},
untar @code{SDL_image-1.2.6.tar.gz}
then @code{./configure && make && make install}
@item
@uref{http://www.libsdl.org/projects/SDL_mixer/, SDL_mixer},
untar @code{SDL_mixer-1.2.8.tar.gz}
then @code{./configure && make && make install}
@item
@uref{http://www.libsdl.org/projects/SDL_ttf/, SDL_ttf},
untar @code{SDL_ttf-2.0.9.tar.gz}
then @code{./configure && make && make install}
@end itemize

For your convenience, a zip file containing a complete MSYS "Liquid War 6 ready"
environment is available. It is simply the result of all the operations
described above.
Simply unzip @uref{http://www.ufoot.org/download/liquidwar/v6/mingw32/msys-for-liquidwar6-20080819.zip, msys-for-liquidwar6-20080819.zip} 
(about 240 megs) in @code{C:\MSYS\}.
All dependencies compiled in @code{/local} have been generated
using the command:
@example
cd /usr/local/src
./msys-for-liquidwar6-build.sh > ./msys-for-liquidwar6-build.log 2>&1
@end example
Note that this script does't do everything, you'll still need
to edit Guile source code and patch it manually.

It might even be possible to use this MSYS environment
under @uref{http://www.winehq.com/, Wine}.
Simply unzip it under @code{$HOME/.wine/drive_c}, and run
@code{wine "$HOME/.wine/drive_c/windows/system32/cmd.exe" /c "c:\\msys\\msys.bat"} and with
luck, you'll get a working shell. Note that this might allow you to compile
the game, but running it is another story. Consider this MSYS over Wine trick
as a hack enabling the use of free software only when compiling for
Microsoft proprietary platform. It is not a reasonnable way to run the game.
If running under a UNIXish platform, or better, GNU, simply run native code.
Use the Windows 32-bit port only if you are jailed on a Microsoft system.

Now, let's come to the real meat, untar the Liquid War 6 source
tarball, launch your MSYS shell, and:

@example
./configure
make
make install
@end example

Now the binary is in @code{src/.libs/liquidwar6.exe}
(beware, @code{src/liquidwar6.exe} is only a wrapper).
This binary is an MSYS/MinGW binary, so it read paths ``à la''
Microsoft, that is, it has no knowledge of what @code{/usr} is,
for instance. It requires paths starting by @code{C:\}.

@subsection Mac OS X port

@cindex Apple
@cindex Mac OS X

This is still experimental. Basically, install MacPorts, and most dependencies with,
except for SDL which you compile from source. The idea is to compile SDL using
the native OS X bindings (and not some other GL files you could have in @code{/opt/local}
installed by MacPorts), then compile the game and other SDL dependencies
against this SDL.

The SDL_mixer library might need to be told to compile itself without dynamic ogg support.
By default it seems that it tries to load @code{libvorbisfile.dylib} at runtime, and it can fail.
To disable this dynamic loading, use for instance :

@verbatim
/configure --prefix=/opt/extra --enable-music-ogg --disable-music-ogg-shared 
@end verbatim

Also, it might seem obvious for Mac OS X users, but there are some important issues related
to compiling options and handling dynamic libraries at runtime.
@itemize
@item
The command @code{ldd} does not exist, run @code{otool -L} instead.
@item
The equivalent of @code{LD_LIBRARY_PATH} is @code{DYLD_LIBRARY_PATH}.
@item
The extension for shared binaries is @code{.dylib} and not @code{.so}.
@item
You might need to set the @code{OBJCFLAGS} environment variable along with @code{CFLAGS}
because the Mac OS X port uses some Objective-C code.
@end itemize

It is very important to have the right SDL flags when linking the Liquid War 6 binaries.
For instance it could be:

@verbatim
-I/opt/extra/include -I/opt/local/include -Wl,-framework -Wl,CoreFoundation -I/opt/local/include -D_THREAD_SAFE -Wl,-framework -Wl,Cocoa -Wl,-framework -Wl,OpenGL -Wl,-framework -Wl,Cocoa 
@end verbatim

The point is to have Cocoa and OpenGL support. Depending on the way you installed SDL,
you might also need to include an SDL framework support, this is mostly if you installed SDL from
.dmg binary images, and not from source with the command line. A typical output of @code{sdl-config --libs} is:

@verbatim
-L/opt/extra/lib -lSDLmain -lSDL -Wl,-framework,Cocoa
@end verbatim

Another important issue is to include @code{SDL.h}, which in turn includes @code{SDLmain.h}, in
all the .c source files defining the standard @code{main} function. This is done in liquidwar6 but
should you try to link yourself on liquidwar6 libraries and/or hack code, you must do this or
you'll get errors when running the game. Such errors look like:

@verbatim
*** _NSAutoreleaseNoPool(): Object 0x420c90 of class NSCFNumber autoreleased with no pool in place - just leaking
@end verbatim

The reason is that SDL replaces your @code{main} with its own version of it. One strong implication
is that all the dynamic loading of SDL, which works on sandard GNU/Linux boxes, won't work under
Mac OS X, since SDL hard codes itself by patching @code{main} with @code{#define} C-preprocessor commands.

A @code{.dmg} file (disk image) containing a @code{Liquid War 6.app} folder (OS X application)
is available for your convenience. It might work or not. In doubt, compile from source. The complicated part about this package (a ``bundle'' is OS X language) is that
it needs to embed various libraries which are typically installed in @code{/opt}
by MacPorts on a developper's machine. So to build this package a heavy use
of the utilility @code{install_name_tool} is required, normally all libraries
needed ship with the binary, remaining depedencies concern frameworks which
should be present on any working Mac OS X install. Still, this is only theory.
Needs to be widely tested.

The layout of the bundle follows:
@itemize
@item
@code{./Contents/Info.plist}: metadata, bundle description file
@item
@code{./Contents/MacOS}: contains the main binary @code{liquidwar6} as well as all specific low-level libraries
@item
@code{./Contents/Resources/data}: general game data, does not contain maps.
@item
@code{./Contents/Resources/music}: music for the game.
@item
@code{./Contents/Resources/map}: system maps, you can put your own maps (or ``extra'' maps) here if you want all users to share them.
@item
@code{./Contents/Resources/script}: Liquid War 6 specific scripts, the scheme scripted part of the program.
@item
@code{./Contents/Resources/guile}: common shared Guile scripts, part of Guile distribution.
@item
@code{./Contents/Resources/doc}: documentation in HTML and PDF formats.
@end itemize

Additionnally, the Mac OS X port uses @code{/Users/<username>/Library/Application Support/Liquid War 6/} to store
configuration file, logs, etc. It does not use @code{$HOME/.liquidwar6} like the default UNIX port.

The Mac OS X port also has a special behavior, in order to load some libraries with dlopen
(SDL_image does this with libpng and libjpeg) it needs to set @code{DYLD_FALLBACK_LIBARY_PATH} to a
value that contains these libraries. This is typically in the bundle distributed on the disk image.
On a developper's computer this problem does not appear for those libs are often in places like:
@itemize
@item
@code{/usr/local/lib}
@item
@code{/usr/X11/lib}
@item
@code{/opt/local/lib}
@end itemize
So the program sets @code{DYLD_FALLBACK_LIBARY_PATH} (but not @code{DYLD_LIBRARY_PATH} else
it breaks internal OS X stuff which relies, for instance, on libjpeg library that has the
same name but different contents) but it needs to do it before it is even run, else
the various @code{dyld} functions do not acknowledge the change. That is, calling the C
function @code{setenv()}, even before @code{dlopen()}, has no effect. So the program
calls @code{exec()} to re-run itself with the right environment variable. This is why,
on Mac OS X, there are two lines (exactly the same ones) displaying the program description 
when it is started in a terminal.

@subsection GP2X port

This is not working yet, but there are good hopes that some day,
Liquid War 6 can run on a @uref{http://www.gp2xwiz.co.kr/,GP2X console}.
This handled gaming device uses a @uref{http://kernel.org, Linux kernel}
on an ARM processor,
does support most @uref{http://www.gnu.org/, GNU} packages through
cross-compilation, and has basic @uref{http://www.libsdl.org/, SDL} support.

To compile Liquid War 6 for GP2X, you first need to set up a
working ``toolchain''. It's suggested you do this on a working
GNU/Linux box. There are several solutions, the recommended one
being @uref{http://www.open2x.org/, Open2x}. Read the online
documentation on 
@uref{http://wiki.gp2x.org/wiki/Installing_the_Open2x_toolchain, how to install Open2x}.

Basically, the following should work:

@verbatim
mkdir /opt/open2x # check that you can write here
svn co https://open2x.svn.sourceforge.net/svnroot/open2x/trunk/toolchain-new open2x-toolchain 
./open2x-gp2x-apps.sh
cd open2x-toolchain
@end verbatim

Then, for your environment to be complete, you need to set up
some environment variables. For instance:

@verbatim
export OPEN2X_SYSTEM_PREFIX=/opt/open2x/gcc-4.1.1-glibc-2.3.6/arm-open2x-linux
export GP2X_USER_PREFIX=$HOME/gp2x

export CC=${OPEN2X_SYSTEM_PREFIX}/bin/arm-open2x-linux-gcc
export CPP=${OPEN2X_SYSTEM_PREFIX}/bin/arm-open2x-linux-cpp
export CXX=${OPEN2X_SYSTEM_PREFIX}/bin/arm-open2x-linux-g++
export AS=${OPEN2X_SYSTEM_PREFIX}/bin/arm-open2x-linux-as

export CFLAGS=''-I${OPEN2X_PREFIX}/include -I${GP2X_USER_PREFIX}/include''
export CPPFLAGS=''-I${OPEN2X_PREFIX}/include -I${GP2X_USER_PREFIX}/include''
export CXXFLAGS=''-I${OPEN2X_PREFIX}/include -I${GP2X_USER_PREFIX}/include''
export LDFLAGS=''-L${OPEN2X_PREFIX}/lib -L${GP2X_USER_PREFIX}/lib''

export PATH=''${GP2X_USER_PREFIX}/bin:${OPEN2X_SYSTEM_PREFIX}/bin:$PATH''
@end verbatim

In this setting, there's a user @code{$HOME/gp2x} directory which will
contain all the Liquid War 6 related libraries while the @code{/opt/open2x}
remains untouched.

Then you need to install the requirements. All these packages need to
be cross-compiled. To make things clear and non-ambiguous, even if you
have @code{CC} set up in your environment variables, pass @code{--build}
and @code{--host} arguments to the @code{./configure} script of all these
packages. A typical command is:

@verbatim
./configure --build=i686-pc-linux-gnu --host=arm-open2x-linux --prefix=${GP2X_USER_PREFIX}
@end verbatim

Here's the list of the requirements:

@itemize
@item
@url{http://www.libsdl.org/, SDL}. 1.2.14 works zith the following settings: @code{./configure --prefix=$GP2X_USER_PREFIX --build=x86_64-pc-linux-gnu --host=arm-open2x-linux --disable-pulseaudio --disable-video-directfb}
@item
@uref{http://www.gnu.org/software/libtool/, libtool}. Install a 1.5.x version,
and not 2.2.x. For some reasons, 2.2.x is unusable, it keeps on complaining that
@uref{http://lists.cistron.nl/pipermail/freeradius-users/2009-September/msg00149.html, lt_libltdl_LTX_preloaded_symbols is not defined}.
Apparently the bug has already been @uref{http://www.archivum.info/bug-libtool@@gnu.org/2009-01/00014/undefined_lt_ptr, reported}.
For Liquid War 6 needs, 1.5.x is very fine, use 1.5.26 for instance, it works well.

@item
@uref{http://gmplib.org/, GNU MP} (version 4.3.1 reported to work)

@item
@uref{http://www.gnu.org/software/guile/, Guile} (version 1.8.7 reported to work).
You need to pass the @code{--witout-threads} switch to the @code{./configure}
script else it will try (and fail!) to run a test program. Liquid War 6 does
not use Guile threads, it does use threads but uses them ``directly'' outside
the Guile layer.

@item
@uref{http://www.zlib.net/, zlib} (version 1.2.3 reported to work).
Do not use @code{--build} and @code{--host} for this one, they are
unsupported. Package compiles fine anyway.

@item
@uref{http://www.libexpat.org/, expat} (version 2.0.1 reported to work).

@item
@uref{http://www.libpng.org/pub/png/libpng.html, libpng} (version 1.2.3 reported to work).

@item
@uref{http://www.ijg.org/, libjpeg} (version 7 reported to work).

@item
@uref{http://www.sqlite.org, SQLite 3} (version 3.6.18 reported to work).

@item
@uref{http://curl.haxx.se/libcurl/, libcURL} (version 7.19.6 reported to work).
@end itemize

Next, one needs to install a special version of SDL, which targets 
the GP2X specifically. This is not a generic SDL, and it does have
limitations, which are related to the GP2X peculiar hardware.
There are @uref{http://wiki.gp2x.org/wiki/How_to_install_the_SDL_libraries, installation instructions}
about how to do this. The following should work:

@verbatim
cvs -d :pserver:anonymous@cvs.sourceforge.net:/cvsroot/open2x login # blank password
cvs -d :pserver:anonymous@cvs.sourceforge.net:/cvsroot/open2x co libs-gp2x 
@end verbatim

@c ---------------------------------------------------------------------------
@c Coding guidelines
@c ---------------------------------------------------------------------------

@node Coding guidelines, Using the console, Compilation tips, Hacker's guide
@section Coding guidelines

@subsection Project goals reminder

One of the purposes of Liquid War 6 is to make a cleaner
implementation of Liquid War than the previous one,
namely @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}.
While the latter has achieved the practical goal of providing
a playable implementation of the game, it failed at providing
an evolutive platform. Network capabilities where finally
added to @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}, but anyone who played on Internet with
someone a few hundreds of milliseconds away would agree
that it's far from being perfect. The main reason for this
is that it is really had to hack on @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}, especially
when you are not the core developper. The core developper
himself, even knowing all the various hacks in the game,
is very quickly lost when trying to implement major changes.

To put it short, @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5} is a global variable hell,
a pile of hacks on top of a quick and dirty implementation.
Still, it works.

With Liquid War 6, the idea is to take the time to make something
stable, something nice which will enable developpers to
implement the cool features, and have fun along the way.
Of course, this is only a dream, and in the (hopefully "very") long
run, Liquid War 6 will also end up as a big unmaintainable mess,
like any real-life program, until then, it should remain hackable.

@subsection Common sense

Here are a few guidelines which I think are common sense advice,
but they are still worth mentionning:

@itemize
@item
try and respect the
@uref{http://www.gnu.org/prep/standards/,GNU coding standards};
@item
absolutely no @code{strcpy} or @code{sprintf} anywhere in the code.
Nowhere. Use their equivalent @code{strncpy} and @code{snprintf} systematically,
as they are part of the glibc and are an order of magnitude safer.
Moreover, Liquid War 6 provides wrappers, such as @code{lw6sys_new_sprintf}
which handles all the nasty dirty memory allocation stuff for you;
@item
keep global variables for when there is something truely global,
and even in that case try to fit them in clearly identified structures.
@end itemize

@subsection Unitary tests

Each of the internal libraries in Liquid War has a ``test'' program
associated with it. For instance @code{liquidwar6sys-test} is
associated to @code{libliquidwar6sys}, and its purpose is to
test the features of this library.

While it is fairly easy to test out unitary functions which require
no peculiar context, testing high-level functions which requires
files, graphical and possibly network contexts to exist is obviously
harder to achieve. There's no easy way to draw the line, but
the idea is to put in these test executables as many features
as possible, to be sure that what is tested in them is rock
solid, bullet proof, and that one can safely rely on it and
trust that code when running it in a more complex environnement.

These test executables are also very good places to see a
library API in action, find code fragments, and make experiments.

@subsection Memory allocation

Liquid War 6 provides macros to allocate and
free memory. One should use them systematically, except when
trying to free something allocated by another library,
and in very special cases, mostly concerning low-low level
operations which are seldom hacked on.

Usage of macros @code{LW6SYS_MALLOC},
@code{LW6SYS_CALLOC} and @code{LW6SYS_FREE} is straightforward,
read any random chunk of code, for instance @code{./src/lib/sys/sys-test.c}
to see them in action. They are defined in @code{sys/sys.h}.

Once used, these macros will track every single call to  @code{malloc} and @code{free},
and if there's a difference, it will report it. It will also help you by
showing what's in the non-freed memory area, at which line of code
it has been allocated, and when. This is very usefull to track down memory leaks.
Of course a debugger could tell you some of these informations, but experience
shows than when you encounter a memory bug, it's very often impossible to
reproduce it. So you one wastes time trying to reproduce the bug, whereas
with this tool you have the information reported just when the problem happens.

@subsection Private and public interfaces

Each library exports a public interface and hides its internal.
Since Liquid War 6 uses standard C and no C++, there's no
real standard way to handle public/private features. The
convention used in Liquid War 6 is to show internal structures
as opaque pointers (@code{void *}) whenever some function needs
to operate on a structure which has possibly private fields.
This way the caller function has no way to access the internals,
and we are sure that no reference to any internal implementation
specific feature will appear.

Here's a code excerpt from @code{src/gfx/setup.c}:
@example
void _lw6gfx_quit(_LW6GFX_CONTEXT *context) @{
  /*
   * Implementation here.
   */
[...]
@}

void lw6gfx_quit(void *context) @{
  _lw6gfx_quit((_LW6GFX_CONTEXT *) context);
@}
@end example

The function @code{_lw6gfx_quit} (note the ``_'') is internal,
declared in @code{internal.h} whereas the function @code{lw6gfx_quit}
is public, and is therefore exported in @code{gfx.h}.

This way, functions in the program using @code{lw6gfx_quit}
do not know what is in the @code{_LW6GFX_CONTEXT} structure,
and they need not know it.

This does not mean it is not possible to have public structures,
only these structures must reflect some truely public, accessible
and safe to access structures.

@subsection Commit policy

Basic rules :

@itemize
@item
commits should be as small as possible, yet leave the code in
a consistent state. The general idea is that big commits tend to
make error tracking more complicated;
@item 
a commit should not
leave the code in a state in which it does not compile and/or is
consistent from a user point of view. The general idea is to go
step by step and break as little things as possible.
@item
tests should be written along the way. The project is not developped
with a ``test driven'' method, still, it's a good practice to write
the tests functions as soon as possible.
@end itemize

To check that a commit does not break everything, a good practice is to
run a @code{make check} before committing / submitting anything.

Then, once it's within the main GIT repository, check the
@uref{http://www.ufoot.org/jenkins/job/liquidwar6/, Jenkins builds}
to see if the program still builds correctly.

@subsection Audit the code

Liquid War 6 is regularly audited with automated tools. You might
need to pass @code{--enable-gcov} to @code{--configure} if you want
to use thes tools yourself. More precisely:

@itemize
@item
@uref{http://cunit.sourceforge.net, CUnit} is used for regression tests.
It's used to provide hopefully standardized output when testing, and
provide test statistics more easily. It's a rule of thumb to try and write
tests when new features and/or bug-fixes pour in.
@item
@uref{http://ltp.sourceforge.net/coverage/lcov.php, lcov} is run,
ideally with each release - but it's not garanteed, check the output date and time -
and the output is available online on
@uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/}.
@item
@uref{http://www.gnu.org/software/global/, GNU global} is run too, ideally
with each release - again, check the output date and time -
and the output is available online on
@uref{http://www.ufoot.org/liquidwar/v6/doc/global/}.
@item
@uref{http://parisc-linux.org/~bame/pmccabe/, pmccabe} reports cyclomatic
complexity. It shows where the code is too complex and should probably be
rewritten. Output is post-processed
using @uref{http://www.gnu.org/software/gnulib/MODULES.html#module=pmccabe2html, pmccabe2html}
from @uref{http://www.gnu.org/software/gnulib/, gnulib}. The output
is available online on
@uref{http://www.ufoot.org/liquidwar/v6/doc/cyclo/}.
@item
@uref{http://valgrind.org/, Valgrind} is run as well, it should report
absolutely no leak on all the core sub-libraries, eg running
@code{liquidwar6ker-test} or @code{liquidwar6ker-pil}.
Bits of code which depend on other libraries are a different story, for
some projects on which Liquid War 6 depends might, for some reason, raise
warnings. But as far as Liquid War 6 is concerned, the goal is simple: zero leak.
@item
Liquid War 6 is referenced on @uref{http://www.openhub.net/, Open HUB}. 
Visit @uref{http://www.openhub.net/p/liquidwar6} 
to get time-based statistics and facts about the source code.
@end itemize

Those tools certainly don't garantee the code is perfect, but they do help
improving the quality of the program. If you hack, it's recommended you give
them a try.

@c ---------------------------------------------------------------------------
@c Using the console
@c ---------------------------------------------------------------------------

@node Using the console, Advanced tweaking, Coding guidelines, Hacker's guide
@section Using the console

The console can be activated by passing @code{--display-console} when starting
the game or by using the system options menu.

When the console is activated, a @code{lw6>} prompt should appear in the
terminal which launched the program. If you started Liquid War 6 by clicking
on an icon, console probably won't work at all since @code{stdout} and
@code{stdin} won't be attached to anything.

The console allows you to type arbitray Scheme/Guile code.

Try, for instance:
@example
(+ 1 2)
(display "foo\n")
@end example

You can really break things with this console, it gives you a
direct access to all the program internals. At least, all the
values which are accessible through the script interface, that is, 
many of them.

You can call any internal C function which has been exported
to Guile, here are some examples:

@example
(c-lw6sys-timestamp)
(c-lw6bot-get-backends)
(c-lw6sys-sleep 2.0)
(lw6-config-get-number "zoom")
(lw6-config-set-number! "zoom" 0.9)
(lw6-config-get-number "zoom")
@end example

While syntax (and possibly other) errors will be trapped by
the interpreter, note that if you break things inside the game by,
say, changing some global value, or in a general manner cause
an error elsewhere in the code, the game will really raise
a fatal error and stop. That's how you can ``break things''.

Still, this console is a very powerfull tool, very usefull for
debugging but also for tweaking the game without restarting it
and/or navigating through the menu interface.

@c ---------------------------------------------------------------------------
@c Advanced tweaking
@c ---------------------------------------------------------------------------

@node Advanced tweaking, Writing modules, Using the console, Hacker's guide
@section Advanced tweaking

@subsection Hacking ressources

Liquid War 6 tries to have as few hardcoded data as possible. So many
constants, and pretty much all the image files, are accessible in the
data directory. You can know where it is by launching
@code{liquidwar6 --show-data-dir}. If you look in this directory
you'll find different files, among
them XML files. 

Let's take an example. Try and find the file @code{gfx/gl/hud/floating/gl-floating-const.xml}.
Edit the line with the @code{clock-y1} entry. Change the number after @code{"value"}.
Re-run the program. Play a game. What happens? Logically you should see that 
``something'' is not displayed at the same place than before.

You could also modify the textures (JPEG and PNG files). In a general manner
it's more cautious to keep them the same size but it depends, sometimes
other sizes will work as well.

Many of these parameters are really too technical and obscure to have their
place in the main config file (which is already rather big). Use at your own
risks, you can really break things touching this, but you can also find out
lots of things can be tuned.

@subsection Optimize for speed 

Todo...

@c ---------------------------------------------------------------------------
@c Writing modules
@c ---------------------------------------------------------------------------

@node Writing modules, Use as a library, Advanced tweaking, Hacker's guide
@section Writing modules

Todo...

@c ---------------------------------------------------------------------------
@c Use as a library
@c ---------------------------------------------------------------------------

@node Use as a library, Network protocol, Writing modules, Hacker's guide
@section Use as a library

Todo...

@c ---------------------------------------------------------------------------
@c Network protocol
@c ---------------------------------------------------------------------------

@node Network protocol, Technical HOWTOs, Use as a library, Hacker's guide
@section Network protocol

This section describes how Liquid War 6 handles network messages.
Note that for now this is purely theorical, more of a draft, 
a plan, it might change before being implemented.

@subsection No server, no client, only nodes

Liquid War 6 does not really have the notion of server or client,
any instance of the program can act as both server and client,
therefore we use the term node.

A node listens on a given port, in both TCP and UDP, and can
connect to other nodes on the same port. The main identifier
of a node is its public url, which is typically of the
form @code{http://<ip-address>:<port>/}. This url is very important
for it is (or at least should be) a unique identifier of the 
node over the network.

Liquid War has 3 ways to communicate:
@itemize
@item
raw TCP, this is the LW6 protocol, the easiest to implement and debug,
probably the most reliable one, but not always the fastest. This involves
the two modules @code{mod-tcp} and @code{mod-tcpd}.
@item
HTTP over TCP, this is a hack which allows the game to communicate through
HTTP proxies for instance. Additionnally, the fact any node is a web server
enables peering with a simple web browser. Web server facility requires
@code{mod-httpd} and client part requires @code{mod-http} which might or
not be available, depending on how the game was compiled.
@item
raw UDP, this is another version of the LW6 protocol, this is in theory
the fastest way to communicate, it requires @code{mod-udp} and @code{mod-udpd}
to work. Using UDP only was not an option when conceiving Liquid War since
it's interesting to have other solutions if, for instance, a firewall
does not allow you to use UDP the way you want.
@end itemize

On each of these channels, messages can be exchanged in two modes,
an ``out of band'' mode (AKA ``oob''), and a regular message oriented,
here we speak of ``connection''.

@subsection Out of band messages

There are only 3 out of band messages:

@itemize
@item @code{PING}:
requests for a simple @code{PONG http://server:port/} answer, this is just to
check if a server is a valid server, and if the URL we used to connect on it
is the correct one.
@item @code{INFO}:
requests for a list of key/attributes pairs, which describe the node, telling
for instance its version, its uptime, and so on.
@item @code{LIST}:
requests for a list of other nodess this node is aware of.
@end itemize

You can test out of band messages by simply connecting on your server with
a command like:
@verbatim
telnet localhost 8056
@end verbatim

At the telnet prompt, simply type:
@verbatim
INFO
@end verbatim
and press return, and you should have a description of your node.

The complete syntax of OOB messages is:
@verbatim
<COMMAND> [password] [url]
@end verbatim

The @code{password} and @code{url} parameters are optionnal. @code{password} can contain either the plain text password or a checksum calculated from the password which is, for security reasons, seeded with the public url of the node we're connecting to, so that this password can't be re-used on another node. @code{url} is simply a clue we give to the other node to help find us, the other node will automatically try to detect our IP address and use standard LW6 port 8056, but if for some reason we use a different setting, this is a good way to pass the hint.

Here are examples of valid messages:

@verbatim
LIST
PING http://myhost.mydomain:1234/
INFO secret http://myhost.mydomain:1234/
LIST 12ab34cd
@end verbatim

If there's only one argument, the parser will first try and interpret it as a URL. If it's not
parseable that way, it will consider it's a password. The password, in turn,
may be specified as clear text or as a 32-bit checksum.

As far as OOB is concerned, TCP and UDP work almost the same, HTTP is a bit different, the OOB commands are accessed through the following URLs:
@itemize
@item
@code{/ping.txt} 
@item
@code{/info.txt} 
@item
@code{/list.txt} 
@end itemize

OOB messages are usually sent many times in redundant mode on the network,
as there's no tracking of them, sending them through multiple channels
ensures they make their way to the right place.

The parser for these messages is located in @code{src/lib/msg/msg-oob.c}.

@subsection Regular messages overview

All messages that are non-OOB share a common syntax. This is called the ``envelope'' of messages.

The general syntax is:

@verbatim
LW6 <VERSION> <PASSWORD_CHECKSUM> <PHYSICAL_TICKET_SIG> <LOGICAL_TICKET_SIG> <PHYSICAL_FROM_ID> <PHYSICAL_TO_ID> <LOGICAL_FROM_ID> <LOGICAL_TO_ID> <MSG>
@end verbatim

Here's an example:

@verbatim
LW6 0.1.3485 - 2d1dbed7 - 3003300330033003 2002200220022002 - - DATA 8 0 1 1000000035005 3003300330033003 SET 3001 11 1 1 0
@end verbatim

In this example, the messages carried is @code{DATA 8 0 1 1000000035005 3003300330033003 SET 3001 11 1 1 0}, the
rest is part of the envelope protocol.

Here's what those fields mean:
@itemize
@item
@code{LW6}: should always be LW6, this is a marker to make sure we're speaking the right protocol.
@item
@code{<VERSION>}: the version of the program sending the message, the receiver of the message should check this version
is compatible.
@item
@code{<PASSWORD_CHECKSUM>}: the password checksum, while a clear password should still be correctly interpreted,
as for OOB messages, there's no reason to send the cleartext password, so the checksum is just fine.
Note that the checksum is short, and vulnerable to brute-force attacks. If you want strong protection, 
the general advice is to tunnel your connections through SSL or TLS, use a VPN, LW6 won't implement
``fortress mode'', third party tools should do this much better. If undefined, should be replaced by the
dash character @code{-}.
@item
@code{<PHYSICAL_TICKET_SIG>}: a signature done by the sender, which is unique for the combination message+from+to.
This means two different messages will generate two differents signatures, but different senders and/or
receivers will also change this, so it's not possible, unless one has the ``ticket'' to fake a message.
This is clearly not bullet-proof, and more specifically, brute-force attacks and/or network listening
could break the protocol and/or reveal the ticket, still, this is a good way to make sure that if
something is inconsistent, someone is trying to cheat. As every node maintain its own game state,
a cheater can ``only'' be a nuisance by sending wrong key presses, but in the long run it will
be defeated by the fact that an attacker should intercept and modify all messages on all
channels (tcp, udp, http ...) and make sure the official, real informations, 
never makes its way to the right node. This is quite hard to achieve, very likely, an inconsistency
will be detected, nodes concerned should be disconnected, period.
When sending the first messages, ticket might not be exchanged yet, so there's no way to
calculate this, during this period, @code{ffffffff} is sent, and checksum errors are ignored.
@item
@code{<LOGICAL_TICKET_SIG>}: another signature, but this one concerns the physical sender/receiver.
If the physical sender is the logical sender, and the physical receiver is the logical receiver,
that is, if physical and logical nodes are the same pair of nodes, then it need not be defined
and can be replaced by the dash character @code{-}. In fact, in that case, the physical
and logical signatures are obviously the same.
However (not implemented yet) the protocol is designed so that nodes can act as messages
forwarders, in that case they have no knowledge of the secret ticket to use, so this ticket
is here to ensure message consistency for the final, real (logical) receiver of the message.
@item
@code{<PHYSICAL_FROM_ID>}: the id of the physical sender, the node that created the message.
@item
@code{<PHYSICAL_TO_ID>}: the id of the physical receiver, the node that should receive the message.
@item
@code{<LOGICAL_FROM_ID>}: the id of the logical sender, if it's the same than the physical sender, can be replaced
 by the dash character @code{-}.
@item
@code{<LOGICAL_TO_ID>}: the id of the logical receiver, if it's the same than the physical receiver, can be replaced
 by the dash character @code{-}.
@item
@code{<MSG>}: the message itself, it might in turn be separated by spaces, or whatever the message delimiter
is. It should not be too long, as it must be sendable on the network by UDP, so it must fit within
the MTU (about 1.4 kb) with all the protocol (envelope) stuff before it. In practice, it's cut into 1.2 kb parts
by @code{libdat}, the constant @code{_LW6DAT_ATOM_MAX_SIZE} is used to split big messages in smaller parts.
@end itemize

It's implemented in @code{src/lib/msg/msg-envelope.c}.

@subsection Regular control messages

To establish a connection, maintain it, and do the OOB job, a set of
control message is used. Those messages carry a bunch of informations
about who is sending them, in fact, they just contain the informations
that would otherwise be handled by out-of-band messages, but it's convenient
to have the information first-hand rather than relying on the other protocol.

The syntax is:
@verbatim
LW6 <VERSION> <PASSWORD_CHECKSUM> <PHYSICAL_TICKET_SIG> <LOGICAL_TICKET_SIG> <PHYSICAL_FROM_ID> <PHYSICAL_TO_ID> <LOGICAL_FROM_ID> <LOGICAL_TO_ID> <COMMAND> <PROGRAM> <VERSION> <CODENAME> <STAMP> <ID> <URL> <TITLE> <DESCRIPTION> <HAS_PASSWORD> <BENCH> <OPEN_RELAY> <UPTIME> <COMMUNITY_ID> <ROUND> <LEVEL> <REQUIRED_BENCH> <NB_COLORS> <MAX_NB_COLORS> <NB_CURSORS> <MAX_NB_CURSORS> <NB_NODES> <MAX_NB_NODES> <PEER_LIST> <COMMAND_ARGS>
@end verbatim

Example:
@verbatim
LW6 0.1.3485 - ffffffff - 1001100110011001 2002200220022002 - - HELLO liquidwar6 0.1.3485 "Davy Crockett" 3485 1001100110011001 http://localhost:8057/ cGF0 RHVtbXkgdGVzdCBub2RlIEE= 0 10 0 5 372057f45b3d2ba5 10005 "Default map" 5 4 10 4 26 1 12 ""
@end verbatim

The fields, starting from @code{LW6} up to (and including) @code{<LOGICAL_TO_ID>} are part of the envelope, described previously.

The message fields are:
@itemize
@item
@code{<COMMAMD>}: described below, the main command,
@item
@code{<PROGRAM>}: should be @code{liquidwar6}
@item
@code{<VERSION>}: the version of the program. Yes, this is also in the envelope, but one could think
of instances relaying informations for other peers, in that case this could prove useful.
@item
@code{<CODENAME>}: the code name of the program.
@item
@code{<STAMP>}: the stamp, it's normally contained within the version, but this avoids parsing issues.
@item
@code{<ID>}: the node id (could be inferred from envelope, but repeated here).
@item
@code{<URL>}: the node url (could be inferred from envelope, but repeated here).
@item
@code{<TITLE>}: the readable title of the node, base64 encrypted.
@item
@code{<DESCRIPTION>}: the readable description of the node, base64 encrypted.
@item
@code{<HAS_PASSWORD>}: wether it's protected by a password or not, 0 if not, 1 if protected.
@item
@code{<BENCH>}: the bench of the node, giving its CPU strength in an arbitrary unit.
@item
@code{<OPEN_RELAY>}: wether the node act as an open relay, 0 if not, 1 if in relaying.
@item
@code{<UPTIME>}: node uptime, in seconds.
@item
@code{<COMMUNITY_ID>}: the community id, a unique id shared by all nodes connected to a game session.
@item
@code{<ROUND>}: the current round id.
@item
@code{<REQUIRED_BENCH>}: the minimum bench required to connect to this node (used to avoid slow nodes connecting
to way-too-fast games).
@item
@code{<NB_COLORS>}: number of colors playing.
@item
@code{<MAX_NB_COLORS>}: maximum number of colors allowed on this node.
@item
@code{<NB_CURSORS>}: number of cursors playing.
@item
@code{<MAX_NB_CURSORS>}: maximum number of cursors allowed on this node.
@item
@code{<NB_NODES>}: number of nodes connected.
@item
@code{<MAX_NB_NODES>}: maximum number of nodes allowed on this node.
@item
@code{<PEER_LIST>}: list of peers connected to this node.
@item
@code{<COMMAND_ARGS>}: command-specific arguments
@end itemize

Here are the different possibilities for the @code{<COMMAND>} field.

@itemize
@item
@code{HELLO}: is used when connecting, this should be the first message sent. In itself, the message
means pretty much noting, it just says ``I'm here'' which could be infered from any other 
message. No command args.
@item
@code{TICKET <ticket>}: is used to inform the caller of the ticket we use. The ticket sent from A to B is
ised by B to sign messages for A. A node typically sents a different ticket to all its peers
so when sending the same message to A and C, B will typically use two different tickets,
thus generating two different signatures, and if sending the exact same string to C, A 
generate yet another signature as it will have sent another ticket. There's one optional
argument, which is the ticket itself, a 64-bit hexa integer.
@item
@code{FOO <key> <serial>}: is sent on a regular basis, it's really the replacement of the OOB 
@code{PING} message, 
it will update the peer status and maintain consistent informations.
It has two arguments, the first one is @code{key}, a 32-bit hexa integer, which will,
upon @code{BAR} message reception, used to figure out ``OK, this is the @code{BAR}
message associated to this @code{FOO} message I sent before''.
The second one, @code{serial}, is used to inform the peer that, possibly, there are new messages
to fetch from us. The peer, in turn, might fire @code{MISS} messages, but without
this feature, peers could ``fall asleep'' and forget to pump messages, especially on
non-reliable connections.
@item
@code{BAR <key> <serial>}: is the response to @code{FOO} which is received on a regular basis, 
it's really the replacement of the OOB @code{PONG} message, 
it will update the peer status and maintain consistent informations.
It has two arguments, the first one is @code{key}, a 32-bit hexa integer, which will,
upon reception, ne matched against a corresponding @code{FOO} messaged,
used to figure out ``OK, this is the @code{BAR}
message associated to this @code{FOO} message I sent before''.
The second one, @code{serial}, is used to inform the peer that, possibly, there are new messages
to fetch from us. The peer, in turn, might fire @code{MISS} messages, but without
this feature, peers could ``fall asleep'' and forget to pump messages, especially on
non-reliable connections.
@item
@code{JOIN <seq> <serial>}: Used to join a game. In fact, having said @code{HELLO}
and exchanged @code{FOO} and @code{BAR} messages does not mean one has joined the game
for real. The reason for this is that those messages help establishing a stable
communication channel, then one needs to come in with the right @code{seq} and @code{serial}.
There are basically two cases. First case, @code{seq} can be zero, in that case it means
we're trying to connect on an existing server, which will in turn send a @code{JOIN}
message with a non-zero value, giving the current seq. Second case, @code{seq} is non-zero,
in that case it means we're answering a connection request. In both cases,
@code{serial} is a serial number other peers should use as a minimum limit, and never
ask for messages with a @code{serial} lower than that.
@item
@code{GOODBYE}: symetric of @code{HELLO}, should be called on disconnection, however,
the peers should handle the case when no @code{GOODBYE} message is sent, this is
just about being polite. No command args.
@end itemize

It's implemented in @code{src/lib/msg/msg-cmd.c}.

@subsection Regular MISS messages

Todo...

@subsection Regular META messages

Todo...

@subsection Regular DATA messages

Todo...

@subsection Other raw technical stuff (WIP)

TCP messages:

@verbatim
LW6 [<passwd>] <version> <client-id>
<from-id> <to-id> <serial> <i> <n> <sig> MSG1
<from-id> <to-id> <serial> <i> <n> <sig> MSG2
@end verbatim

TCP oobs:

@verbatim
<return> # only works anonymous, same as INFO
INFO [<passwd>] [<public-url>]
LIST [<passwd>] [<public-url>]
PING [<passwd>] [<public-url>]
@end verbatim

UDP messages:

@verbatim
LW6 [<passwd>] <version> <client-id> <from-id> <to-id> <serial> <i> <n> <sig> MSG1
LW6 [<passwd>] <version> <client-id> <from-id> <to-id> <serial> <i> <n> <sig> MSG2
@end verbatim

UDP oobs:

@verbatim
INFO [<passwd>] [<public-url>]
LIST [<passwd>] [<public-url>]
PING [<passwd>] [<public-url>]
@end verbatim

HTTP messages:

client id & password passed in HTTP headers

@verbatim
/lw6/version/<from-id>/<to-id>/<serial>/<i>/<n>/sig/MSG1
/lw6/version/<from-id>/<to-id>/<serial>/<i>/<n>/sig/MSG2
@end verbatim

HTTP public URLs:

@verbatim
/ -> index.html
/index.html
/favicon.ico
/screenshot.jpeg
/robots.txt
/gpl.txt
/info.txt
/list.txt
/ping.txt
@end verbatim

MSG syntax:

@verbatim
<round> <server-id> <command> <arg1> ... <argN>
@end verbatim

COMMAND examples:
@verbatim
2 1234abcd1234abcd REGISTER
3 1234abcd1234abcd ADD 5678 YELLOW
4 1234abcd1234abcd SET 5678 20 5
10 1234abcd1234abcd NOP
400 1234abcd1234abcd REMOVE 5678
1000 1234abcd1234abcd UNREGISTER
@end verbatim

Sig is a checksum on string:
@verbatim
<from-id> <to-id> <serial> <i> <n> MSG
@end verbatim

@c ---------------------------------------------------------------------------
@c Technical HOWTOs
@c ---------------------------------------------------------------------------

@node Technical HOWTOs, Using GNU Arch, Network protocol, Hacker's guide
@section Technical HOWTOs

@subsection Release check-list

Summary off all operations required for a release:

@itemize
@item
check the value of @code{LW6MAP_RULES_DEFAULT_EXP} and default for @code{--skip-network}, which might have been changed will developping.
@item
in @code{./src}, run @code{./indent.sh}.
@item
in @code{./doc}, run @code{./gdoc-update.sh}, @code{./doxygen-update.sh} and @code{./perf-update.sh}.
@item
edit @code{NEWS} file, in both @code{liquidwar6} and @code{liquidwar6-extra-maps}. Check @code{ChangeLog} is OK.
@item
update the version history in @code{doc/liquidwar6.texi}.
@item
update @code{debian/changelog} files in both main and extra maps packages.
@item
run @code{make distcheck}... (at least!)
@item
build @code{RPM} package (@code{make -C pkg rpm}), check @code{yum install} produces a working installation, also check the @code{rpm -e} command to verify uninstalling is OK too.
@item
build @code{.exe} main binary on Microsoft Windows then go back to GNU/Linux and build @code{.exe} installer (@code{make -C pkg installer}), go back to Microsoft Windows and test the installer (there are often problems at this stage because of missing libraries or other files...).
@item
build @code{.dmg} Mac OS X disk image, check it works even when @code{/opt} and @code{/usr/local} or (re)moved, this is important, else execution might rely on binaries which are only on the development machine and do not ship with game.
@item
upload files (doc on @uref{http://savannah.gnu.org/maintenance/DownloadArea}), with a command like @code{rsync --rsh=ssh --recursive --verbose --progress ./X.Y.Z/ login@@dl.sv.nongnu.org:/releases/liquidwar6/X.Y.Z/}. Each file must have its @code{.sig} corresponding file.
@item
update online docs with @code{gendocs.sh}, carefull, @code{liquidwar6.html} is suppressed by this, need to re-create it from previous version and/or @code{index.html} which is the same.
@item
update @code{index.html}, @code{liquidwar6.html} and @code{liquidwar6.fr.html} so that they reflect the latest release. Check download links are OK.
@item
post news on @uref{https://savannah.gnu.org/news/?group=liquidwar6}, @uref{http://lists.gnu.org/mailman/listinfo/help-liquidwar6} and @uref{http://lists.gnu.org/mailman/listinfo/info-liquidwar6}.
@item
after everything did work, upload files on @uref{ftp://ftp.gnu.org/}, for instance use @code{gnupload --to ftp.gnu.org:liquidwar6 liquidwar6-X.Y.Z.tar.gz}.
@end itemize

@subsection Add a new option

This describes how to add a new option to the game.

@itemize
@item
edit @code{src/lib/def/def-list.txt}
@item
in @code{src/lib/def/def-update.py} run @code{./def-update.py}. This will automatically fill @code{src/lib/def/def.h} and @code{script/def.scm}. In the code, you should always use @code{LW6DEF_<OPTION>} in C and @code{lw6def-<option>} in scheme to refer to the option. This does help avoiding typesetting errors.
@item
add the entry to @code{src/lib/hlp/hlp-list.c}, choose a category for it
@item
add the entry to @code{src/lib/hlp/hlp-reference.c}, give it a type, documentation string and default values if needed
@item
to sort @code{src/lib/def/def-list.txt} a common practice is to fill it with the output of @code{liquidwar6 --list} once the program has been compiled and is aware of the new option.
@end itemize

Unless this is done, program won't accept the option.

Some options need more work, for instance:

@itemize
@item
Any option which is a command-line argument needs to be added to @code{src/lib/lw6-options.c}.
@item
Any option which is related to the build system (to enable or disable some feature) must be referenced in @code{src/lib/sys-build.c} and also @code{src/lw6-funcssys.c} to be callable from scripts.
@item
Any option which changes the map rules (any new rule...) impacts the game checksums so these ones need to be updated in @code{src/lib/map/map-test.c}, @code{src/lib/ker/ker-test.c}, @code{src/lib/pil/pil-test.c} and @code{src/lib/pil/pil-suite.c}.
@end itemize

@subsection Add a new internal library

This describes how to add a new @code{libxyz} internal library:

@itemize
@item
create a new @code{src/lib/xyz} directory. The convention is to use 3 letters names and prefix every global identifier with @code{lw6xyz}.
@item
copy @code{Makefile.am}, @code{xyz.h}, @code{xyz-test.c} and @code{xyz-testmain.c} from an existing internal library (@code{libnod} is a good source, it does not have complex dependencies).
@item
edit @code{Makefile.am} to fill requirements, make necessary adjustments to other files (many string replaces to make, both lowercase and uppercase).
@item
add the entry in the @code{SUBDIRS} and @code{LW6_LIBS} sections of @code{src/lib/Makefile.am}
@item
add the entry in the @code{AC_CONFIG_FILES} of @code{./configure.ac}.
@item
run @code{automake} and @code{autoconf}.
@item
edit @code{src/lib/lw6-options.c} and add a call to @code{lw6xyz_test()} for both ``check'' and ``test'' cases.
@item
edit @code{src/lib/lw6-test.c} and add a reference to the @code{lw6xzy_test()} function.
@item
in every internal @code{abc} library that depends on @code{xyz}, edit the @code{lw6abc_test} function so that it contains a reference to @code{lw6xzy_test}.
@item
in every internal @code{abc} library that depends on @code{xyz/xyz.h}, edit the @code{abc/abc.h} header so that it includes @code{xzy/xyz.h}. Also edit @code{src/lib/liquidwar6.h.in}.
@item
in every internal @code{abc} library that depends on @code{libxyz}, add a reference to @code{../xyz/libxyz.la} inf the @code{_LDADD} section.
@item
create a new @code{src/lib/lw6-funcsxyz.c} file which declares Guile bindings for this lib, if needed
@item
edit @code{doc/gdoc-update.sh} and add the entry for @code{xyz}.
@item
edit @code{doc/Makefile.am} and add @code{xyz-gdoc.texi} in @code{gdoc_TEXINFOS}.
@item
edit @code{doc/doxygen-update.sh} and add the entry for @code{xyz}.
@item
edit @code{doc/Makefile.am} and add @code{xyz-doxygen.texi} in @code{doxygen_TEXINFOS}.
@item
edit @code{doc/perf-update.sh} and add the entry for @code{xyz}.
@item
in @code{./doc}, run @code{./gdoc-update.sh}, @code{./doxygen-update.sh} and @code{./perf-update.sh}.
@item
edit @code{doc/doxygen/Makefile.am} and add the dependency on @code{src/lib/xyz/xyz.h}.
@item
edit @code{doc/liquidwar6.texi} to and a new node/section for this internal library.
@item
edit @code{doc/deps.dot} to update dependencies.
@item
run @code{./configure && make}, fix code if needed.
@end itemize

@subsection Add a new module

This describes how to add a new @code{mod-ab} module, for instance a new bot, but gfx, snd, cli or srv backends should work pretty much the same:

@itemize
@item
add a new entry in @code{src/lib/bot/Makefile.am}
@item
create the subdir @code{src/lib/bot/mod-ab}, with its @code{Makefile.am} (inspired from other existing modules)
@item
add the entry in @code{configure.ac} so that @code{src/lib/bot/mod-ab/Makefile} is generated.
@item
edit @code{doc/gdoc-update.sh} and add an entry for @code{mod-ab}
@item
edit @code{doc/Makefile.am} and add @code{mod-ab-gdoc.texi} in @code{gdoc_TEXINFOS}.
@item
edit @code{doc/doxygen-update.sh} and add an entry for @code{mod-ab}
@item
edit @code{doc/Makefile.am} and add @code{mod-ab-doxygen.texi} in @code{doxygen_TEXINFOS}.
@item
type @code{touch doc/mod-ab-gdoc.texi doc/mod-ab-doxygen.texi} else dependencies checking will fail.
@item
in @code{./doc}, run @code{./gdoc-update.sh} and @code{./doxygen-update.sh}.
@item
edit @code{doc/liquidwar6.texi} to add a new node/section for this module.
@item
edit @code{doc/deps.dot} to update dependencies.
@item
edit @code{src/lib/bot/bot-test.c}, change the value of @code{TEST_NB_BACKENDS} and modify the code so that the new @code{ab} module is tested too.
@item
edit @code{src/lib/bot/bot-register.c}, the code must updated pretty much in every place with the conditionnal @code{LW6_ALLINONE}, you need to add the new module.
@item
run @code{automake}, @code{autoconf}, @code{./configure} and @code{make}.
@end itemize

@c ---------------------------------------------------------------------------
@c Using GNU Arch
@c ---------------------------------------------------------------------------

@node Using GNU Arch, Using GIT, Technical HOWTOs, Hacker's guide
@section Using GNU Arch

@subsection About GNU Arch

@cindex Arch
                       
Since March, 4th 2010, Liquid War 6 uses @uref{http://git-scm.com/, GIT} 
to handle source code, track changes, branches, and the rest. It replaces
the @uref{http://www.gnu.org/software/gnu-arch/,GNU Arch}
repository. This old repository contains all sources up to version
0.0.7beta, following versions, including 0.0.8beta, must be retrieved from GIT.

So the following informations only concern those who are interested
in previous versions of the game. Anybody else - probably you - should
use GIT instead.

@xref{Using GIT}.

Still, this quick Arch survival guide is kept in the documentation.

Read the @uref{http://www.gnu.org/software/gnu-arch/tutorial/arch.html,GNU Arch tutorial} to learn how Arch works. Note that there are many other
source control managers available, some of which provide functionnalities
similar to GNU Arch / tla. GNU Arch has been chosen for Liquid War 6 because:
@itemize
@item
it is Free Software,
@item
it is not limited to per-file commits like CVS, and supports atomic commits involving several files,
@item
it is distributed,
@item
it enables developpers to sign each of their contributions,
@item
it was already available back in 2005.
@end itemize

@subsection Getting the latest version from the repository                                            
The repository for Liquid War 6 is accessible on
@uref{http://arch.savannah.gnu.org/archives/liquidwar6}.
This is a read-only access, but with the distributed
nature of GNU Arch, it still allows you to keep track
of your own changes, and submit patches. Accessing it
in read/write mode with sftp requires a Savannah account and
special rights on the Liquid War 6 project.

Here are typicall commands one can use to get Liquid War 6 source
from the GNU Arch repository:

@example
tla register-archive http://arch.savannah.gnu.org/archives/liquidwar6
tla get -A liquidwar6@@sv.gnu.org liquidwar6--beta
@end example

All the patches in the archive are signed with
@uref{http://www.gnupg.org/,GnuPG}, so you can check their
authenticity with @uref{http://www.ufoot.org/ufoot.pub, my public key}.

You might need to edit your @code{$HOME/.arch-params/signing/=default.check}
file and put the following text in it:
@example
tla-gpg-check gpg_command="gpg --verify-files -"
@end example

@subsection Setting up your own arch repository                                       
This section is for those who want to hack the game and set up
their own repositories. This will enable you to keep track of your
patches, package them, and help the core maintainer merging them
in the main repository.

You can introduce yourself and
create a repository by issuing commands like:

You can introduce yourself and
create a repository by issuing commands like:

@example
tla my-id me@@home.net
tla register-archive me@@home.net--2008 /home/me/tla-archives
@end example

Then, you can get create your own repository, with a command like:

@example
tla tag -S liquidwar6@@sv.gnu.org/liquidwar6--beta--0.1 me@@home.net--2008/liquidwar6--beta--0.4
@end example

The idea is that you create, locally, a depot which has a name
that matches the name on @uref{http://arch.savannah.gnu.org, savannah}
(this is for convenience, you could technically give it any name...)
and indicate that they represent, today, the same thing.

You can get a working copy of your depot with the command:

@example
tla get me@@home.net--2008/liquidwar6--beta--0.4
@end example

This will create a complete source tree, which you are free
to modify, this is where you should hack.

@subsection Synchronizing your repository with upstream releases                
To synchronize yourself with upstream developments, go into
your copy (the directory created by @code{tla get}) and type:

@example
tla star-merge liquidwar6@@sv.gnu.org/liquidwar6--beta--0.1
@end example

This will apply locally all the changes that happened since the
last synchronization. Of course this is one way to work, you
can decide to cherry pick patches and such stuff, but for most
dayly uses, a good'ol @code{star-merge} is fine.

Not that @code{star-merge} will only apply patches on your
working copy, not on your repository. The only way to actually
commit the modifications on the repository is to use the
@code{commit} command.

@subsection Submitting patches                                                  
When using Arch, you can of course still send patches created
with @code{diff}, or even send updated files directly, the way
you would without revision control.

But it can be more convenient to either
@itemize
@item
Send the patches stored in the depot (@code{/home/me/tla-archives}
in our example).
@item
Make patches using @code{tla mkpatch}.
@end itemize

Here's an example of an @code{mkpatch} command, and which will
compute the differences between a previous
@code{liquidwar6--beta--0.4--patch-2} snapshot and a not yet
commited latest version:

@example
tla mkpatch @{arch@}/++pristine-trees/unlocked/liquidwar6/liquidwar6--beta/liquidwar6--beta--0.4/me@@home.net--2006/liquidwar6--beta--0.4--patch-2 . my-patch
@end example

This will create a @code{my-patch} directory, which can be gzipped
and sent by mail.

@subsection Recover from broken lock

Sometimes, when signing a patch, you might enter the wrong passphrase
several times, or you might press CTRL+D inadvertantly. In that case,
tla will be in a half-broken state, telling you it can't acquire
revision lock... A quick workarround for this is to go to the depot,
find the latest patch, and in this repository, create the following folders:
@example
++revision-lock/+contents
@end example
Both are directories, note the two ++ and the single +. the @code{+contents}
directory can be empty. Once you've done this, try to re-commit.

@c ---------------------------------------------------------------------------
@c Using GIT
@c ---------------------------------------------------------------------------

@node Using GIT, Jenkins builds, Using GNU Arch, Hacker's guide
@section Using GIT

@cindex GIT
@cindex CVS
@cindex SVN
@cindex subversion
@cindex source code

@subsection About GIT

There's no CVS or Subversion (AKA ``SVN'') source depot for Liquid War 6.
Instead, a @uref{http://git-scm.com/, GIT} depot is used. GIT has many
advantages over other source control managers (SCM), among them, it's
distributed, like @uref{http://www.gnu.org/software/gnu-arch, GNU Arch}.

You can find interesting informations on GIT here:
@itemize
@item @uref{http://git-scm.com/documentation}
@item @uref{http://savannah.gnu.org/maintenance/UsingGit}
@item @uref{http://savannah.gnu.org/git/?group=liquidwar6}
@end itemize

@subsection Getting the latest source

Simply install git and run the following command:

@example
git clone git://git.sv.gnu.org/liquidwar6.git
@end example

If you are behing a firewall and can't have direct TCP/IP access:

@example
git clone http://git.sv.gnu.org/r/liquidwar6.git
@end example

Additionnally, source can be browsed online here:
@uref{http://git.savannah.gnu.org/cgit/liquidwar6.git}

@subsection Developper access

You need an ssh access on @uref{http://savannah.gnu.org/, Savannah} and
appropriate rights on the project, then you can type:

@example
git clone login@@git.sv.gnu.org:/srv/git/liquidwar6.git
@end example

@subsection Submitting patches

If you have developper access to the project, then a simply @code{git push}
will commit your changes.

If not (that is, if you checked out anonymously using 
@code{git clone git://git.sv.gnu.org/liquidwar6.git} for instance, you
can still submit patches. Follow these steps:
@itemize
@item
edit the code, make your patches, commit to your local GIT tree
@item
run @code{git format-patch -p origin} this command will generate @code{.patch} files, one for each of you commits, which you can send by email. They can be easily integrated in the main source tree by using @code{git apply <file.patch>}.
@end itemize

Note that you can need to run @code{git format-patch -p master} (with @code{master} instead of @code{origin}) it not using a fresh checkout. Also consider adding the @code{--stdout} switch, eg @code{git format-patch -p master --stdout > my-changes.patch} if you're not using a fresh checkout.

@c ---------------------------------------------------------------------------
@c Jenkins builds
@c ---------------------------------------------------------------------------

@node Jenkins builds, , Using GIT, Hacker's guide
@section Jenkins builds

Liquid War 6 uses @uref{http://jenkins-ci.org/, Jenkins} for continuous integration.

Each time a commit is done on the main GIT source tree, a build is triggered.
The list of builds, their status, is available on:

@itemize
@item
@uref{http://www.ufoot.org/jenkins/, all Jenkins jobs on ufoot.org}.
@item
@uref{http://www.ufoot.org/jenkins/job/liquidwar6/, liquidwar6 Jenkins job on ufoot.org}.
@end itemize

It's interesting, among other things, to look at the log produced when
the game is built, as it contains the test suite output, and can provide
usefull informations of what is supposed to happen when the game is built
correctly, and what happens when things go wrong.

@c ===========================================================================
@c Reference
@c ===========================================================================

@node Reference, C API, Hacker's guide, Top
@chapter Reference

This chapter is a technical reference. Most of its content
is self-generated by the program itself. That is to say, most
if its content is already available to you if you have the game
installed. Running @code{liquidwar6 --list}
and @code{liquidwar6 --about=<keyword>} is very likely to give
you the very same informations, the advantage being that you'll
be sure the information is up-to-date and corresponds to the exact
version of the program you have. However, publishing this in
a reader-friendly way is convenient, plus it enables web search
engines to harvest the content.

@menu
* Basic options::       Basic command-line parameters.
* Doc options::         Liquid War 6 is self-documented.
* Show options::        Show informations about the program.
* Path options::        Change default paths.
* Players options::     Define local players.
* Input options::       Customize input.
* Graphics options::    Change display settings.
* Sound options::       Change audio settings.
* Network options::     Tweak network parameters.
* Map parameters::      Global map parameters.
* Map rules.xml::       Change game rules.
* Map hints.xml::       Tune map loader.
* Map style.xml::       Modify map appearance.
* Map teams.xml::       Per map teams and bots settings.
* Advanced settings::   You probably don't want to change these.
* C to Guile::          C functions exported to Guile.
* Script hooks::        Available script hooks.
@end menu

@c ---------------------------------------------------------------------------
@c Basic options
@c ---------------------------------------------------------------------------

@node Basic options, Doc options, , Reference
@section Basic options

@include quick-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Doc options
@c ---------------------------------------------------------------------------

@node Doc options, Show options, Basic options, Reference
@section Doc options

@include doc-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Show options
@c ---------------------------------------------------------------------------

@node Show options, Path options, Doc options, Reference
@section Show options

@include show-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Path options
@c ---------------------------------------------------------------------------

@node Path options, Players options, Show options, Reference
@section Path options

@include path-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Players options
@c ---------------------------------------------------------------------------

@node Players options, Input options, Path options, Reference
@section Players options

@include players-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Input options
@c ---------------------------------------------------------------------------

@node Input options, Graphics options, Players options, Reference
@section Input options

@include input-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Graphics options
@c ---------------------------------------------------------------------------

@node Graphics options, Sound options, Input options, Reference
@section Graphics options

@include graphics-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Sound options
@c ---------------------------------------------------------------------------

@node Sound options, Network options, Graphics options, Reference
@section Sound options

@include sound-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Network options
@c ---------------------------------------------------------------------------

@node Network options, Map parameters, Sound options, Reference
@section Network options

@include network-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Map parameters
@c ---------------------------------------------------------------------------

@node Map parameters, Map rules.xml, Network options, Reference
@section Map parameters

@include map-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Map rules.xml
@c ---------------------------------------------------------------------------

@node Map rules.xml, Map hints.xml, Map parameters, Reference
@section Map rules.xml

@include map-rules-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Map hints.xml
@c ---------------------------------------------------------------------------

@node Map hints.xml, Map style.xml, Map rules.xml, Reference
@section Map hints.xml

@include map-hints-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Map style.xml
@c ---------------------------------------------------------------------------

@node Map style.xml, Map teams.xml, Map hints.xml, Reference
@section Map style.xml

@include map-style-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Map teams.xml
@c ---------------------------------------------------------------------------

@node Map teams.xml, Advanced settings, Map style.xml, Reference
@section Map teams.xml

@include map-teams-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Advanced settings
@c ---------------------------------------------------------------------------

@node Advanced settings, C to Guile, Map teams.xml, Reference
@section Advanced settings

@include advanced-selfdoc.texi

@c ---------------------------------------------------------------------------
@c C to Guile
@c ---------------------------------------------------------------------------

@node C to Guile, Script hooks, Advanced settings, Reference
@section C to Guile

@include funcs-selfdoc.texi

@c ---------------------------------------------------------------------------
@c Script hooks
@c ---------------------------------------------------------------------------

@node Script hooks, , C to Guile, Reference
@section Script hooks

@include hooks-selfdoc.texi

@c ===========================================================================
@c C API
@c ===========================================================================

@node C API, , Reference, Top
@chapter C API

This chapter contains a description of all modules and a
list of all documented C functions in the program. It contains
many references and is self-generated from C comments using
@uref{http://josefsson.org/gdoc/,gdoc} by @uref{http://josefsson.org/,Simon Josefsson}.

In order to reduce the number of pages of printed output, this complete reference
is, by default, disabled in printable versions of the documentation (PostScript, PDF).
This is both to make the manual more readable and to avoid wasting paper.
Think about the environment.

It is however available in the HTML version of the documentation, which you
can read online on @uref{http://www.gnu.org/software/liquidwar6/manual/html_node/}.

Additionnally, the following adresses contain various view on the source code,
giving informations on all the internal and public C interfaces:

@itemize
@item
@uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/}:
the @uref{http://ltp.sourceforge.net/coverage/lcov.php, lcov} output when running @code{./liquidwar6 --test}.
It shows what functions are actually tested, and how many times they are called.
@item
@uref{http://www.ufoot.org/liquidwar/v6/doc/global/}:
the @uref{http://www.gnu.org/software/global/, GNU global} output gives complete cross-references,
macros, headers, contants declaration. It's a very good place to start browsing the code.
@item
@uref{http://www.ufoot.org/liquidwar/v6/doc/cyclo/}:
the @uref{http://parisc-linux.org/~bame/pmccabe/, pmccabe} output shows the cyclomatic complexity
of functions. It enables the programmer to spots the ``ugly'' and dangerous parts of the program.
@item
@uref{http://www.ufoot.org/liquidwar/v6/doc/doxygen/}:
the @uref{http://www.stack.nl/~dimitri/doxygen/, Doxygen} documentation gives an interactive
access to the code, the structures and functions, and their dependencies.
@end itemize

@menu
* libliquidwar6::       Top-level functions.
* libbot::              Bot algorithms.
* mod-brute::           Brute-force bot.
* mod-follow::          A bot that follows others.
* mod-idiot::           Basic idiot bot.
* mod-random::          Totally random bot.
* libcfg::              Loading and saving config files.
* libcli::              Network clients.
* mod-http::            Web client.
* mod-tcp::             Tcp client using native protocol.
* mod-udp::             Udp client using native protocol.
* libcns::              Console handling.
* libcnx::              Connection common code.
* libdat::              Storing network data.
* libdef::              Keywords definitions.
* libdsp::              Threaded display.
* libdyn::              Dynamic module loading.
* libgen::              Pseudo-random map generation.
* libgfx::              Graphics.
* mod-gl1::             Initial 3D graphics backend.
* mod-gles2::           Embedded 3D graphics backend.
* mod-soft::            Software only graphics backend.
* shared-sdl::          SDL utils shared in some graphics backends.
* mod-caca::            TTY/xterm text graphics backend.
* libglb::              Gnulib embedded routines.
* libgui::              GUI utilities.
* libhlp::              Built-in help system.
* libimg::              Generating screenshots.
* libker::              Main kernel module (core algorithm).
* libldr::              Loading maps.
* libmap::              Map, AKA levels.
* libmat::              Math and matrix utilities.
* libmsg::              Network messages.
* libnet::              Low-level network routines.
* libnod::              Manipulating node data.
* libp2p::              A la peer to peer network system.
* libpil::              Dealing with game lag.
* libscm::              Guile wrapper.
* libsim::              Simulating fights.
* libsnd::              Sound.
* mod-csound::          Csound sound backend (vaporware).
* mod-ogg::             Ogg/libSDL default sound backend.
* libsrv::              Network servers.
* mod-httpd::           Embedded web server.
* mod-tcpd::            Tcp server using native protocol.
* mod-udpd::            Udp server using native protocol.
* libsys::              Low-level system utilities.
* libtsk::              Asynchronous loading.
* libvox::              Voxel-based 3D rendering.
@end menu

@c ---------------------------------------------------------------------------
@c libiquidwar6
@c ---------------------------------------------------------------------------

@node libliquidwar6, libbot, , C API
@section libliquidwar6

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/index.html}.

@subsection API

@ifinfo
@include liquidwar6-gdoc.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include liquidwar6-gdoc.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libliquidwar6.html}.
@end ifnothtml
@end ifnotinfo

@c ---------------------------------------------------------------------------
@c libbot
@c ---------------------------------------------------------------------------

@node libbot, mod-brute, libliquidwar6, C API
@section libbot

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/bot/index.html}.

@subsection API

@ifinfo
@include bot-gdoc.texi
@include bot-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include bot-gdoc.texi
@include bot-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libbot.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-brute
@c ---------------------------------------------------------------------------

@node mod-brute, mod-follow, libbot, C API
@section mod-brute

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/bot/mod-brute/index.html}.

@subsection API

@ifinfo
@include mod-brute-gdoc.texi
@include mod-brute-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-brute-gdoc.texi
@include mod-brute-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dbrute.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-follow
@c ---------------------------------------------------------------------------

@node mod-follow, mod-idiot, mod-brute, C API
@section mod-follow

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/bot/mod-follow/index.html}.

@subsection API

@ifinfo
@include mod-follow-gdoc.texi
@include mod-follow-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-follow-gdoc.texi
@include mod-follow-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dfollow.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-idiot
@c ---------------------------------------------------------------------------

@node mod-idiot, mod-random, mod-follow, C API
@section mod-idiot

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/bot/mod-idiot/index.html}.

@subsection API

@ifinfo
@include mod-idiot-gdoc.texi
@include mod-idiot-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-idiot-gdoc.texi
@include mod-idiot-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002didiot.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-random
@c ---------------------------------------------------------------------------

@node mod-random, libcfg, mod-idiot, C API
@section mod-random

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/bot/mod-random/index.html}.

@subsection API

@ifinfo
@include mod-random-gdoc.texi
@include mod-random-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-random-gdoc.texi
@include mod-random-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002drandom.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libcfg
@c ---------------------------------------------------------------------------

@node libcfg, libcli, mod-random, C API
@section libcfg

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cfg/index.html}.

@subsection API

@ifinfo
@include cfg-gdoc.texi
@include cfg-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include cfg-gdoc.texi
@include cfg-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libcfg.html}.
@end ifnothtml
@end ifnotinfo
 
 
@c ---------------------------------------------------------------------------
@c libcli
@c ---------------------------------------------------------------------------

@node libcli, mod-http, libcfg, C API
@section libcli

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cli/index.html}.

@subsection API

@ifinfo
@include cli-gdoc.texi
@include cli-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include cli-gdoc.texi
@include cli-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libcli.html}.
@end ifnothtml
@end ifnotinfo
  
@c ---------------------------------------------------------------------------
@c mod-http
@c ---------------------------------------------------------------------------

@node mod-http, mod-tcp, libcli, C API
@section mod-http

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cli/mod-http/index.html}.

@subsection API

@ifinfo
@include mod-http-gdoc.texi
@include mod-http-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-http-gdoc.texi
@include mod-http-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dhttp.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-tcp
@c ---------------------------------------------------------------------------

@node mod-tcp, mod-udp, mod-http, C API
@section mod-tcp

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cli/mod-tcp/index.html}.

@subsection API

@ifinfo
@include mod-tcp-gdoc.texi
@include mod-tcp-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-tcp-gdoc.texi
@include mod-tcp-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dtcp.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-udp
@c ---------------------------------------------------------------------------

@node mod-udp, libcns, mod-tcp, C API
@section mod-udp

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cli/mod-udp/index.html}.

@subsection API

@ifinfo
@include mod-udp-gdoc.texi
@include mod-udp-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-udp-gdoc.texi
@include mod-udp-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dudp.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libcns
@c ---------------------------------------------------------------------------

@node libcns, libcnx, mod-udp, C API
@section libcns

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cns/index.html}.

@subsection API

@ifinfo
@include cns-gdoc.texi
@include cns-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include cns-gdoc.texi
@include cns-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libcns.html}.
@end ifnothtml
@end ifnotinfo

@c ---------------------------------------------------------------------------
@c libcnx
@c ---------------------------------------------------------------------------

@node libcnx, libdat, libcns, C API
@section libcnx

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cnx/index.html}.

@subsection API

@ifinfo
@include cnx-gdoc.texi
@include cnx-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include cnx-gdoc.texi
@include cnx-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libcnx.html}.
@end ifnothtml
@end ifnotinfo

@c ---------------------------------------------------------------------------
@c libdat
@c ---------------------------------------------------------------------------

@node libdat, libdef, libcnx, C API
@section libdat

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/dat/index.html}.

@subsection API

@ifinfo
@include dat-gdoc.texi
@include dat-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include dat-gdoc.texi
@include dat-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libdat.html}.
@end ifnothtml
@end ifnotinfo

@c ---------------------------------------------------------------------------
@c libdef
@c ---------------------------------------------------------------------------

@node libdef, libdsp, libdat, C API
@section libdef

@subsection Overview

@subsection API

There are no functions in @code{libdef}, only a header file with constants.

@c ---------------------------------------------------------------------------
@c libdsp
@c ---------------------------------------------------------------------------

@node libdsp, libdyn, libdef, C API
@section libdsp

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/dsp/index.html}.

@subsection API

@ifinfo
@include dsp-gdoc.texi
@include dsp-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include dsp-gdoc.texi
@include dsp-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libdsp.html}.
@end ifnothtml
@end ifnotinfo

@c ---------------------------------------------------------------------------
@c libdyn
@c ---------------------------------------------------------------------------

@node libdyn, libgen, libdsp, C API
@section libdyn

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/dyn/index.html}.

@subsection API

@ifinfo
@include dyn-gdoc.texi
@include dyn-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include dyn-gdoc.texi
@include dyn-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libdyn.html}.
@end ifnothtml
@end ifnotinfo

@c ---------------------------------------------------------------------------
@c libgen
@c ---------------------------------------------------------------------------

@node libgen, libgfx, libdyn, C API
@section libgen

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/gen/index.html}.

@subsection API

@ifinfo
@include gen-gdoc.texi
@include gen-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include gen-gdoc.texi
@include gen-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libgen.html}.
@end ifnothtml
@end ifnotinfo

@c ---------------------------------------------------------------------------
@c libgfx
@c ---------------------------------------------------------------------------

@node libgfx, mod-gl1, libgen, C API
@section libgfx

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/gfx/index.html}.

@subsection API

@ifinfo
@include gfx-gdoc.texi
@include gfx-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include gfx-gdoc.texi
@include gfx-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libgfx.html}.
@end ifnothtml
@end ifnotinfo

@c ---------------------------------------------------------------------------
@c mod-gl1
@c ---------------------------------------------------------------------------

@node mod-gl1, mod-gles2, libgfx, C API
@section mod-gl1

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/gfx/mod-gl1/gl-utils/index.html} 
(as there are many sub-directories in this module, please refer to the 
@uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/index.html, test coverage directory index} for complete information).

@subsection API

@ifinfo
@include mod-gl1-gdoc.texi
@include mod-gl1-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-gl1-gdoc.texi
@include mod-gl1-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dgl1.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-gles2
@c ---------------------------------------------------------------------------

@node mod-gles2, mod-soft, mod-gl1, C API
@section mod-gles2

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/gfx/mod-gles2/index.html} 
(as there are many sub-directories in this module, please refer to the 
@uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/index.html, test coverage directory index} for complete information).

@subsection API

@ifinfo
@include mod-gles2-gdoc.texi
@include mod-gles2-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-gles2-gdoc.texi
@include mod-gles2-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dgles2.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-soft
@c ---------------------------------------------------------------------------

@node mod-soft, shared-sdl, mod-gles2, C API
@section mod-soft

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/gfx/mod-soft/index.html} 
(as there are many sub-directories in this module, please refer to the 
@uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/index.html, test coverage directory index} for complete information).

@subsection API

@ifinfo
@include mod-soft-gdoc.texi
@include mod-soft-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-soft-gdoc.texi
@include mod-soft-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dsoft.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c shared-sdl
@c ---------------------------------------------------------------------------

@node shared-sdl, mod-caca, mod-soft, C API
@section shared-sdl

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/gfx/shared-sdl/index.html} 
(as there are many sub-directories in this module, please refer to the 
@uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/index.html, test coverage directory index} for complete information).

@subsection API

@ifinfo
@include shared-sdl-gdoc.texi
@include shared-sdl-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include shared-sdl-gdoc.texi
@include shared-sdl-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dsoft.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-caca
@c ---------------------------------------------------------------------------

@node mod-caca, libglb, shared-sdl, C API
@section mod-caca

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/gfx/mod-caca/index.html} 
(as there are many sub-directories in this module, please refer to the 
@uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/index.html, test coverage directory index} for complete information).

@subsection API

@ifinfo
@include mod-caca-gdoc.texi
@include mod-caca-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-caca-gdoc.texi
@include mod-caca-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dcaca.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libglb
@c ---------------------------------------------------------------------------

@node libglb, libgui, mod-caca, C API
@section libglb

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/glb/index.html}.

@subsection API

@ifinfo
@include glb-gdoc.texi
@include glb-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include glb-gdoc.texi
@include glb-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libglb.html}.
@end ifnothtml
@end ifnotinfo

@c ---------------------------------------------------------------------------
@c libgui
@c ---------------------------------------------------------------------------

@node libgui, libhlp, libglb, C API
@section libgui

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/gui/index.html}.

@subsection API

@ifinfo
@include gui-gdoc.texi
@include gui-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include gui-gdoc.texi
@include gui-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libgui.html}.
@end ifnothtml
@end ifnotinfo

@c ---------------------------------------------------------------------------
@c libhlp
@c ---------------------------------------------------------------------------

@node libhlp, libimg, libgui, C API
@section libhlp

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/hlp/index.html}.

@subsection API

@ifinfo
@include hlp-gdoc.texi
@include hlp-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include hlp-gdoc.texi
@include hlp-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libhlp.html}.
@end ifnothtml
@end ifnotinfo

@c ---------------------------------------------------------------------------
@c libimg
@c ---------------------------------------------------------------------------

@node libimg, libker, libhlp, C API
@section libimg

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/img/index.html}.

@subsection API

@ifinfo
@include img-gdoc.texi
@include img-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include img-gdoc.texi
@include img-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libimg.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libker
@c ---------------------------------------------------------------------------

@node libker, libldr, libimg, C API
@section libker

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/ker/index.html}.

@subsection API

@ifinfo
@include ker-gdoc.texi
@include ker-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include ker-gdoc.texi
@include ker-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libker.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libldr
@c ---------------------------------------------------------------------------

@node libldr, libmap, libker, C API
@section libldr

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/ldr/index.html}.

@subsection API

@ifinfo
@include ldr-gdoc.texi
@include ldr-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include ldr-gdoc.texi
@include ldr-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libldr.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libmap
@c ---------------------------------------------------------------------------

@node libmap, libmat, libldr, C API
@section libmap

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/map/index.html}.

@subsection API

@ifinfo
@include map-gdoc.texi
@include map-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include map-gdoc.texi
@include map-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libmap.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libmat
@c ---------------------------------------------------------------------------

@node libmat, libmsg, libmap, C API
@section libmat

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/mat/index.html}.

@subsection API

@ifinfo
@include mat-gdoc.texi
@include mat-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mat-gdoc.texi
@include mat-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libmat.html}.
@end ifnothtml
@end ifnotinfo

@c ---------------------------------------------------------------------------
@c libmsg
@c ---------------------------------------------------------------------------

@node libmsg, libnet, libmat, C API
@section libmsg

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/msg/index.html}.

@subsection API

@ifinfo
@include msg-gdoc.texi
@include msg-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include msg-gdoc.texi
@include msg-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libmsg.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libnet
@c ---------------------------------------------------------------------------

@node libnet, libnod, libmsg, C API
@section libnet

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/net/index.html}.

@subsection API

@ifinfo
@include net-gdoc.texi
@include net-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include net-gdoc.texi
@include net-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libnet.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libnod
@c ---------------------------------------------------------------------------

@node libnod, libp2p, libnet, C API
@section libnod

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/nod/index.html}.

@subsection API

@ifinfo
@include nod-gdoc.texi
@include nod-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include nod-gdoc.texi
@include nod-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libnod.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libp2p
@c ---------------------------------------------------------------------------

@node libp2p, libpil, libnod, C API
@section libp2p

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/p2p/index.html}.

@subsection API

@ifinfo
@include p2p-gdoc.texi
@include p2p-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include p2p-gdoc.texi
@include p2p-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libp2p.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libpil
@c ---------------------------------------------------------------------------

@node libpil, libscm, libp2p, C API
@section libpil

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/pil/index.html}.

@subsection API

@ifinfo
@include pil-gdoc.texi
@include pil-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include pil-gdoc.texi
@include pil-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libpil.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libscm
@c ---------------------------------------------------------------------------

@node libscm, libsim, libpil, C API
@section libscm

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/scm/index.html}.

@subsection API

@ifinfo
@include scm-gdoc.texi
@include scm-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include scm-gdoc.texi
@include scm-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libscm.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libsim
@c ---------------------------------------------------------------------------

@node libsim, libsnd, libscm, C API
@section libsim

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/sim/index.html}.

@subsection API

@ifinfo
@include sim-gdoc.texi
@include sim-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include sim-gdoc.texi
@include sim-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libsim.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libsnd
@c ---------------------------------------------------------------------------

@node libsnd, mod-csound, libsim, C API
@section libsnd

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/snd/index.html}.

@subsection API

@ifinfo
@include snd-gdoc.texi
@include snd-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include snd-gdoc.texi
@include snd-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libsnd.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-csound
@c ---------------------------------------------------------------------------

@node mod-csound, mod-ogg, libsnd, C API
@section mod-csound

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/snd/mod-csound/index.html}.

@subsection API

@ifinfo
@include mod-csound-gdoc.texi
@include mod-csound-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-csound-gdoc.texi
@include mod-csound-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dcsound.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-ogg
@c ---------------------------------------------------------------------------

@node mod-ogg, libsrv, mod-csound, C API
@section mod-ogg

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/snd/mod-ogg/index.html}.

@subsection API

@ifinfo
@include mod-ogg-gdoc.texi
@include mod-ogg-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-ogg-gdoc.texi
@include mod-ogg-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dogg.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libsrv
@c ---------------------------------------------------------------------------

@node libsrv, mod-httpd, mod-ogg, C API
@section libsrv

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/srv/index.html}.

@subsection API

@ifinfo
@include srv-gdoc.texi
@include srv-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include srv-gdoc.texi
@include srv-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libsrv.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-httpd
@c ---------------------------------------------------------------------------

@node mod-httpd, mod-tcpd, libsrv, C API
@section mod-httpd

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/srv/mod-httpd/index.html}.

@subsection API

@ifinfo
@include mod-httpd-gdoc.texi
@include mod-httpd-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-httpd-gdoc.texi
@include mod-httpd-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dhttpd.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-tcpd
@c ---------------------------------------------------------------------------

@node mod-tcpd, mod-udpd, mod-httpd, C API
@section mod-tcpd

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/srv/mod-tcpd/index.html}.

@subsection API

@ifinfo
@include mod-tcpd-gdoc.texi
@include mod-tcpd-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-tcpd-gdoc.texi
@include mod-tcpd-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dtcpd.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c mod-udpd
@c ---------------------------------------------------------------------------

@node mod-udpd, libsys, mod-tcpd, C API
@section mod-udpd

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/srv/mod-udpd/index.html}.

@subsection API

@ifinfo
@include mod-udpd-gdoc.texi
@include mod-udpd-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include mod-udpd-gdoc.texi
@include mod-udpd-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/mod_002dudpd.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libsys
@c ---------------------------------------------------------------------------

@node libsys, libtsk, mod-udpd, C API
@section libsys

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/sys/index.html}.

@subsection API

@ifinfo
@include sys-gdoc.texi
@include sys-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include sys-gdoc.texi
@include sys-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libsys.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libtsk
@c ---------------------------------------------------------------------------

@node libtsk, libvox, libsys, C API
@section libtsk

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/tsk/index.html}.

@subsection API

@ifinfo
@include tsk-gdoc.texi
@include tsk-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include tsk-gdoc.texi
@include tsk-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libtsk.html}.
@end ifnothtml
@end ifnotinfo
 
@c ---------------------------------------------------------------------------
@c libvox
@c ---------------------------------------------------------------------------

@node libvox, , libtsk, C API
@section libvox

@subsection Overview

View @uref{http://ltp.sourceforge.net/coverage/lcov.php,lcov} test coverage results 
on @uref{http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/vox/index.html}.

@subsection API

@ifinfo
@include vox-gdoc.texi
@include vox-doxygen.texi
@end ifinfo

@ifnotinfo
@ifhtml
@include vox-gdoc.texi
@include vox-doxygen.texi
@end ifhtml
@ifnothtml
Online @uref{http://josefsson.org/gdoc/,gdoc} reference available on
@uref{http://www.gnu.org/software/liquidwar6/manual/html_node/libvox.html}.
@end ifnothtml
@end ifnotinfo
 
@c ===========================================================================
@c Appendices
@c ===========================================================================

@c ---------------------------------------------------------------------------
@c Authors
@c ---------------------------------------------------------------------------

@node Authors, 2005 .plan, , Top
@appendix Authors

Here's a list of contributors :

Project maintainer, main developper :
@itemize
@item
@uref{mailto:ufoot@@ufoot.org, Christian Mauduit}
@end itemize

Original idea :
@itemize
@item
Thomas Colcombet
@end itemize

Artwork, level design :
@itemize
@item
Kasper Hviid
@end itemize

Musics :
@itemize
@item
Tim Chadburn (menus)
@item
Robert Radamant (Free the sounds)
@item
LapSuS (Heav'hypnosis)
@item
Nighter313 (Oriental Travel)
@end itemize

Libcaca backend :
@itemize
@item
A. Frances
@item
R. Clavel
@item
K. Lemmonnier
@end itemize

Translations :
@itemize
@item
Karl Ove Hufthammer (NN, Norwegian)
@item
Yevgeny Lezhnin (RU, Russian)
@end itemize

Many people contributed to @uref{http://www.ufoot.org/liquidwar/v5, Liquid War 5},
their names are not listed here,
but without them Liquid War 6 would obviously never have been started.
Special thanks to all of them. However this is not a direct contribution
to the project, in terms of code and other copyrightable materials.

@c ---------------------------------------------------------------------------
@c 2005 .plan
@c ---------------------------------------------------------------------------

@node 2005 .plan, Fanfic, Authors, Top
@appendix 2005 .plan

Here's my .plan file, which describes what I 
(@uref{mailto:ufoot@@ufoot.org,Christian Mauduit}) have planned for Liquid War 6.
There's no garantee that what's written here is a precise description of the
real future, however it should give a good idea of what I have in mind.

Note that the information here was written in summer 2005, it might or not
be accurate now, as the main reason for plans to exist is that people never
follow them. I'm no exception.

@section Complete rewrite

Liquid War 6 will be an almost complete rewrite. I mean that common code between branches 5 and 6 might end up in representing 0% of the total code. I think this is a wise decision, for the current code is really hard to maintain, and would not survive any serious cleanup. LW5 was first written in 1998, for DOS, when I had much less experience in programming. In 7 years I - and other people as well - hacked major enhancements in it such as cross-platform support, network games, and if you compare release 5.0 with the latest 5.x.x release, you'll see that a bunch of things have changed. I had never expected I would patch and fix this game for so long, and it's no surprise that it's bloated today.

FYI, here's a list of what makes LW5 unsuitable for major improvements without a complete rewrite:

@itemize
@item 
global variable hell. Lots of things are stored in globals.
@item 
hard-coded C GUI. Read src/level.c to get an idea of how horrible it is.
@item 
hard-coded 256 colors paletted mode. A clever bet in 1998 (performance...). Not anymore.
@item 
generally bloated code. Makes bug-finding very tricky. 
@end itemize

@section Technologies

Liquid War 6 will use a different technical framework than @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}.

@subsection Script + standard C + assembly

It happens that coding a large project in pure C is a waist of time, if possible at all.

If one applies the standard 80/20 rule to a computer game, one might state that 80% of the code eat up 20% of the CPU and the other 20% of the code eat up 80% of the CPU, the former being high-level glue code and the latter being low-level algorithmic code.

With Liquid War, one could speak of the 99/01 rule. I mean that 99% of the CPU time concerns only 1% of the code, and vice-versa. Basically, Liquid War has a very CPU-greedy core algorithm, still spends a fair amount of CPU displaying stuff (but this is delegated to the low-level game programming library) and the rest is totally unsignificant, in terms of CPU. Point is this "rest" represents the vast majority of the code, and also represents the very same buggy code I spend nights to patch on @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}. I'm talking about network code, GUI, and other high-level glue-code which are currently being written in C.

This idea is to write all this in a convenient scripting language. There won't be any impact on performances. I can't garantee Liquid War 6 will be blazingly fast, but for sure it won't be the scripting language fault. And of course if, as in Liquid War 3 and 5, I feel the need to implement some stuff in assembly for performances issues, I will do it.

We end up with a multi-language architecture: script + C + assembly.

My guess is that I'll use @uref{http://www.gnu.org/software/guile/,Scheme} as an extension language. @uref{http://www.python.org,Python} would be a good choice too. Let's say I'll give Scheme a chance, and if it's really not adapted, I'll switch back to Python. The point is that today I know Python and don't really know Scheme, but, well, it's always a pleasure for me to learn new things. It's fun.

So what is planned today is that Liquid War 6 will be a Scheme program, which will call callbacks functions written in C and/or assembly. These functions will do all the low-level time consuming algorithmic and graphical stuff. The rest of the code being entirely scripted.

@subsection OpenGL

Liquid War is not a 3D game, so why use OpenGL?

@itemize
@item 
it's a very convenient way to access video hardware acceleration with XFree86.
@item 
low-end computers and/or computers without 3D acceleration can still run @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}.
@item 
I'm interested in learning/using this API 8-) 
@end itemize

This choice implies that I won't use @uref{http://alleg.sourceforge.net/,Allegro} anymore. Allegro stays a very convenient library and I would recommend it for it's excellent, easy to learn, powerfull, and stable. But for the needs of Liquid War 6 I'll use something else (because of OpenGL). I first thought of using @uref{http://freeglut.sourceforge.net/,GLUT} but I might end up simply using @uref{http://www.libsdl.org/,SDL}. The idea is just fo have an OpenGL wrapper which sets up OpenGL in a similar manner on all platforms, and handles basic things such as mouse or keyboard.

@subsection CSound

I've got two excellent books on @uref{http://www.csounds.com/,Csound}, and the will to learn how to use this tool.

I'll probably use Csound for a number of things, ranging from "bubbling sounds" to full blown music. Stay tuned 8-)

@section Functionnalities

@subsection Visual enhancements

Of course Liquid War 6 will look nicer than @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}, blah blah blah. What do you think?

Maybe I'll try to use some OpenGL features to make it possible to play on a ball, on a Moebius ring, or other fancy things. I have zillion of ideas, future will decide which ones will be implemented first.

To make it clear, visual enhancements aren't my top-level priority. However I'll try and make room for these enhancements, and prepare the terrain correctly. So it's possible that the first releases of Liquid War 6 won't be that much better than @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}, but at least Liquid War 6 will have the possibility to evolve. Something @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5} doesn't have.

@subsection Rules enhancements

There are many things that could be done easily:

@itemize
@item 
several cursors for one team
@item 
alliances between teams
@item 
deep places on a map, where more liquid can reside
@item 
circular maps which "connect" the left border to the right one
@item 
... 
@end itemize

As for graphical improvements, this is not my top-level priority. Simply, I'll make the game ready-to-improve. Again, all these enhancements are very hard to code in @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}, else I would already have coded them.
Network enhancements

That's my top-level prioriry.

Why is that? Well, think of Liquid War in terms of "what makes it a good game?" and "what makes it a poor game?".

It's a good game because:

@itemize
@item 
the idea is original
@item 
the gameplay is addictive
@item 
you can play on a LAN
@item 
all the family can play
@item 
it's cross-platform
@item 
it's Free Software 
@end itemize

It's a poor game because:

@itemize
@item 
it's somewhat ugly and has a retro "back in the eighties" look
@item 
network games are slow on Internet
@item 
there are not enough active Internet servers 
@end itemize

For the ugliness, well, OpenGL and some artwork should make it. But for the network, what's the real problem?

The real problem is that in the current situation, the server needs to have all "keystrokes" before doing anything, and all players must be connected before a game starts. Here's what I plan to do to fix this:

@itemize
@item 
players will be able to connect on a game "on the fly". This is done by most online games, and it's IMHO a required features for a network mode to work on Internet (not speaking of local networks, but real wide online gaming). How this will fit with Liquid War's rules is not totally decided, but I already know of several way to achieve this.
@item 
I'll implement an "anticipation" system "a la" @uref{http://www.ufoot.org,U61}. This means that no matter if a remote player has a poor network connection, things will behave as if everything was fine. Internally, the system keeps 2 images of the game. One which is "anticipated" and displayed to the player, and one which is validated but outdated, kept internally. It's a little hard to explain, consumes twice as much CPU and memory, but it works. It happens that today the lacking ressource for playing Liquid War online is more on the network side than on the local CPU and memory aspects.
@item 
I'll take it to the next level and implement a "peer-to-peer-like" network model, in which any client can become a server. The idea behind is that if a server quits the game, then a client takes its role, letting the game continue for hours. This way one could virtually have a never ending Liquid War game which would last weeks. I believe this could be really cool. I also believe no proprietary game will ever implement that, for in this model there's no way to force people to access a centralized server, this server usually being the major key in the business model of a company which sells proprietary software. 
@end itemize

This third point will be the real enhancement of Liquid War with version 6. It's one of the very points which drives me to rewrite it completely. First because it's impossible to implement it without some heavy work. Then because I find it very motivating.

@subsection Hey, you forgot my idea!!!

Many gamers submitted suggestions, either by mail or by posting messages on the mailing list.

Don't worry, I keep them. Not reading them here does not mean I won't implement them. It simply means I won't implement them first. I first need the game basically function before enhancing it with fancy stuff.

@section Road map

As I stated on the mailing list, when thinking about Liquid War 6, think of years rather than months (unless I get fired, jobless, or spend several months in a hospital with a laptop).

Note that this road map takes it for granted that I'll be the lone coder on the project. It's unlikely that someone is going to help me for the first stages, until there's at least something real, something playable. Something that proves that the concept is valid. Besides, (real) team work implies a significant overhead, especially at project start. It's hard to figure out how to distribute tasks when the tasks themselves are not clearly identified. But for the rest (starting in 2007 or 2008), it's possible that external help might greatly... ...help!

@itemize
@item
2005 : Project framework should be done. This implies that the scripting engine is up and running, graphical mode works, config and data loading work, basic menus are available. Nothing playable.
@item 
2006 : Import the core algorithm from @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}, make the game playable in "demo mode" ("à la" Liquid War 2), implement the network "peer-to-peer-like" mode. At this stage, it will be possible to know wether Liquid War 6 is true vaporware or not.
@item
2007 : glue all this together to make something usable by anyone, heavy work on the GUI, on the options, on error checking, many bug fixes. The goal is to have a game which is equivalent to @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}, with the network aspects pushed to the next level.
@item
2008 : tadaaaaaaaaaaa! Release the game "publicly" - inform Freecode 8-) - and enhance it with all the feedback from gamers (bug reports and suggestions received since 1998). Work on artwork (both graphics and musics). Write documentation.
@item
2009 : stabilize the game, patch it for all those things which had been forgotten back then in 2005, optimize for speed, bug-fix bug-fix bug-fix.
@item
2010 : stop maintaining @uref{http://www.ufoot.org/liquidwar/v5,Liquid War 5}, invite Liquid War fans and coders to a hudge party in my garden, sing all night, drink beers and wine, teach Liquid War strategies to my 5 and 6 year old daughters, remember the old times when Liquid War wasn't so cool 8-) 
@end itemize

@c ---------------------------------------------------------------------------
@c Fanfic
@c ---------------------------------------------------------------------------

@node Fanfic, Links, 2005 .plan, Top
@appendix Fanfic

Quoting Gavin: ``I wrote a liquid war fanfic some time ago [...] I wrote it after a friend claimed that there wasn't any liquid war fanfic because it wasn't possible.''

So here it is, a Liquid War fanfic. It was initially written for
Liquid War 5, but applies to Liquid War 6 as well. Enjoy!

@section The Battle of Emberlificoted

@sp 1
...
@sp 1

The General presided over his massing army in his seat, or rather hovering ring, of power. It dipped slightly as he flew low over his troops marching through the viscous marsh-like terrain. They were like children: obedient, loyal, and they ate a lot.

Glancing at the status panel mounted in front of him he grimaced; the other five armies: Yellow, Green, Orange, Turquoise, and, of course, Red, were also readying armies of a similar size to his own. His violet clones would have to fight hard and eat well to win this day.

Today would not be a battle of luck, the General mused, it would be a battle of tactics, of alliances, and of betrayal. Every clone was identical - that was the general idea behind clones - and the terrain seemed strangely symmetrical; it would not give advantage to any of the six armies amassed today. Glancing at the hologram of the battlefield projected in front of him the General noted that he would have to move quickly, Orange and Yellow were too close for comfort, though fortunately Baron Red's army of eponymous coloured clones was the furthest.

General Violet's fingertips were sweaty even before they touched the four main control keys in front of him. They were labeled 'W', 'A', 'D', and, of course, the full retreat button - very useful for misleading foes and ambushing them as they pursued - 'S'. The keys were arrange in a roughly equilateral triangular pattern; with 'S' forming the base and being adjacent to both 'A' and 'D', 'W' formed the tip of the triangle.

A long breath left his parched lips as at last he made his move.

@sp 1
...
@sp 1

``Dammit!'' he screamed moments later. He had misjudged Captain Yellow and Commander Orange; he had expected one at least to attack immediately, one he could have handled. They were working together - foiling his attempt to shoot between them to near the center of the battlefield to gain a better vantage point. Yellow had shot down towards him, cutting off his advance, and now Orange had sealed his escape route. ``It's not over yet'' muttered the General. He opened a voice channel with Commander Orange:

``Very clever. Flawed, but still clever.''

``Flawed?'' came the reply.

``Yes flawed, when the good Captain is finished devouring my army who do you think he will turn to next?'', bluffed the General - his hands worked quickly as he manoeuvred his hovering control ring, all that his troops ever saw of him, carefully towards the weakest section of his attackers. If he could just break out a few units he could soon turn the tide against both Yellow and Orange.

``We have an alliance...'' Orange's voice was unsure now.

Time for some sarcasm to through her even more off balance, thought the General,

``I gathered'', he spoke softly, slowly, and with too much meaning. Then closing the channel he turned his attention back to his escape.

@sp 1
...
@sp 1

``Yes!'' wooped the ecstatic figure of the General. Fifty or so of his troops had broken free undetected and were even now working their way cautiously towards the camps of the Yellow army, only the front lines were still actively fighting; this opening gambit of Yellow and Orange had turned into a stale siege and Yellow's army had pitched tent.

General Violet steered his hovering guidance ring to the center of the Yellow camp. His troops struck, both those who had got behind the lines and those who were still besieged. Yellow reacted too slowly and suddenly found that her army, was shrinking back from the onslaught. There was nowhere to run to, and bye now her only ally - Commander Orange - had abandoned her to her fate; he was too busy engaging Sir. Turquoise, who had managed to escape from the slaughter that the Baron had caused to the Turquoise ranks and was even now valiantly attacking the flanks of the Orange troops.

A glance at the status panel showed that Yellow's life force was fading quickly: 8%, 3%, 1%, Gone.

The General smiled, he always enjoyed getting the first kill, and by now his armies life force had grown and his clones had replicated. With his, now, formidable fighting force it was no problem to engulf both Sir. Turquoise and Commander Orange's brawling armies and annihilate them. Once again his army grew in size and power. Now if only the Baron didn't notice that..., thought the General.

@sp 1
...
@sp 1

``Too late!'' yelped the General, now thrown into panic, as he saw the approaching Baron. His army had also grown in size and power - having fatally injured the Turquoise army within the opening moments of the battle, and having finally managed to catch the elusive fleeing form of, or what remained of, Emperor Green.

Gripping the controls harder the General thought quickly, his army doesn't so completely outnumber me that this is already over, however unless I can cause him to make a mistake that allows me to take the upper hand then I will inevitably lose. Maybe I can...

This thought was terminated and replaced by another as the Baron's angry red troops broke through the undergrowth that had covered their movements and started to surround the General's army. The thought that now throbbed through the panic-stricken mind of General Violet was simply 'Run!'.

Even as he signaled the retreat and made for what seemed to be the only possible means of escape the Baron's blood red control ring appeared at the opening. The General knew it was over, even before the host of red beings appeared at the opening.

There was no escape. His life force was almost depleted and he was surrounded. Then it was that the Baron decided to communicate:

``Too bad. It was a good game''

The General blinked, gaped, and was generally gobsmacked. Just before his life force completely failed and his own weary eyes closed in defeat he snarled,

``What!? This is not a game!'' were the General's dying words. 

@c ---------------------------------------------------------------------------
@c Links
@c ---------------------------------------------------------------------------

@node Links, Copying, Fanfic, Top
@appendix Links

This section lists various Internet Liquid War related links.

@appendixsec Official links

These are the ``official'' links, hopefully you'll find everything
you need here:

@itemize
@item
@uref{http://www.gnu.org/software/liquidwar6/}: Liquid War 6 homepage
@item
@uref{http://www.gnu.org/software/liquidwar6/manual/}: Online manual
@item
@uref{http://ftp.gnu.org/gnu/liquidwar6/}: GNU downloads (source only)
@item
@uref{http://download.savannah.gnu.org/releases/liquidwar6/}: Savannah downloads (source and binaries)
@item
@uref{http://www.ufoot.org/download/liquidwar/v6/}: ufoot.org downloads (mirror)
@item
@uref{http://www.ufoot.org/liquidwar/v6/snapshots/}: Daily snapshots
@item
@uref{http://www.ufoot.org/liquidwar/v6/doc/}: Automatically generated doc
@item
@uref{http://www.ufoot.org/jenkins/job/liquidwar6/}: Jenkins continuous integration
@item
@uref{http://git.savannah.gnu.org/cgit/liquidwar6.git}: GIT repository
@item
@uref{http://savannah.gnu.org/projects/liquidwar6/}: Project on Savannah
@item
@uref{http://savannah.gnu.org/bugs/?func=additem&group=liquidwar6}: Submit a bug report
@item
@uref{http://lists.gnu.org/archive/html/help-liquidwar6/}: Mailing-list archives
@item
@uref{http://ufoot.org:8056/}: Permanent ``seed'' server running latest snapshot
@item
@uref{irc://irc.freenode.net/liquidwar}: IRC channel @code{#liquidwar} on irc.freenode.net
@end itemize

@appendixsec Other sites

Note that some of these links might link to and/or promote
proprietary software. It's important to emphasize Liquid War 6
is free software, free as in speech, and you are encouraged to
use software that protects your freedom. However, for your
convenience, those links are provided, they might give you
a hopefully neutral idea of what the game is all about.

This list is also by no way extensive, it's provided ``as is''.

@itemize
@item
@uref{http://en.wikipedia.org/wiki/Liquid_War}: Liquid War entry on Wikipedia
@item
@uref{http://fr.wikipedia.org/wiki/Liquid_War}: Liquid War entry on Wikipedia (French)
@item
@uref{http://freecode.com/projects/liquid-war-6}: Liquid War 6 on Freecode.
@item
@uref{http://www.openhub.net/p/liquidwar6}: Liquid War 6 on Open HUB.
@item
@uref{http://www.playdeb.net/software/Liquid%20War%206}: Liquid War 6 on PlayDeb.
@end itemize

@appendixsec Old stuff

Various links that are deprecated, but still might contain interesting informations
for those who enjoy digging into the past.

@itemize
@item
@uref{http://arch.sv.gnu.org/archives/liquidwar6/}: GNU Arch repository (replaced by Git as for this project)
@item
@uref{http://www.ufoot.org/liquidwar/v5}: Liquid War 5, the previous version of the game.
@item
@uref{http://git.savannah.gnu.org/gitweb/?p=liquidwar6.git}: Gitweb interface, cgit seems to be Savannah's default now.
@end itemize

@c ---------------------------------------------------------------------------
@c GNU GENERAL PUBLIC LICENSE
@c ---------------------------------------------------------------------------

@node Copying, GNU Free Documentation License, Links, Top
@appendix GNU GENERAL PUBLIC LICENSE
@include gpl.texi

@c ---------------------------------------------------------------------------
@c GNU Free Documentation License
@c ---------------------------------------------------------------------------

@node GNU Free Documentation License, Indexes, Copying, Top
@appendix GNU Free Documentation License
@include fdl.texi

@c ---------------------------------------------------------------------------
@c Indexes
@c ---------------------------------------------------------------------------

@node Indexes, , GNU Free Documentation License, Top
@appendix Indexes

@section Concept index
@printindex cp

@section Function and keyword index
@printindex fn

@section Data types index
@printindex tp

@bye

@c lquidwar6.texi ends here
