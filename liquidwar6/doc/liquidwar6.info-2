This is /home/ufoot/Home/_/liquidwar6/doc/liquidwar6.info, produced by
makeinfo version 4.13 from
/home/ufoot/Home/_/liquidwar6/doc/liquidwar6.texi.

Liquid War 6, a unique multiplayer wargame.

   Copyright (c)  2005, 2006, 2007, 2008, 2009, 2010, 2011  Christian
Mauduit <ufoot@ufoot.org>

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

START-INFO-DIR-ENTRY
* Liquid War 6: (liquidwar6).   A unique multiplayer wargame.
END-INFO-DIR-ENTRY


File: liquidwar6.info,  Node: Map rules.xml,  Next: Map hints.xml,  Prev: Map parameters,  Up: Reference

4.11 Map rules.xml
==================

4.11.1 boost-power
------------------

 -- Command-line option: `--boost-power=<value>'
 -- Environment variable: `LW6_BOOST_POWER'
 -- XML key: `boost-power'
     Type: integer

     Default value: 3 Min value: 1 Max value: 10

     Defines how fast and powerfull the boost is. That is, if on
     'boost.png' it's pitch black and this parameter is set to 3, then
     fighters will move and act 3 times than what they would do
     normally.

4.11.2 color-conflict-mode
--------------------------

 -- Command-line option: `--color-conflict-mode=<value>'
 -- Environment variable: `LW6_COLOR_CONFLICT_MODE'
 -- XML key: `color-conflict-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     How to handle color conflicts, that is, when a player requests a
     color, but this color is already used, what should be done? If 0,
     wether a color already exists won't affect the color of a new
     cursor. If 1, then two players on the same computer will be
     allowed to share the same color/team, but if another computer is
     already playing with a color, any new computer will need to use
     another team. If 2, then it's impossible for a new cursor to use a
     pre-existing color, any new cursor will require a new color, if
     that color is already used, a new color will be picked randomly.

4.11.3 cursor-pot-init
----------------------

 -- Command-line option: `--cursor-pot-init=<value>'
 -- Environment variable: `LW6_CURSOR_POT_INIT'
 -- XML key: `cursor-pot-init'
     Type: integer

     Default value: 100000 Min value: 5000 Max value: 500000

     Defines the cursor potential at startup. Not really any reason to
     change it.  Theorically, there could be maps where the default
     value doesn't fit, but none has been seen yet.

4.11.4 danger-power
-------------------

 -- Command-line option: `--danger-power=<value>'
 -- Environment variable: `LW6_DANGER_POWER'
 -- XML key: `danger-power'
     Type: integer

     Default value: 200 Min value: 0 Max value: 10000

     Defines how dangerous are the black zones defined in 'danger.png'.
     The value is used to decrease the fighter health at each move, so
     you should compare its value to something like 'fighter-attack'.
     Being on a dangerous zone is a bit like being attacked by an
     invisible and unknown ennemy.

4.11.5 exp
----------

 -- Command-line option: `--exp=<value>'
 -- Environment variable: `LW6_EXP'
 -- XML key: `exp'
     Type: integer

     Default value: 1 Min value: 0 Max value: 99

     Level of experience (AKA exp) required to play the current level.
     If this level is validated (that is, won) then player will be
     granted with a level of exp+1 and be able to play all the next
     levels. An exp of 0 means the level is playable by a pure beginner.

4.11.6 fighter-attack
---------------------

 -- Command-line option: `--fighter-attack=<value>'
 -- Environment variable: `LW6_FIGHTER_ATTACK'
 -- XML key: `fighter-attack'
     Type: integer

     Default value: 500 Min value: 1 Max value: 10000

     Defines how hard fighters will attack others, that is, in one
     attack, how many life-points the attacked fighter will loose.
     Increasing this will cause your opponents to melt faster when you
     attack them. With a low value, it will take ages to take on your
     opponents. Different styles of game. Can radically change the
     gameplay.

4.11.7 fighter-defense
----------------------

 -- Command-line option: `--fighter-defense=<value>'
 -- Environment variable: `LW6_FIGHTER_DEFENSE'
 -- XML key: `fighter-defense'
     Type: integer

     Default value: 50 Min value: 0 Max value: 10000

     Defines how fast fighters will regenerate after an attack. When
     this parameter is set low, an attacked fighter, which is very dark
     and almost dead will take a very long time to regain energy. If
     the parameter is set high, it can almost instantaneously regain
     energy.

4.11.8 fighter-new-health
-------------------------

 -- Command-line option: `--fighter-new-health=<value>'
 -- Environment variable: `LW6_FIGHTER_NEW_HEALTH'
 -- XML key: `fighter-new-health'
     Type: integer

     Default value: 5000 Min value: 1 Max value: 10000

     Defines how healthy fighters will be when they appear on the map.
     This can be either at the beginning of the game of when a fighter
     changes team. Setting this low will allow battefields to switch
     from one side to another very fast, for freshly gained fighters
     will be feeble and very likely to return to their original camp.
     To calibrate this parameter, keep in mind that the absolute
     maximum health a fighter can have is always 10000 (ten-thousands).

4.11.9 fighter-regenerate
-------------------------

 -- Command-line option: `--fighter-regenerate=<value>'
 -- Environment variable: `LW6_FIGHTER_REGENERATE'
 -- XML key: `fighter-regenerate'
     Type: integer

     Default value: 5 Min value: 0 Max value: 10000

     Defines at which speed fighters will self-regenerate, without even
     begin packed together. This will allow lone fighters to regenerate
     a bit by hiding somewhere in the map. This is typically a low
     value, might even be 0.

4.11.10 frags-fade-out
----------------------

 -- Command-line option: `--frags-fade-out=<value>'
 -- Environment variable: `LW6_FRAGS_FADE_OUT'
 -- XML key: `frags-fade-out'
     Type: integer

     Default value: 100 Min value: 10 Max value: 100

     When a player looses (in deathmatch mode) all player points will be
     multiplicated by this percentage, for instance if it's 90 and
     player had 50 points, then player will only have 45 points, then
     points corresponding to the new death will be added/substrated to
     its total. This is to avoid players with thousands of points in
     advance, and keep everyone in the race. A low value will minimize
     the importance of game start. This is only used in modes where
     frags are distributed in a proportional way.

4.11.11 frags-mode
------------------

 -- Command-line option: `--frags-mode=<value>'
 -- Environment variable: `LW6_FRAGS_MODE'
 -- XML key: `frags-mode'
     Type: integer

     Default value: 2 Min value: 0 Max value: 3

     Defines how points are calculated in deathmatch mode, 0 is old
     school simple mode. 1 is in a mode in which 1 point is attributed
     to every winner, and looser looses all the corresponding points
     (total is always 0). 2 isproportional mode, with a total of 0 kept
     constant, that is, loosers loose as many points as attributed to
     winners. 3 is a mode in which at each death, winners are
     attributed a number of points proportional to their fighters, and
     loosers scores remain untouched.

4.11.12 frags-to-distribute
---------------------------

 -- Command-line option: `--frags-to-distribute=<value>'
 -- Environment variable: `LW6_FRAGS_TO_DISTRIBUTE'
 -- XML key: `frags-to-distribute'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how many points will be distributed when in deathmatch
     mode. When a player looses, this amont of points will be
     substracted to its total, and the same amount of points will be
     distributed to other live players, proportionnally to how many
     fighters they have on the battlefield.

4.11.13 glue-power
------------------

 -- Command-line option: `--glue-power=<value>'
 -- Environment variable: `LW6_GLUE_POWER'
 -- XML key: `glue-power'
     Type: integer

     Default value: 20 Min value: 1 Max value: 100

     Defines how sticky and powerfull the glue is. That is, if on
     'glue.png' it's pitch black and this parameter is set to 3, then
     fighters will take 3 steps to do what would normally take only one
     step.

4.11.14 highest-team-color-allowed
----------------------------------

 -- Command-line option: `--highest-team-color-allowed=<value>'
 -- Environment variable: `LW6_HIGHEST_TEAM_COLOR_ALLOWED'
 -- XML key: `highest-team-color-allowed'
     Type: integer

     Default value: 9 Min value: 3 Max value: 9

     Id of the greatest/highest color one can use. Normally, you can
     leave this untouched, the program will automatically fit this
     according to your exp.  Setting an artificially low value will
     just cause normally available colors to disappear, setting it to a
     high value does nothing, if you still don't have access to some
     colors, you still don't, period.

4.11.15 highest-weapon-allowed
------------------------------

 -- Command-line option: `--highest-weapon-allowed=<value>'
 -- Environment variable: `LW6_HIGHEST_WEAPON_ALLOWED'
 -- XML key: `highest-weapon-allowed'
     Type: integer

     Default value: 19 Min value: 7 Max value: 19

     Id of the greatest/highest weapon one can use. Normally, you can
     leave this untouched, the program will automatically fit this
     according to your exp.  Setting an artificially low value will
     just cause normally available weapons to disappear, setting it to
     a high value does nothing, if you still don't have access to some
     weapons, you still don't, period.

4.11.16 max-cursor-pot
----------------------

 -- Command-line option: `--max-cursor-pot=<value>'
 -- Environment variable: `LW6_MAX_CURSOR_POT'
 -- XML key: `max-cursor-pot'
     Type: integer

     Default value: 1000000 Min value: 50000 Max value: 5000000

     Defines the maximum cursor potential. Not really any reason to
     change it. Any high value should produce the same results. Low
     values might reveal algorithm bugs and inconsistencies.

4.11.17 max-cursor-pot-offset
-----------------------------

 -- Command-line option: `--max-cursor-pot-offset=<value>'
 -- Environment variable: `LW6_MAX_CURSOR_POT_OFFSET'
 -- XML key: `max-cursor-pot-offset'
     Type: integer

     Default value: 100 Min value: 1 Max value: 10000

     Defines the maximum cursor potential offset. The idea is that in
     some cases, the potential of a cursor can increase in burst mode,
     for instance to make this cursor more important than others, so
     that fighters rally to it, neglecting other cursors (talking about
     a multi-cursor controlled team). This parameter is here to limit
     this burst effect and avoid bugs.

4.11.18 max-nb-cursors
----------------------

 -- Command-line option: `--max-nb-cursors=<value>'
 -- Environment variable: `LW6_MAX_NB_CURSORS'
 -- XML key: `max-nb-cursors'
     Type: integer

     Default value: 26 Min value: 2 Max value: 26

     Defines the maximum number of cursors who can enter the game.
     Really makes sense in network games. Default value is 26, the
     maximum.

4.11.19 max-nb-nodes
--------------------

 -- Command-line option: `--max-nb-nodes=<value>'
 -- Environment variable: `LW6_MAX_NB_NODES'
 -- XML key: `max-nb-nodes'
     Type: integer

     Default value: 12 Min value: 2 Max value: 26

     Defines the maximum number of servers who can enter the game.
     Really makes sense in network games. Default value is 10, and
     should fit in most cases. Can be raised up to 26.

4.11.20 max-nb-teams
--------------------

 -- Command-line option: `--max-nb-teams=<value>'
 -- Environment variable: `LW6_MAX_NB_TEAMS'
 -- XML key: `max-nb-teams'
     Type: integer

     Default value: 10 Min value: 2 Max value: 10

     Defines the maximum number of teams who can enter the game. Really
     makes sense in network games. Default value is 10, the maximum.

4.11.21 max-round-delta
-----------------------

 -- Command-line option: `--max-round-delta=<value>'
 -- Environment variable: `LW6_MAX_ROUND_DELTA'
 -- XML key: `max-round-delta'
     Type: integer

     Default value: 1000 Min value: 1 Max value: 10000

     This is the companion value of 'round-delta'. Will put an absolute
     limit to the delta, which (what did you think?) is of course
     incremented in some cases by the core algorithm. If in doubt,
     don't touch.

4.11.22 max-zone-size
---------------------

 -- Command-line option: `--max-zone-size=<value>'
 -- Environment variable: `LW6_MAX_ZONE_SIZE'
 -- XML key: `max-zone-size'
     Type: integer

     Default value: 8 Min value: 1 Max value: 64

     Defines the maximum zone size, which is an internal and rather
     technical parameter. The idea is that to optimize things, Liquid
     War 6 divides the battlefield in squares, where it can, and tries
     to make these squares as big as possible, the idea being that
     everywhere in this square, fighters follow the same intructions.
     Just a technical optimization. The problem is that setting it too
     high will reveal the optimization and its tradeoffs to the player,
     who will see the fighter behave strangely, following invisible
     paths.  Plus, it's ugly. Depending on your tastes (speed,
     look'n'feel) you'll prefer something nice or something fast. Note
     that anyways passed a certain value, this does not optimize
     anything anymore. In doubt, don't touch it.

4.11.23 medicine-power
----------------------

 -- Command-line option: `--medicine-power=<value>'
 -- Environment variable: `LW6_MEDICINE_POWER'
 -- XML key: `medicine-power'
     Type: integer

     Default value: 100 Min value: 0 Max value: 10000

     Defines how fast fighter will automatically regenerate on black
     zones defined in 'medicine.png'. The value is used to decrease the
     fighter health at each move, so you should compare its value to
     something like 'fighter-defense'.  Being on a medicined zone is a
     bit like being defended by an invisible and unknown friend.

4.11.24 moves-per-round
-----------------------

 -- Command-line option: `--moves-per-round=<value>'
 -- Environment variable: `LW6_MOVES_PER_ROUND'
 -- XML key: `moves-per-round'
     Type: integer

     Default value: 2 Min value: 1 Max value: 50

     Defines how many times fighters move per round. Increasing this
     will just make fighters move faster, but won't change anything for
     the rest, that is keyboard and mouse responsivity, and network
     traffic will stay the same. Multiplying the number of moves per
     round by the number of rounds per second will give the number of
     moves per second, which is, in fact, how fast fighters move on the
     screen.

4.11.25 nb-attack-tries
-----------------------

 -- Command-line option: `--nb-attack-tries=<value>'
 -- Environment variable: `LW6_NB_ATTACK_TRIES'
 -- XML key: `nb-attack-tries'
     Type: integer

     Default value: 3 Min value: 1 Max value: 7

     Defines how many tries a fighter will do before giving-up
     attacking and choosing another behvior (defense). By tries we
     mean: how many directions it will try. Going North? Going
     North-West? Setting this to a low value will make fighters
     somewhat less aggressive. This idea is that they'll prefer to
     switch to the next option, that is, defense/regeneration, if
     there's no opponent right in front of them.

4.11.26 nb-defense-tries
------------------------

 -- Command-line option: `--nb-defense-tries=<value>'
 -- Environment variable: `LW6_NB_DEFENSE_TRIES'
 -- XML key: `nb-defense-tries'
     Type: integer

     Default value: 1 Min value: 1 Max value: 7

     Defines how many tries a fighter will do before giving-up
     attacking and choosing another behavior (do nothing). By tries we
     mean: how many directions it will try. Going North? Going
     North-West? Setting this to a low value, you'll need a very
     compact pack of fighters for regeneration to operate, else
     fighters will hang arround unhealthy.

4.11.27 nb-move-tries
---------------------

 -- Command-line option: `--nb-move-tries=<value>'
 -- Environment variable: `LW6_NB_MOVE_TRIES'
 -- XML key: `nb-move-tries'
     Type: integer

     Default value: 5 Min value: 3 Max value: 7

     Defines how many tries a fighter will do before giving-up moving
     and choosing another behvior (attack or defense). By tries we
     mean: how many directions it will try. Going North? Going
     North-West? Setting this to a low value, your fighters will look
     very stubborn and always try to move in one direction, neglecting
     the fact that they could dodge. This can lead to queues of fighters
     and other strange behaviors. On the other hand, setting it too
     high will cause fighter to always avoid the enemy, and groups of
     fighters will just pass each other without any fight. Matter of
     taste.

4.11.28 respawn-delay
---------------------

 -- Command-line option: `--respawn-delay=<value>'
 -- Environment variable: `LW6_RESPAWN_DELAY'
 -- XML key: `respawn-delay'
     Type: integer

     Default value: 3 Min value: 0 Max value: 30

     Delay, in seconds, after which teams reappear on the battlefield,
     when in deathmatch mode. 0 means team right away.

4.11.29 respawn-position-mode
-----------------------------

 -- Command-line option: `--respawn-position-mode=<value>'
 -- Environment variable: `LW6_RESPAWN_POSITION_MODE'
 -- XML key: `respawn-position-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     Defines how teams are set up on the map when respawning. 0 means
     teams respect the pre-defined start positions. 1 means that a
     random position will be picked, among the existing positions. That
     is, red could take green's place. 2 means total randomness, teams
     can appear anywhere.

4.11.30 respawn-team
--------------------

 -- Command-line option: `--respawn-team=<value>'
 -- Environment variable: `LW6_RESPAWN_TEAM'
 -- XML key: `respawn-team'
     Type: integer

     Default value: 1 Min value: 0 Max value: 1

     Defines what to do when a team dies. If set to 0, team disappears
     forever, if set to 1, team reappears automatically with fresh
     fighters. It's a deathmatch mode, where the winner is not the one
     who stays alive the longest time, since it makes no real sens in
     this case, but the one who has died less often than others.

4.11.31 round-delta
-------------------

 -- Command-line option: `--round-delta=<value>'
 -- Environment variable: `LW6_ROUND_DELTA'
 -- XML key: `round-delta'
     Type: integer

     Default value: 1 Min value: 0 Max value: 100

     Conditions by how much the cursor potential will be incremented
     each time gradient is spreaded. Sounds cryptic? It is. The idea is
     that at each time you move your cursor of 1 pixel, theorically,
     you'll need in the worst case to move of 1 more pixel to reach any
     point on the map. Of course this is not true but this is the
     default asumption, and gradient spread will fix that. Only in
     Liquid War 6 this is not even the worst case, for you can control
     your cursor with the mouse and cross walls. Whenever you cross a
     wall, you might have done a great distance from the fighters'
     point of view, if the map is a maze. Thus this parameter, which
     corrects things, experience shows it does give acceptable results
     to increase the cursor potential by more than one at each turn.
     Toy arround with this if you find fighters take wrong paths on some
     given map. If in doubt, don't touch.

4.11.32 rounds-per-sec
----------------------

 -- Command-line option: `--rounds-per-sec=<value>'
 -- Environment variable: `LW6_ROUNDS_PER_SEC'
 -- XML key: `rounds-per-sec'
     Type: integer

     Default value: 50 Min value: 1 Max value: 200

     Defines the overall speed of the game. All other settings being
     equal, raising this value will cause the game to behave faster.
     Everything will be faster, except probably the display since your
     computer will calculate more game positions in a given time and
     spend more CPU time. It will also increase network traffic. Values
     between 10 and 50 really make sense.

4.11.33 side-attack-factor
--------------------------

 -- Command-line option: `--side-attack-factor=<value>'
 -- Environment variable: `LW6_SIDE_ATTACK_FACTOR'
 -- XML key: `side-attack-factor'
     Type: integer

     Default value: 20 Min value: 0 Max value: 100

     Defines how hard fighters will attack sideways. It's an algorithm
     trick, fighters attack by default the opponent right in front, but
     if there's no fighter there, they will still try to attack someone
     else, maybe sideways. But doing this their attack is not as
     strong. This parameter enables you to tune this. This is a
     percentage.

4.11.34 side-defense-factor
---------------------------

 -- Command-line option: `--side-defense-factor=<value>'
 -- Environment variable: `LW6_SIDE_DEFENSE_FACTOR'
 -- XML key: `side-defense-factor'
     Type: integer

     Default value: 20 Min value: 0 Max value: 100

     Defines how fast fighters will regenerate, when being side by side
     instead of being right in front of the other. This is a percentage.

4.11.35 single-army-size
------------------------

 -- Command-line option: `--single-army-size=<value>'
 -- Environment variable: `LW6_SINGLE_ARMY_SIZE'
 -- XML key: `single-army-size'
     Type: integer

     Default value: 30 Min value: 1 Max value: 95

     Defines the proportion of the whole available space, which will be
     occupied by an army at the beginning of the game. You can either
     imagine playing with almost empty maps, or play very crowded with
     almost no space left. This is a percentage, but will be multiplied
     by itself to get the actual surface. That is, 50 means 50%*50%,
     that is, a square of 1/2 the size of a square map, so it
     represents 25% (1/4) of the total surface.

4.11.36 spread-mode
-------------------

 -- Command-line option: `--spread-mode=<value>'
 -- Environment variable: `LW6_SPREAD_MODE'
 -- XML key: `spread-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     If set to 1, then gradient spread will be slower but gain in terms
     of homogeneity and consistency. You could consider setting this to
     0 on very very big maps to save CPU cycles, else the default
     should work fine.

4.11.37 spread-thread
---------------------

 -- Command-line option: `--spread-thread=<value>'
 -- Environment variable: `LW6_SPREAD_THREAD'
 -- XML key: `spread-thread'
     Type: integer

     Default value: 0 Min value: 0 Max value: 1

     If set to 1, the core algorithm with fire a separate thread to
     spread the gradient. By default this is turned off (set to 0).
     Consider this as an experimental feature, the program is already
     rather heavily threaded, turning this on will probably not offer
     any significant performance gain, even on SMP systems. This might
     change in the future.

4.11.38 spreads-per-round
-------------------------

 -- Command-line option: `--spreads-per-round=<value>'
 -- Environment variable: `LW6_SPREADS_PER_ROUND'
 -- XML key: `spreads-per-round'
     Type: integer

     Default value: 5 Min value: 1 Max value: 100

     Defines how many times the gradient is spread per round. Gradient
     spread is a very Liquid War 6 specific feature, just remember that
     the more often you do it, the more accurately fighters will move.
     That is, you will be sure they really take the shortest path.
     Usually this does not have much effect, the default value should
     fit in most cases, but you might want to decrease it on very
     simple maps where the gradient is obvious, or increase it on
     complex maps where you want fighters to be real smart.

4.11.39 start-blue-x
--------------------

 -- Command-line option: `--start-blue-x=<value>'
 -- Environment variable: `LW6_START_BLUE_X'
 -- XML key: `start-blue-x'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     X start position for the blue team. This is a percentage of map
     width, value between 0 and 100.

4.11.40 start-blue-y
--------------------

 -- Command-line option: `--start-blue-y=<value>'
 -- Environment variable: `LW6_START_BLUE_Y'
 -- XML key: `start-blue-y'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     Y start position for the blue team. This is a percentage of map
     height, value between 0 and 100.

4.11.41 start-cyan-x
--------------------

 -- Command-line option: `--start-cyan-x=<value>'
 -- Environment variable: `LW6_START_CYAN_X'
 -- XML key: `start-cyan-x'
     Type: integer

     Default value: 35 Min value: 0 Max value: 100

     X start position for the cyan team. This is a percentage of map
     width, value between 0 and 100.

4.11.42 start-cyan-y
--------------------

 -- Command-line option: `--start-cyan-y=<value>'
 -- Environment variable: `LW6_START_CYAN_Y'
 -- XML key: `start-cyan-y'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     Y start position for the cyan team. This is a percentage of map
     height, value between 0 and 100.

4.11.43 start-green-x
---------------------

 -- Command-line option: `--start-green-x=<value>'
 -- Environment variable: `LW6_START_GREEN_X'
 -- XML key: `start-green-x'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     X start position for the green team. This is a percentage of map
     width, value between 0 and 100.

4.11.44 start-green-y
---------------------

 -- Command-line option: `--start-green-y=<value>'
 -- Environment variable: `LW6_START_GREEN_Y'
 -- XML key: `start-green-y'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     Y start position for the green team. This is a percentage of map
     height, value between 0 and 100.

4.11.45 start-lightblue-x
-------------------------

 -- Command-line option: `--start-lightblue-x=<value>'
 -- Environment variable: `LW6_START_LIGHTBLUE_X'
 -- XML key: `start-lightblue-x'
     Type: integer

     Default value: 35 Min value: 0 Max value: 100

     X start position for the lightblue team. This is a percentage of
     map width, value between 0 and 100.

4.11.46 start-lightblue-y
-------------------------

 -- Command-line option: `--start-lightblue-y=<value>'
 -- Environment variable: `LW6_START_LIGHTBLUE_Y'
 -- XML key: `start-lightblue-y'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     Y start position for the lightblue team. This is a percentage of
     map height, value between 0 and 100.

4.11.47 start-magenta-x
-----------------------

 -- Command-line option: `--start-magenta-x=<value>'
 -- Environment variable: `LW6_START_MAGENTA_X'
 -- XML key: `start-magenta-x'
     Type: integer

     Default value: 65 Min value: 0 Max value: 100

     X start position for the magenta team. This is a percentage of map
     width, value between 0 and 100.

4.11.48 start-magenta-y
-----------------------

 -- Command-line option: `--start-magenta-y=<value>'
 -- Environment variable: `LW6_START_MAGENTA_Y'
 -- XML key: `start-magenta-y'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     Y start position for the magenta team. This is a percentage of map
     height, value between 0 and 100.

4.11.49 start-orange-x
----------------------

 -- Command-line option: `--start-orange-x=<value>'
 -- Environment variable: `LW6_START_ORANGE_X'
 -- XML key: `start-orange-x'
     Type: integer

     Default value: 65 Min value: 0 Max value: 100

     X start position for the orange team. This is a percentage of map
     width, value between 0 and 100.

4.11.50 start-orange-y
----------------------

 -- Command-line option: `--start-orange-y=<value>'
 -- Environment variable: `LW6_START_ORANGE_Y'
 -- XML key: `start-orange-y'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     Y start position for the orange team. This is a percentage of map
     height, value between 0 and 100.

4.11.51 start-pink-x
--------------------

 -- Command-line option: `--start-pink-x=<value>'
 -- Environment variable: `LW6_START_PINK_X'
 -- XML key: `start-pink-x'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     X start position for the pink team. This is a percentage of map
     width, value between 0 and 100.

4.11.52 start-pink-y
--------------------

 -- Command-line option: `--start-pink-y=<value>'
 -- Environment variable: `LW6_START_PINK_Y'
 -- XML key: `start-pink-y'
     Type: integer

     Default value: 50 Min value: 0 Max value: 100

     Y start position for the pink team. This is a percentage of map
     height, value between 0 and 100.

4.11.53 start-position-mode
---------------------------

 -- Command-line option: `--start-position-mode=<value>'
 -- Environment variable: `LW6_START_POSITION_MODE'
 -- XML key: `start-position-mode'
     Type: integer

     Default value: 0 Min value: 0 Max value: 2

     Defines how teams are set up on the map at game startup. 0 means
     teams respect the pre-defined start positions. 1 means that a
     random position will be picked, among the existing positions. That
     is, red could take green's place. 2 means total randomness, teams
     can appear anywhere.

4.11.54 start-purple-x
----------------------

 -- Command-line option: `--start-purple-x=<value>'
 -- Environment variable: `LW6_START_PURPLE_X'
 -- XML key: `start-purple-x'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     X start position for the purple team. This is a percentage of map
     width, value between 0 and 100.

4.11.55 start-purple-y
----------------------

 -- Command-line option: `--start-purple-y=<value>'
 -- Environment variable: `LW6_START_PURPLE_Y'
 -- XML key: `start-purple-y'
     Type: integer

     Default value: 50 Min value: 0 Max value: 100

     Y start position for the purple team. This is a percentage of map
     height, value between 0 and 100.

4.11.56 start-red-x
-------------------

 -- Command-line option: `--start-red-x=<value>'
 -- Environment variable: `LW6_START_RED_X'
 -- XML key: `start-red-x'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     X start position for the red team. This is a percentage of map
     width, value between 0 and 100.

4.11.57 start-red-y
-------------------

 -- Command-line option: `--start-red-y=<value>'
 -- Environment variable: `LW6_START_RED_Y'
 -- XML key: `start-red-y'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     Y start position for the red team. This is a percentage of map
     height, value between 0 and 100.

4.11.58 start-yellow-x
----------------------

 -- Command-line option: `--start-yellow-x=<value>'
 -- Environment variable: `LW6_START_YELLOW_X'
 -- XML key: `start-yellow-x'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     X start position for the yellow team. This is a percentage of map
     width, value between 0 and 100.

4.11.59 start-yellow-y
----------------------

 -- Command-line option: `--start-yellow-y=<value>'
 -- Environment variable: `LW6_START_YELLOW_Y'
 -- XML key: `start-yellow-y'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     Y start position for the yellow team. This is a percentage of map
     height, value between 0 and 100.

4.11.60 team-profile-blue-aggressive
------------------------------------

 -- Command-line option: `--team-profile-blue-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_BLUE_AGGRESSIVE'
 -- XML key: `team-profile-blue-aggressive'
     Type: integer

     Default value: 150 Min value: 5 Max value: 2000

     Defines how aggressive the blue team is. This is a percentage, if
     set to 200 then team will attack twice as much as any other team
     with the default value.  Setting this to a high value clearly
     advantages this team.

4.11.61 team-profile-blue-fast
------------------------------

 -- Command-line option: `--team-profile-blue-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_BLUE_FAST'
 -- XML key: `team-profile-blue-fast'
     Type: integer

     Default value: 50 Min value: 5 Max value: 2000

     Changes the speed of the blue team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.11.62 team-profile-blue-mobile
--------------------------------

 -- Command-line option: `--team-profile-blue-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_BLUE_MOBILE'
 -- XML key: `team-profile-blue-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the blue team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.11.63 team-profile-blue-vulnerable
------------------------------------

 -- Command-line option: `--team-profile-blue-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_BLUE_VULNERABLE'
 -- XML key: `team-profile-blue-vulnerable'
     Type: integer

     Default value: 60 Min value: 5 Max value: 2000

     Defines how vulnerable the blue team is. This is a percentage, if
     set to 200 then team will be attacked twice as much as any other
     team with the default value. Setting this to a high value clearly
     disadvantages this team.

4.11.64 team-profile-blue-weapon-alternate-id
---------------------------------------------

 -- Command-line option:
`--team-profile-blue-weapon-alternate-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_BLUE_WEAPON_ALTERNATE_ID'
 -- XML key: `team-profile-blue-weapon-alternate-id'
     Type: integer

     Default value: LW6MAP_WEAPON_CONTROL Min value: 0 Max value: 19

     Id of the default alternate weapon for the blue team, see the
     documentation about weapons to know what these ids mean.

4.11.65 team-profile-blue-weapon-id
-----------------------------------

 -- Command-line option: `--team-profile-blue-weapon-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_BLUE_WEAPON_ID'
 -- XML key: `team-profile-blue-weapon-id'
     Type: integer

     Default value: LW6MAP_WEAPON_REWIND Min value: 0 Max value: 19

     Id of the default weapon for the blue team, see the documentation
     about weapons to know what these ids mean.

4.11.66 team-profile-blue-weapon-mode
-------------------------------------

 -- Command-line option: `--team-profile-blue-weapon-mode=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_BLUE_WEAPON_MODE'
 -- XML key: `team-profile-blue-weapon-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     Weapon mode for blue team. 0 means there's no weapon, 1 means one
     weapon per team, defined by the weapon-id parameter, 2 means
     random weapon.

4.11.67 team-profile-cyan-aggressive
------------------------------------

 -- Command-line option: `--team-profile-cyan-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_CYAN_AGGRESSIVE'
 -- XML key: `team-profile-cyan-aggressive'
     Type: integer

     Default value: 44 Min value: 5 Max value: 2000

     Defines how aggressive the cyan team is. This is a percentage, if
     set to 200 then team will attack twice as much as any other team
     with the default value.  Setting this to a high value clearly
     advantages this team.

4.11.68 team-profile-cyan-fast
------------------------------

 -- Command-line option: `--team-profile-cyan-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_CYAN_FAST'
 -- XML key: `team-profile-cyan-fast'
     Type: integer

     Default value: 40 Min value: 5 Max value: 2000

     Changes the speed of the cyan team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.11.69 team-profile-cyan-mobile
--------------------------------

 -- Command-line option: `--team-profile-cyan-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_CYAN_MOBILE'
 -- XML key: `team-profile-cyan-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the cyan team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.11.70 team-profile-cyan-vulnerable
------------------------------------

 -- Command-line option: `--team-profile-cyan-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_CYAN_VULNERABLE'
 -- XML key: `team-profile-cyan-vulnerable'
     Type: integer

     Default value: 12 Min value: 5 Max value: 2000

     Defines how vulnerable the cyan team is. This is a percentage, if
     set to 200 then team will be attacked twice as much as any other
     team with the default value. Setting this to a high value clearly
     disadvantages this team.

4.11.71 team-profile-cyan-weapon-alternate-id
---------------------------------------------

 -- Command-line option:
`--team-profile-cyan-weapon-alternate-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_CYAN_WEAPON_ALTERNATE_ID'
 -- XML key: `team-profile-cyan-weapon-alternate-id'
     Type: integer

     Default value: LW6MAP_WEAPON_REVERSE Min value: 0 Max value: 19

     Id of the default alternate weapon for the cyan team, see the
     documentation about weapons to know what these ids mean.

4.11.72 team-profile-cyan-weapon-id
-----------------------------------

 -- Command-line option: `--team-profile-cyan-weapon-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_CYAN_WEAPON_ID'
 -- XML key: `team-profile-cyan-weapon-id'
     Type: integer

     Default value: LW6MAP_WEAPON_TURBO Min value: 0 Max value: 19

     Id of the default weapon for the cyan team, see the documentation
     about weapons to know what these ids mean.

4.11.73 team-profile-cyan-weapon-mode
-------------------------------------

 -- Command-line option: `--team-profile-cyan-weapon-mode=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_CYAN_WEAPON_MODE'
 -- XML key: `team-profile-cyan-weapon-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     Weapon mode for cyan team. 0 means there's no weapon, 1 means one
     weapon per team, defined by the weapon-id parameter, 2 means
     random weapon.

4.11.74 team-profile-green-aggressive
-------------------------------------

 -- Command-line option: `--team-profile-green-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_GREEN_AGGRESSIVE'
 -- XML key: `team-profile-green-aggressive'
     Type: integer

     Default value: 70 Min value: 5 Max value: 2000

     Defines how aggressive the green team is. This is a percentage, if
     set to 200 then team will attack twice as much as any other team
     with the default value.  Setting this to a high value clearly
     advantages this team.

4.11.75 team-profile-green-fast
-------------------------------

 -- Command-line option: `--team-profile-green-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_GREEN_FAST'
 -- XML key: `team-profile-green-fast'
     Type: integer

     Default value: 70 Min value: 5 Max value: 2000

     Changes the speed of the green team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.11.76 team-profile-green-mobile
---------------------------------

 -- Command-line option: `--team-profile-green-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_GREEN_MOBILE'
 -- XML key: `team-profile-green-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the green team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.11.77 team-profile-green-vulnerable
-------------------------------------

 -- Command-line option: `--team-profile-green-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_GREEN_VULNERABLE'
 -- XML key: `team-profile-green-vulnerable'
     Type: integer

     Default value: 30 Min value: 5 Max value: 2000

     Defines how vulnerable the green team is. This is a percentage, if
     set to 200 then team will be attacked twice as much as any other
     team with the default value. Setting this to a high value clearly
     disadvantages this team.

4.11.78 team-profile-green-weapon-alternate-id
----------------------------------------------

 -- Command-line option:
`--team-profile-green-weapon-alternate-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_GREEN_WEAPON_ALTERNATE_ID'
 -- XML key: `team-profile-green-weapon-alternate-id'
     Type: integer

     Default value: LW6MAP_WEAPON_MIX Min value: 0 Max value: 19

     Id of the default alternate weapon for the green team, see the
     documentation about weapons to know what these ids mean.

4.11.79 team-profile-green-weapon-id
------------------------------------

 -- Command-line option: `--team-profile-green-weapon-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_GREEN_WEAPON_ID'
 -- XML key: `team-profile-green-weapon-id'
     Type: integer

     Default value: LW6MAP_WEAPON_CRAZY Min value: 0 Max value: 19

     Id of the default weapon for the green team, see the documentation
     about weapons to know what these ids mean.

4.11.80 team-profile-green-weapon-mode
--------------------------------------

 -- Command-line option: `--team-profile-green-weapon-mode=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_GREEN_WEAPON_MODE'
 -- XML key: `team-profile-green-weapon-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     Weapon mode for green team. 0 means there's no weapon, 1 means one
     weapon per team, defined by the weapon-id parameter, 2 means
     random weapon.

4.11.81 team-profile-lightblue-aggressive
-----------------------------------------

 -- Command-line option: `--team-profile-lightblue-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_LIGHTBLUE_AGGRESSIVE'
 -- XML key: `team-profile-lightblue-aggressive'
     Type: integer

     Default value: 200 Min value: 5 Max value: 2000

     Defines how aggressive the lightblue team is. This is a
     percentage, if set to 200 then team will attack twice as much as
     any other team with the default value. Setting this to a high
     value clearly advantages this team.

4.11.82 team-profile-lightblue-fast
-----------------------------------

 -- Command-line option: `--team-profile-lightblue-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_LIGHTBLUE_FAST'
 -- XML key: `team-profile-lightblue-fast'
     Type: integer

     Default value: 20 Min value: 5 Max value: 2000

     Changes the speed of the lightblue team. This is a percentage, if
     set to 50, then team will move twice slower than other teams with
     the default parameter.  Setting this high is very likely to
     advantage the team.

4.11.83 team-profile-lightblue-mobile
-------------------------------------

 -- Command-line option: `--team-profile-lightblue-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_LIGHTBLUE_MOBILE'
 -- XML key: `team-profile-lightblue-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the lightblue team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.11.84 team-profile-lightblue-vulnerable
-----------------------------------------

 -- Command-line option: `--team-profile-lightblue-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_LIGHTBLUE_VULNERABLE'
 -- XML key: `team-profile-lightblue-vulnerable'
     Type: integer

     Default value: 8 Min value: 5 Max value: 2000

     Defines how vulnerable the lightblue team is. This is a
     percentage, if set to 200 then team will be attacked twice as much
     as any other team with the default value. Setting this to a high
     value clearly disadvantages this team.

4.11.85 team-profile-lightblue-weapon-alternate-id
--------------------------------------------------

 -- Command-line option:
`--team-profile-lightblue-weapon-alternate-id=<value>'
 -- Environment variable:
`LW6_TEAM_PROFILE_LIGHTBLUE_WEAPON_ALTERNATE_ID'
 -- XML key: `team-profile-lightblue-weapon-alternate-id'
     Type: integer

     Default value: LW6MAP_WEAPON_KAMIKAZE Min value: 0 Max value: 19

     Id of the default alternate weapon for the lightblue team, see the
     documentation about weapons to know what these ids mean.

4.11.86 team-profile-lightblue-weapon-id
----------------------------------------

 -- Command-line option: `--team-profile-lightblue-weapon-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_LIGHTBLUE_WEAPON_ID'
 -- XML key: `team-profile-lightblue-weapon-id'
     Type: integer

     Default value: LW6MAP_WEAPON_TELEPORT Min value: 0 Max value: 19

     Id of the default weapon for the lightblue team, see the
     documentation about weapons to know what these ids mean.

4.11.87 team-profile-lightblue-weapon-mode
------------------------------------------

 -- Command-line option: `--team-profile-lightblue-weapon-mode=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_LIGHTBLUE_WEAPON_MODE'
 -- XML key: `team-profile-lightblue-weapon-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     Weapon mode for lightblue team. 0 means there's no weapon, 1 means
     one weapon per team, defined by the weapon-id parameter, 2 means
     random weapon.

4.11.88 team-profile-magenta-aggressive
---------------------------------------

 -- Command-line option: `--team-profile-magenta-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_MAGENTA_AGGRESSIVE'
 -- XML key: `team-profile-magenta-aggressive'
     Type: integer

     Default value: 192 Min value: 5 Max value: 2000

     Defines how aggressive the magenta team is. This is a percentage,
     if set to 200 then team will attack twice as much as any other
     team with the default value. Setting this to a high value clearly
     advantages this team.

4.11.89 team-profile-magenta-fast
---------------------------------

 -- Command-line option: `--team-profile-magenta-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_MAGENTA_FAST'
 -- XML key: `team-profile-magenta-fast'
     Type: integer

     Default value: 320 Min value: 5 Max value: 2000

     Changes the speed of the magenta team. This is a percentage, if
     set to 50, then team will move twice slower than other teams with
     the default parameter.  Setting this high is very likely to
     advantage the team.

4.11.90 team-profile-magenta-mobile
-----------------------------------

 -- Command-line option: `--team-profile-magenta-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_MAGENTA_MOBILE'
 -- XML key: `team-profile-magenta-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the magenta team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.11.91 team-profile-magenta-vulnerable
---------------------------------------

 -- Command-line option: `--team-profile-magenta-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_MAGENTA_VULNERABLE'
 -- XML key: `team-profile-magenta-vulnerable'
     Type: integer

     Default value: 1920 Min value: 5 Max value: 2000

     Defines how vulnerable the magenta team is. This is a percentage,
     if set to 200 then team will be attacked twice as much as any
     other team with the default value. Setting this to a high value
     clearly disadvantages this team.

4.11.92 team-profile-magenta-weapon-alternate-id
------------------------------------------------

 -- Command-line option:
`--team-profile-magenta-weapon-alternate-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_MAGENTA_WEAPON_ALTERNATE_ID'
 -- XML key: `team-profile-magenta-weapon-alternate-id'
     Type: integer

     Default value: LW6MAP_WEAPON_ATTRACT Min value: 0 Max value: 19

     Id of the default alternate weapon for the magenta team, see the
     documentation about weapons to know what these ids mean.

4.11.93 team-profile-magenta-weapon-id
--------------------------------------

 -- Command-line option: `--team-profile-magenta-weapon-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_MAGENTA_WEAPON_ID'
 -- XML key: `team-profile-magenta-weapon-id'
     Type: integer

     Default value: LW6MAP_WEAPON_FIX Min value: 0 Max value: 19

     Id of the default weapon for the magenta team, see the
     documentation about weapons to know what these ids mean.

4.11.94 team-profile-magenta-weapon-mode
----------------------------------------

 -- Command-line option: `--team-profile-magenta-weapon-mode=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_MAGENTA_WEAPON_MODE'
 -- XML key: `team-profile-magenta-weapon-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     Weapon mode for magenta team. 0 means there's no weapon, 1 means
     one weapon per team, defined by the weapon-id parameter, 2 means
     random weapon.

4.11.95 team-profile-orange-aggressive
--------------------------------------

 -- Command-line option: `--team-profile-orange-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_ORANGE_AGGRESSIVE'
 -- XML key: `team-profile-orange-aggressive'
     Type: integer

     Default value: 48 Min value: 5 Max value: 2000

     Defines how aggressive the orange team is. This is a percentage,
     if set to 200 then team will attack twice as much as any other
     team with the default value.  Setting this to a high value clearly
     advantages this team.

4.11.96 team-profile-orange-fast
--------------------------------

 -- Command-line option: `--team-profile-orange-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_ORANGE_FAST'
 -- XML key: `team-profile-orange-fast'
     Type: integer

     Default value: 160 Min value: 5 Max value: 2000

     Changes the speed of the orange team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.11.97 team-profile-orange-mobile
----------------------------------

 -- Command-line option: `--team-profile-orange-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_ORANGE_MOBILE'
 -- XML key: `team-profile-orange-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the orange team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.11.98 team-profile-orange-vulnerable
--------------------------------------

 -- Command-line option: `--team-profile-orange-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_ORANGE_VULNERABLE'
 -- XML key: `team-profile-orange-vulnerable'
     Type: integer

     Default value: 144 Min value: 5 Max value: 2000

     Defines how vulnerable the orange team is. This is a percentage,
     if set to 200 then team will be attacked twice as much as any
     other team with the default value. Setting this to a high value
     clearly disadvantages this team.

4.11.99 team-profile-orange-weapon-alternate-id
-----------------------------------------------

 -- Command-line option:
`--team-profile-orange-weapon-alternate-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_ORANGE_WEAPON_ALTERNATE_ID'
 -- XML key: `team-profile-orange-weapon-alternate-id'
     Type: integer

     Default value: LW6MAP_WEAPON_SHRINK Min value: 0 Max value: 19

     Id of the default alternate weapon for the orange team, see the
     documentation about weapons to know what these ids mean.

4.11.100 team-profile-orange-weapon-id
--------------------------------------

 -- Command-line option: `--team-profile-orange-weapon-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_ORANGE_WEAPON_ID'
 -- XML key: `team-profile-orange-weapon-id'
     Type: integer

     Default value: LW6MAP_WEAPON_BERZERK Min value: 0 Max value: 19

     Id of the default weapon for the orange team, see the
     documentation about weapons to know what these ids mean.

4.11.101 team-profile-orange-weapon-mode
----------------------------------------

 -- Command-line option: `--team-profile-orange-weapon-mode=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_ORANGE_WEAPON_MODE'
 -- XML key: `team-profile-orange-weapon-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     Weapon mode for orange team. 0 means there's no weapon, 1 means
     one weapon per team, defined by the weapon-id parameter, 2 means
     random weapon.

4.11.102 team-profile-pink-aggressive
-------------------------------------

 -- Command-line option: `--team-profile-pink-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PINK_AGGRESSIVE'
 -- XML key: `team-profile-pink-aggressive'
     Type: integer

     Default value: 640 Min value: 5 Max value: 2000

     Defines how aggressive the pink team is. This is a percentage, if
     set to 200 then team will attack twice as much as any other team
     with the default value.  Setting this to a high value clearly
     advantages this team.

4.11.103 team-profile-pink-fast
-------------------------------

 -- Command-line option: `--team-profile-pink-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PINK_FAST'
 -- XML key: `team-profile-pink-fast'
     Type: integer

     Default value: 80 Min value: 5 Max value: 2000

     Changes the speed of the pink team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.11.104 team-profile-pink-mobile
---------------------------------

 -- Command-line option: `--team-profile-pink-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PINK_MOBILE'
 -- XML key: `team-profile-pink-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the pink team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.11.105 team-profile-pink-vulnerable
-------------------------------------

 -- Command-line option: `--team-profile-pink-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PINK_VULNERABLE'
 -- XML key: `team-profile-pink-vulnerable'
     Type: integer

     Default value: 640 Min value: 5 Max value: 2000

     Defines how vulnerable the pink team is. This is a percentage, if
     set to 200 then team will be attacked twice as much as any other
     team with the default value. Setting this to a high value clearly
     disadvantages this team.

4.11.106 team-profile-pink-weapon-alternate-id
----------------------------------------------

 -- Command-line option:
`--team-profile-pink-weapon-alternate-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PINK_WEAPON_ALTERNATE_ID'
 -- XML key: `team-profile-pink-weapon-alternate-id'
     Type: integer

     Default value: LW6MAP_WEAPON_PLAGUE Min value: 0 Max value: 19

     Id of the default alternate weapon for the pink team, see the
     documentation about weapons to know what these ids mean.

4.11.107 team-profile-pink-weapon-id
------------------------------------

 -- Command-line option: `--team-profile-pink-weapon-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PINK_WEAPON_ID'
 -- XML key: `team-profile-pink-weapon-id'
     Type: integer

     Default value: LW6MAP_WEAPON_INVINCIBLE Min value: 0 Max value: 19

     Id of the default weapon for the pink team, see the documentation
     about weapons to know what these ids mean.

4.11.108 team-profile-pink-weapon-mode
--------------------------------------

 -- Command-line option: `--team-profile-pink-weapon-mode=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PINK_WEAPON_MODE'
 -- XML key: `team-profile-pink-weapon-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     Weapon mode for pink team. 0 means there's no weapon, 1 means one
     weapon per team, defined by the weapon-id parameter, 2 means
     random weapon.

4.11.109 team-profile-purple-aggressive
---------------------------------------

 -- Command-line option: `--team-profile-purple-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PURPLE_AGGRESSIVE'
 -- XML key: `team-profile-purple-aggressive'
     Type: integer

     Default value: 32 Min value: 5 Max value: 2000

     Defines how aggressive the purple team is. This is a percentage,
     if set to 200 then team will attack twice as much as any other
     team with the default value.  Setting this to a high value clearly
     advantages this team.

4.11.110 team-profile-purple-fast
---------------------------------

 -- Command-line option: `--team-profile-purple-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PURPLE_FAST'
 -- XML key: `team-profile-purple-fast'
     Type: integer

     Default value: 80 Min value: 5 Max value: 2000

     Changes the speed of the purple team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.11.111 team-profile-purple-mobile
-----------------------------------

 -- Command-line option: `--team-profile-purple-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PURPLE_MOBILE'
 -- XML key: `team-profile-purple-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the purple team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.11.112 team-profile-purple-vulnerable
---------------------------------------

 -- Command-line option: `--team-profile-purple-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PURPLE_VULNERABLE'
 -- XML key: `team-profile-purple-vulnerable'
     Type: integer

     Default value: 16 Min value: 5 Max value: 2000

     Defines how vulnerable the purple team is. This is a percentage,
     if set to 200 then team will be attacked twice as much as any
     other team with the default value. Setting this to a high value
     clearly disadvantages this team.

4.11.113 team-profile-purple-weapon-alternate-id
------------------------------------------------

 -- Command-line option:
`--team-profile-purple-weapon-alternate-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PURPLE_WEAPON_ALTERNATE_ID'
 -- XML key: `team-profile-purple-weapon-alternate-id'
     Type: integer

     Default value: LW6MAP_WEAPON_DISAPPEAR Min value: 0 Max value: 19

     Id of the default alternate weapon for the purple team, see the
     documentation about weapons to know what these ids mean.

4.11.114 team-profile-purple-weapon-id
--------------------------------------

 -- Command-line option: `--team-profile-purple-weapon-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PURPLE_WEAPON_ID'
 -- XML key: `team-profile-purple-weapon-id'
     Type: integer

     Default value: LW6MAP_WEAPON_ATOMIC Min value: 0 Max value: 19

     Id of the default weapon for the purple team, see the
     documentation about weapons to know what these ids mean.

4.11.115 team-profile-purple-weapon-mode
----------------------------------------

 -- Command-line option: `--team-profile-purple-weapon-mode=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PURPLE_WEAPON_MODE'
 -- XML key: `team-profile-purple-weapon-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     Weapon mode for purple team. 0 means there's no weapon, 1 means
     one weapon per team, defined by the weapon-id parameter, 2 means
     random weapon.

4.11.116 team-profile-red-aggressive
------------------------------------

 -- Command-line option: `--team-profile-red-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_RED_AGGRESSIVE'
 -- XML key: `team-profile-red-aggressive'
     Type: integer

     Default value: 220 Min value: 5 Max value: 2000

     Defines how aggressive the red team is. This is a percentage, if
     set to 200 then team will attack twice as much as any other team
     with the default value.  Setting this to a high value clearly
     advantages this team.

4.11.117 team-profile-red-fast
------------------------------

 -- Command-line option: `--team-profile-red-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_RED_FAST'
 -- XML key: `team-profile-red-fast'
     Type: integer

     Default value: 160 Min value: 5 Max value: 2000

     Changes the speed of the red team. This is a percentage, if set to
     50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.11.118 team-profile-red-mobile
--------------------------------

 -- Command-line option: `--team-profile-red-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_RED_MOBILE'
 -- XML key: `team-profile-red-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the red team. If set to a high value
     team will appear more mobile and do more things, but it won't
     change its cruising speed. It's not obvious to tell wether this is
     an advantage or not, but it clearly changes the behavior.

4.11.119 team-profile-red-vulnerable
------------------------------------

 -- Command-line option: `--team-profile-red-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_RED_VULNERABLE'
 -- XML key: `team-profile-red-vulnerable'
     Type: integer

     Default value: 110 Min value: 5 Max value: 2000

     Defines how vulnerable the red team is. This is a percentage, if
     set to 200 then team will be attacked twice as much as any other
     team with the default value. Setting this to a high value clearly
     disadvantages this team.

4.11.120 team-profile-red-weapon-alternate-id
---------------------------------------------

 -- Command-line option:
`--team-profile-red-weapon-alternate-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_RED_WEAPON_ALTERNATE_ID'
 -- XML key: `team-profile-red-weapon-alternate-id'
     Type: integer

     Default value: LW6MAP_WEAPON_ESCAPE Min value: 0 Max value: 19

     Id of the default alternate weapon for the red team, see the
     documentation about weapons to know what these ids mean.

4.11.121 team-profile-red-weapon-id
-----------------------------------

 -- Command-line option: `--team-profile-red-weapon-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_RED_WEAPON_ID'
 -- XML key: `team-profile-red-weapon-id'
     Type: integer

     Default value: LW6MAP_WEAPON_STEAL Min value: 0 Max value: 19

     Id of the default weapon for the red team, see the documentation
     about weapons to know what these ids mean.

4.11.122 team-profile-red-weapon-mode
-------------------------------------

 -- Command-line option: `--team-profile-red-weapon-mode=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_RED_WEAPON_MODE'
 -- XML key: `team-profile-red-weapon-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     Weapon mode for red team. 0 means there's no weapon, 1 means one
     weapon per team, defined by the weapon-id parameter, 2 means
     random weapon.

4.11.123 team-profile-yellow-aggressive
---------------------------------------

 -- Command-line option: `--team-profile-yellow-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_YELLOW_AGGRESSIVE'
 -- XML key: `team-profile-yellow-aggressive'
     Type: integer

     Default value: 200 Min value: 5 Max value: 2000

     Defines how aggressive the yellow team is. This is a percentage,
     if set to 200 then team will attack twice as much as any other
     team with the default value.  Setting this to a high value clearly
     advantages this team.

4.11.124 team-profile-yellow-fast
---------------------------------

 -- Command-line option: `--team-profile-yellow-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_YELLOW_FAST'
 -- XML key: `team-profile-yellow-fast'
     Type: integer

     Default value: 70 Min value: 5 Max value: 2000

     Changes the speed of the yellow team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.11.125 team-profile-yellow-mobile
-----------------------------------

 -- Command-line option: `--team-profile-yellow-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_YELLOW_MOBILE'
 -- XML key: `team-profile-yellow-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the yellow team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.11.126 team-profile-yellow-vulnerable
---------------------------------------

 -- Command-line option: `--team-profile-yellow-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_YELLOW_VULNERABLE'
 -- XML key: `team-profile-yellow-vulnerable'
     Type: integer

     Default value: 90 Min value: 5 Max value: 2000

     Defines how vulnerable the yellow team is. This is a percentage,
     if set to 200 then team will be attacked twice as much as any
     other team with the default value. Setting this to a high value
     clearly disadvantages this team.

4.11.127 team-profile-yellow-weapon-alternate-id
------------------------------------------------

 -- Command-line option:
`--team-profile-yellow-weapon-alternate-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_YELLOW_WEAPON_ALTERNATE_ID'
 -- XML key: `team-profile-yellow-weapon-alternate-id'
     Type: integer

     Default value: LW6MAP_WEAPON_PERMUTATION Min value: 0 Max value: 19

     Id of the default alternate weapon for the yellow team, see the
     documentation about weapons to know what these ids mean.

4.11.128 team-profile-yellow-weapon-id
--------------------------------------

 -- Command-line option: `--team-profile-yellow-weapon-id=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_YELLOW_WEAPON_ID'
 -- XML key: `team-profile-yellow-weapon-id'
     Type: integer

     Default value: LW6MAP_WEAPON_SCATTER Min value: 0 Max value: 19

     Id of the default weapon for the yellow team, see the
     documentation about weapons to know what these ids mean.

4.11.129 team-profile-yellow-weapon-mode
----------------------------------------

 -- Command-line option: `--team-profile-yellow-weapon-mode=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_YELLOW_WEAPON_MODE'
 -- XML key: `team-profile-yellow-weapon-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     Weapon mode for yellow team. 0 means there's no weapon, 1 means
     one weapon per team, defined by the weapon-id parameter, 2 means
     random weapon.

4.11.130 total-armies-size
--------------------------

 -- Command-line option: `--total-armies-size=<value>'
 -- Environment variable: `LW6_TOTAL_ARMIES_SIZE'
 -- XML key: `total-armies-size'
     Type: integer

     Default value: 60 Min value: 1 Max value: 95

     Defines the proportion of the whole available space, which can be
     occupied by all the armies present together. Setting this low,
     whenever a new team arrives on the map, fighters might be stolen
     to other teams, otherwise the ame would get too crowded. This
     allows you to play with reasonnably enough fighters with 2
     players, while still allowing interesting gameplay with many
     players. This is a percentage, but will be multiplied by itself to
     get the actual surface.  That is, 50 means 50%*50%, that is, a
     square of 1/2 the size of a square map, so it represents 25% (1/4)
     of the total surface.

4.11.131 total-time
-------------------

 -- Command-line option: `--total-time=<value>'
 -- Environment variable: `LW6_TOTAL_TIME'
 -- XML key: `total-time'
     Type: integer

     Default value: 900 Min value: 10 Max value: 864000

     Defines the maximum time of the game, in seconds. Note that in
     some cases, the game can end much earlier if some player has
     managed to win before the bell rings. Also, technically, this
     value will be translated into rounds and moves, and the game
     engine will wait until enough rounds and moves have been played.
     So if the computer is too slow and the desired speed is not
     reached, then the game will last for a longer time.

4.11.132 use-team-profiles
--------------------------

 -- Command-line option: `--use-team-profiles=<value>'
 -- Environment variable: `LW6_USE_TEAM_PROFILES'
 -- XML key: `use-team-profiles'
     Type: integer

     Default value: 1 Min value: 0 Max value: 1

     If set, then all the team-profile-... values will be taken in
     account. This enables a mode in which teams behave differently
     according to their colors. If you disable this, then all teams
     will behave the same, which is more fair, but might not be as fun.

4.11.133 vertical-move
----------------------

 -- Command-line option: `--vertical-move=<value>'
 -- Environment variable: `LW6_VERTICAL_MOVE'
 -- XML key: `vertical-move'
     Type: integer

     Default value: 1 Min value: 0 Max value: 7

     Defines when to process a vertical move (along the Z 'depth'
     axis). If set to 0, fighters never spontaneously move along this
     axis. If set to 1, it will be tried just after the first move
     failed. If set to 2, it will be tried just after the second move
     failed. And so on.

4.11.134 weapon-charge-delay
----------------------------

 -- Command-line option: `--weapon-charge-delay=<value>'
 -- Environment variable: `LW6_WEAPON_CHARGE_DELAY'
 -- XML key: `weapon-charge-delay'
     Type: integer

     Default value: 30 Min value: 1 Max value: 600

     How long it will take for weapons to charge and be usable, by
     default. Unit is seconds.

4.11.135 weapon-charge-max
--------------------------

 -- Command-line option: `--weapon-charge-max=<value>'
 -- Environment variable: `LW6_WEAPON_CHARGE_MAX'
 -- XML key: `weapon-charge-max'
     Type: integer

     Default value: 200 Min value: 100 Max value: 1000

     Maximum (percentage) of charge intensity that one have. For
     instance, if this is 400, then if you wait four times more than
     required before firing, then you weapon will have four times its
     default power, but if you wait five times more it will still be
     four times more powerfull, it's just the limit after which it's
     useless to charge.

4.11.136 weapon-duration
------------------------

 -- Command-line option: `--weapon-duration=<value>'
 -- Environment variable: `LW6_WEAPON_DURATION'
 -- XML key: `weapon-duration'
     Type: integer

     Default value: 3 Min value: 1 Max value: 60

     How long all weapons (for which duration makes sense) will last.
     Unit is seconds.

4.11.137 weapon-tune-berzerk-power
----------------------------------

 -- Command-line option: `--weapon-tune-berzerk-power=<value>'
 -- Environment variable: `LW6_WEAPON_TUNE_BERZERK_POWER'
 -- XML key: `weapon-tune-berzerk-power'
     Type: integer

     Default value: 3 Min value: 1 Max value: 100

     Use to specifiy how strong berzerk mode is, if set to 3, then
     attacks will be 3 times as efficient in berzerk mode.

4.11.138 weapon-tune-turbo-power
--------------------------------

 -- Command-line option: `--weapon-tune-turbo-power=<value>'
 -- Environment variable: `LW6_WEAPON_TUNE_TURBO_POWER'
 -- XML key: `weapon-tune-turbo-power'
     Type: integer

     Default value: 3 Min value: 1 Max value: 10

     Defines how fast fighters move in turbo mode, if set to 3, then
     fighters move and act 3 times as fast.

4.11.139 x-polarity
-------------------

 -- Command-line option: `--x-polarity=<value>'
 -- Environment variable: `LW6_X_POLARITY'
 -- XML key: `x-polarity'
     Type: integer

     Default value: 0 Min value: -1 Max value: 1

     Defines how the map will be wrapped on the X (horizontal) axis. If
     set to 0, nothing is wrapped. If set to 1, the right and left
     borders are connected, any fighter can disappear on the right
     border and reappear on the left border, for instance. If set to
     -1, it will be wrapped but also inversed, that is on a 320x240
     map, a fighter disappearing on the left border at position (0,60)
     will reapper on the right border at position (319,180). You can
     combine it with 'y-polarity'.

4.11.140 y-polarity
-------------------

 -- Command-line option: `--y-polarity=<value>'
 -- Environment variable: `LW6_Y_POLARITY'
 -- XML key: `y-polarity'
     Type: integer

     Default value: 0 Min value: -1 Max value: 1

     Defines how the map will be wrapped on the Y (vertical) axis. If
     set to 0, nothing is wrapped. If set to 1, the top and bottom
     borders are connected, any fighter can disappear on the top border
     and reappear on the bottom border, for instance. If set to -1, it
     will be wrapped but also inversed, that is on a 320x240 map, a
     fighter disappearing on the bottom border at position (40,239)
     will reapper on the top border at position (280,0). You can
     combine it with 'x-polarity'.

4.11.141 z-polarity
-------------------

 -- Command-line option: `--z-polarity=<value>'
 -- Environment variable: `LW6_Z_POLARITY'
 -- XML key: `z-polarity'
     Type: integer

     Default value: 0 Min value: 0 Max value: 1

     Defines how the map will be wrapped on the Z (deep) axis. If set
     to 0, nothing is wrapped. If set to 1, when using a 4 layer map,
     for instance, fighters on layer 1 will be able to go directly to
     layer 4 even if layers 2 and 3 are filled with walls. A value of
     -1 is forbidden, this is not like x and y axis, it does not really
     make sense. Consider this an advanced setting which might save a
     layer in some tricky cases, the default value of 0 should fit in
     most cases.


File: liquidwar6.info,  Node: Map hints.xml,  Next: Map style.xml,  Prev: Map rules.xml,  Up: Reference

4.12 Map hints.xml
==================

4.12.1 background-color-auto
----------------------------

 -- Command-line option: `--background-color-auto=<value>'
 -- Environment variable: `LW6_BACKGROUND_COLOR_AUTO'
 -- XML key: `background-color-auto'
     Type: boolean

     Default value: true

     Defines wether hud colors will be set automatically from base and
     alternate colors. This is a time saver to keep map designers from
     requiring to redefined every single color in the game. You only
     need to set color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg. Then hud_color_frame_bg, hud_color_frame_fg,
     hud_color_text_bg and hud_color_text_fg will be automatically set.

4.12.2 downsize-using-bench-value
---------------------------------

 -- Command-line option: `--downsize-using-bench-value=<value>'
 -- Environment variable: `LW6_DOWNSIZE_USING_BENCH_VALUE'
 -- XML key: `downsize-using-bench-value'
     Type: boolean

     Default value: true

     If set, then the game will automatically downsize a map according
     to the 'bench-value' parameter. Downsizing means: a 1600x1200 maps
     becomes 200x150, for instance. Downsizing causes fighters to be
     bigger because map resolution is lower. This will avoid running
     the game on a too big map, with your computer not being able to
     handle it at the required speed.

4.12.3 downsize-using-fighter-scale
-----------------------------------

 -- Command-line option: `--downsize-using-fighter-scale=<value>'
 -- Environment variable: `LW6_DOWNSIZE_USING_FIGHTER_SCALE'
 -- XML key: `downsize-using-fighter-scale'
     Type: boolean

     Default value: false

     If set, then the game will automatically downsize a map according
     to the 'fighter-scale' parameter. Downsizing means: a 1600x1200
     maps becomes 200x150, for instance. Downsizing causes fighters to
     be bigger because map resolution is lower. This can be usefull if
     you don't want fighters to be too small.

4.12.4 fighter-scale
--------------------

 -- Command-line option: `--fighter-scale=<value>'
 -- Environment variable: `LW6_FIGHTER_SCALE'
 -- XML key: `fighter-scale'
     Type: float

     Default value: 1.0

     Defines how wide (in pixels) fighters must be. This parameter is
     very important and will largely condition the number of fighters
     on the map. It is used when loading the map. If it is, for
     instance, set to 1, there will be exactly a fighter per pixel on
     the screen. That is, if you play 640x480 on an empty map, the
     maximum fighters you could have is about 300000. The idea is that
     by changing the resolution, you also define the density of the
     map. In pratice, this is done in the hope that someone with a slow
     computer will pick up a low resolution and therefore play small
     levels. Conversely, someone with a brand new computer with
     powerfull CPU & GPU will use great resolutions and be happy with
     many fighters on the map. Still, changing the resolution after
     loading the map will not affet the number of fighters. Same for
     network games, the first player, who loads the map, defines its
     properties according to its own settings.

4.12.5 guess-colors
-------------------

 -- Command-line option: `--guess-colors=<value>'
 -- Environment variable: `LW6_GUESS_COLORS'
 -- XML key: `guess-colors'
     Type: boolean

     Default value: true

     Defines wether colors should be set automatically from texture
     colors. If set to true, then the program will try to pick up
     colors automatically from the texture, and will override the
     values of the color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg parameters. How these colors are picked up
     can't be garanteed, so if the map does not have strong contrast or
     if there can be any form of ambiguity, it's safe to set this to
     false and define one's own colors.

4.12.6 guess-moves-per-sec
--------------------------

 -- Command-line option: `--guess-moves-per-sec=<value>'
 -- Environment variable: `LW6_GUESS_MOVES_PER_SEC'
 -- XML key: `guess-moves-per-sec'
     Type: boolean

     Default value: true

     If set, then loader will use 'time-to-cross-level' to guess the
     game speed parameters.

4.12.7 hud-color-auto
---------------------

 -- Command-line option: `--hud-color-auto=<value>'
 -- Environment variable: `LW6_HUD_COLOR_AUTO'
 -- XML key: `hud-color-auto'
     Type: boolean

     Default value: true

     Defines wether hud colors will be set automatically from base and
     alternate colors. This is a time saver to keep map designers from
     requiring to redefined every single color in the game. You only
     need to set color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg. Then hud_color_frame_bg, hud_color_frame_fg,
     hud_color_text_bg and hud_color_text_fg will be automatically set.

4.12.8 max-map-height
---------------------

 -- Command-line option: `--max-map-height=<value>'
 -- Environment variable: `LW6_MAX_MAP_HEIGHT'
 -- XML key: `max-map-height'
     Type: integer

     Default value: 1000

     Allows you to give a maximum map height. When designing a map you
     might wonder: this is dumb I'm conceiving this map I know its
     height, why should I limit it? Now think of the play who plays on
     a old slowish computer with a tiny screen. He might redefine this
     himself, and does not necessarly wishes to fire Gimp to rescale
     the map.

4.12.9 max-map-surface
----------------------

 -- Command-line option: `--max-map-surface=<value>'
 -- Environment variable: `LW6_MAX_MAP_SURFACE'
 -- XML key: `max-map-surface'
     Type: integer

     Default value: 1000000

     Allows you to give a maximum map surface. Map surface is simply
     (width * height). This parameter is just here to save you the
     hassle of defining both 'max-map-width' and 'max-map-height' in a
     consistent manner.

4.12.10 max-map-width
---------------------

 -- Command-line option: `--max-map-width=<value>'
 -- Environment variable: `LW6_MAX_MAP_WIDTH'
 -- XML key: `max-map-width'
     Type: integer

     Default value: 1500

     Allows you to give a maximum map width. When designing a map you
     might wonder: this is dumb I'm conceiving this map I know its
     width, why should I limit it?  Now think of the play who plays on
     a old slowish computer with a tiny screen.  He might redefine this
     himself, and does not necessarly wishes to fire Gimp to rescale
     the map.

4.12.11 menu-color-auto
-----------------------

 -- Command-line option: `--menu-color-auto=<value>'
 -- Environment variable: `LW6_MENU_COLOR_AUTO'
 -- XML key: `menu-color-auto'
     Type: boolean

     Default value: true

     Defines wether menu colors will be set automatically from base and
     alternate colors. This is a time saver to keep map designers from
     requiring to redefined every single color in the game. You only
     need to set color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg. Then menu_color_default_bg,
     menu_color_default_fg, menu_color_selected_bg,
     menu_color_selected_fg, menu_color_disabled_bg and
     menu_color_disabled_fg will be automatically set.

4.12.12 min-map-height
----------------------

 -- Command-line option: `--min-map-height=<value>'
 -- Environment variable: `LW6_MIN_MAP_HEIGHT'
 -- XML key: `min-map-height'
     Type: integer

     Default value: 30

     Allows you to give a minimum map height. When designing a map you
     might wonder: this is dumb I'm conceiving this map I know its
     height, why should I limit it? Now think of the player who decided
     to play with highly-defined maps because he has a super calculator
     and a hudge screen. He might redefine this himself, and does not
     necessarly wishes to fire Gimp to rescale the map.

4.12.13 min-map-surface
-----------------------

 -- Command-line option: `--min-map-surface=<value>'
 -- Environment variable: `LW6_MIN_MAP_SURFACE'
 -- XML key: `min-map-surface'
     Type: integer

     Default value: 3600

     Allows you to give a minimum map surface. Map surface is simply
     (width * height). This parameter is just here to save you the
     hassle of defining both 'min-map-width' and 'min-map-height' in a
     consistent manner.

4.12.14 min-map-width
---------------------

 -- Command-line option: `--min-map-width=<value>'
 -- Environment variable: `LW6_MIN_MAP_WIDTH'
 -- XML key: `min-map-width'
     Type: integer

     Default value: 40

     Allows you to give a minimum map width. When designing a map you
     might wonder: this is dumb I'm conceiving this map I know its
     width, why should I limit it?  Now think of the player who decided
     to play with highly-defined maps because he has a super calculator
     and a hudge screen. He might redefine this himself, and does not
     necessarly wishes to fire Gimp to rescale the map.

4.12.15 resample
----------------

 -- Command-line option: `--resample=<value>'
 -- Environment variable: `LW6_RESAMPLE'
 -- XML key: `resample'
     Type: boolean

     Default value: true

     If set to true, maps will always be resampled to a size which
     depends on your screen resolution, zoom factor, and the rest. If
     false, maps will be set at the exact resolution of map.png.

4.12.16 speed
-------------

 -- Command-line option: `--speed=<value>'
 -- Environment variable: `LW6_SPEED'
 -- XML key: `speed'
     Type: float

     Default value: 1.0

     This parameter is the main parameter on which game speed depends.
     The map loader will garantee, by downscaling the map, that to
     cross the level (by crossing the level we mean, for instance,
     going from top-left corner to bottom-right corner in a straight
     line) a fighter will take a constant amount of time. Under the
     hood, the loader might of course rescale the map but it will also
     change game speed so that, at the end, fighters take a constant
     time to cross the level. This is, indeed, the most important
     thing, players do not care much if internally there are X or Y
     moves per second, the global game experience depends on how fast
     fighter movement looks on the screen. The default settings
     corresponds roughly to one second to cross the level. If you set
     this to 2.0, it will go twice faster.

4.12.17 system-color-auto
-------------------------

 -- Command-line option: `--system-color-auto=<value>'
 -- Environment variable: `LW6_SYSTEM_COLOR_AUTO'
 -- XML key: `system-color-auto'
     Type: boolean

     Default value: true

     Defines wether system colors will be set automatically from base
     and alternate colors. This is a time saver to keep map designers
     from requiring to redefined every single color in the game. You
     only need to set color-base-bg, color-base-fg, color-alternate-bg
     and color-alternate-fg. Then system_color_bg and system_color_fg
     will be automatically set.

4.12.18 upsize-using-bench-value
--------------------------------

 -- Command-line option: `--upsize-using-bench-value=<value>'
 -- Environment variable: `LW6_UPSIZE_USING_BENCH_VALUE'
 -- XML key: `upsize-using-bench-value'
     Type: boolean

     Default value: false

     If set, then the game will automatically upsize a map according to
     the 'fighter-scale' parameter. Upsizing means: a 160x120 maps
     becomes 400x300, for instance. Upsizing causes fighters to be
     smaller because map resolution is higher. This will avoid useless
     pixelish 'jumbo fighters' look when your computer is powerfull
     enough to do better.

4.12.19 upsize-using-fighter-scale
----------------------------------

 -- Command-line option: `--upsize-using-fighter-scale=<value>'
 -- Environment variable: `LW6_UPSIZE_USING_FIGHTER_SCALE'
 -- XML key: `upsize-using-fighter-scale'
     Type: boolean

     Default value: true

     If set, then the game will automatically upsize a map according to
     the 'fighter-scale' parameter. Upsizing means: a 160x120 maps
     becomes 400x300, for instance. Upsizing causes fighters to be
     smaller because map resolution is higher. This can be usefull if
     you don't want fighters to be too big.

4.12.20 view-color-auto
-----------------------

 -- Command-line option: `--view-color-auto=<value>'
 -- Environment variable: `LW6_VIEW_COLOR_AUTO'
 -- XML key: `view-color-auto'
     Type: boolean

     Default value: true

     Defines wether view colors will be set automatically from base and
     alternate colors. This is a time saver to keep map designers from
     requiring to redefined every single color in the game. You only
     need to set color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg. Then view_color_cursor_bg,
     view_color_cursor_fg, view_color_map_bg and view_color_map_fg will
     be automatically set.

4.12.21 wall-grease
-------------------

 -- Command-line option: `--wall-grease=<value>'
 -- Environment variable: `LW6_WALL_GREASE'
 -- XML key: `wall-grease'
     Type: integer

     Default value: 0 Min value: -5 Max value: 5

     This parameter allows you to make walls (AKA map foreground)
     thicker, or thiner, when map is loaded. Indeed, when map are
     resampled, and especially when they are downscaled, some walls may
     disappear, or some passages may be blocked. The loader can't
     automatically figure out wether it's more important to keep an
     existing wall or to keep an open passage for fighters. This
     parameter helps doing so, if you set it to a low value, level will
     be less greasy, and many passages might open themselves. On the
     contrary, if grease is at a high level, then a thin line of almost
     isolated pixels might become a thick wall. There's no real
     garantee your wall or passage will always be present, but it's a
     same bet to assume on a 'tunnel-like' level one needs to set
     grease to a low value, and on a 'wide open' level with few walls
     one needs to set grease to a high value.


File: liquidwar6.info,  Node: Map style.xml,  Next: Map teams.xml,  Prev: Map hints.xml,  Up: Reference

4.13 Map style.xml
==================

4.13.1 animation-density
------------------------

 -- Command-line option: `--animation-density=<value>'
 -- Environment variable: `LW6_ANIMATION_DENSITY'
 -- XML key: `animation-density'
     Type: float

     Default value: 1.0f Min value: 0 Max value: 10

     Density of the background animation, that is, for instance, if the
     background animation is about displaying bubbles, using a high
     value will display many bubbles. A value of 1.0 corresponds to the
     default setting.

4.13.2 animation-speed
----------------------

 -- Command-line option: `--animation-speed=<value>'
 -- Environment variable: `LW6_ANIMATION_SPEED'
 -- XML key: `animation-speed'
     Type: float

     Default value: 1.0f Min value: 0 Max value: 10

     Speed of the background animation, that is, for instance, if the
     background animation is about displaying bubbles, using a high
     value will cause bubbles to move very fast. A value of 1.0
     corresponds to the default setting.

4.13.3 background-color-root-bg
-------------------------------

 -- Command-line option: `--background-color-root-bg=<value>'
 -- Environment variable: `LW6_BACKGROUND_COLOR_ROOT_BG'
 -- XML key: `background-color-root-bg'
     Type: color

     Default value: #000

     Defines the main background color. This is, for instance, the
     color which will be used to clear the screen before drawing thing.
     Will be automatically guessed from the map texture if color-auto
     is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.4 background-color-root-fg
-------------------------------

 -- Command-line option: `--background-color-root-fg=<value>'
 -- Environment variable: `LW6_BACKGROUND_COLOR_ROOT_FG'
 -- XML key: `background-color-root-fg'
     Type: color

     Default value: #ccc

     Defines a color which will be used together with color-base-bg to
     compose the background. It can be wise to have a minimum contrast
     between this color and color-base-bg, but it is not mandatory,
     especially if other colors are manually redefined. Will be
     automatically guessed from the map texture if color-auto is set.
     Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.5 background-color-stuff-bg
--------------------------------

 -- Command-line option: `--background-color-stuff-bg=<value>'
 -- Environment variable: `LW6_BACKGROUND_COLOR_STUFF_BG'
 -- XML key: `background-color-stuff-bg'
     Type: color

     Default value: #333

     Defines a color which will be used together with
     color-alternate-fg to draw things (animations, sprites, text,
     whatever) in the background. It should be different enough from
     color-alternate-fg so that one can really distinguish these
     colors. Will be automatically guessed from the map texture if
     color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.6 background-color-stuff-fg
--------------------------------

 -- Command-line option: `--background-color-stuff-fg=<value>'
 -- Environment variable: `LW6_BACKGROUND_COLOR_STUFF_FG'
 -- XML key: `background-color-stuff-fg'
     Type: color

     Default value: #fff

     Defines a color which will be used to draw things (animations,
     sprites, text, whatever) in the background. It should be different
     enough from color-alternate-bg so that one can really distinguish
     these colors. Think of this as the sprite, the text, the
     whatever-needs-to-be-seen-uses-this color.  Will be automatically
     guessed from the map texture if color-auto is set. Can be #RGB,
     #RGBA, #RRGGBB or #RRGGBBAA.

4.13.7 background-style
-----------------------

 -- Command-line option: `--background-style=<value>'
 -- Environment variable: `LW6_BACKGROUND_STYLE'
 -- XML key: `background-style'
     Type: string

     Default value: bubbles

     The background defines, of course, what is displayed at the
     background, but it also conditions the colors used for other
     items, such as the menus for instance. The possible values are
     'void' and 'bubbles'.

4.13.8 blink-cursor
-------------------

 -- Command-line option: `--blink-cursor=<value>'
 -- Environment variable: `LW6_BLINK_CURSOR'
 -- XML key: `blink-cursor'
     Type: boolean

     Default value: false

     If set, then cursor will blink, allowing you to see what's under
     the cursor.  It's just a matter of taste, you might to always have
     your cursor displayed, or prefer to have it disappear from time to
     time so that you can see the action below

4.13.9 color-alternate-bg
-------------------------

 -- Command-line option: `--color-alternate-bg=<value>'
 -- Environment variable: `LW6_COLOR_ALTERNATE_BG'
 -- XML key: `color-alternate-bg'
     Type: color

     Default value: #333

     Defines the alternate color, more precisely, its bg (background)
     part. Colors are always defined by a bg/fg pair. Most colors in
     the game can be deduced from this one, usually to color a map you
     only need to define color-base-bg, color-base-fg,
     color-alternate-bg and color-alternate-fg.

4.13.10 color-alternate-fg
--------------------------

 -- Command-line option: `--color-alternate-fg=<value>'
 -- Environment variable: `LW6_COLOR_ALTERNATE_FG'
 -- XML key: `color-alternate-fg'
     Type: color

     Default value: #fff

     Defines the alternate color, more precisely, its fg (foreground)
     part. Colors are always defined by a bg/fg pair. Most colors in
     the game can be deduced from this one, usually to color a map you
     only need to define color-base-bg, color-base-fg,
     color-alternate-bg and color-alternate-fg.

4.13.11 color-base-bg
---------------------

 -- Command-line option: `--color-base-bg=<value>'
 -- Environment variable: `LW6_COLOR_BASE_BG'
 -- XML key: `color-base-bg'
     Type: color

     Default value: #000

     Defines the base color, more precisely, its bg (background) part.
     Colors are always defined by a bg/fg pair. Most colors in the game
     can be deduced from this one, usually to color a map you only need
     to define color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg.

4.13.12 color-base-fg
---------------------

 -- Command-line option: `--color-base-fg=<value>'
 -- Environment variable: `LW6_COLOR_BASE_FG'
 -- XML key: `color-base-fg'
     Type: color

     Default value: #ccc

     Defines the base color, more precisely, its fg (foreground) part.
     Colors are always defined by a bg/fg pair. Most colors in the game
     can be deduced from this one, usually to color a map you only need
     to define color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg.

4.13.13 colorize
----------------

 -- Command-line option: `--colorize=<value>'
 -- Environment variable: `LW6_COLORIZE'
 -- XML key: `colorize'
     Type: boolean

     Default value: true

     If set, then all background drawings including textures will use
     the background colors. This means, for instance, that if
     background colors are set automatically by color-auto from the map
     texture, then the background will adopt the same range of colors
     than the map itself. In short, the background will mimic the map.

4.13.14 colorize-cursor
-----------------------

 -- Command-line option: `--colorize-cursor=<value>'
 -- Environment variable: `LW6_COLORIZE_CURSOR'
 -- XML key: `colorize-cursor'
     Type: boolean

     Default value: true

     If set, then all cursors will use the automatic guessed colors, or
     the specified colors, but basically they won't be displayed using
     their native colors. This can be usefull for you can wish to use a
     generic non-colored texture for your cursor and let it be
     colorized automatically so that it's accorded to the level.

4.13.15 cursor-size
-------------------

 -- Command-line option: `--cursor-size=<value>'
 -- Environment variable: `LW6_CURSOR_SIZE'
 -- XML key: `cursor-size'
     Type: float

     Default value: 1.0f Min value: 0 Max value: 10

     Size of the cursors on the map. 1 is the default, setting it to a
     higher value will make cursors bigger, a lower value will make
     them smaller.

4.13.16 hidden-layer-alpha
--------------------------

 -- Command-line option: `--hidden-layer-alpha=<value>'
 -- Environment variable: `LW6_HIDDEN_LAYER_ALPHA'
 -- XML key: `hidden-layer-alpha'
     Type: float

     Default value: 0.1f Min value: 0 Max value: 1

     Whenever players are supposed to be hidden behind a wall, for
     instance if they are in layer 2 and layer 1 is filled with walls,
     it's still possible to see them, but with a low alpha value
     (almost transparent). This parameter allows you to trick this
     value, 0 will make these players absolutely invisible, 1 will make
     them totally opaque, like if they were on layer 1.

4.13.17 hud-color-frame-bg
--------------------------

 -- Command-line option: `--hud-color-frame-bg=<value>'
 -- Environment variable: `LW6_HUD_COLOR_FRAME_BG'
 -- XML key: `hud-color-frame-bg'
     Type: color

     Default value: #000

     Defines the background color for the hud frame. Ignored if
     hud-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.18 hud-color-frame-fg
--------------------------

 -- Command-line option: `--hud-color-frame-fg=<value>'
 -- Environment variable: `LW6_HUD_COLOR_FRAME_FG'
 -- XML key: `hud-color-frame-fg'
     Type: color

     Default value: #ccc

     Defines the foreground color for the hud frame. Ignored if
     hud-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.19 hud-color-text-bg
-------------------------

 -- Command-line option: `--hud-color-text-bg=<value>'
 -- Environment variable: `LW6_HUD_COLOR_TEXT_BG'
 -- XML key: `hud-color-text-bg'
     Type: color

     Default value: #333

     Defines the background color for hud text. Ignored if
     hud-color-auto is set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.20 hud-color-text-fg
-------------------------

 -- Command-line option: `--hud-color-text-fg=<value>'
 -- Environment variable: `LW6_HUD_COLOR_TEXT_FG'
 -- XML key: `hud-color-text-fg'
     Type: color

     Default value: #fff

     Defines the foreground color for hud text. Ignored if
     hud-color-auto is set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.21 hud-style
-----------------

 -- Command-line option: `--hud-style=<value>'
 -- Environment variable: `LW6_HUD_STYLE'
 -- XML key: `hud-style'
     Type: string

     Default value: floating

     The hud is where informations about the game are displayed. This
     means, who is winning, are other status-like informations.
     Possible values include 'floating' and 'tactical'.

4.13.22 keep-ratio
------------------

 -- Command-line option: `--keep-ratio=<value>'
 -- Environment variable: `LW6_KEEP_RATIO'
 -- XML key: `keep-ratio'
     Type: boolean

     Default value: true

     Defines wether the map should keep its ratio, or if it should be
     stretched to fill the shape of your screen.

4.13.23 menu-color-default-bg
-----------------------------

 -- Command-line option: `--menu-color-default-bg=<value>'
 -- Environment variable: `LW6_MENU_COLOR_DEFAULT_BG'
 -- XML key: `menu-color-default-bg'
     Type: color

     Default value: #333

     Defines the default background color for menus. Ignored if
     menu-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.24 menu-color-default-fg
-----------------------------

 -- Command-line option: `--menu-color-default-fg=<value>'
 -- Environment variable: `LW6_MENU_COLOR_DEFAULT_FG'
 -- XML key: `menu-color-default-fg'
     Type: color

     Default value: #fff

     Defines the default foreground color for menus. In fact, this is
     the main color for menu text, the color used to draw letters in
     menus. Ignored if menu-color-auto is set. Can be #RGB, #RGBA,
     #RRGGBB or #RRGGBBAA.

4.13.25 menu-color-disabled-bg
------------------------------

 -- Command-line option: `--menu-color-disabled-bg=<value>'
 -- Environment variable: `LW6_MENU_COLOR_DISABLED_BG'
 -- XML key: `menu-color-disabled-bg'
     Type: color

     Default value: #000

     Defines the background color for a disabled menu item. Ignored if
     menu-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.26 menu-color-disabled-fg
------------------------------

 -- Command-line option: `--menu-color-disabled-fg=<value>'
 -- Environment variable: `LW6_MENU_COLOR_DISABLED_FG'
 -- XML key: `menu-color-disabled-fg'
     Type: color

     Default value: #ccc

     Defines the foreground color for a disabled menu item. Ignored if
     menu-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.27 menu-color-selected-bg
------------------------------

 -- Command-line option: `--menu-color-selected-bg=<value>'
 -- Environment variable: `LW6_MENU_COLOR_SELECTED_BG'
 -- XML key: `menu-color-selected-bg'
     Type: color

     Default value: #fff

     Defines the background color for a selected menu item. Ignored if
     menu-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.28 menu-color-selected-fg
------------------------------

 -- Command-line option: `--menu-color-selected-fg=<value>'
 -- Environment variable: `LW6_MENU_COLOR_SELECTED_FG'
 -- XML key: `menu-color-selected-fg'
     Type: color

     Default value: #333

     Defines the foreground color for a selected menu item. Ignored if
     menu-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.29 menu-style
------------------

 -- Command-line option: `--menu-style=<value>'
 -- Environment variable: `LW6_MENU_STYLE'
 -- XML key: `menu-style'
     Type: string

     Default value: cylinder

     The menu style is simply the name of the engine used to power the
     menu system.  The only possible value, for now, is 'cylinder'.

4.13.30 music-exclude
---------------------

 -- Command-line option: `--music-exclude=<value>'
 -- Environment variable: `LW6_MUSIC_EXCLUDE'
 -- XML key: `music-exclude'
     Type: string

     Default value: Chadburn

     If this string is found in a music file name, it will be excluded
     from the list when playing in random mode.

4.13.31 music-file
------------------

 -- Command-line option: `--music-file=<value>'
 -- Environment variable: `LW6_MUSIC_FILE'
 -- XML key: `music-file'
     Type: string

     Default value:

     Allows you to play a custom music file (typically your own ogg
     music) and override default game music. If file does not exist,
     game will use its internal music. The file will be searched for in
     the current 'music-path' but also in the current map directory. No
     absolute or even relative path are allowed, only a plain filename
     with no slash or backslash. Avoid special characters at all cost.

4.13.32 music-filter
--------------------

 -- Command-line option: `--music-filter=<value>'
 -- Environment variable: `LW6_MUSIC_FILTER'
 -- XML key: `music-filter'
     Type: string

     Default value:

     A music filter, used when files are played randomly. This is not a
     complex regex-enabled filter, just a plain string search. Even the
     '*' wildcard won't work. If you want precise control on what music
     file to play, please consider reorganizing your files and/or use
     the 'music-file' parameter.

4.13.33 pixelize
----------------

 -- Command-line option: `--pixelize=<value>'
 -- Environment variable: `LW6_PIXELIZE'
 -- XML key: `pixelize'
     Type: boolean

     Default value: false

     Depending on the renderer capabilities, will try to pixelize some
     parts of the game. This can be used to emulate the old LW5
     appearance.

4.13.34 system-color-bg
-----------------------

 -- Command-line option: `--system-color-bg=<value>'
 -- Environment variable: `LW6_SYSTEM_COLOR_BG'
 -- XML key: `system-color-bg'
     Type: color

     Default value: #333

     Defines the system background color, used when displaying system
     info, such as the number of frames per second. Can be #RGB, #RGBA,
     #RRGGBB or #RRGGBBAA.

4.13.35 system-color-fg
-----------------------

 -- Command-line option: `--system-color-fg=<value>'
 -- Environment variable: `LW6_SYSTEM_COLOR_FG'
 -- XML key: `system-color-fg'
     Type: color

     Default value: #fff

     Defines the system foreground color, used when displaying system
     info, such as the number of frames per second. This will typically
     be text color. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.36 team-color-blue
-----------------------

 -- Command-line option: `--team-color-blue=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_BLUE'
 -- XML key: `team-color-blue'
     Type: color

     Default value: #00f

     Defines the color for the blue team. Syntax is HTML-like, #RGB or
     #RRGGBB.

4.13.37 team-color-cyan
-----------------------

 -- Command-line option: `--team-color-cyan=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_CYAN'
 -- XML key: `team-color-cyan'
     Type: color

     Default value: #0ff

     Defines the color for the cyan team. Syntax is HTML-like, #RGB or
     #RRGGBB.

4.13.38 team-color-dead
-----------------------

 -- Command-line option: `--team-color-dead=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_DEAD'
 -- XML key: `team-color-dead'
     Type: color

     Default value: #000

     Defines the color for the teams when they are dead. By default it
     is black, this means when a team is weak it becomes black. Syntax
     is HTML-like, #RGB or #RRGGBB.

4.13.39 team-color-green
------------------------

 -- Command-line option: `--team-color-green=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_GREEN'
 -- XML key: `team-color-green'
     Type: color

     Default value: #0f0

     Defines the color for the green team. Syntax is HTML-like, #RGB or
     #RRGGBB.

4.13.40 team-color-lightblue
----------------------------

 -- Command-line option: `--team-color-lightblue=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_LIGHTBLUE'
 -- XML key: `team-color-lightblue'
     Type: color

     Default value: #8bf

     Defines the color for the light blue team. Syntax is HTML-like,
     #RGB or #RRGGBB.

4.13.41 team-color-magenta
--------------------------

 -- Command-line option: `--team-color-magenta=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_MAGENTA'
 -- XML key: `team-color-magenta'
     Type: color

     Default value: #f0f

     Defines the color for the magenta team. Syntax is HTML-like, #RGB
     or #RRGGBB.

4.13.42 team-color-orange
-------------------------

 -- Command-line option: `--team-color-orange=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_ORANGE'
 -- XML key: `team-color-orange'
     Type: color

     Default value: #f80

     Defines the color for the orange team. Syntax is HTML-like, #RGB
     or #RRGGBB.

4.13.43 team-color-pink
-----------------------

 -- Command-line option: `--team-color-pink=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_PINK'
 -- XML key: `team-color-pink'
     Type: color

     Default value: #f8b

     Defines the color for the pink team. Syntax is HTML-like, #RGB or
     #RRGGBB.

4.13.44 team-color-purple
-------------------------

 -- Command-line option: `--team-color-purple=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_PURPLE'
 -- XML key: `team-color-purple'
     Type: color

     Default value: #b8f

     Defines the color for the purple team. Syntax is HTML-like, #RGB
     or #RRGGBB.

4.13.45 team-color-red
----------------------

 -- Command-line option: `--team-color-red=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_RED'
 -- XML key: `team-color-red'
     Type: color

     Default value: #f00

     Defines the color for the red team. Syntax is HTML-like, #RGB or
     #RRGGBB.

4.13.46 team-color-yellow
-------------------------

 -- Command-line option: `--team-color-yellow=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_YELLOW'
 -- XML key: `team-color-yellow'
     Type: color

     Default value: #ff0

     Defines the color for the yellow team. Syntax is HTML-like, #RGB
     or #RRGGBB.

4.13.47 view-color-cursor-bg
----------------------------

 -- Command-line option: `--view-color-cursor-bg=<value>'
 -- Environment variable: `LW6_VIEW_COLOR_CURSOR_BG'
 -- XML key: `view-color-cursor-bg'
     Type: color

     Default value: #333

     Defines the background cursor color. Will typically be used to
     draw the shape of the cursor. Ignored if view-color-auto is set.
     Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.48 view-color-cursor-fg
----------------------------

 -- Command-line option: `--view-color-cursor-fg=<value>'
 -- Environment variable: `LW6_VIEW_COLOR_CURSOR_FG'
 -- XML key: `view-color-cursor-fg'
     Type: color

     Default value: #fff

     Defines the foreground cursor color. Will typically be used to
     draw text in the cursor. Ignored if view-color-auto is set. Can be
     #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.49 view-color-map-bg
-------------------------

 -- Command-line option: `--view-color-map-bg=<value>'
 -- Environment variable: `LW6_VIEW_COLOR_MAP_BG'
 -- XML key: `view-color-map-bg'
     Type: color

     Default value: #000

     Defines the background map color. If there's no map texture
     defined or if use-texture is false, this is the color of the
     places where armies will go.  Ignored if view-color-auto is set.
     Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.50 view-color-map-fg
-------------------------

 -- Command-line option: `--view-color-map-fg=<value>'
 -- Environment variable: `LW6_VIEW_COLOR_MAP_FG'
 -- XML key: `view-color-map-fg'
     Type: color

     Default value: #ccc

     Defines the foreground map color. If there's no map texture
     defined or if use-texture is false, this is the color of walls,
     what armies can't go through. Ignored if view-color-auto is set.
     Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.51 view-style
------------------

 -- Command-line option: `--view-style=<value>'
 -- Environment variable: `LW6_VIEW_STYLE'
 -- XML key: `view-style'
     Type: string

     Default value: flat

     The view style conditions which renderer is used for the map, the
     area where fighters are displayed. This is not the graphics
     backend. Indeed, the graphics backend defines which technical tool
     one uses (which library) one runs, wether this parameter says what
     kind of rendering one wants.

4.13.52 waves
-------------

 -- Command-line option: `--waves=<value>'
 -- Environment variable: `LW6_WAVES'
 -- XML key: `waves'
     Type: boolean

     Default value: true

     Activates the wave effect, that's to say level appears to be under
     water when playing.

4.13.53 x-wrap
--------------

 -- Command-line option: `--x-wrap=<value>'
 -- Environment variable: `LW6_X_WRAP'
 -- XML key: `x-wrap'
     Type: boolean

     Default value: true

     Defines wether the map should be wrapped on the x axis. This is
     the companion of 'x-polarity', if no polarity is defined, map
     can't be wrapped, but in some cases, one might wish to have a map
     with polarity but without wrapping if, for instance, textures do
     not tile nicely.

4.13.54 y-wrap
--------------

 -- Command-line option: `--y-wrap=<value>'
 -- Environment variable: `LW6_Y_WRAP'
 -- XML key: `y-wrap'
     Type: boolean

     Default value: true

     Defines wether the map should be wrapped on the y axis. This is
     the companion of 'y-polarity', if no polarity is defined, map
     can't be wrapped, but in some cases, one might wish to have a map
     with polarity but without wrapping if, for instance, textures do
     not tile nicely.

4.13.55 zoom
------------

 -- Command-line option: `--zoom=<value>'
 -- Environment variable: `LW6_ZOOM'
 -- XML key: `zoom'
     Type: float

     Default value: 1.0f

     Defines the map zoom. If lower than 1.0, map will occupy only a
     fraction of the screen, if greater than 1.0, some areas will be
     outside the screen, and the player will need to scroll through it.

4.13.56 zoom-max
----------------

 -- Command-line option: `--zoom-max=<value>'
 -- Environment variable: `LW6_ZOOM_MAX'
 -- XML key: `zoom-max'
     Type: float

     Default value: 30.0f

     Defines the max map zoom. If set to a high value, you'll be able to
     dynamically view the map with hudge fighters, seeing only a
     fraction of the level.

4.13.57 zoom-min
----------------

 -- Command-line option: `--zoom-min=<value>'
 -- Environment variable: `LW6_ZOOM_MIN'
 -- XML key: `zoom-min'
     Type: float

     Default value: 0.3f

     Defines the min map zoom. If set to a low value, you'll be able to
     dynamically view a very small, reduced map.


File: liquidwar6.info,  Node: Map teams.xml,  Next: Advanced settings,  Prev: Map style.xml,  Up: Reference

4.14 Map teams.xml
==================

4.14.1 bot-iq
-------------

 -- Command-line option: `--bot-iq=<value>'
 -- Environment variable: `LW6_BOT_IQ'
 -- XML key: `bot-iq'
     Type: integer

     Default value: 100 Min value: 0 Max value: 200

     The IQ (intelligence quotient) of bots. Typically, a value of 100
     will make the bot behave normally, performing at its best. A value
     of 0 will just make it act the worst way it can. Values over 100
     probably won't change anything compared to 100, but this truely
     depends on which bot backend you're running.

4.14.2 bot-speed
----------------

 -- Command-line option: `--bot-speed=<value>'
 -- Environment variable: `LW6_BOT_SPEED'
 -- XML key: `bot-speed'
     Type: float

     Default value: 1.0f

     The speed of bots, 1 means normal speed, higher value will speed
     it up, lower will slow it down. Note that this only has an impact
     on bot engines, not on the game speed itself.

4.14.3 bot1-ai
--------------

 -- Command-line option: `--bot1-ai=<value>'
 -- Environment variable: `LW6_BOT1_AI'
 -- XML key: `bot1-ai'
     Type: string

     Default value: idiot

     AI engine for bot number 1.

4.14.4 bot1-color
-----------------

 -- Command-line option: `--bot1-color=<value>'
 -- Environment variable: `LW6_BOT1_COLOR'
 -- XML key: `bot1-color'
     Type: string

     Default value: green

     Color for bot number 1.

4.14.5 bot2-ai
--------------

 -- Command-line option: `--bot2-ai=<value>'
 -- Environment variable: `LW6_BOT2_AI'
 -- XML key: `bot2-ai'
     Type: string

     Default value: idiot

     AI engine for bot number 2.

4.14.6 bot2-color
-----------------

 -- Command-line option: `--bot2-color=<value>'
 -- Environment variable: `LW6_BOT2_COLOR'
 -- XML key: `bot2-color'
     Type: string

     Default value: blue

     Color for bot number 2.

4.14.7 bot3-ai
--------------

 -- Command-line option: `--bot3-ai=<value>'
 -- Environment variable: `LW6_BOT3_AI'
 -- XML key: `bot3-ai'
     Type: string

     Default value: random

     AI engine for bot number 3.

4.14.8 bot3-color
-----------------

 -- Command-line option: `--bot3-color=<value>'
 -- Environment variable: `LW6_BOT3_COLOR'
 -- XML key: `bot3-color'
     Type: string

     Default value: yellow

     Color for bot number 3.

4.14.9 bot4-ai
--------------

 -- Command-line option: `--bot4-ai=<value>'
 -- Environment variable: `LW6_BOT4_AI'
 -- XML key: `bot4-ai'
     Type: string

     Default value: follow

     AI engine for bot number 4.

4.14.10 bot4-color
------------------

 -- Command-line option: `--bot4-color=<value>'
 -- Environment variable: `LW6_BOT4_COLOR'
 -- XML key: `bot4-color'
     Type: string

     Default value: cyan

     Color for bot number 4.

4.14.11 bot5-ai
---------------

 -- Command-line option: `--bot5-ai=<value>'
 -- Environment variable: `LW6_BOT5_AI'
 -- XML key: `bot5-ai'
     Type: string

     Default value: random

     AI engine for bot number 5.

4.14.12 bot5-color
------------------

 -- Command-line option: `--bot5-color=<value>'
 -- Environment variable: `LW6_BOT5_COLOR'
 -- XML key: `bot5-color'
     Type: string

     Default value: magenta

     Color for bot number 5.

4.14.13 bot6-ai
---------------

 -- Command-line option: `--bot6-ai=<value>'
 -- Environment variable: `LW6_BOT6_AI'
 -- XML key: `bot6-ai'
     Type: string

     Default value: follow

     AI engine for bot number 6.

4.14.14 bot6-color
------------------

 -- Command-line option: `--bot6-color=<value>'
 -- Environment variable: `LW6_BOT6_COLOR'
 -- XML key: `bot6-color'
     Type: string

     Default value: orange

     Color for bot number 6.

4.14.15 bot7-ai
---------------

 -- Command-line option: `--bot7-ai=<value>'
 -- Environment variable: `LW6_BOT7_AI'
 -- XML key: `bot7-ai'
     Type: string

     Default value: idiot

     AI engine for bot number 7.

4.14.16 bot7-color
------------------

 -- Command-line option: `--bot7-color=<value>'
 -- Environment variable: `LW6_BOT7_COLOR'
 -- XML key: `bot7-color'
     Type: string

     Default value: lightblue

     Color for bot number 7.

4.14.17 bot8-ai
---------------

 -- Command-line option: `--bot8-ai=<value>'
 -- Environment variable: `LW6_BOT8_AI'
 -- XML key: `bot8-ai'
     Type: string

     Default value: idiot

     AI engine for bot number 8.

4.14.18 bot8-color
------------------

 -- Command-line option: `--bot8-color=<value>'
 -- Environment variable: `LW6_BOT8_COLOR'
 -- XML key: `bot8-color'
     Type: string

     Default value: purple

     Color for bot number 8.

4.14.19 bot9-ai
---------------

 -- Command-line option: `--bot9-ai=<value>'
 -- Environment variable: `LW6_BOT9_AI'
 -- XML key: `bot9-ai'
     Type: string

     Default value: idiot

     AI engine for bot number 9.

4.14.20 bot9-color
------------------

 -- Command-line option: `--bot9-color=<value>'
 -- Environment variable: `LW6_BOT9_COLOR'
 -- XML key: `bot9-color'
     Type: string

     Default value: pink

     Color for bot number 9.

4.14.21 nb-bots
---------------

 -- Command-line option: `--nb-bots=<value>'
 -- Environment variable: `LW6_NB_BOTS'
 -- XML key: `nb-bots'
     Type: integer

     Default value: 2 Min value: 0 Max value: 9

     Number of bots on the map. 0 means no bots, if set to 1 the the
     bot1-...  settings will be used, if set to 2 then bot1-... and
     bot2-... will be used, and so on.

4.14.22 player1-color
---------------------

 -- Command-line option: `--player1-color=<value>'
 -- Environment variable: `LW6_PLAYER1_COLOR'
 -- XML key: `player1-color'
     Type: string

     Default value: red

     Color of the first player, must be red, green, blue, yellow, cyan,
     magenta, orange, lightblue, purple or pink

4.14.23 player2-color
---------------------

 -- Command-line option: `--player2-color=<value>'
 -- Environment variable: `LW6_PLAYER2_COLOR'
 -- XML key: `player2-color'
     Type: string

     Default value: green

     Color of the second player, must be red, green, blue, yellow,
     cyan, magenta, orange, lightblue, purple or pink

4.14.24 player3-color
---------------------

 -- Command-line option: `--player3-color=<value>'
 -- Environment variable: `LW6_PLAYER3_COLOR'
 -- XML key: `player3-color'
     Type: string

     Default value: blue

     Color of the third player, must be red, green, blue, yellow, cyan,
     magenta, orange, lightblue, purple or pink

4.14.25 player4-color
---------------------

 -- Command-line option: `--player4-color=<value>'
 -- Environment variable: `LW6_PLAYER4_COLOR'
 -- XML key: `player4-color'
     Type: string

     Default value: yellow

     Color of the fourth player, must be red, green, blue, yellow,
     cyan, magenta, orange, lightblue, purple or pink


File: liquidwar6.info,  Node: Advanced settings,  Next: C to Guile,  Prev: Map teams.xml,  Up: Reference

4.15 Advanced settings
======================

4.15.1 base64-decode
--------------------

 -- Command-line option: `--base64-decode'
     If specified, program will take stdin and base64 decode it to
     stdout. This is for testing purpose (for network messages for
     instance). Will decode in standard base64 encoding using
     characters + and / but also the url-compliant version using - and
     /, see RFC 4648 for details.

4.15.2 base64-encode
--------------------

 -- Command-line option: `--base64-encode'
     If specified, program will take stdin and base64 encode it to
     stdout. This is for testing purpose (for network messages for
     instance). Will *not* use standard base64 encoding using
     characters + and / but - and _ instead to be url-compliant, see
     RFC 4648 for details.

4.15.3 bench
------------

 -- Command-line option: `--bench'
     Runs a benchmarking test which will report an approximative
     performance estimation of the game on your computer.

4.15.4 bench-value
------------------

 -- Command-line option: `--bench-value=<value>'
 -- Environment variable: `LW6_BENCH_VALUE'
 -- XML key: `bench-value'
     Type: integer

     Default value: 20

     Contains the current bench value of the computer running the game.
     This is used internally to choose the right map settings. You can
     override this value and use your own but... use at your own risk.
     Pretending you have a faster computer than what you really have
     can lead to confusion.

4.15.5 bin-id
-------------

 -- Command-line option: `--bin-id=<value>'
 -- Environment variable: `LW6_BIN_ID'
 -- XML key: `bin-id'
     Type: integer

     Default value: 0

     The internal 'bin-id' value. Note that this is not necessarly
     equal to the value returned by 'show-build-bin-id'. When they are
     different, it is assumed this is because of a software upgrade.

4.15.6 check
------------

 -- Command-line option: `--check'
     Running the game with '-check' is almost like running '-test', the
     difference is that '-check' will not run tests which involve
     graphics or sound backends, so it's adapted to pure console mode.
     This can be usefull for automated checks on a build farm, or if
     you want to check things in a headless (pure console) environment.

4.15.7 commands-per-sec
-----------------------

 -- Command-line option: `--commands-per-sec=<value>'
 -- Environment variable: `LW6_COMMANDS_PER_SEC'
 -- XML key: `commands-per-sec'
     Type: integer

     Default value: 10

     Defines the number of commands per second. When a command is
     generated, orders are actually sent to the game engine, for
     instance, 'this cursor moved there'.  So this option will affect
     game responsiveness, setting this to a high value will make the
     game more responsive but consume bandwidth on network games.

4.15.8 daemon
-------------

 -- Command-line option: `--daemon'
     Start the game in daemon mode, this is typically used with the
     server mode, if you want the process to be detached from the
     console and executed in the background.

4.15.9 debug-layer-id
---------------------

 -- Command-line option: `--debug-layer-id=<value>'
 -- Environment variable: `LW6_DEBUG_LAYER_ID'
 -- XML key: `debug-layer-id'
     Type: integer

     Default value: 0 Min value: 0 Max value: 6

     A team id which will be used for debugging purposes, for instance
     when displaying gradient.

4.15.10 debug-team-id
---------------------

 -- Command-line option: `--debug-team-id=<value>'
 -- Environment variable: `LW6_DEBUG_TEAM_ID'
 -- XML key: `debug-team-id'
     Type: integer

     Default value: 0 Min value: 0 Max value: 9

     A team id which will be used for debugging purposes, for instance
     when displaying gradient.

4.15.11 demo
------------

 -- Command-line option: `--demo'
     Start the game in demo mode. 2 bots play against each other
     forever.

4.15.12 dirty-read
------------------

 -- Command-line option: `--dirty-read=<value>'
 -- Environment variable: `LW6_DIRTY_READ'
 -- XML key: `dirty-read'
     Type: integer

     Default value: 2 Min value: 0 Max value: 2

     How to handle dirty reads and locks when displaying stuff. If set
     to 0, there will be no dirty reads at all, a lock (mutex) will be
     set whenever it's needed. If set to 1, display might be done with
     inconsistent data, however the data itself won't be modified while
     displaying. If set to 2, displayed data can (and will) be modified
     while the rendering thread is running.

4.15.13 display-background
--------------------------

 -- Command-line option: `--display-background=<value>'
 -- Environment variable: `LW6_DISPLAY_BACKGROUND'
 -- XML key: `display-background'
     Type: boolean

     Default value: true

     Decides wether the background animation/image should be displayed
     at all.

4.15.14 display-console
-----------------------

 -- Command-line option: `--display-console=<value>'
 -- Environment variable: `LW6_DISPLAY_CONSOLE'
 -- XML key: `display-console'
     Type: boolean

     Default value: false

     Defines wether the interactive system console must be displayed.
     Note that console support must have been enabled at compilation
     time. It might not be available on your computer, for instance if
     you are running a system such as Microsoft Windows.

4.15.15 display-cursors
-----------------------

 -- Command-line option: `--display-cursors=<value>'
 -- Environment variable: `LW6_DISPLAY_CURSORS'
 -- XML key: `display-cursors'
     Type: boolean

     Default value: true

     Debugging option which can be set to 'false' to disable the
     display of cursors when playing.

4.15.16 display-debug-gradient
------------------------------

 -- Command-line option: `--display-debug-gradient=<value>'
 -- Environment variable: `LW6_DISPLAY_DEBUG_GRADIENT'
 -- XML key: `display-debug-gradient'
     Type: boolean

     Default value: false

     Set this to 'true' to display the gradient, this is usefull to
     debug the core algorithm or understand how it works.

4.15.17 display-debug-zones
---------------------------

 -- Command-line option: `--display-debug-zones=<value>'
 -- Environment variable: `LW6_DISPLAY_DEBUG_ZONES'
 -- XML key: `display-debug-zones'
     Type: boolean

     Default value: false

     Set this to 'true' to display the zones, this is usefull to debug
     the core algorithm or understand how it works.

4.15.18 display-fighters
------------------------

 -- Command-line option: `--display-fighters=<value>'
 -- Environment variable: `LW6_DISPLAY_FIGHTERS'
 -- XML key: `display-fighters'
     Type: boolean

     Default value: true

     Debugging option which can be set to 'false' to disable the
     display of fighters when playing.

4.15.19 display-fps
-------------------

 -- Command-line option: `--display-fps=<value>'
 -- Environment variable: `LW6_DISPLAY_FPS'
 -- XML key: `display-fps'
     Type: boolean

     Default value: false

     Set this to 'true' to display the number of frames per second.
     When this gets too low... play a smaller map, buy a new computer
     or contribute and hack Liquid War 6 so that it runs faster!

4.15.20 display-hud
-------------------

 -- Command-line option: `--display-hud=<value>'
 -- Environment variable: `LW6_DISPLAY_HUD'
 -- XML key: `display-hud'
     Type: boolean

     Default value: true

     Decides wether the hud (informations while playing) should be
     displayed.

4.15.21 display-log
-------------------

 -- Command-line option: `--display-log=<value>'
 -- Environment variable: `LW6_DISPLAY_LOG'
 -- XML key: `display-log'
     Type: boolean

     Default value: true

     Set this to 'false' to disable the display of error messages on
     the screen.  Mote that you can miss valuable informations.

4.15.22 display-map
-------------------

 -- Command-line option: `--display-map=<value>'
 -- Environment variable: `LW6_DISPLAY_MAP'
 -- XML key: `display-map'
     Type: boolean

     Default value: true

     Debugging option which can be set to 'false' to disable map
     (level) display when playing.

4.15.23 display-menu
--------------------

 -- Command-line option: `--display-menu=<value>'
 -- Environment variable: `LW6_DISPLAY_MENU'
 -- XML key: `display-menu'
     Type: boolean

     Default value: true

     Debugging option which can be set to 'false' to disable the
     display of menus.

4.15.24 display-meta
--------------------

 -- Command-line option: `--display-meta=<value>'
 -- Environment variable: `LW6_DISPLAY_META'
 -- XML key: `display-meta'
     Type: boolean

     Default value: true

     Set to 'false' to disable the display of meta information, this
     includes the help, tootips and breadcrumbs in menus.

4.15.25 display-mouse
---------------------

 -- Command-line option: `--display-mouse=<value>'
 -- Environment variable: `LW6_DISPLAY_MOUSE'
 -- XML key: `display-mouse'
     Type: boolean

     Default value: true

     Set this to 'false' to always hide the mouse pointer.

4.15.26 display-mps
-------------------

 -- Command-line option: `--display-mps=<value>'
 -- Environment variable: `LW6_DISPLAY_MPS'
 -- XML key: `display-mps'
     Type: boolean

     Default value: false

     Set this to 'true' to display the number of moves per second. In
     theory the game should maintain this constant but in practise it
     can get low if your computer is too slow or too busy.

4.15.27 display-preview
-----------------------

 -- Command-line option: `--display-preview=<value>'
 -- Environment variable: `LW6_DISPLAY_PREVIEW'
 -- XML key: `display-preview'
     Type: boolean

     Default value: true

     Decides wether a map preview should be displayed when choosing a
     level.

4.15.28 display-progress
------------------------

 -- Command-line option: `--display-progress=<value>'
 -- Environment variable: `LW6_DISPLAY_PROGRESS'
 -- XML key: `display-progress'
     Type: boolean

     Default value: true

     Decides wether a progress bar should be displayed when a long
     operation is realized as a background task.

4.15.29 display-score
---------------------

 -- Command-line option: `--display-score=<value>'
 -- Environment variable: `LW6_DISPLAY_SCORE'
 -- XML key: `display-score'
     Type: boolean

     Default value: true

     Decides wether the score screen should be displayed.

4.15.30 display-splash
----------------------

 -- Command-line option: `--display-splash=<value>'
 -- Environment variable: `LW6_DISPLAY_SPLASH'
 -- XML key: `display-splash'
     Type: boolean

     Default value: true

     Set this to 'false' to disable the display of the splash screen at
     game startup.

4.15.31 display-url
-------------------

 -- Command-line option: `--display-url=<value>'
 -- Environment variable: `LW6_DISPLAY_URL'
 -- XML key: `display-url'
     Type: boolean

     Default value: false

     Set this to 'true' to display the URL (homepage) of the game. This
     is mostly used when doing screenshots, so that generated images
     contain a link to the homepage.

4.15.32 executed-again
----------------------

 -- Command-line option: `--executed-again=<value>'
 -- Environment variable: `LW6_EXECUTED_AGAIN'
 -- XML key: `executed-again'
     Type: boolean

     Default value: false

     This environment variable/keyword is used to detect wether the
     program has been launched by itself with an internal execv call.
     This is used as a workarround to set some environment variables
     (DYLD_LIBRARY_PATH on Mac OS X for instance) before the program is
     run, as sometimes using setenv() inside the program does not work.

4.15.33 gfx-cpu-usage
---------------------

 -- Command-line option: `--gfx-cpu-usage=<value>'
 -- Environment variable: `LW6_GFX_CPU_USAGE'
 -- XML key: `gfx-cpu-usage'
     Type: float

     Default value: 0.75 Min value: 0 Max value: 1

     Percentage of the CPU which will be used by the display thread.
     It's wise to leave some time to other threads to execute. The OS
     does it naturally, but setting this helps the whole process by
     explicitely pausing (sleep call) the display thread. You could
     change this to a low value if you have lagging games but smooth
     display.

4.15.34 gfx-debug
-----------------

 -- Command-line option: `--gfx-debug=<value>'
 -- Environment variable: `LW6_GFX_DEBUG'
 -- XML key: `gfx-debug'
     Type: boolean

     Default value: false

     Enables dedicated graphics debugging tools. This is different from
     'debug' mode which is global, this one is really graphics specific.

4.15.35 io-per-sec
------------------

 -- Command-line option: `--io-per-sec=<value>'
 -- Environment variable: `LW6_IO_PER_SEC'
 -- XML key: `io-per-sec'
     Type: integer

     Default value: 20

     Defines the number of calls to input/output functions per second.
     This can affect speed of menus but also cursors, but won't change
     the speed of the game itself. It's a cosmectic, comfort option.

4.15.36 loader-sleep
--------------------

 -- Command-line option: `--loader-sleep=<value>'
 -- Environment variable: `LW6_LOADER_SLEEP'
 -- XML key: `loader-sleep'
     Type: float

     Default value: 0.5

     Defines how long the loader thread should wait between two polls.
     Default value should fit in most cases.

4.15.37 log-level
-----------------

 -- Command-line option: `--log-level=<value>'
 -- Environment variable: `LW6_LOG_LEVEL'
 -- XML key: `log-level'
     Type: integer

     Default value: 3 Min value: 0 Max value: 4

     Defines the log level, that is, how verbose the program will be
     regarding logs and console output. 0 (ERROR) is the minimum, only
     errors are reported. 1 (WARNING) means errors + warnings. 2
     (NOTICE) displays most important messages. 3 (INFO) is the
     default, the log file will contain all messages but debug stuff. 4
     (DEBUG) logs everything, including debug informations.

4.15.38 log-timeout
-------------------

 -- Command-line option: `--log-timeout=<value>'
 -- Environment variable: `LW6_LOG_TIMEOUT'
 -- XML key: `log-timeout'
     Type: integer

     Default value: 5000

     Delay, in msec, for which a log message will stay displayed on the
     screen.

4.15.39 magic-number
--------------------

 -- Command-line option: `--magic-number=<value>'
 -- Environment variable: `LW6_MAGIC_NUMBER'
 -- XML key: `magic-number'
     Type: integer

     Default value: 14741

     This 'magic' number probably requires an explanation. It's used to
     estimate how big a map can be built. The calculus is very
     approximative, basically
     bench_value*magic_number=total_fighters_on_map*rounds_per_sec*moves_per_round
     with total_fighters_on_map depending on various parameters such as
     map size but also how many fighters are on the map. The map loader
     will try and adjust the map size so that it is just big enough not
     to saturate your CPU while being as high-res as possible. The
     magic number in itself has no real meaning, the higher it gets,
     the more optimized it means the game is. Normally you shouldn't
     change this but if you find the map resizing is too agressively
     pessimistic, or if for some reason bench returns bogus values, you
     can modify it.

4.15.40 max-local-bench-value
-----------------------------

 -- Command-line option: `--max-local-bench-value=<value>'
 -- Environment variable: `LW6_MAX_LOCAL_BENCH_VALUE'
 -- XML key: `max-local-bench-value'
     Type: integer

     Default value: 800

     Even if your computer is very fast, this parameter will be used to
     tame the optimism of the test, and do not load maps in very high
     detail. It's believed at some point, it's best to keep your extra
     power to deal with unordinary situations rather than waste it on
     useless details. Game should be fun with that setting, but if you
     really want to use your shiny CPU at its maximum, raise this.

4.15.41 max-network-bench-value
-------------------------------

 -- Command-line option: `--max-network-bench-value=<value>'
 -- Environment variable: `LW6_MAX_NETWORK_BENCH_VALUE'
 -- XML key: `max-network-bench-value'
     Type: integer

     Default value: 200

     On network games, we need to be sure everyone can play in correct
     conditions, therefore maps won't be loaded with more details than
     this, by default. You're free to increase this parameter but it
     can cause your games to be unjoignable by some people.

4.15.42 memory-bazooka-eraser
-----------------------------

 -- Command-line option: `--memory-bazooka-eraser=<value>'
 -- Environment variable: `LW6_MEMORY_BAZOOKA_ERASER'
 -- XML key: `memory-bazooka-eraser'
     Type: boolean

     Default value: true

     The memory eraser is a tool which will systematically fill
     allocated memory with 'M', and overwrite all allocated bytes with
     'F' before freeing memory. It will even handle realloc calls. This
     is usefull to track bugs. Indeed, with this option enabled,
     freshly allocated memory will never contain zeroes unless one
     calls calloc, and if you ever free some memory zone before being
     done with it, it will be filled with junk and therefore not be
     usable. The memory bazooka must be big enough if you want this
     feature to actually work.

4.15.43 memory-bazooka-size
---------------------------

 -- Command-line option: `--memory-bazooka-size=<value>'
 -- Environment variable: `LW6_MEMORY_BAZOOKA_SIZE'
 -- XML key: `memory-bazooka-size'
     Type: integer

     Default value: 99991

     The memory bazooka is a brute-force tool, conceived after a full
     night spent tracking some memory leak. The idea is to keep a track
     of all allocated pointers, when the data was allocated
     (timestamp), where in the code (file, line), and even point out
     what data there is in that place. A memory bazooka report at the
     end of the game will just show what's left. There should be
     nothing. This parameter is here to avoid wasting CPU cycles on a
     feature which is very debug-oriented and does not really make
     sense for the casual user. Set it to 0 for best performance,
     something like 100 might just be helpfull, but 1000000 is the
     right way to seriously debug code.

4.15.44 net-log
---------------

 -- Command-line option: `--net-log=<value>'
 -- Environment variable: `LW6_NET_LOG'
 -- XML key: `net-log'
     Type: boolean

     Default value: false

     Activates network log, that is, logs everything sent/received over
     the network, except data which is sent through a third party
     library such as libCurl. This is mostly for debugging purpose, it
     can lead to rather big log files.

4.15.45 network-reliability
---------------------------

 -- Command-line option: `--network-reliability=<value>'
 -- Environment variable: `LW6_NETWORK_RELIABILITY'
 -- XML key: `network-reliability'
     Type: integer

     Default value: 1000 Min value: 1 Max value: 1000000000

     The program assumes network is non-reliable, however the problem
     with those assumptions is that when you test, network is always
     reliable, even with non-garanteed protocols like UDP. This option
     will force the program to actually ignore some calls to send or
     recv functions, simulating a network disfunction. This is to
     ensure the internal mecanisms correcting network problems do work
     for good, on daily regular use. It's not possible to set it to a
     perfect behavior, never dropping any packet, however using the
     default settings you probably won't even notice the performance
     drop induced by having to fix problems. The highest the number is,
     the most reliable network will look, the algorithm is simply to
     drop one message out of X.

4.15.46 open-relay
------------------

 -- Command-line option: `--open-relay=<value>'
 -- Environment variable: `LW6_OPEN_RELAY'
 -- XML key: `open-relay'
     Type: boolean

     Default value: false

     Enables forwarding of abritrary network messages. If open relay is
     forbidden, the game will only forward messages when physical
     sender and logical sender are the same. This is to say if messages
     come from A for C and is sent by A to B, B will forward it to C.
     But if message comes from X to C and is sent by A to B, then B
     won't forward it. In practice, it means without open relay,
     messages can only be forwarded once.

4.15.47 pilot-lag
-----------------

 -- Command-line option: `--pilot-lag=<value>'
 -- Environment variable: `LW6_PILOT_LAG'
 -- XML key: `pilot-lag'
     Type: integer

     Default value: 10

     Maximum lag, in rounds, until the game engine is slowed down. This
     will typically be usefull if your computer is too slow for the map
     resolution and the game speed you set up.

4.15.48 quick-start
-------------------

 -- Command-line option: `--quick-start'
     Start the game just like if the player had requested a quick
     start, without showing any menu.

4.15.49 reset
-------------

 -- Command-line option: `--reset'
     Clears the config file so that the game will run with defaults
     next time. The idea is to get rid of traces of previous
     executions. The difference with '-defaults' is that '-reset' does
     not run the game, while '-defaults' does.

4.15.50 reset-config-on-upgrade
-------------------------------

 -- Command-line option: `--reset-config-on-upgrade=<value>'
 -- Environment variable: `LW6_RESET_CONFIG_ON_UPGRADE'
 -- XML key: `reset-config-on-upgrade'
     Type: boolean

     Default value: true

     If set, then a reset (config file set to defaults) is run every
     time you upgrade the game.

4.15.51 server
--------------

 -- Command-line option: `--server'
     Start the game in server mode, without requiring any graphics
     backend. Server mode is usefull if you just want to start a
     network node without hosting any real game on it. It can be used
     to list existing nodes and sessions or as a bounce server in case
     some clients can't contact each other because firewalled. If you
     only want to start a server game on your computer, don't use this
     option, just start the game normally and start a game server by
     clicking on the GUI buttons.

4.15.52 simulate-basic
----------------------

 -- Command-line option: `--simulate-basic'
     Simulates some fights using the basic colors red, green, yellow
     and blue. Will output on the console a percentage based on scores
     obtained by the teams. This is typically for map designers and/or
     people who want to fiddle with team profiles, if some team is
     really stronger than another one, it should appear in these
     percentages.

4.15.53 simulate-full
---------------------

 -- Command-line option: `--simulate-full'
     Simulates some fights using all available colors. This can be very
     long, it will run approximatively 1000 games consecutively, you
     can look in the log file to see the progress. Will output on the
     console a percentage based on scores obtained by the teams. This
     is typically for map designers and/or people who want to fiddle
     with team profiles, if some team is really stronger than another
     one, it should appear in these percentages.

4.15.54 target-fps
------------------

 -- Command-line option: `--target-fps=<value>'
 -- Environment variable: `LW6_TARGET_FPS'
 -- XML key: `target-fps'
     Type: integer

     Default value: 60

     Defines how many frames will be displayed per second. Of course
     this is a maximum value, if your hardware can't keep up with this
     value, display will just be slow, no matter what value you define
     here. Note that you might really wish to have something rather low
     here, to keep network and 'logic' function responsiveness. Passed
     60 frames per second, speed is really only for visual comfort, as
     Liquid War 6 is now so fast-paced that it requires 200 frames/sec
     to outperform opponents.

4.15.55 trap-errors
-------------------

 -- Command-line option: `--trap-errors=<value>'
 -- Environment variable: `LW6_TRAP_ERRORS'
 -- XML key: `trap-errors'
     Type: boolean

     Default value: true

     If set to true, will trap segmentation fault and floating point
     errors, and display messages about those in a custom box instead
     of the default one

4.15.56 trojan
--------------

 -- Command-line option: `--trojan=<value>'
 -- Environment variable: `LW6_TROJAN'
 -- XML key: `trojan'
     Type: boolean

     Default value: false

     Make the program act like a (stupid) trojan horse, trying to fake
     messages, sending various inconsistent informations. This is to
     check the normal version of the program is able to detect such a
     fake and kick it out of the game. It's of no use for regular
     players, be sure to unset this if you want to play for good.

4.15.57 z-decode
----------------

 -- Command-line option: `--z-decode'
     If specified, program will take stdin and z-decode it to stdout.
     This is for testing purpose (for network messages for instance).
     Z-decoding, here means verifying there a Z at the beginning,
     base64 decode and pass the content through Zlib inflating. I
     content is not Z-prefixed, will be returned as is.

4.15.58 z-encode
----------------

 -- Command-line option: `--z-encode'
     If specified, program will take stdin and z-encode it to stdout.
     This is for testing purpose (for network messages for instance).
     Z-encoding, here means passing the message through Zlib deflating
     then base64 encoding and prefix it with a Z.


File: liquidwar6.info,  Node: C to Guile,  Next: Script hooks,  Prev: Advanced settings,  Up: Reference

4.16 C to Guile
===============

4.16.1 c-gettext
----------------

 -- C function exported to Guile: `c-gettext'
     Calls GNU gettext to convert string in current locale. Note that
     '_' (plain underscode) is exported as well, so that code can be
     written using '_' as a function.

4.16.2 c-lw6-exit
-----------------

 -- C function exported to Guile: `c-lw6-exit'
     Wrapper on lw6_exit.

4.16.3 c-lw6-release
--------------------

 -- C function exported to Guile: `c-lw6-release'
     Wrapper on lw6_release.

4.16.4 c-lw6bot-get-backends
----------------------------

 -- C function exported to Guile: `c-lw6bot-get-backends'
     Wrapper on lw6bot_get_backends.

4.16.5 c-lw6bot-new
-------------------

 -- C function exported to Guile: `c-lw6bot-new'
     Wrapper on lw6bot_new.

4.16.6 c-lw6bot-next-move
-------------------------

 -- C function exported to Guile: `c-lw6bot-next-move'
     Wrapper on lw6bot_next_move.

4.16.7 c-lw6cfg-defaults
------------------------

 -- C function exported to Guile: `c-lw6cfg-defaults'
     Wrapper on lw6cfg_defaults.

4.16.8 c-lw6cfg-get-option
--------------------------

 -- C function exported to Guile: `c-lw6cfg-get-option'
     Wrapper on lw6cfg_get_option.

4.16.9 c-lw6cfg-init
--------------------

 -- C function exported to Guile: `c-lw6cfg-init'
     Wrapper on lw6cfg_init.

4.16.10 c-lw6cfg-load
---------------------

 -- C function exported to Guile: `c-lw6cfg-load'
     Wrapper on lw6cfg_load.

4.16.11 c-lw6cfg-option-exists
------------------------------

 -- C function exported to Guile: `c-lw6cfg-option-exists'
     Wrapper on lw6cfg_option_exists.

4.16.12 c-lw6cfg-quit
---------------------

 -- C function exported to Guile: `c-lw6cfg-quit'
     Wrapper on lw6cfg_quit.

4.16.13 c-lw6cfg-save
---------------------

 -- C function exported to Guile: `c-lw6cfg-save'
     Wrapper on lw6cfg_save.

4.16.14 c-lw6cfg-set-option
---------------------------

 -- C function exported to Guile: `c-lw6cfg-set-option'
     Wrapper on lw6cfg_set_option.

4.16.15 c-lw6cfg-unified-get-log-file
-------------------------------------

 -- C function exported to Guile: `c-lw6cfg-unified-get-log-file'
     Wrapper on lw6cfg_unified_get_log_file.

4.16.16 c-lw6cfg-unified-get-map-path
-------------------------------------

 -- C function exported to Guile: `c-lw6cfg-unified-get-map-path'
     Wrapper on lw6cfg_unified_get_map_path.

4.16.17 c-lw6cfg-unified-get-music-path
---------------------------------------

 -- C function exported to Guile: `c-lw6cfg-unified-get-music-path'
     Wrapper on lw6cfg_unified_get_music_path.

4.16.18 c-lw6cfg-unified-get-user-dir
-------------------------------------

 -- C function exported to Guile: `c-lw6cfg-unified-get-user-dir'
     Wrapper on lw6cfg_unified_get_user_dir.

4.16.19 c-lw6cli-get-backends
-----------------------------

 -- C function exported to Guile: `c-lw6cli-get-backends'
     Wrapper on lw6cli_get_backends.

4.16.20 c-lw6cns-init
---------------------

 -- C function exported to Guile: `c-lw6cns-init'
     Wrapper on lw6cns_init.

4.16.21 c-lw6cns-poll
---------------------

 -- C function exported to Guile: `c-lw6cns-poll'
     Wrapper on lw6cns_poll.

4.16.22 c-lw6cns-quit
---------------------

 -- C function exported to Guile: `c-lw6cns-quit'
     Wrapper on lw6cns_quit.

4.16.23 c-lw6cns-support
------------------------

 -- C function exported to Guile: `c-lw6cns-support'
     Wrapper on lw6cns_support.

4.16.24 c-lw6dsp-get-average-fps
--------------------------------

 -- C function exported to Guile: `c-lw6dsp-get-average-fps'
     Wrapper on lw6dsp_get_average_fps.

4.16.25 c-lw6dsp-get-fullscreen-modes
-------------------------------------

 -- C function exported to Guile: `c-lw6dsp-get-fullscreen-modes'
     Wrapper on lw6dsp_get_fullscreen_modes.

4.16.26 c-lw6dsp-get-instant-fps
--------------------------------

 -- C function exported to Guile: `c-lw6dsp-get-instant-fps'
     Wrapper on lw6dsp_get_instant_fps.

4.16.27 c-lw6dsp-get-last-frame-rendering-time
----------------------------------------------

 -- C function exported to Guile:
`c-lw6dsp-get-last-frame-rendering-time'
     Wrapper on lw6dsp_get_last_frame_rendering_time.

4.16.28 c-lw6dsp-get-nb-frames
------------------------------

 -- C function exported to Guile: `c-lw6dsp-get-nb-frames'
     Wrapper on lw6dsp_get_nb_frames.

4.16.29 c-lw6dsp-get-video-mode
-------------------------------

 -- C function exported to Guile: `c-lw6dsp-get-video-mode'
     Wrapper on lw6dsp_get_video_mode.

4.16.30 c-lw6dsp-new
--------------------

 -- C function exported to Guile: `c-lw6dsp-new'
     Wrapper on lw6dsp_new.

4.16.31 c-lw6dsp-release
------------------------

 -- C function exported to Guile: `c-lw6dsp-release'
     Wrapper on lw6dsp_release.

4.16.32 c-lw6dsp-update
-----------------------

 -- C function exported to Guile: `c-lw6dsp-update'
     Wrapper on lw6dsp_update.

4.16.33 c-lw6gfx-get-backends
-----------------------------

 -- C function exported to Guile: `c-lw6gfx-get-backends'
     Wrapper on lw6gfx_get_backends.

4.16.34 c-lw6gui-default-look
-----------------------------

 -- C function exported to Guile: `c-lw6gui-default-look'
     Wrapper on lw6gui_default_look.

4.16.35 c-lw6gui-input-reset
----------------------------

 -- C function exported to Guile: `c-lw6gui-input-reset'
     Wrapper on lw6gui_input_reset.

4.16.36 c-lw6gui-joystick1-get-move-pad
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick1-get-move-pad'
     Wrapper on lw6gui_joystick1_get_move_pad.

4.16.37 c-lw6gui-joystick1-pop-button-a
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick1-pop-button-a'
     Wrapper on lw6gui_joystick1_pop_button_a.

4.16.38 c-lw6gui-joystick1-pop-button-b
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick1-pop-button-b'
     Wrapper on lw6gui_joystick1_pop_button_b.

4.16.39 c-lw6gui-joystick1-pop-button-c
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick1-pop-button-c'
     Wrapper on lw6gui_joystick1_pop_button_c.

4.16.40 c-lw6gui-joystick1-pop-button-d
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick1-pop-button-d'
     Wrapper on lw6gui_joystick1_pop_button_d.

4.16.41 c-lw6gui-joystick1-pop-button-e
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick1-pop-button-e'
     Wrapper on lw6gui_joystick1_pop_button_e.

4.16.42 c-lw6gui-joystick1-pop-button-f
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick1-pop-button-f'
     Wrapper on lw6gui_joystick1_pop_button_f.

4.16.43 c-lw6gui-joystick1-pop-pad-down
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick1-pop-pad-down'
     Wrapper on lw6gui_joystick1_pop_pad_down.

4.16.44 c-lw6gui-joystick1-pop-pad-left
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick1-pop-pad-left'
     Wrapper on lw6gui_joystick1_pop_pad_left.

4.16.45 c-lw6gui-joystick1-pop-pad-right
----------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick1-pop-pad-right'
     Wrapper on lw6gui_joystick1_pop_pad_right.

4.16.46 c-lw6gui-joystick1-pop-pad-up
-------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick1-pop-pad-up'
     Wrapper on lw6gui_joystick1_pop_pad_up.

4.16.47 c-lw6gui-joystick2-get-move-pad
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick2-get-move-pad'
     Wrapper on lw6gui_joystick2_get_move_pad.

4.16.48 c-lw6gui-joystick2-pop-button-a
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick2-pop-button-a'
     Wrapper on lw6gui_joystick2_pop_button_a.

4.16.49 c-lw6gui-joystick2-pop-button-b
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick2-pop-button-b'
     Wrapper on lw6gui_joystick2_pop_button_b.

4.16.50 c-lw6gui-joystick2-pop-button-c
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick2-pop-button-c'
     Wrapper on lw6gui_joystick2_pop_button_c.

4.16.51 c-lw6gui-joystick2-pop-button-d
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick2-pop-button-d'
     Wrapper on lw6gui_joystick2_pop_button_d.

4.16.52 c-lw6gui-joystick2-pop-button-e
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick2-pop-button-e'
     Wrapper on lw6gui_joystick2_pop_button_e.

4.16.53 c-lw6gui-joystick2-pop-button-f
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick2-pop-button-f'
     Wrapper on lw6gui_joystick2_pop_button_f.

4.16.54 c-lw6gui-joystick2-pop-pad-down
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick2-pop-pad-down'
     Wrapper on lw6gui_joystick2_pop_pad_down.

4.16.55 c-lw6gui-joystick2-pop-pad-left
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick2-pop-pad-left'
     Wrapper on lw6gui_joystick2_pop_pad_left.

4.16.56 c-lw6gui-joystick2-pop-pad-right
----------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick2-pop-pad-right'
     Wrapper on lw6gui_joystick2_pop_pad_right.

4.16.57 c-lw6gui-joystick2-pop-pad-up
-------------------------------------

 -- C function exported to Guile: `c-lw6gui-joystick2-pop-pad-up'
     Wrapper on lw6gui_joystick2_pop_pad_up.

4.16.58 c-lw6gui-keyboard-get-move-pad
--------------------------------------

 -- C function exported to Guile: `c-lw6gui-keyboard-get-move-pad'
     Wrapper on lw6gui_keyboard_get_move_pad.

4.16.59 c-lw6gui-keyboard-is-pressed
------------------------------------

 -- C function exported to Guile: `c-lw6gui-keyboard-is-pressed'
     Wrapper on lw6gui_keyboard_is_pressed.

4.16.60 c-lw6gui-keyboard-pop-arrow-down
----------------------------------------

 -- C function exported to Guile: `c-lw6gui-keyboard-pop-arrow-down'
     Wrapper on lw6gui_keyboard_pop_arrow_down.

4.16.61 c-lw6gui-keyboard-pop-arrow-left
----------------------------------------

 -- C function exported to Guile: `c-lw6gui-keyboard-pop-arrow-left'
     Wrapper on lw6gui_keyboard_pop_arrow_left.

4.16.62 c-lw6gui-keyboard-pop-arrow-right
-----------------------------------------

 -- C function exported to Guile: `c-lw6gui-keyboard-pop-arrow-right'
     Wrapper on lw6gui_keyboard_pop_arrow_right.

4.16.63 c-lw6gui-keyboard-pop-arrow-up
--------------------------------------

 -- C function exported to Guile: `c-lw6gui-keyboard-pop-arrow-up'
     Wrapper on lw6gui_keyboard_pop_arrow_up.

4.16.64 c-lw6gui-keyboard-pop-key-alt
-------------------------------------

 -- C function exported to Guile: `c-lw6gui-keyboard-pop-key-alt'
     Wrapper on lw6gui_keyboard_pop_key_alt.

4.16.65 c-lw6gui-keyboard-pop-key-ctrl
--------------------------------------

 -- C function exported to Guile: `c-lw6gui-keyboard-pop-key-ctrl'
     Wrapper on lw6gui_keyboard_pop_key_ctrl.

4.16.66 c-lw6gui-keyboard-pop-key-enter
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-keyboard-pop-key-enter'
     Wrapper on lw6gui_keyboard_pop_key_enter.

4.16.67 c-lw6gui-keyboard-pop-key-esc
-------------------------------------

 -- C function exported to Guile: `c-lw6gui-keyboard-pop-key-esc'
     Wrapper on lw6gui_keyboard_pop_key_esc.

4.16.68 c-lw6gui-keyboard-pop-key-pgdown
----------------------------------------

 -- C function exported to Guile: `c-lw6gui-keyboard-pop-key-pgdown'
     Wrapper on lw6gui_keyboard_pop_key_pgdown.

4.16.69 c-lw6gui-keyboard-pop-key-pgup
--------------------------------------

 -- C function exported to Guile: `c-lw6gui-keyboard-pop-key-pgup'
     Wrapper on lw6gui_keyboard_pop_key_pgup.

4.16.70 c-lw6gui-look-get
-------------------------

 -- C function exported to Guile: `c-lw6gui-look-get'
     Wrapper on lw6gui_look_get.

4.16.71 c-lw6gui-look-set
-------------------------

 -- C function exported to Guile: `c-lw6gui-look-set'
     Wrapper on lw6gui_look_set.

4.16.72 c-lw6gui-look-zoom-in
-----------------------------

 -- C function exported to Guile: `c-lw6gui-look-zoom-in'
     Wrapper on lw6gui_look_zoom_in.

4.16.73 c-lw6gui-look-zoom-out
------------------------------

 -- C function exported to Guile: `c-lw6gui-look-zoom-out'
     Wrapper on lw6gui_look_zoom_out.

4.16.74 c-lw6gui-menu-append
----------------------------

 -- C function exported to Guile: `c-lw6gui-menu-append'
     Wrapper on lw6gui_menu_append.

4.16.75 c-lw6gui-menu-close-popup
---------------------------------

 -- C function exported to Guile: `c-lw6gui-menu-close-popup'
     Wrapper on lw6gui_menu_close_popup.

4.16.76 c-lw6gui-menu-enable-esc
--------------------------------

 -- C function exported to Guile: `c-lw6gui-menu-enable-esc'
     Wrapper on lw6gui_menu_enable_esc.

4.16.77 c-lw6gui-menu-has-popup
-------------------------------

 -- C function exported to Guile: `c-lw6gui-menu-has-popup'
     Wrapper on lw6gui_menu_has_popup.

4.16.78 c-lw6gui-menu-new
-------------------------

 -- C function exported to Guile: `c-lw6gui-menu-new'
     Wrapper on lw6gui_menu_new.

4.16.79 c-lw6gui-menu-scroll-down
---------------------------------

 -- C function exported to Guile: `c-lw6gui-menu-scroll-down'
     Wrapper on lw6gui_menu_scroll_down.

4.16.80 c-lw6gui-menu-scroll-up
-------------------------------

 -- C function exported to Guile: `c-lw6gui-menu-scroll-up'
     Wrapper on lw6gui_menu_scroll_up.

4.16.81 c-lw6gui-menu-select
----------------------------

 -- C function exported to Guile: `c-lw6gui-menu-select'
     Wrapper on lw6gui_menu_select.

4.16.82 c-lw6gui-menu-select-esc
--------------------------------

 -- C function exported to Guile: `c-lw6gui-menu-select-esc'
     Wrapper on lw6gui_menu_select_esc.

4.16.83 c-lw6gui-menu-set-breadcrumbs
-------------------------------------

 -- C function exported to Guile: `c-lw6gui-menu-set-breadcrumbs'
     Wrapper on lw6gui_menu_set_breadcrumbs.

4.16.84 c-lw6gui-menu-sync
--------------------------

 -- C function exported to Guile: `c-lw6gui-menu-sync'
     Wrapper on lw6gui_menu_sync.

4.16.85 c-lw6gui-mouse-get-state
--------------------------------

 -- C function exported to Guile: `c-lw6gui-mouse-get-state'
     Wrapper on lw6gui_mouse_get_state.

4.16.86 c-lw6gui-mouse-poll-move
--------------------------------

 -- C function exported to Guile: `c-lw6gui-mouse-poll-move'
     Wrapper on lw6gui_mouse_poll_move.

4.16.87 c-lw6gui-mouse-pop-button-left
--------------------------------------

 -- C function exported to Guile: `c-lw6gui-mouse-pop-button-left'
     Wrapper on lw6gui_mouse_pop_button_left.

4.16.88 c-lw6gui-mouse-pop-button-middle
----------------------------------------

 -- C function exported to Guile: `c-lw6gui-mouse-pop-button-middle'
     Wrapper on lw6gui_mouse_pop_button_middle.

4.16.89 c-lw6gui-mouse-pop-button-right
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-mouse-pop-button-right'
     Wrapper on lw6gui_mouse_pop_button_right.

4.16.90 c-lw6gui-mouse-pop-double-click
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-mouse-pop-double-click'
     Wrapper on lw6gui_mouse_pop_double_click.

4.16.91 c-lw6gui-mouse-pop-simple-click
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-mouse-pop-simple-click'
     Wrapper on lw6gui_mouse_pop_simple_click.

4.16.92 c-lw6gui-mouse-pop-triple-click
---------------------------------------

 -- C function exported to Guile: `c-lw6gui-mouse-pop-triple-click'
     Wrapper on lw6gui_mouse_pop_triple_click.

4.16.93 c-lw6gui-mouse-pop-wheel-down
-------------------------------------

 -- C function exported to Guile: `c-lw6gui-mouse-pop-wheel-down'
     Wrapper on lw6gui_mouse_pop_wheel_down.

4.16.94 c-lw6gui-mouse-pop-wheel-up
-----------------------------------

 -- C function exported to Guile: `c-lw6gui-mouse-pop-wheel-up'
     Wrapper on lw6gui_mouse_pop_wheel_up.

4.16.95 c-lw6hlp-about
----------------------

 -- C function exported to Guile: `c-lw6hlp-about'
     Wrapper on lw6hlp_about.

4.16.96 c-lw6hlp-get-default-value
----------------------------------

 -- C function exported to Guile: `c-lw6hlp-get-default-value'
     Wrapper on lw6hlp_get_default_value.

4.16.97 c-lw6hlp-list
---------------------

 -- C function exported to Guile: `c-lw6hlp-list'
     Wrapper on lw6hlp_list.

4.16.98 c-lw6hlp-list-advanced
------------------------------

 -- C function exported to Guile: `c-lw6hlp-list-advanced'
     Wrapper on lw6hlp_list_advanced.

4.16.99 c-lw6hlp-list-aliases
-----------------------------

 -- C function exported to Guile: `c-lw6hlp-list-aliases'
     Wrapper on lw6hlp_list_aliases.

4.16.100 c-lw6hlp-list-doc
--------------------------

 -- C function exported to Guile: `c-lw6hlp-list-doc'
     Wrapper on lw6hlp_list_doc.

4.16.101 c-lw6hlp-list-funcs
----------------------------

 -- C function exported to Guile: `c-lw6hlp-list-funcs'
     Wrapper on lw6hlp_list_funcs.

4.16.102 c-lw6hlp-list-graphics
-------------------------------

 -- C function exported to Guile: `c-lw6hlp-list-graphics'
     Wrapper on lw6hlp_list_graphics.

4.16.103 c-lw6hlp-list-hooks
----------------------------

 -- C function exported to Guile: `c-lw6hlp-list-hooks'
     Wrapper on lw6hlp_list_hooks.

4.16.104 c-lw6hlp-list-input
----------------------------

 -- C function exported to Guile: `c-lw6hlp-list-input'
     Wrapper on lw6hlp_list_input.

4.16.105 c-lw6hlp-list-map
--------------------------

 -- C function exported to Guile: `c-lw6hlp-list-map'
     Wrapper on lw6hlp_list_map.

4.16.106 c-lw6hlp-list-map-hints
--------------------------------

 -- C function exported to Guile: `c-lw6hlp-list-map-hints'
     Wrapper on lw6hlp_list_map_hints.

4.16.107 c-lw6hlp-list-map-rules
--------------------------------

 -- C function exported to Guile: `c-lw6hlp-list-map-rules'
     Wrapper on lw6hlp_list_map_rules.

4.16.108 c-lw6hlp-list-map-style
--------------------------------

 -- C function exported to Guile: `c-lw6hlp-list-map-style'
     Wrapper on lw6hlp_list_map_style.

4.16.109 c-lw6hlp-list-map-teams
--------------------------------

 -- C function exported to Guile: `c-lw6hlp-list-map-teams'
     Wrapper on lw6hlp_list_map_teams.

4.16.110 c-lw6hlp-list-network
------------------------------

 -- C function exported to Guile: `c-lw6hlp-list-network'
     Wrapper on lw6hlp_list_network.

4.16.111 c-lw6hlp-list-path
---------------------------

 -- C function exported to Guile: `c-lw6hlp-list-path'
     Wrapper on lw6hlp_list_path.

4.16.112 c-lw6hlp-list-players
------------------------------

 -- C function exported to Guile: `c-lw6hlp-list-players'
     Wrapper on lw6hlp_list_players.

4.16.113 c-lw6hlp-list-quick
----------------------------

 -- C function exported to Guile: `c-lw6hlp-list-quick'
     Wrapper on lw6hlp_list_quick.

4.16.114 c-lw6hlp-list-show
---------------------------

 -- C function exported to Guile: `c-lw6hlp-list-show'
     Wrapper on lw6hlp_list_show.

4.16.115 c-lw6hlp-list-sound
----------------------------

 -- C function exported to Guile: `c-lw6hlp-list-sound'
     Wrapper on lw6hlp_list_sound.

4.16.116 c-lw6hlp-list-team-colors
----------------------------------

 -- C function exported to Guile: `c-lw6hlp-list-team-colors'
     Wrapper on lw6hlp_list_team_colors.

4.16.117 c-lw6hlp-list-weapons
------------------------------

 -- C function exported to Guile: `c-lw6hlp-list-weapons'
     Wrapper on lw6hlp_list_weapons.

4.16.118 c-lw6ker-add-cursor
----------------------------

 -- C function exported to Guile: `c-lw6ker-add-cursor'
     Wrapper on lw6ker_add_cursor.

4.16.119 c-lw6ker-build-game-state
----------------------------------

 -- C function exported to Guile: `c-lw6ker-build-game-state'
     Wrapper on lw6ker_build_game_state.

4.16.120 c-lw6ker-build-game-struct
-----------------------------------

 -- C function exported to Guile: `c-lw6ker-build-game-struct'
     Wrapper on lw6ker_build_game_struct.

4.16.121 c-lw6ker-cursor-exists
-------------------------------

 -- C function exported to Guile: `c-lw6ker-cursor-exists'
     Wrapper on lw6ker_cursor_exists.

4.16.122 c-lw6ker-did-cursor-win
--------------------------------

 -- C function exported to Guile: `c-lw6ker-did-cursor-win'
     Wrapper on lw6ker_did_cursor_win.

4.16.123 c-lw6ker-do-round
--------------------------

 -- C function exported to Guile: `c-lw6ker-do-round'
     Wrapper on lw6ker_do_round.

4.16.124 c-lw6ker-dup-game-state
--------------------------------

 -- C function exported to Guile: `c-lw6ker-dup-game-state'
     Wrapper on lw6ker_dup_game_state.

4.16.125 c-lw6ker-game-state-checksum
-------------------------------------

 -- C function exported to Guile: `c-lw6ker-game-state-checksum'
     Wrapper on lw6ker_game_state_checksum.

4.16.126 c-lw6ker-game-struct-checksum
--------------------------------------

 -- C function exported to Guile: `c-lw6ker-game-struct-checksum'
     Wrapper on lw6ker_game_struct_checksum.

4.16.127 c-lw6ker-get-cursor
----------------------------

 -- C function exported to Guile: `c-lw6ker-get-cursor'
     Wrapper on lw6ker_get_cursor.

4.16.128 c-lw6ker-get-moves
---------------------------

 -- C function exported to Guile: `c-lw6ker-get-moves'
     Wrapper on lw6ker_get_moves.

4.16.129 c-lw6ker-get-rounds
----------------------------

 -- C function exported to Guile: `c-lw6ker-get-rounds'
     Wrapper on lw6ker_get_rounds.

4.16.130 c-lw6ker-get-spreads
-----------------------------

 -- C function exported to Guile: `c-lw6ker-get-spreads'
     Wrapper on lw6ker_get_spreads.

4.16.131 c-lw6ker-is-over
-------------------------

 -- C function exported to Guile: `c-lw6ker-is-over'
     Wrapper on lw6ker_is_over.

4.16.132 c-lw6ker-node-exists
-----------------------------

 -- C function exported to Guile: `c-lw6ker-node-exists'
     Wrapper on lw6ker_node_exists.

4.16.133 c-lw6ker-register-node
-------------------------------

 -- C function exported to Guile: `c-lw6ker-register-node'
     Wrapper on lw6ker_register_node.

4.16.134 c-lw6ker-remove-cursor
-------------------------------

 -- C function exported to Guile: `c-lw6ker-remove-cursor'
     Wrapper on lw6ker_remove_cursor.

4.16.135 c-lw6ker-set-cursor
----------------------------

 -- C function exported to Guile: `c-lw6ker-set-cursor'
     Wrapper on lw6ker_set_cursor.

4.16.136 c-lw6ker-sync-game-state
---------------------------------

 -- C function exported to Guile: `c-lw6ker-sync-game-state'
     Wrapper on lw6ker_sync_game_state.

4.16.137 c-lw6ker-unregister-node
---------------------------------

 -- C function exported to Guile: `c-lw6ker-unregister-node'
     Wrapper on lw6ker_unregister_node.

4.16.138 c-lw6ldr-chain-entry
-----------------------------

 -- C function exported to Guile: `c-lw6ldr-chain-entry'
     Wrapper on lw6ldr_chain_entry.

4.16.139 c-lw6ldr-exp-validate
------------------------------

 -- C function exported to Guile: `c-lw6ldr-exp-validate'
     Wrapper on lw6ldr_exp_validate.

4.16.140 c-lw6ldr-get-entries
-----------------------------

 -- C function exported to Guile: `c-lw6ldr-get-entries'
     Wrapper on lw6ldr_get_entries.

4.16.141 c-lw6ldr-hints-get-default
-----------------------------------

 -- C function exported to Guile: `c-lw6ldr-hints-get-default'
     Wrapper on lw6ldr_hints_get_default.

4.16.142 c-lw6ldr-print-examples
--------------------------------

 -- C function exported to Guile: `c-lw6ldr-print-examples'
     Wrapper on lw6ldr_print_examples.

4.16.143 c-lw6ldr-read
----------------------

 -- C function exported to Guile: `c-lw6ldr-read'
     Wrapper on lw6ldr_read.

4.16.144 c-lw6ldr-read-relative
-------------------------------

 -- C function exported to Guile: `c-lw6ldr-read-relative'
     Wrapper on lw6ldr_read_relative.

4.16.145 c-lw6map-exp-get-unlocked-team-color
---------------------------------------------

 -- C function exported to Guile: `c-lw6map-exp-get-unlocked-team-color'
     Wrapper on lw6map_exp_get_unlocked_team_color.

4.16.146 c-lw6map-exp-get-unlocked-weapon
-----------------------------------------

 -- C function exported to Guile: `c-lw6map-exp-get-unlocked-weapon'
     Wrapper on lw6map_exp_get_unlocked_weapon.

4.16.147 c-lw6map-exp-is-team-color-allowed
-------------------------------------------

 -- C function exported to Guile: `c-lw6map-exp-is-team-color-allowed'
     Wrapper on lw6map_exp_is_team_color_allowed.

4.16.148 c-lw6map-exp-is-weapon-allowed
---------------------------------------

 -- C function exported to Guile: `c-lw6map-exp-is-weapon-allowed'
     Wrapper on lw6map_exp_is_weapon_allowed.

4.16.149 c-lw6map-get-look
--------------------------

 -- C function exported to Guile: `c-lw6map-get-look'
     Wrapper on lw6map_get_look.

4.16.150 c-lw6map-get-music-dir
-------------------------------

 -- C function exported to Guile: `c-lw6map-get-music-dir'
     Wrapper on lw6map_get_music_dir.

4.16.151 c-lw6map-param-get
---------------------------

 -- C function exported to Guile: `c-lw6map-param-get'
     Wrapper on lw6map_param_get.

4.16.152 c-lw6map-rules-get-default
-----------------------------------

 -- C function exported to Guile: `c-lw6map-rules-get-default'
     Wrapper on lw6map_rules_get_default.

4.16.153 c-lw6map-rules-get-int
-------------------------------

 -- C function exported to Guile: `c-lw6map-rules-get-int'
     Wrapper on lw6map_rules_get_int.

4.16.154 c-lw6map-rules-get-max
-------------------------------

 -- C function exported to Guile: `c-lw6map-rules-get-max'
     Wrapper on lw6map_rules_get_max.

4.16.155 c-lw6map-rules-get-min
-------------------------------

 -- C function exported to Guile: `c-lw6map-rules-get-min'
     Wrapper on lw6map_rules_get_min.

4.16.156 c-lw6map-style-get-default
-----------------------------------

 -- C function exported to Guile: `c-lw6map-style-get-default'
     Wrapper on lw6map_style_get_default.

4.16.157 c-lw6map-team-color-index-to-key
-----------------------------------------

 -- C function exported to Guile: `c-lw6map-team-color-index-to-key'
     Wrapper on lw6map_team_color_index_to_key.

4.16.158 c-lw6map-team-color-index-to-label
-------------------------------------------

 -- C function exported to Guile: `c-lw6map-team-color-index-to-label'
     Wrapper on lw6map_team_color_index_to_label.

4.16.159 c-lw6map-team-color-key-to-index
-----------------------------------------

 -- C function exported to Guile: `c-lw6map-team-color-key-to-index'
     Wrapper on lw6map_team_color_key_to_index.

4.16.160 c-lw6map-team-color-list
---------------------------------

 -- C function exported to Guile: `c-lw6map-team-color-list'
     Wrapper on lw6map_team_color_list.

4.16.161 c-lw6map-teams-get-default
-----------------------------------

 -- C function exported to Guile: `c-lw6map-teams-get-default'
     Wrapper on lw6map_teams_get_default.

4.16.162 c-lw6map-weapon-index-to-key
-------------------------------------

 -- C function exported to Guile: `c-lw6map-weapon-index-to-key'
     Wrapper on lw6map_weapon_index_to_key.

4.16.163 c-lw6map-weapon-index-to-label
---------------------------------------

 -- C function exported to Guile: `c-lw6map-weapon-index-to-label'
     Wrapper on lw6map_weapon_index_to_label.

4.16.164 c-lw6map-weapon-key-to-index
-------------------------------------

 -- C function exported to Guile: `c-lw6map-weapon-key-to-index'
     Wrapper on lw6map_weapon_key_to_index.

4.16.165 c-lw6map-weapon-list
-----------------------------

 -- C function exported to Guile: `c-lw6map-weapon-list'
     Wrapper on lw6map_weapon_list.

4.16.166 c-lw6net-init
----------------------

 -- C function exported to Guile: `c-lw6net-init'
     Wrapper on lw6net_init.

4.16.167 c-lw6net-quit
----------------------

 -- C function exported to Guile: `c-lw6net-quit'
     Wrapper on lw6net_quit.

4.16.168 c-lw6p2p-db-default-name
---------------------------------

 -- C function exported to Guile: `c-lw6p2p-db-default-name'
     Wrapper on lw6p2p_db_default_name.

4.16.169 c-lw6p2p-db-new
------------------------

 -- C function exported to Guile: `c-lw6p2p-db-new'
     Wrapper on lw6p2p_db_new.

4.16.170 c-lw6p2p-db-reset
--------------------------

 -- C function exported to Guile: `c-lw6p2p-db-reset'
     Wrapper on lw6p2p_db_reset.

4.16.171 c-lw6p2p-node-close
----------------------------

 -- C function exported to Guile: `c-lw6p2p-node-close'
     Wrapper on lw6p2p_node_close.

4.16.172 c-lw6p2p-node-get-entries
----------------------------------

 -- C function exported to Guile: `c-lw6p2p-node-get-entries'
     Wrapper on lw6p2p_node_get_entries.

4.16.173 c-lw6p2p-node-get-id
-----------------------------

 -- C function exported to Guile: `c-lw6p2p-node-get-id'
     Wrapper on lw6p2p_node_get_id.

4.16.174 c-lw6p2p-node-new
--------------------------

 -- C function exported to Guile: `c-lw6p2p-node-new'
     Wrapper on lw6p2p_node_new.

4.16.175 c-lw6p2p-node-poll
---------------------------

 -- C function exported to Guile: `c-lw6p2p-node-poll'
     Wrapper on lw6p2p_node_poll.

4.16.176 c-lw6pil-bench
-----------------------

 -- C function exported to Guile: `c-lw6pil-bench'
     Wrapper on lw6pil_bench.

4.16.177 c-lw6pil-build-pilot
-----------------------------

 -- C function exported to Guile: `c-lw6pil-build-pilot'
     Wrapper on lw6pil_build_pilot.

4.16.178 c-lw6pil-calibrate
---------------------------

 -- C function exported to Guile: `c-lw6pil-calibrate'
     Wrapper on lw6pil_calibrate.

4.16.179 c-lw6pil-commit
------------------------

 -- C function exported to Guile: `c-lw6pil-commit'
     Wrapper on lw6pil_commit.

4.16.180 c-lw6pil-did-cursor-win
--------------------------------

 -- C function exported to Guile: `c-lw6pil-did-cursor-win'
     Wrapper on lw6pil_did_cursor_win.

4.16.181 c-lw6pil-execute-command
---------------------------------

 -- C function exported to Guile: `c-lw6pil-execute-command'
     Wrapper on lw6pil_execute_command.

4.16.182 c-lw6pil-fix-coords
----------------------------

 -- C function exported to Guile: `c-lw6pil-fix-coords'
     Wrapper on lw6pil_coords_fix.

4.16.183 c-lw6pil-fix-coords-x10
--------------------------------

 -- C function exported to Guile: `c-lw6pil-fix-coords-x10'
     Wrapper on lw6pil_coords_fix_x10.

4.16.184 c-lw6pil-get-last-commit-seq
-------------------------------------

 -- C function exported to Guile: `c-lw6pil-get-last-commit-seq'
     Wrapper on lw6pil_get_last_commit_seq.

4.16.185 c-lw6pil-get-looser
----------------------------

 -- C function exported to Guile: `c-lw6pil-get-looser'
     Wrapper on lw6pil_get_looser.

4.16.186 c-lw6pil-get-max-seq
-----------------------------

 -- C function exported to Guile: `c-lw6pil-get-max-seq'
     Wrapper on lw6pil_get_max_seq.

4.16.187 c-lw6pil-get-next-seq
------------------------------

 -- C function exported to Guile: `c-lw6pil-get-next-seq'
     Wrapper on lw6pil_get_next_seq.

4.16.188 c-lw6pil-get-reference-current-seq
-------------------------------------------

 -- C function exported to Guile: `c-lw6pil-get-reference-current-seq'
     Wrapper on lw6pil_get_reference_current_seq.

4.16.189 c-lw6pil-get-reference-target-seq
------------------------------------------

 -- C function exported to Guile: `c-lw6pil-get-reference-target-seq'
     Wrapper on lw6pil_get_reference_target_seq.

4.16.190 c-lw6pil-get-winner
----------------------------

 -- C function exported to Guile: `c-lw6pil-get-winner'
     Wrapper on lw6pil_get_winner.

4.16.191 c-lw6pil-is-over
-------------------------

 -- C function exported to Guile: `c-lw6pil-is-over'
     Wrapper on lw6pil_is_over.

4.16.192 c-lw6pil-local-command
-------------------------------

 -- C function exported to Guile: `c-lw6pil-local-command'
     Wrapper on lw6pil_local_command.

4.16.193 c-lw6pil-local-cursors-set-main
----------------------------------------

 -- C function exported to Guile: `c-lw6pil-local-cursors-set-main'
     Wrapper on lw6pil_local_cursors_set_main.

4.16.194 c-lw6pil-local-cursors-set-mouse-controlled
----------------------------------------------------

 -- C function exported to Guile:
`c-lw6pil-local-cursors-set-mouse-controlled'
     Wrapper on lw6pil_local_cursors_set_mouse_controlled.

4.16.195 c-lw6pil-make-backup
-----------------------------

 -- C function exported to Guile: `c-lw6pil-make-backup'
     Wrapper on lw6pil_make_backup.

4.16.196 c-lw6pil-send-command
------------------------------

 -- C function exported to Guile: `c-lw6pil-send-command'
     Wrapper on lw6pil_send_command.

4.16.197 c-lw6pil-seq-random-0
------------------------------

 -- C function exported to Guile: `c-lw6pil-seq-random-0'
     Wrapper on lw6pil_seq_random_0.

4.16.198 c-lw6pil-slow-down
---------------------------

 -- C function exported to Guile: `c-lw6pil-slow-down'
     Wrapper on lw6pil_slow_down.

4.16.199 c-lw6pil-speed-up
--------------------------

 -- C function exported to Guile: `c-lw6pil-speed-up'
     Wrapper on lw6pil_speed_up.

4.16.200 c-lw6pil-sync-from-backup
----------------------------------

 -- C function exported to Guile: `c-lw6pil-sync-from-backup'
     Wrapper on lw6pil_sync_from_backup.

4.16.201 c-lw6pil-sync-from-draft
---------------------------------

 -- C function exported to Guile: `c-lw6pil-sync-from-draft'
     Wrapper on lw6pil_sync_from_draft.

4.16.202 c-lw6pil-sync-from-reference
-------------------------------------

 -- C function exported to Guile: `c-lw6pil-sync-from-reference'
     Wrapper on lw6pil_sync_from_reference.

4.16.203 c-lw6snd-get-backends
------------------------------

 -- C function exported to Guile: `c-lw6snd-get-backends'
     Wrapper on lw6snd_get_backends.

4.16.204 c-lw6snd-is-music-file
-------------------------------

 -- C function exported to Guile: `c-lw6snd-is-music-file'
     Wrapper on lw6snd_is_music_file.

4.16.205 c-lw6snd-new
---------------------

 -- C function exported to Guile: `c-lw6snd-new'
     Wrapper on lw6snd_new.

4.16.206 c-lw6snd-play-fx
-------------------------

 -- C function exported to Guile: `c-lw6snd-play-fx'
     Wrapper on lw6snd_play_fx.

4.16.207 c-lw6snd-play-music-file
---------------------------------

 -- C function exported to Guile: `c-lw6snd-play-music-file'
     Wrapper on lw6snd_play_music_file.

4.16.208 c-lw6snd-play-music-random
-----------------------------------

 -- C function exported to Guile: `c-lw6snd-play-music-random'
     Wrapper on lw6snd_play_music_random.

4.16.209 c-lw6snd-poll
----------------------

 -- C function exported to Guile: `c-lw6snd-poll'
     Wrapper on lw6snd_poll.

4.16.210 c-lw6snd-release
-------------------------

 -- C function exported to Guile: `c-lw6snd-release'
     Wrapper on lw6snd_release.

4.16.211 c-lw6snd-set-fx-volume
-------------------------------

 -- C function exported to Guile: `c-lw6snd-set-fx-volume'
     Wrapper on lw6snd_set_fx_volume.

4.16.212 c-lw6snd-set-music-volume
----------------------------------

 -- C function exported to Guile: `c-lw6snd-set-music-volume'
     Wrapper on lw6snd_set_music_volume.

4.16.213 c-lw6snd-set-water-volume
----------------------------------

 -- C function exported to Guile: `c-lw6snd-set-water-volume'
     Wrapper on lw6snd_set_water_volume.

4.16.214 c-lw6snd-stop-music
----------------------------

 -- C function exported to Guile: `c-lw6snd-stop-music'
     Wrapper on lw6snd_stop_music.

4.16.215 c-lw6srv-get-backends
------------------------------

 -- C function exported to Guile: `c-lw6srv-get-backends'
     Wrapper on lw6srv_get_backends.

4.16.216 c-lw6sys-build-get-bin-id
----------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-bin-id'
     Wrapper on lw6sys_build_get_bin_id.

4.16.217 c-lw6sys-build-get-bugs-url
------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-bugs-url'
     Wrapper on lw6sys_build_get_bugs_url.

4.16.218 c-lw6sys-build-get-cflags
----------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-cflags'
     Wrapper on lw6sys_build_get_cflags.

4.16.219 c-lw6sys-build-get-codename
------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-codename'
     Wrapper on lw6sys_build_get_codename.

4.16.220 c-lw6sys-build-get-configure-args
------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-configure-args'
     Wrapper on lw6sys_build_get_configure_args.

4.16.221 c-lw6sys-build-get-copyright
-------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-copyright'
     Wrapper on lw6sys_build_get_copyright.

4.16.222 c-lw6sys-build-get-datadir
-----------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-datadir'
     Wrapper on lw6sys_build_get_datadir.

4.16.223 c-lw6sys-build-get-date
--------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-date'
     Wrapper on lw6sys_build_get_date.

4.16.224 c-lw6sys-build-get-enable-allinone
-------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-allinone'
     Wrapper on lw6sys_build_get_enable_allinone.

4.16.225 c-lw6sys-build-get-enable-console
------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-console'
     Wrapper on lw6sys_build_get_enable_console.

4.16.226 c-lw6sys-build-get-enable-fullstatic
---------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-fullstatic'
     Wrapper on lw6sys_build_get_enable_fullstatic.

4.16.227 c-lw6sys-build-get-enable-gcov
---------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-gcov'
     Wrapper on lw6sys_build_get_enable_gcov.

4.16.228 c-lw6sys-build-get-enable-gprof
----------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-gprof'
     Wrapper on lw6sys_build_get_enable_gprof.

4.16.229 c-lw6sys-build-get-enable-gtk
--------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-gtk'
     Wrapper on lw6sys_build_get_enable_gtk.

4.16.230 c-lw6sys-build-get-enable-instrument
---------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-instrument'
     Wrapper on lw6sys_build_get_enable_instrument.

4.16.231 c-lw6sys-build-get-enable-mod-csound
---------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-mod-csound'
     Wrapper on lw6sys_build_get_enable_mod_csound.

4.16.232 c-lw6sys-build-get-enable-mod-gl
-----------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-mod-gl'
     Wrapper on lw6sys_build_get_enable_mod_gl.

4.16.233 c-lw6sys-build-get-enable-mod-http
-------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-mod-http'
     Wrapper on lw6sys_build_get_enable_mod_http.

4.16.234 c-lw6sys-build-get-enable-mod-ogg
------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-mod-ogg'
     Wrapper on lw6sys_build_get_enable_mod_ogg.

4.16.235 c-lw6sys-build-get-enable-openmp
-----------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-openmp'
     Wrapper on lw6sys_build_get_enable_openmp.

4.16.236 c-lw6sys-build-get-enable-optimize
-------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-optimize'
     Wrapper on lw6sys_build_get_enable_optimize.

4.16.237 c-lw6sys-build-get-enable-paranoid
-------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-paranoid'
     Wrapper on lw6sys_build_get_enable_paranoid.

4.16.238 c-lw6sys-build-get-enable-profiler
-------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-profiler'
     Wrapper on lw6sys_build_get_enable_profiler.

4.16.239 c-lw6sys-build-get-enable-valgrind
-------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-enable-valgrind'
     Wrapper on lw6sys_build_get_enable_valgrind.

4.16.240 c-lw6sys-build-get-endianness
--------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-endianness'
     Wrapper on lw6sys_build_get_endianness.

4.16.241 c-lw6sys-build-get-gcc-version
---------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-gcc-version'
     Wrapper on lw6sys_build_get_gcc_version.

4.16.242 c-lw6sys-build-get-home-url
------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-home-url'
     Wrapper on lw6sys_build_get_home_url.

4.16.243 c-lw6sys-build-get-host-cpu
------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-host-cpu'
     Wrapper on lw6sys_build_get_host_cpu.

4.16.244 c-lw6sys-build-get-host-os
-----------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-host-os'
     Wrapper on lw6sys_build_get_host_os.

4.16.245 c-lw6sys-build-get-hostname
------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-hostname'
     Wrapper on lw6sys_build_get_hostname.

4.16.246 c-lw6sys-build-get-includedir
--------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-includedir'
     Wrapper on lw6sys_build_get_includedir.

4.16.247 c-lw6sys-build-get-ldflags
-----------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-ldflags'
     Wrapper on lw6sys_build_get_ldflags.

4.16.248 c-lw6sys-build-get-libdir
----------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-libdir'
     Wrapper on lw6sys_build_get_libdir.

4.16.249 c-lw6sys-build-get-license
-----------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-license'
     Wrapper on lw6sys_build_get_license.

4.16.250 c-lw6sys-build-get-localedir
-------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-localedir'
     Wrapper on lw6sys_build_get_localedir.

4.16.251 c-lw6sys-build-get-md5sum
----------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-md5sum'
     Wrapper on lw6sys_build_get_md5sum.

4.16.252 c-lw6sys-build-get-package-name
----------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-package-name'
     Wrapper on lw6sys_build_get_package_name.

4.16.253 c-lw6sys-build-get-package-string
------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-package-string'
     Wrapper on lw6sys_build_get_package_string.

4.16.254 c-lw6sys-build-get-package-tarname
-------------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-package-tarname'
     Wrapper on lw6sys_build_get_package_tarname.

4.16.255 c-lw6sys-build-get-pointer-size
----------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-pointer-size'
     Wrapper on lw6sys_build_get_pointer_size.

4.16.256 c-lw6sys-build-get-prefix
----------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-prefix'
     Wrapper on lw6sys_build_get_prefix.

4.16.257 c-lw6sys-build-get-stamp
---------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-stamp'
     Wrapper on lw6sys_build_get_stamp.

4.16.258 c-lw6sys-build-get-time
--------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-time'
     Wrapper on lw6sys_build_get_time.

4.16.259 c-lw6sys-build-get-top-srcdir
--------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-top-srcdir'
     Wrapper on lw6sys_build_get_top_srcdir.

4.16.260 c-lw6sys-build-get-version
-----------------------------------

 -- C function exported to Guile: `c-lw6sys-build-get-version'
     Wrapper on lw6sys_build_get_version.

4.16.261 c-lw6sys-build-is-gnu
------------------------------

 -- C function exported to Guile: `c-lw6sys-build-is-gnu'
     Wrapper on lw6sys_build_is_gnu.

4.16.262 c-lw6sys-build-is-gp2x
-------------------------------

 -- C function exported to Guile: `c-lw6sys-build-is-gp2x'
     Wrapper on lw6sys_build_is_gp2x.

4.16.263 c-lw6sys-build-is-mac-os-x
-----------------------------------

 -- C function exported to Guile: `c-lw6sys-build-is-mac-os-x'
     Wrapper on lw6sys_build_is_mac_os_x.

4.16.264 c-lw6sys-build-is-ms-windows
-------------------------------------

 -- C function exported to Guile: `c-lw6sys-build-is-ms-windows'
     Wrapper on lw6sys_build_is_ms_windows.

4.16.265 c-lw6sys-build-is-unix
-------------------------------

 -- C function exported to Guile: `c-lw6sys-build-is-unix'
     Wrapper on lw6sys_build_is_unix.

4.16.266 c-lw6sys-build-is-x86
------------------------------

 -- C function exported to Guile: `c-lw6sys-build-is-x86'
     Wrapper on lw6sys_build_is_x86.

4.16.267 c-lw6sys-debug-get
---------------------------

 -- C function exported to Guile: `c-lw6sys-debug-get'
     Wrapper on lw6sys_debug_get.

4.16.268 c-lw6sys-debug-set
---------------------------

 -- C function exported to Guile: `c-lw6sys-debug-set'
     Wrapper on lw6sys_debug_set.

4.16.269 c-lw6sys-delay
-----------------------

 -- C function exported to Guile: `c-lw6sys-delay'
     Wrapper on lw6sys_delay.

4.16.270 c-lw6sys-dump
----------------------

 -- C function exported to Guile: `c-lw6sys-dump'
     Wrapper on lw6sys_dump.

4.16.271 c-lw6sys-dump-clear
----------------------------

 -- C function exported to Guile: `c-lw6sys-dump-clear'
     Wrapper on lw6sys_dump_clear.

4.16.272 c-lw6sys-generate-id-16
--------------------------------

 -- C function exported to Guile: `c-lw6sys-generate-id-16'
     Wrapper on lw6sys_generate_id_16.

4.16.273 c-lw6sys-generate-id-32
--------------------------------

 -- C function exported to Guile: `c-lw6sys-generate-id-32'
     Wrapper on lw6sys_generate_id_32.

4.16.274 c-lw6sys-generate-id-64
--------------------------------

 -- C function exported to Guile: `c-lw6sys-generate-id-64'
     Wrapper on lw6sys_generate_id_64.

4.16.275 c-lw6sys-get-config-file
---------------------------------

 -- C function exported to Guile: `c-lw6sys-get-config-file'
     Wrapper on lw6sys_get_config_file.

4.16.276 c-lw6sys-get-cwd
-------------------------

 -- C function exported to Guile: `c-lw6sys-get-cwd'
     Wrapper on lw6sys_get_cwd.

4.16.277 c-lw6sys-get-cycle
---------------------------

 -- C function exported to Guile: `c-lw6sys-get-cycle'
     Wrapper on lw6sys_get_cycle.

4.16.278 c-lw6sys-get-data-dir
------------------------------

 -- C function exported to Guile: `c-lw6sys-get-data-dir'
     Wrapper on lw6sys_get_data_dir.

4.16.279 c-lw6sys-get-default-config-file
-----------------------------------------

 -- C function exported to Guile: `c-lw6sys-get-default-config-file'
     Wrapper on lw6sys_get_default_config_file.

4.16.280 c-lw6sys-get-default-data-dir
--------------------------------------

 -- C function exported to Guile: `c-lw6sys-get-default-data-dir'
     Wrapper on lw6sys_get_default_data_dir.

4.16.281 c-lw6sys-get-default-log-file
--------------------------------------

 -- C function exported to Guile: `c-lw6sys-get-default-log-file'
     Wrapper on lw6sys_get_default_log_file.

4.16.282 c-lw6sys-get-default-map-dir
-------------------------------------

 -- C function exported to Guile: `c-lw6sys-get-default-map-dir'
     Wrapper on lw6sys_get_default_map_dir.

4.16.283 c-lw6sys-get-default-map-path
--------------------------------------

 -- C function exported to Guile: `c-lw6sys-get-default-map-path'
     Wrapper on lw6sys_get_default_map_path.

4.16.284 c-lw6sys-get-default-mod-dir
-------------------------------------

 -- C function exported to Guile: `c-lw6sys-get-default-mod-dir'
     Wrapper on lw6sys_get_default_mod_dir.

4.16.285 c-lw6sys-get-default-music-dir
---------------------------------------

 -- C function exported to Guile: `c-lw6sys-get-default-music-dir'
     Wrapper on lw6sys_get_default_music_dir.

4.16.286 c-lw6sys-get-default-music-path
----------------------------------------

 -- C function exported to Guile: `c-lw6sys-get-default-music-path'
     Wrapper on lw6sys_get_default_music_path.

4.16.287 c-lw6sys-get-default-prefix
------------------------------------

 -- C function exported to Guile: `c-lw6sys-get-default-prefix'
     Wrapper on lw6sys_get_default_prefix.

4.16.288 c-lw6sys-get-default-script-file
-----------------------------------------

 -- C function exported to Guile: `c-lw6sys-get-default-script-file'
     Wrapper on lw6sys_get_default_script_file.

4.16.289 c-lw6sys-get-default-user-dir
--------------------------------------

 -- C function exported to Guile: `c-lw6sys-get-default-user-dir'
     Wrapper on lw6sys_get_default_user_dir.

4.16.290 c-lw6sys-get-hostname
------------------------------

 -- C function exported to Guile: `c-lw6sys-get-hostname'
     Wrapper on lw6sys_get_hostname.

4.16.291 c-lw6sys-get-log-file
------------------------------

 -- C function exported to Guile: `c-lw6sys-get-log-file'
     Wrapper on lw6sys_get_log_file.

4.16.292 c-lw6sys-get-map-dir
-----------------------------

 -- C function exported to Guile: `c-lw6sys-get-map-dir'
     Wrapper on lw6sys_get_map_dir.

4.16.293 c-lw6sys-get-map-path
------------------------------

 -- C function exported to Guile: `c-lw6sys-get-map-path'
     Wrapper on lw6sys_get_map_path.

4.16.294 c-lw6sys-get-mod-dir
-----------------------------

 -- C function exported to Guile: `c-lw6sys-get-mod-dir'
     Wrapper on lw6sys_get_mod_dir.

4.16.295 c-lw6sys-get-music-dir
-------------------------------

 -- C function exported to Guile: `c-lw6sys-get-music-dir'
     Wrapper on lw6sys_get_music_dir.

4.16.296 c-lw6sys-get-music-path
--------------------------------

 -- C function exported to Guile: `c-lw6sys-get-music-path'
     Wrapper on lw6sys_get_music_path.

4.16.297 c-lw6sys-get-prefix
----------------------------

 -- C function exported to Guile: `c-lw6sys-get-prefix'
     Wrapper on lw6sys_get_prefix.

4.16.298 c-lw6sys-get-run-dir
-----------------------------

 -- C function exported to Guile: `c-lw6sys-get-run-dir'
     Wrapper on lw6sys_get_run_dir.

4.16.299 c-lw6sys-get-script-file
---------------------------------

 -- C function exported to Guile: `c-lw6sys-get-script-file'
     Wrapper on lw6sys_get_script_file.

4.16.300 c-lw6sys-get-timestamp
-------------------------------

 -- C function exported to Guile: `c-lw6sys-get-timestamp'
     Wrapper on lw6sys_get_timestamp.

4.16.301 c-lw6sys-get-uptime
----------------------------

 -- C function exported to Guile: `c-lw6sys-get-uptime'
     Wrapper on lw6sys_get_uptime.

4.16.302 c-lw6sys-get-user-dir
------------------------------

 -- C function exported to Guile: `c-lw6sys-get-user-dir'
     Wrapper on lw6sys_get_user_dir.

4.16.303 c-lw6sys-get-username
------------------------------

 -- C function exported to Guile: `c-lw6sys-get-username'
     Wrapper on lw6sys_get_username.

4.16.304 c-lw6sys-getenv
------------------------

 -- C function exported to Guile: `c-lw6sys-getenv'
     Wrapper on lw6sys_getenv.

4.16.305 c-lw6sys-getenv-prefixed
---------------------------------

 -- C function exported to Guile: `c-lw6sys-getenv-prefixed'
     Wrapper on lw6sys_getenv_prefixed.

4.16.306 c-lw6sys-idle
----------------------

 -- C function exported to Guile: `c-lw6sys-idle'
     Wrapper on lw6sys_idle.

4.16.307 c-lw6sys-log
---------------------

 -- C function exported to Guile: `c-lw6sys-log'
     Wrapper on lw6sys_log.

4.16.308 c-lw6sys-log-get-level
-------------------------------

 -- C function exported to Guile: `c-lw6sys-log-get-level'
     Wrapper on lw6sys_log_get_level.

4.16.309 c-lw6sys-log-set-level
-------------------------------

 -- C function exported to Guile: `c-lw6sys-log-set-level'
     Wrapper on lw6sys_log_set_level.

4.16.310 c-lw6sys-megabytes-available
-------------------------------------

 -- C function exported to Guile: `c-lw6sys-megabytes-available'
     Wrapper on lw6sys_megabytes_available.

4.16.311 c-lw6sys-openmp-get-num-procs
--------------------------------------

 -- C function exported to Guile: `c-lw6sys-openmp-get-num-procs'
     Wrapper on lw6sys_openmp_get_num_procs.

4.16.312 c-lw6sys-path-concat
-----------------------------

 -- C function exported to Guile: `c-lw6sys-path-concat'
     Wrapper on lw6sys_path_concat.

4.16.313 c-lw6sys-path-file-only
--------------------------------

 -- C function exported to Guile: `c-lw6sys-path-file-only'
     Wrapper on lw6sys_path_file_only.

4.16.314 c-lw6sys-path-parent
-----------------------------

 -- C function exported to Guile: `c-lw6sys-path-parent'
     Wrapper on lw6sys_path_parent.

4.16.315 c-lw6sys-path-split
----------------------------

 -- C function exported to Guile: `c-lw6sys-path-split'
     Wrapper on lw6sys_path_split.

4.16.316 c-lw6sys-set-memory-bazooka-eraser
-------------------------------------------

 -- C function exported to Guile: `c-lw6sys-set-memory-bazooka-eraser'
     Wrapper on lw6sys_set_memory_bazooka_eraser.

4.16.317 c-lw6sys-set-memory-bazooka-size
-----------------------------------------

 -- C function exported to Guile: `c-lw6sys-set-memory-bazooka-size'
     Wrapper on lw6sys_set_memory_bazooka_size.

4.16.318 c-lw6sys-signal-custom
-------------------------------

 -- C function exported to Guile: `c-lw6sys-signal-custom'
     Wrapper on lw6sys_signal_custom.

4.16.319 c-lw6sys-signal-default
--------------------------------

 -- C function exported to Guile: `c-lw6sys-signal-default'
     Wrapper on lw6sys_signal_default.

4.16.320 c-lw6sys-signal-poll-quit
----------------------------------

 -- C function exported to Guile: `c-lw6sys-signal-poll-quit'
     Wrapper on lw6sys_signal_poll_quit.

4.16.321 c-lw6sys-signal-send-quit
----------------------------------

 -- C function exported to Guile: `c-lw6sys-signal-send-quit'
     Wrapper on lw6sys_signal_send_quit.

4.16.322 c-lw6sys-sleep
-----------------------

 -- C function exported to Guile: `c-lw6sys-sleep'
     Wrapper on lw6sys_sleep.

4.16.323 c-lw6sys-snooze
------------------------

 -- C function exported to Guile: `c-lw6sys-snooze'
     Wrapper on lw6sys_snooze.

4.16.324 c-lw6sys-url-canonize
------------------------------

 -- C function exported to Guile: `c-lw6sys-url-canonize'
     Wrapper on lw6sys_url_canonize.

4.16.325 c-lw6tsk-loader-get-stage
----------------------------------

 -- C function exported to Guile: `c-lw6tsk-loader-get-stage'
     Wrapper on lw6tsk_loader_get_stage.

4.16.326 c-lw6tsk-loader-new
----------------------------

 -- C function exported to Guile: `c-lw6tsk-loader-new'
     Wrapper on lw6tsk_loader_new.

4.16.327 c-lw6tsk-loader-pop
----------------------------

 -- C function exported to Guile: `c-lw6tsk-loader-pop'
     Wrapper on lw6tsk_loader_pop.

4.16.328 c-lw6tsk-loader-push
-----------------------------

 -- C function exported to Guile: `c-lw6tsk-loader-push'
     Wrapper on lw6tsk_loader_push.


File: liquidwar6.info,  Node: Script hooks,  Prev: C to Guile,  Up: Reference

4.17 Script hooks
=================


File: liquidwar6.info,  Node: C API,  Prev: Reference,  Up: Top

5 C API
*******

This chapter contains a description of all modules and a list of all
documented C functions in the program. It contains many references and
is self-generated from C comments using gdoc
(http://josefsson.org/gdoc/) by Simon Josefsson (http://josefsson.org/).

   In order to reduce the number of pages of printed output, this
complete reference is, by default, disabled in printable versions of
the documentation (PostScript, PDF).  This is both to make the manual
more readable and to avoid wasting paper.  Think about the environment.

   It is however available in the HTML version of the documentation,
which you can read online on
`http://www.gnu.org/software/liquidwar6/manual/html_node/'.

   Additionnally, the following adresses contain various view on the
source code, giving informations on all the internal and public C
interfaces:

   * `http://www.gnu.org/software/liquidwar6/coverage/': the lcov
     (http://ltp.sourceforge.net/coverage/lcov.php) output when running
     `./liquidwar6 --test'.  It shows what functions are actually
     tested, and how many times they are called.

   * `http://www.gnu.org/software/liquidwar6/global/': the GNU global
     (http://www.gnu.org/software/global/) output gives complete
     cross-references, macros, headers, contants declaration. It's a
     very good place to start browsing the code.

   * `http://www.gnu.org/software/liquidwar6/cyclo/': the pmccabe
     (http://parisc-linux.org/~bame/pmccabe/) output shows the
     cyclomatic complexity of functions. It enables the programmer to
     spots the "ugly" and dangerous parts of the program.

* Menu:

* libliquidwar6::       Top-level functions.
* libbot::              Bot algorithms.
* mod-brute::           Brute-force bot.
* mod-follow::          A bot that follows others.
* mod-idiot::           Basic idiot bot.
* mod-random::          Totally random bot.
* libcfg::              Loading and saving config files.
* libcli::              Network clients.
* mod-http::            Web client.
* mod-tcp::             Tcp client using native protocol.
* mod-udp::             Udp client using native protocol.
* libcns::              Console handling.
* libcnx::              Connection common code.
* libdat::              Storing network data.
* libdef::              Keywords definitions.
* libdsp::              Threaded display.
* libdyn::              Dynamic module loading.
* libgfx::              Graphics.
* mod-gl::              Main 3D graphics backend.
* libglb::              Gnulib embedded routines.
* libgui::              GUI utilities.
* libhlp::              Built-in help system.
* libimg::              Generating screenshots.
* libker::              Main kernel module (core algorithm).
* libldr::              Loading maps.
* libmap::              Map, AKA levels.
* libmsg::              Network messages.
* libnet::              Low-level network routines.
* libnod::              Manipulating node data.
* libp2p::              A la peer to peer network system.
* libpil::              Dealing with game lag.
* libscm::              Guile wrapper.
* libsim::              Simulating fights.
* libsnd::              Sound.
* mod-csound::          Csound sound backend (vaporware).
* mod-ogg::             Ogg/libSDL default sound backend.
* libsrv::              Network servers.
* mod-httpd::           Embedded web server.
* mod-tcpd::            Tcp server using native protocol.
* mod-udpd::            Udp server using native protocol.
* libsys::              Low-level system utilities.
* libtsk::              Asynchronous loading.
* libvox::              Voxel-based 3D rendering.


File: liquidwar6.info,  Node: libliquidwar6,  Next: libbot,  Up: C API

5.1 libliquidwar6
=================

5.1.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/index.html'.

5.1.2 API
---------

 -- Function: void lw6_resize_callback (lw6gui_video_mode_t *
          VIDEO_MODE)
     VIDEO_MODE:  the new video mode

     This callback is here because gfx needs to update the config when
     the screen is resized. But... we did not want to make gfx depend
     on cfg "directly". It's cleaner to pass parameters with Scheme, in
     the long run, it should make things easier.  So this callback is
     the solution. Another side effect is that this way there's a
     tangible obvious trace of this updating of config status by the
     gfx module. Seeing it sticking out like a thumb isn't a bad thing.

     *Return value:*  none

 -- Function: void lw6_release ()
     Functions which will call `quit'(), `free'(), `destroy'() on
     whatever smob object that has threads and/or requires hardware
     ressources.  This is to be called before the Guile interpreter
     ends. This is because when it garbage collects objects at the end
     of the program, it has no idea of what order to use when freeing
     objects. So if an object which uses another one in a thread is
     freed after the other is freed, you get a (rather unexplainabled
     if not warned) segfault.

     *Return value:*  none

 -- Function: void lw6_exit ()
     Sends a quit message and displays a newline.

     *Return value:*  none

 -- Function: int lw6_fix_env (int ARGC, char * [] ARGV)
     argc: number of args as passed to main argv: array of strings as
     passed to main

     Fixes environment variables (path related) so that program can
     find its requirements. This must be called early in the program
     flow (else other calls might fail).

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6_register_funcs ()
     Register all the functions, make them callable from Guile.  This
     is a very simple yet long and very usefull function, without it
     Guile has no knowledge of what LW6 is.

     *Return value:*  1 on success, 0 if failed.

 -- Function: extern void lw6_cns_handler (char * C_LINE)
     c_line: the line typed by the user

     This function will be called every time a message is typed on the
     console. It runs the given line in the current Guile environment.

     *Return value:*  none

 -- Function: int lw6_init_global (int ARGC, char * [] ARGV)
     argc: number of args as passed to main argv: array of strings as
     passed to main

     Initializes global values to their defaults.

     *Return value:*  1 on success, 0 if failed

 -- Function: void lw6_quit_global ()
     argc: number of args as passed to main argv: array of strings as
     passed to main

     Frees global values. Will also garbage collect objects in case
     Guile failed to do it perfectly (or we failed to tell Guile how to
     do it).

     *Return value:*  none.

 -- Function: int lw6_main (int ARGC, char * [] ARGV)
     ARGC:  the argc parameter of the `main'() function, that is, the
     number of command-line args.

     ARGV:  the argv parameter of the `main'() function, that is, an
     array containing pointers on command-line args.

     This function is directly called by `main'(). This means by linking
     against libliquidwar6 and calling it, you would have a program
     that is almost exactly the "official" upstream liquidwar6 binary,
     except you can tweak it and have all the power to call whatever
     other functions you like, embed it. In short, everything the binary
     does, you can do it in your own binarn, by linking against the
     library and calling this function.

     *Return value:*  1 if success, zero if failure. Note that this is
     the "standard" C / liquidwar6 way to proceed, but your `main'()
     function should return 0 if success, else an error code. Typical
     use is "return !lw6_main(argc, argv);".

 -- Function: int lw6_process_non_run_options (int ARGC, char * []
          ARGV, int * RUN_GAME)
     ARGC:  the number of command-line args, as passed to `main()'

     ARGV:  an array of strings containing command-line args, as passed
     to `main()'

     RUN_GAME:  a pointer to a boolean which will contain true (1) if
     the game must be launched, or false (0) if the option is such that
     game must be skipped. Example: -copyright, -help, ...

     *Return value:*  non-zero if success, 0 if error. The error can
     be, for instance, the test suite returning "no, tests were not OK".

 -- Function: void lw6_print_help ()
     Displays a short help message.

     *Return value:*  none

 -- Function: void lw6_print_version ()
     Displays the version of the game.

     *Return value:*  none

 -- Function: void lw6_print_short_copyright ()
     Displays the copyright of the game (short version).

     *Return value:*  none

 -- Function: void lw6_print_long_copyright ()
     Displays the copyright of the game (long version).

     *Return value:*  none

 -- Function: void lw6_print_bench (float BENCH_RESULT)
     Displays the program bench value.

     *Return value:*  none

 -- Function: void lw6_print_pedigree ()
     Displays the program pedigree, think of this as version on
     steroids.

     *Return value:*  none

 -- Function: void lw6_print_host ()
     Displays the host on which the program was compiled.

     *Return value:*  none

 -- Function: void lw6_print_audit (int ARGC, char * [] ARGV)
     Displays various paths used by the game.

     *Return value:*  none

 -- Function: void lw6_print_modules ()
     Displays the list of modules compiled with the game.

     *Return value:*  none

 -- Function: void lw6_print_list_quick ()
     Displays the list of 'quick' options.

     *Return value:*  none

 -- Function: void lw6_print_list_doc ()
     Displays the list of 'doc' options.

     *Return value:*  none

 -- Function: void lw6_print_list_show ()
     Displays the list of 'show' options.

     *Return value:*  none

 -- Function: void lw6_print_list_path ()
     Displays the list of 'path' options.

     *Return value:*  none

 -- Function: void lw6_print_list_players ()
     Displays the list of 'players' options.

     *Return value:*  none

 -- Function: void lw6_print_list_input ()
     Displays the list of 'input' options.

     *Return value:*  none

 -- Function: void lw6_print_list_graphics ()
     Displays the list of 'graphics' options.

     *Return value:*  none

 -- Function: void lw6_print_list_sound ()
     Displays the list of 'sound' options.

     *Return value:*  none

 -- Function: void lw6_print_list_network ()
     Displays the list of 'network' options.

     *Return value:*  none

 -- Function: void lw6_print_list_map ()
     Displays the list of 'map' options.

     *Return value:*  none

 -- Function: void lw6_print_list_map_rules ()
     Displays the list of 'map rules' options.

     *Return value:*  none

 -- Function: void lw6_print_list_map_hints ()
     Displays the list of 'map hints' options.

     *Return value:*  none

 -- Function: void lw6_print_list_map_style ()
     Displays the list of 'map style' options.

     *Return value:*  none

 -- Function: void lw6_print_list_map_teams ()
     Displays the list of 'map teams' options.

     *Return value:*  none

 -- Function: void lw6_print_list_funcs ()
     Displays the list of 'funcs'.

     *Return value:*  none

 -- Function: void lw6_print_list_hooks ()
     Displays the list of 'hooks'.

     *Return value:*  none

 -- Function: void lw6_print_list_advanced ()
     Displays the list of 'advanced' options.

     *Return value:*  none

 -- Function: void lw6_print_list_aliases ()
     Displays the list of options aliases.

     *Return value:*  none

 -- Function: void lw6_print_list_team_colors ()
     Displays the list of team colors.

     *Return value:*  none

 -- Function: void lw6_print_list_weapons ()
     Displays the list of weapons.

     *Return value:*  none

 -- Function: void lw6_print_list ()
     Displays the list of all known options.

     *Return value:*  none

 -- Function: void lw6_print_about (char * KEYWORD)
     Displays the about message for a keyword.

     *Return value:*  none

 -- Function: void lw6_print_hello (int ARGC, char * [] ARGV)
     Displays 'hello' at the beginning of the program.

     *Return value:*  none

 -- Function: void lw6_print_goodbye ()
     Displays 'goodbye', typically use at end of program to know it's
     over and everything went fine.

     *Return value:*  none

 -- Function: SCM lw6_make_scm_dsp (lw6dsp_backend_t * C_DSP)
     C_DSP:  the display object

     Creates an SCM 'dsp' object from C data.

     *Return value:*  the SCM object

 -- Function: lw6dsp_backend_t * lw6_scm_to_dsp (SCM DSP)
     DSP:  the dsp to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'dsp'
     object.

     *Return value:*  a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_dsp_smob (lw6_dsp_smob_t * DSP_SMOB)
     DSP_SMOB:  the smob to free

     Frees a dsp smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:*  none

 -- Function: SCM lw6_make_scm_snd (lw6snd_backend_t * C_SND)
     C_SND:  the sound object

     Creates an SCM 'snd' object from C data.

     *Return value:*  the SCM object

 -- Function: lw6snd_backend_t * lw6_scm_to_snd (SCM SND)
     SND:  the snd to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'snd'
     object.

     *Return value:*  a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_snd_smob (lw6_snd_smob_t * SND_SMOB)
     SND_SMOB:  the smob to free

     Frees a snd smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:*  none

 -- Function: SCM lw6_make_scm_map (lw6map_level_t * C_MAP)
     C_MAP:  the map object

     Creates an SCM 'map' object from C data.

     *Return value:*  the SCM object

 -- Function: lw6map_level_t * lw6_scm_to_map (SCM MAP)
     MAP:  the map to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'map'
     object.

     *Return value:*  a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_map_smob (lw6_map_smob_t * MAP_SMOB)
     MAP_SMOB:  the smob to free

     Frees a map smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:*  none

 -- Function: SCM lw6_make_scm_menu (lw6gui_menu_t * C_MENU)
     C_MENU:  the menu object

     Creates an SCM 'menu' object from C data.

     *Return value:*  the SCM object

 -- Function: lw6gui_menu_t * lw6_scm_to_menu (SCM MENU)
     MENU:  the menu to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'menu'
     object.

     *Return value:*  a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_menu_smob (lw6_menu_smob_t * MENU_SMOB)
     MENU_SMOB:  the smob to free

     Frees a menu smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:*  none

 -- Function: SCM lw6_make_scm_game_struct (lw6ker_game_struct_t *
          C_GAME_STRUCT, SCM MAP)
     C_GAME_STRUCT:  the game struct object

     MAP:  the map (SCM object) referenced

     Creates an SCM 'game-struct' object from C data.  Passing the map
     object enables the garbage collector not to free the map until the
     game struct is freed.

     *Return value:*  the SCM object

 -- Function: lw6ker_game_struct_t * lw6_scm_to_game_struct (SCM
          GAME_STRUCT)
     GAME_STRUCT:  the game_struct to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme
     'game_struct' object.

     *Return value:*  a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_game_struct_smob (lw6_game_struct_smob_t *
          GAME_STRUCT_SMOB)
     GAME_STRUCT_SMOB:  the smob to free

     Frees a game_struct smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:*  none

 -- Function: SCM lw6_make_scm_game_state (lw6ker_game_state_t *
          C_GAME_STATE, SCM GAME_STRUCT)
     C_GAME_STATE:  the game state object

     GAME_STRUCT:  the game struct (SCM object) referenced

     Creates an SCM 'game_state' object from C data.  Passing
     game_struct enables the garbage collector not to free the
     game_struct until the game_state is freed.

     *Return value:*  the SCM object

 -- Function: lw6ker_game_state_t * lw6_scm_to_game_state (SCM
          GAME_STATE)
     GAME_STATE:  the game_state to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme
     'game_state' object.

     *Return value:*  a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_game_state_smob (lw6_game_state_smob_t *
          GAME_STATE_SMOB)
     GAME_STATE_SMOB:  the smob to free

     Frees a game_state smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:*  none

 -- Function: SCM lw6_make_scm_pilot (lw6pil_pilot_t * C_PILOT)
     C_PILOT:  the pilot object

     Creates an SCM 'pilot' object from C data.

     *Return value:*  the SCM object

 -- Function: lw6pil_pilot_t * lw6_scm_to_pilot (SCM PILOT)
     PILOT:  the pilot to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'pilot'
     object.

     *Return value:*  a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_pilot_smob (lw6_pilot_smob_t * PILOT_SMOB)
     PILOT_SMOB:  the smob to free

     Frees a pilot smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:*  none

 -- Function: SCM lw6_make_scm_bot (lw6bot_backend_t * C_BOT, SCM
          GAME_STATE, SCM PILOT)
     C_BOT:  the bot object

     GAME_STATE:  the game state

     PILOT:  the pilot

     Creates an SCM 'bot' object from C data.  Passing game_state and
     pilot enables the garbage collector not the free them until bot is
     freed.

     *Return value:*  the SCM object

 -- Function: lw6bot_backend_t * lw6_scm_to_bot (SCM BOT)
     BOT:  the bot to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'bot'
     object.

     *Return value:*  a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_bot_smob (lw6_bot_smob_t * BOT_SMOB)
     BOT_SMOB:  the smob to free

     Frees a bot smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:*  none

 -- Function: SCM lw6_make_scm_look (lw6gui_look_t * C_LOOK)
     C_LOOK:  the look object

     Creates an SCM 'look' object from C data.

     *Return value:*  the SCM object

 -- Function: lw6gui_look_t * lw6_scm_to_look (SCM LOOK)
     LOOK:  the look to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'look'
     object.

     *Return value:*  a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_look_smob (lw6_look_smob_t * LOOK_SMOB)
     LOOK_SMOB:  the smob to free

     Frees a look smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:*  none

 -- Function: SCM lw6_make_scm_loader (lw6tsk_loader_t * C_LOADER)
     C_LOADER:  the loader object

     Creates an SCM 'loader' object from C data.

     *Return value:*  the SCM object

 -- Function: lw6tsk_loader_t * lw6_scm_to_loader (SCM LOADER)
     LOADER:  the loader to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'loader'
     object.

     *Return value:*  a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_loader_smob (lw6_loader_smob_t *
          LOADER_SMOB)
     LOADER_SMOB:  the smob to free

     Frees a loader smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:*  none

 -- Function: SCM lw6_make_scm_db (lw6p2p_db_t * C_DB)
     C_DB:  the database object

     Creates an SCM 'db' object from C data.

     *Return value:*  the SCM object

 -- Function: lw6p2p_db_t * lw6_scm_to_db (SCM DB)
     DB:  the db to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'db'
     object.

     *Return value:*  a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_db_smob (lw6_db_smob_t * DB_SMOB)
     DB_SMOB:  the smob to free

     Frees a db smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:*  none

 -- Function: SCM lw6_make_scm_node (lw6p2p_node_t * C_NODE, SCM DB)
     C_NODE:  the node object

     DB:  the db (SCM object) referenced

     Creates an SCM 'node' object from C data.  Passing db enables the
     garbage collector not to free db until node is freed.

     *Return value:*  the SCM object

 -- Function: lw6p2p_node_t * lw6_scm_to_node (SCM NODE)
     NODE:  the node to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'node'
     object.

     *Return value:*  a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_node_smob (lw6_node_smob_t * NODE_SMOB)
     NODE_SMOB:  the smob to free

     Frees a node smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:*  none

 -- Function: int lw6_register_smobs ()
     Register all smobs to Guile.

     *Return value:*  1 on success, 0 if failed.

 -- Function: int lw6_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the liquidwar6 core module test suite, this will mostly test
     how Guile script integration works, loading a sample script and
     running it. It does not launch all the other sub modules tests.

     *Return value:*  1 if test is successfull, 0 on error.


File: liquidwar6.info,  Node: libbot,  Next: mod-brute,  Prev: libliquidwar6,  Up: C API

5.2 libbot
==========

5.2.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/bot/index.html'.

5.2.2 API
---------

 -- Function: int lw6bot_init (lw6bot_backend_t * BACKEND,
          lw6bot_seed_t * SEED)
     BACKEND:  backend to use

     SEED:  parameters required to build bot (game state, among other
     things)

     Initializes a bot object. Must be performed before any other call.
     The seed is absolutely required, for a bot really needs to know
     what map/context it's working on, including at creation time

     *Return value:*  1 on success, 0 on failure.

 -- Function: void lw6bot_quit (lw6bot_backend_t * BACKEND)
     BACKEND:  unitialize a bot backend

     Closes a bot, but does not free all ressources.

 -- Function: int lw6bot_next_move (lw6bot_backend_t * BACKEND, int *
          X, int * Y)
     BACKEND:  bot to work on

     X:  next x position (out param)

     Y:  next y position (out param)

     Queries the bot for its next move, this is actually the one
     interesting function in the whole bot API.

     *Return value:*  1 on success, 0 on failure.

 -- Function: char * lw6bot_repr (lw6bot_backend_t * BACKEND)
     BACKEND:  bot to represent

     Gives a human readable representation of bot

     *Return value:*  dynamically allocated string.

 -- Function: lw6sys_assoc_t * lw6bot_get_backends (int ARGC, char * []
          ARGV)
     ARGC:  argc, as passed to `main'

     ARGV:  argv, as passed to `main'

     List available bot backends. The hash contains pairs with id and
     name for each backend. The id is the technical key you can use to
     load the backend, the name is something more readable you can
     display in an interface. The backend objects themselves are not
     instanciated by this (in fact, they are, but released on the fly)
     you need to load and initialize them afterwards.

     *Return value:*  hash containing id/name pairs.

 -- Function: lw6bot_backend_t * lw6bot_create_backend (int ARGC, char
          * [] ARGV, char * NAME)
     ARGC:  argc, as passed to `main'

     ARGV:  argv, as passed to `main'

     NAME:  string containing bot key, typically got from
     `lw6bot_get_backends'

     Creates a bot backend, this is just about loading the dynamic
     library if needed, and/or check bot engine is available, and
     connect to it. It does not perform initialization.

     *Return value:*  bot backend.

 -- Function: void lw6bot_destroy_backend (lw6bot_backend_t * BACKEND)
     BACKEND:  bot backend to destroy

     Frees the ressources associated to a bot, which must have been
     properly uninitialized before.

     *Return value:*  none.

 -- Function: int lw6bot_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `bot' module test suite. Will try several engines and
     query basic moves.

     *Return value:*  1 if test is successfull, 0 on error.


File: liquidwar6.info,  Node: mod-brute,  Next: mod-follow,  Prev: libbot,  Up: C API

5.3 mod-brute
=============

5.3.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/bot/mod-brute/index.html'.

5.3.2 API
---------

 -- Function: void mod_brute_is_GPL_compatible ()
     Defined to tell mod_brute is compatible with GNU General Public
     License.  Of course it is. This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious. Having
     this declared is required.

     *Return value:*  none

 -- Function: lw6sys_module_pedigree_t * mod_brute_get_pedigree ()
     Returns the pedigree for mod-brute, giving details about the
     module, including name, description, licence, date/time of
     compilation.

     *Return value:*  dynamically allocated object.

 -- Function: lw6bot_backend_t * mod_brute_create_backend ()
     Creates a mod-brute backend.

     *Return value:*  backend pointer.


File: liquidwar6.info,  Node: mod-follow,  Next: mod-idiot,  Prev: mod-brute,  Up: C API

5.4 mod-follow
==============

5.4.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/bot/mod-follow/index.html'.

5.4.2 API
---------

 -- Function: void mod_follow_is_GPL_compatible ()
     Defined to tell mod_follow is compatible with GNU General Public
     License.  Of course it is. This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious. Having
     this declared is required.

     *Return value:*  none

 -- Function: lw6sys_module_pedigree_t * mod_follow_get_pedigree ()
     Returns the pedigree for mod-follow, giving details about the
     module, including name, description, licence, date/time of
     compilation.

     *Return value:*  dynamically allocated object.

 -- Function: lw6bot_backend_t * mod_follow_create_backend ()
     Creates a mod-follow backend.

     *Return value:*  backend pointer.


File: liquidwar6.info,  Node: mod-idiot,  Next: mod-random,  Prev: mod-follow,  Up: C API

5.5 mod-idiot
=============

5.5.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/bot/mod-idiot/index.html'.

5.5.2 API
---------

 -- Function: void mod_idiot_is_GPL_compatible ()
     Defined to tell mod_idiot is compatible with GNU General Public
     License.  Of course it is. This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious. Having
     this declared is required.

     *Return value:*  none

 -- Function: lw6sys_module_pedigree_t * mod_idiot_get_pedigree ()
     Returns the pedigree for mod-idiot, giving details about the
     module, including name, description, licence, date/time of
     compilation.

     *Return value:*  dynamically allocated object.

 -- Function: lw6bot_backend_t * mod_idiot_create_backend ()
     Creates a mod-idiot backend.

     *Return value:*  backend pointer.


File: liquidwar6.info,  Node: mod-random,  Next: libcfg,  Prev: mod-idiot,  Up: C API

5.6 mod-random
==============

5.6.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/bot/mod-random/index.html'.

5.6.2 API
---------

 -- Function: void mod_random_is_GPL_compatible ()
     Defined to tell mod_random is compatible with GNU General Public
     License.  Of course it is. This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious. Having
     this declared is required.

     *Return value:*  none

 -- Function: lw6sys_module_pedigree_t * mod_random_get_pedigree ()
     Returns the pedigree for mod-random, giving details about the
     module, including name, description, licence, date/time of
     compilation.

     *Return value:*  dynamically allocated object.

 -- Function: lw6bot_backend_t * mod_random_create_backend ()
     Creates a mod-random backend.

     *Return value:*  backend pointer.


File: liquidwar6.info,  Node: libcfg,  Next: libcli,  Prev: mod-random,  Up: C API

5.7 libcfg
==========

5.7.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/cfg/index.html'.

5.7.2 API
---------

 -- Function: int lw6cfg_parse_command_line (void * CONTEXT)
     CONTEXT:  opaque pointer on a context

     Overwrites any existing option with command line args

     *Return value:*  1 if success, 0 if error

 -- Function: int lw6cfg_defaults (void * CONTEXT)
     CONTEXT:  opaque pointer on a context

     Sets all values to their defaults.

     *Return value:*  1 if success, 0 if error

 -- Function: int lw6cfg_merge_env (void * CFG_CONTEXT)
     CFG_CONTEXT:  a context returned by `lw6cfg_init'

     Overwrites any existing vale in the config with environment
     variables prefixed by LW6_.

     *Return value:*  1 if successfull, 0 if error.

 -- Function: int lw6cfg_load_exp (char * USER_DIR, int * EXP)
     USER_DIR:  the user directory

     EXP:  the exp (out param)

     Gets exp from file.

     *Return value:*  1 on success, 0 on failure

 -- Function: int lw6cfg_save_exp (char * USER_DIR, int EXP)
     USER_DIR:  the user directory

     EXP:  the exp

     Saves exp to file.

     *Return value:*  1 on success, 0 on failure

 -- Function: char * lw6cfg_format (char * KEY, char * VALUE,
          lw6hlp_type_t TYPE)
     KEY:  the key of the value to format

     VALUE:  the value to format

     TYPE:  the type of the value to format

     Formats, converts, a given value to its cannonical representation.
     Booleans will be converted to true/false, strings containing
     integers will be stripped from junk, and so on. This is a
     performance killer but will ensure everything is correct.

     *Return value:*  a newly allocated string, containing the same as
     the input, but reformatted the pedantic way.

 -- Function: char * lw6cfg_format_guess_type (char * KEY, char * VALUE)
     KEY:  the key of the value to format

     VALUE:  the value to format

     Formats, converts, a given value to its cannonical representation.
     Booleans will be converted to true/false, strings containing
     integers will be stripped from junk, and so on. This is a
     performance killer but will ensure everything is correct. This
     function will automatically guess the type of the value from its
     description in the help system.

     *Return value:*  a newly allocated string, containing the same as
     the input, but reformatted the pedantic way.

 -- Function: int lw6cfg_load (void * CFG_CONTEXT, char * FILENAME)
     CFG_CONTEXT:  a context returned by `lw6cfg_init'

     FILENAME:  a file path, absolute or relative

     Loads the given config file, and stores its values into the current
     context. Parameters which are both in the config file and given as
     command line parameters, will be taken from the command-line.

     *Return value:*  1 if successfull, 0 if error.

 -- Function: int lw6cfg_option_exists (void * CONTEXT, char * KEY)
     CONTEXT:  context to query

     KEY:  key to search

     Returns wether a key exists within context or not.

     *Return value:*  1 if exists, 0 if not

 -- Function: char * lw6cfg_get_option (void * CONTEXT, char * KEY)
     CONTEXT:  context to query

     KEY:  key to search

     Returns the current value for a given query, the returned value is
     always a string, typically the string one would pass on the
     command line or set in a config file

     *Return value:*  pointer to string, must not be freed.

 -- Function: void lw6cfg_set_option (void * CONTEXT, char * KEY, char
          * VALUE)
     CONTEXT:  context to modify

     KEY:  key to search and change

     VALUE:  new value

     Sets a given key to the specified value, this is a string only
     function, pass the value you would pass on the command line or set
     in a config file.

     *Return value:*  none

 -- Function: int lw6cfg_get_option_int (void * CONTEXT, char * KEY)
     CONTEXT:  context to query

     KEY:  key to search

     Returns an option as an integer. Note that this function does not
     know wether the parameter should really be an integer or not, so
     you can call it even on non-integer values, but of course results
     will have no real meaning.

     *Return value:*  option value converted to int

 -- Function: void lw6cfg_set_option_int (void * CONTEXT, char * KEY,
          int VALUE)
     CONTEXT:  context to modify

     KEY:  key to search and change

     VALUE:  new value

     Set a config option to an integer value. Note that this function
     does not know wether the parameter should really be an integer or
     not, so you can call it even on non-integer values, at your own
     risk.

     *Return value:*  none.

 -- Function: int lw6cfg_get_option_bool (void * CONTEXT, char * KEY)
     CONTEXT:  context to query

     KEY:  key to search

     Returns an option as a boolean. Note that this function does not
     know wether the parameter should really be a boolean or not, so
     you can call it even on non-boolean values, but of course results
     will have no real meaning.

     *Return value:*  option value converted to boolean

 -- Function: void lw6cfg_set_option_bool (void * CONTEXT, char * KEY,
          int VALUE)
     CONTEXT:  context to modify

     KEY:  key to search and change

     VALUE:  new value

     Set a config option to a boolean value. Note that this function
     does not know wether the parameter should really be a boolean or
     not, so you can call it even on non-boolean values, at your own
     risk.

     *Return value:*  none.

 -- Function: int lw6cfg_must_be_saved (char * KEY)
     KEY:  key to test

     Tells wether a key should be saved in the config file.  Typically,
     some options you don't want to savem such as the location of the
     config file itself. Most of those non-savable parameters are
     path-related. This does not mean no paths are saved in the config
     file.

     *Return value:*  1 if must be saved, 0 if not

 -- Function: int lw6cfg_save (void * CFG_CONTEXT, char * FILENAME)
     CFG_CONTEXT:  a context returned by `lw6cfg_init'

     FILENAME:  a file path, absolute or relative

     Save current options into the given config file. Before saving the
     file, all command line arguments will be read and will override
     current values. This means the saved file will contain values
     given as command line arguments.

     *Return value:*  1 if successfull, 0 if error.

 -- Function: void * lw6cfg_init (int ARGC, char * [] ARGV)
     ARGC:  number of command line arguments, as given to `main'

     ARGV:  a list of command line arguments, as given to `main'

     Initializes a config context object. This object is hidden behind
     an opaque void * pointer to avoid direct access to its elements.

     *Return value:*  an opaque pointer, must be freed with
     `lw6cfg_quit'.

 -- Function: void lw6cfg_quit (void * CFG_CONTEXT)
     CFG_CONTEXT:  a context returned by `lw6cfg_init'

     Frees a config cfg_context object. You must call this once you're
     done with the context.

     *Return value:*  none.

 -- Function: void lw6cfg_reset (int ARGC, char * [] ARGV)
     ARGC:  number of command line arguments, as given to `main'

     ARGV:  a list of command line arguments, as given to `main'

     Overwrites the config file with defaults.  Use this to get rid of
     old configurations.

 -- Function: int lw6cfg_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `cfg' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.

 -- Function: char * lw6cfg_unified_get_value (int ARGC, char * []
          ARGV, char * KEY)
     ARGC:  number of command-line args, as passed to `main'

     ARGV:  arry of command-line args, as passed to `main'

     KEY:  the key to query

     Unified "value" getter, which gets informations from environment
     variables, command line, and config file. The rules is that the
     command-line argument always has the last word. It will override
     any other value.  Follows environment variables, which will be
     used if no command-line argument is supplied. Note that these are
     "LW6_" prefixed and uppercased environment variables as opposed to
     lowercased and "dash-separated" keys. Finally, if there's no
     environment variable, nor any config-file corresponding entry, the
     value will be searched in the config file.  If there's no
     information in the config file, NULL is returned.

     *Return value:*  a string with the value. Can be NULL. Must be
     freed.

 -- Function: char * lw6cfg_unified_get_user_dir (int ARGC, char * []
          ARGV)
     ARGC:  number of command-line args, as passed to `main'

     ARGV:  arry of command-line args, as passed to `main'

     Gets the user dir, taking all parameters in account, that's to say
     the "LW6_USER_DIR" env value, the "-user-dir" command-line
     paramater and the LW6DEF_USER_DIR config file entry.

     *Return value:*  the directory path, might be NULL, must be freed.

 -- Function: char * lw6cfg_unified_get_log_file (int ARGC, char * []
          ARGV)
     ARGC:  number of command-line args, as passed to `main'

     ARGV:  arry of command-line args, as passed to `main'

     Gets the log file, taking all parameters in account, that's to say
     the "LW6_LOG_FILE" env value, the "-log-file" command-line
     paramater and the LW6DEF_LOG_FILE config file entry.

     *Return value:*  the directory path, might be NULL, must be freed.

 -- Function: char * lw6cfg_unified_get_music_path (int ARGC, char * []
          ARGV)
     ARGC:  number of command-line args, as passed to `main'

     ARGV:  arry of command-line args, as passed to `main'

     Gets the user dir, taking all parameters in account, that's to say
     the "LW6_MUSIC_PATH" env value, the "-music-path" command-line
     paramater and the LW6DEF_MUSIC_PATH config file entry.

     *Return value:*  the directory path, might be NULL, must be freed.

 -- Function: char * lw6cfg_unified_get_map_path (int ARGC, char * []
          ARGV)
     ARGC:  number of command-line args, as passed to `main'

     ARGV:  arry of command-line args, as passed to `main'

     Gets the user dir, taking all parameters in account, that's to say
     the "LW6_MAP_PATH" env value, the "-map-path" command-line
     paramater and the LW6DEF_MAP_PATH config file entry.

     *Return value:*  the directory path, might be NULL, must be freed.

 -- Function: char * lw6cfg_xml_element (lw6hlp_type_t TYPE)
     TYPE:  type as an enum

     Returns the string corresponding to a given type, suitable for use
     in XML files. For instance if you pass `LW6HLP_TYPE_INT' then you
     will obtain the string int (string of 3 chars containing i, n and
     t.

     *Return value:*  string, must not be freed.

 -- Function: void lw6cfg_read_xml_int (char * XML_KEY, char *
          XML_VALUE, char * TARGET_KEY, int * VALUE)
     XML_KEY:  key found in XML file

     XML_VALUE:  value found in XML file

     TARGET_KEY:  key we're searching for

     VALUE:  the value if found (out param)

     Tries to find a value in a key/value pair. If `xml_key' and
     `target_key' match, then will put the corresponding value
     (converted to int) in the `value' param. Typically, you would call
     this in a loop on every single entry found in an XML file, in an
     expat callback.

     *Return value:*  none.

 -- Function: void lw6cfg_read_xml_bool (char * XML_KEY, char *
          XML_VALUE, char * TARGET_KEY, int * VALUE)
     XML_KEY:  key found in XML file

     XML_VALUE:  value found in XML file

     TARGET_KEY:  key we're searching for

     VALUE:  the value if found (out param)

     Tries to find a value in a key/value pair. If `xml_key' and
     `target_key' match, then will put the corresponding value
     (converted to boolean) in the `value' param. Typically, you would
     call this in a loop on every single entry found in an XML file, in
     an expat callback.

     *Return value:*  none.

 -- Function: void lw6cfg_read_xml_float (char * XML_KEY, char *
          XML_VALUE, char * TARGET_KEY, float * VALUE)
     XML_KEY:  key found in XML file

     XML_VALUE:  value found in XML file

     TARGET_KEY:  key we're searching for

     VALUE:  the value if found (out param)

     Tries to find a value in a key/value pair. If `xml_key' and
     `target_key' match, then will put the corresponding value
     (converted to float) in the `value' param. Typically, you would
     call this in a loop on every single entry found in an XML file, in
     an expat callback.

     *Return value:*  none.

 -- Function: void lw6cfg_read_xml_string (char * XML_KEY, char *
          XML_VALUE, char * TARGET_KEY, char ** VALUE)
     XML_KEY:  key found in XML file

     XML_VALUE:  value found in XML file

     TARGET_KEY:  key we're searching for

     VALUE:  the value if found (out param)

     Tries to find a value in a key/value pair. If `xml_key' and
     `target_key' match, then will put the corresponding value (as a
     string) in the `value' param. Typically, you would call this in a
     loop on every single entry found in an XML file, in an expat
     callback.

     *Return value:*  none.

 -- Function: void lw6cfg_read_xml_color (char * XML_KEY, char *
          XML_VALUE, char * TARGET_KEY, lw6sys_color_8_t * VALUE)
     XML_KEY:  key found in XML file

     XML_VALUE:  value found in XML file

     TARGET_KEY:  key we're searching for

     VALUE:  the value if found (out param)

     Tries to find a value in a key/value pair. If `xml_key' and
     `target_key' match, then will put the corresponding value
     (converted to a color) in the `value' param. Typically, you would
     call this in a loop on every single entry found in an XML file, in
     an expat callback.

     *Return value:*  none.

 -- Function: int lw6cfg_read_key_value_xml_file (char * FILENAME,
          lw6cfg_read_xml_callback_func_t CALLBACK_FUNC, void *
          CALLBACK_DATA)
     FILENAME:  full path of file to read

     CALLBACK_FUNC:  callback function to be called on each element

     CALLBACK_DATA:  additionnal pointer passed to callback function

     Will parse a file and call the given callback on each element.
     This is an over-simplified way to read XML file, in fact we just
     explain plain non-nested simple elements but this is exactly what
     LW config files are made of.

     *Return value:*  1 on success, 0 on failure.

 -- Function: void lw6cfg_write_xml_int (FILE * F, char * KEY, int
          VALUE)
     F:  file to write data to (append mode)

     KEY:  key to write

     VALUE:  value to write

     Writes an int entry into an opened XML file.

     *Return value:*  none.

 -- Function: void lw6cfg_write_xml_bool (FILE * F, char * KEY, int
          VALUE)
     F:  file to write data to (append mode)

     KEY:  key to write

     VALUE:  value to write

     Writes a boolean entry into an opened XML file.

     *Return value:*  none.

 -- Function: void lw6cfg_write_xml_float (FILE * F, char * KEY, float
          VALUE)
     F:  file to write data to (append mode)

     KEY:  key to write

     VALUE:  value to write

     Writes a float entry into an opened XML file.

     *Return value:*  none.

 -- Function: void lw6cfg_write_xml_string (FILE * F, char * KEY, char
          * VALUE)
     F:  file to write data to (append mode)

     KEY:  key to write

     VALUE:  value to write

     Writes a string entry into an opened XML file.

     *Return value:*  none.

 -- Function: void lw6cfg_write_xml_color (FILE * F, char * KEY,
          lw6sys_color_8_t VALUE)
     F:  file to write data to (append mode)

     KEY:  key to write

     VALUE:  value to write

     Writes a color entry into an opened XML file.

     *Return value:*  none.

 -- Function: void lw6cfg_write_xml_guess_type (FILE * F, char * KEY,
          char * VALUE)
     F:  file to write data to (append mode)

     KEY:  key to write

     VALUE:  value to write

     Writes an entry into an opened XML file, will try and guess type
     from the internal help system, typically, if this is a standard
     config file entry (the one documented by the about command line
     function) it will pick up the right type. The reason not to use
     this all the times is that sometimes, one might to to store
     non-standard options, and additionnally, guessing the type does
     consume some CPU.

     *Return value:*  none.


File: liquidwar6.info,  Node: libcli,  Next: mod-http,  Prev: libcfg,  Up: C API

5.8 libcli
==========

5.8.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/cli/index.html'.

5.8.2 API
---------

 -- Function: int lw6cli_init (lw6cli_backend_t * BACKEND)
     BACKEND:  backend to use

     Initializes a client backend. Must be performed before any other
     call.

     *Return value:*  1 on success, 0 on failure

 -- Function: void lw6cli_quit (lw6cli_backend_t * BACKEND)
     BACKEND:  unitialize a cli backend

     Closes a cli, but does not free all ressources.

 -- Function: int lw6cli_process_oob (lw6cli_backend_t * BACKEND,
          lw6nod_info_t * NODE_INFO, lw6cli_oob_data_t * OOB_DATA)
     BACKEND:  backend to use

     NODE_INFO:  information on the current node

     OOB_DATA:  data of the out-of-band request

     Processes the required out-of-band tasks, this typically, for a
     client, includes broadcasting. Depending on parameters passed in
     oob_data, might actually do a broadcast or simply call a given
     host and see what's the answer.  A typicall exchange is PING then
     INFO and finally LIST. It's the responsability of the client to
     take the OOB initiative and contact the server.

     *Return value:*  1 on success, 0 on failure.

 -- Function: lw6cnx_connection_t * lw6cli_open (lw6cli_backend_t *
          BACKEND, char * LOCAL_URL, char * REMOTE_URL, char *
          REMOTE_IP, int REMOTE_PORT, char * PASSWORD, u_int64_t
          LOCAL_ID, u_int64_t REMOTE_ID, int DNS_OK, int
          NETWORK_RELIABILITY, lw6cnx_recv_callback_t
          RECV_CALLBACK_FUNC, void * RECV_CALLBACK_DATA)
     BACKEND:  backend to use

     LOCAL_URL:  our local public url

     REMOTE_URL:  the remote url we want to connect to

     REMOTE_IP:  remote IP address

     REMOTE_PORT:  remote IP port

     PASSWORD:  password to use (if needed)

     LOCAL_ID:  our local id

     REMOTE_ID:  the remote id

     DNS_OK:  wether the remote announced URL matches DNS information

     NETWORK_RELIABILITY:  network reliability (the highest, the better)

     RECV_CALLBACK_FUNC:  callback func to be called when data is
     received

     RECV_CALLBACK_DATA:  pointer on additionnal data to pass to
     callback func

     Opens a connection with a remote host. Be carefull with the
     implementation of `recv_callback_func', it should be at least
     reentrant, and when it accesses shared data, use locks.

     *Return value:*  new object.

 -- Function: void lw6cli_close (lw6cli_backend_t * BACKEND,
          lw6cnx_connection_t * CONNECTION)
     BACKEND:  backend to use

     CONNECTION:  connection to use

     Closes a connection, this will free the connection object.

     *Return value:*  none.

 -- Function: int lw6cli_send (lw6cli_backend_t * BACKEND,
          lw6cnx_connection_t * CONNECTION, u_int32_t
          PHYSICAL_TICKET_SIG, u_int32_t LOGICAL_TICKET_SIG, u_int64_t
          LOGICAL_FROM_ID, u_int64_t LOGICAL_TO_ID, char * MESSAGE)
     BACKEND:  backend to use

     CONNECTION:  connection to use

     PHYSICAL_TICKET_SIG:  signature of physical sender

     LOGICAL_TICKET_SIG:  signature of logical sender

     LOGICAL_FROM_ID:  id of logical sender

     LOGICAL_TO_ID:  id of logicial target

     MESSAGE:  text of message to send

     Sends a message to a peer over a given connection.

     *Return value:*  1 on success, 0 on failure.

 -- Function: void lw6cli_poll (lw6cli_backend_t * BACKEND,
          lw6cnx_connection_t * CONNECTION)
     BACKEND:  backend to use

     CONNECTION:  connection to use

     Performs required duty on connection, depending on the backend,
     this can include sending messages and/or receiving them.  Must be
     called on a regular basis.

     *Return value:*  none.

 -- Function: char * lw6cli_repr (lw6cli_backend_t * BACKEND,
          lw6cnx_connection_t * CONNECTION)
     BACKEND:  backend to use

     CONNECTION:  connection to represent

     Gives a human readable representation of the connection.

     *Return value:*  dynamically allocated string.

 -- Function: lw6cli_oob_t * lw6cli_oob_new (char * PUBLIC_URL,
          lw6cli_verify_callback_func_t VERIFY_CALLBACK_FUNC, void *
          VERIFY_CALLBACK_DATA)
     PUBLIC_URL:  the address of the distant server to test

     VERIFY_CALLBACK_FUNC:  a function which will be called when a node
     has been verified

     VERIFY_CALLBACK_DATA:  additionnal data passed to the callback func

     Create a new OOB structure, copying required objects.  We need to
     make copies for this is for usage in a separate thread. The thread
     member is not set here since the right way to do things is first to
     set up data then to fire the thread.

     *Return value:*  new object

 -- Function: void lw6cli_oob_free (lw6cli_oob_t * OOB)
     OOB:  the object to free

     Frees an OOB structure.

     *Return value:*  none

 -- Function: char * lw6cli_default_backends ()
     Returns the list of the default cli backends.

     *Return value:*  comma separated string, must not be freed.

 -- Function: lw6sys_assoc_t * lw6cli_get_backends (int ARGC, char * []
          ARGV)
     ARGC:  argc, as passed to `main'

     ARGV:  argv, as passed to `main'

     List available cli backends. The hash contains pairs with id and
     name for each backend. The id is the technical key you can use to
     load the backend, the name is something more readable you can
     display in an interface. The backend objects themselves are not
     instanciated by this (in fact, they are, but released on the fly)
     you need to load and initialize them afterwards.

     *Return value:*  hash containing id/name pairs.

 -- Function: lw6cli_backend_t * lw6cli_create_backend (int ARGC, char
          * [] ARGV, char * NAME)
     ARGC:  argc, as passed to `main'

     ARGV:  argv, as passed to `main'

     NAME:  string containing cli key, typically got from
     `lw6cli_get_backends'

     Creates a cli backend, this is just about loading the dynamic
     library if needed, and/or check cli engine is available, and
     connect to it. It does not perform initialization.

     *Return value:*  cli backend.

 -- Function: void lw6cli_destroy_backend (lw6cli_backend_t * BACKEND)
     BACKEND:  backend to destroy

     Destroys a cli backend.

     *Return value:*  none.

 -- Function: int lw6cli_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `cli' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.


File: liquidwar6.info,  Node: mod-http,  Next: mod-tcp,  Prev: libcli,  Up: C API

5.9 mod-http
============

5.9.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/cli/mod-http/index.html'.

5.9.2 API
---------

 -- Function: void mod_http_is_GPL_compatible ()
     Defined to tell mod_http is compatible with GNU General Public
     License.  Of course it is. This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious. Having
     this declared is required.

     *Return value:*  none

 -- Function: lw6sys_module_pedigree_t * mod_http_get_pedigree ()
     Returns the pedigree for mod-http, giving details about the module,
     including name, description, licence, date/time of compilation.

     *Return value:*  dynamically allocated object.

 -- Function: lw6cli_backend_t * mod_http_create_backend ()
     Creates a mod-http backend.

     *Return value:*  backend pointer.


File: liquidwar6.info,  Node: mod-tcp,  Next: mod-udp,  Prev: mod-http,  Up: C API

5.10 mod-tcp
============

5.10.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/cli/mod-tcp/index.html'.

5.10.2 API
----------

 -- Function: void mod_tcp_is_GPL_compatible ()
     Defined to tell mod_tcp is compatible with GNU General Public
     License.  Of course it is. This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious. Having
     this declared is required.

     *Return value:*  none

 -- Function: lw6sys_module_pedigree_t * mod_tcp_get_pedigree ()
     Returns the pedigree for mod-tcp, giving details about the module,
     including name, description, licence, date/time of compilation.

     *Return value:*  dynamically allocated object.

 -- Function: lw6cli_backend_t * mod_tcp_create_backend ()
     Creates a mod-tcp backend.

     *Return value:*  backend pointer.


File: liquidwar6.info,  Node: mod-udp,  Next: libcns,  Prev: mod-tcp,  Up: C API

5.11 mod-udp
============

5.11.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/cli/mod-udp/index.html'.

5.11.2 API
----------

 -- Function: void mod_udp_is_GPL_compatible ()
     Defined to tell mod_udp is compatible with GNU General Public
     License.  Of course it is. This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious. Having
     this declared is required.

     *Return value:*  none

 -- Function: lw6sys_module_pedigree_t * mod_udp_get_pedigree ()
     Returns the pedigree for mod-udp, giving details about the module,
     including name, description, licence, date/time of compilation.

     *Return value:*  dynamically allocated object.

 -- Function: lw6cli_backend_t * mod_udp_create_backend ()
     Creates a mod-udp backend.

     *Return value:*  backend pointer.


File: liquidwar6.info,  Node: libcns,  Next: libcnx,  Prev: mod-udp,  Up: C API

5.12 libcns
===========

5.12.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/cns/index.html'.

5.12.2 API
----------

 -- Function: void lw6cns_handler_install (lw6cns_callback_func_t
          CALLBACK)
     CALLBACK:  handler function.

     Installs a console handler.

     *Return value:*  none.

 -- Function: void lw6cns_handler_poll ()
     Polling function for console, must be called on a regular basis.

     *Return value:*  none.

 -- Function: void lw6cns_handler_remove ()
     Remove console handler.

     *Return value:*  none.

 -- Function: void lw6cns_history_add_if_needed (char * LINE)
     LINE:  line to add

     Adds a line to the console history, won't add it if it's NULL or
     empty.

     *Return value:*  none.

 -- Function: int lw6cns_support ()
     Tells wether console is supported.

     *Return value:*  1 if console can be enabled, 0 if not

 -- Function: int lw6cns_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `cns' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.


File: liquidwar6.info,  Node: libcnx,  Next: libdat,  Prev: libcns,  Up: C API

5.13 libcnx
===========

5.13.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/cnx/index.html'.

5.13.2 API
----------

 -- Function: lw6cnx_connection_t * lw6cnx_connection_new (char *
          LOCAL_URL, char * REMOTE_URL, char * REMOTE_IP, int
          REMOTE_PORT, char * PASSWORD, u_int64_t LOCAL_ID, u_int64_t
          REMOTE_ID, int DNS_OK, int NETWORK_RELIABILITY,
          lw6cnx_recv_callback_t RECV_CALLBACK_FUNC, void *
          RECV_CALLBACK_DATA)
     LOCAL_URL:  the local public URL

     REMOTE_URL:  the remote public URL

     REMOTE_IP:  the remote IP address

     REMOTE_PORT:  the remote port

     PASSWORD:  the password to use

     LOCAL_ID:  the local ID

     REMOTE_ID:  the remote ID

     DNS_OK:  1 if no DNS mismatch, 0 if IP does not match public URL

     NETWORK_RELIABILITY:  drop 1 out of X packets

     RECV_CALLBACK_FUNC:  a callback to call when data is received

     RECV_CALLBACK_DATA:  additionnal data to pass to the callback

     Create a connection object. This object in itself does nothing,
     it's just to share common structures among modules, more
     precisely, between cli and srv code.  It's the responsability off
     the caller/backend to handle the `backend_specific_data' field
     which is NULL after this call.

     *Return value:*  newly allocated object.

 -- Function: void lw6cnx_connection_free (lw6cnx_connection_t *
          CONNECTION)
     CONNECTION:  object to free

     Frees a connection object. It's the responsibility of the
     caller/backend to handle the `backend_specific_data' field.

     *Return value:*  none.

 -- Function: int lw6cnx_connection_should_send_foo
          (lw6cnx_connection_t * CONNECTION, int64_t NOW)
     CONNECTION:  the connection concerned

     NOW:  the current timestamp

     Tells wether a new foo message must be issued.

     *Return value:*  1 if true, 0 if false.

 -- Function: void lw6cnx_connection_init_foo_bar_key
          (lw6cnx_connection_t * CONNECTION, int64_t NOW, int
          NEXT_FOO_DELAY)
     CONNECTION:  the connection concerned

     NOW:  the current timestamp

     NEXT_FOO_DELAY:  the delay (msec) before next foo message is sent

     Generates a new foo_bar_key, and schedules the next foo message
     send timestamp.

     *Return value:*  none.

 -- Function: int lw6cnx_connection_lock_send (lw6cnx_connection_t *
          CONNECTION)
     CONNECTION:  the connexion to lock

     Acquires a "send" lock on the connexion, the idea is to avoid too
     threads sending data using the same socket at the same time.  Note
     that each backend must call this when accessing the socket,
     there's no top-level lock for the sake of performance.

     *Return value:*  1 on success, 0 if not.

 -- Function: void lw6cnx_connection_unlock_send (lw6cnx_connection_t *
          CONNECTION)
     CONNECTION:  the connexion to lock

     Releases a "send" lock on the connexion, the idea is to avoid too
     threads sending data using the same socket at the same time.  Note
     that each backend must call this when accessing the socket,
     there's no top-level lock for the sake of performance.

     *Return value:*  none.

 -- Function: int lw6cnx_connection_reliability_filter
          (lw6cnx_connection_t * CONNECTION)
     CONNECTION:  the connexion concerned

     Will filter and return true only in "rare" cases when packets must
     be artificially dropped for testing purpose.

     *Return value:*  1 if message must be sent/received, 0 if not

 -- Function: char * lw6cnx_password_checksum (char * SEED, char *
          PASSWORD)
     SEED:  a seed to blur the password, can be NULL

     PASSWORD:  the password, can be NULL

     Calculates the checksum of a password, and returns it as a string,
     ready to be sent on the network.  If password is empty or NULL,
     then an empty (but not NULL unless internal error) string will be
     returned. All LW6 protocols should send these checksums instead of
     real passwords, then on server side value can be checked against
     both real password and its checksum. The seed is here so that
     eavesdropper can't reuse the checksum to connect on random
     sessions. Seed can typically be the node 'public_url' value.

     *Return value:*  a dynamically allocated string

 -- Function: int lw6cnx_password_verify (char * SEED, char *
          PASSWORD_HERE, char * PASSWORD_RECEIVED)
     SEED:  a seed to blur the password, can be NULL

     PASSWORD_HERE:  the local password, can be NULL

     PASSWORD_RECEIVED:  the password received from network, can be NULL

     Tells wether a password received over the network is valid.  The
     `password_here' argument (the local password) will be checksumed
     so that `password_received' is checked against both clear and
     checksumed values, so it can be in any form.

     *Return value:*  1 if OK, passwords are the same, 0 if not.

 -- Function: int lw6cnx_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `cnx' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.

 -- Function: void lw6cnx_ticket_table_zero (lw6cnx_ticket_table_t *
          TICKET_TABLE)
     TICKET_TABLE:  the ticket table to fill with zero

     Fills the ticket table struct with 0s.

     *Return value:*  none.

 -- Function: int lw6cnx_ticket_table_init (lw6cnx_ticket_table_t *
          TICKET_TABLE, int HASH_SIZE)
     TICKET_TABLE:  the ticket table to init

     HASH_SIZE:  the hash size for both recv/send hashs

     Initialize a ticket table, that is, set it up with two empty
     hashs. Recv hash is filled automatically as it's queried for
     tickets, send hash must be filled explicitely with info from the
     network.

     *Return value:*  none.

 -- Function: void lw6cnx_ticket_table_clear (lw6cnx_ticket_table_t *
          TICKET_TABLE)
     TICKET_TABLE:  the ticket table to clear

     Clears the object (frees memory).

     *Return value:*  none.

 -- Function: u_int64_t lw6cnx_ticket_table_get_recv
          (lw6cnx_ticket_table_t * TICKET_TABLE, char * PEER_ID)
     TICKET_TABLE:  the ticket table to query

     PEER_ID:  the id of remote node

     Gets the ticket used to communicate with peer, to check its
     incoming (recv) messages. If ticket does not exist yet, it's
     automatically generated so tunction will always return a non-zero
     value.

     *Return value:*  the ticket used to check incoming messages.

 -- Function: void lw6cnx_ticket_table_ack_recv (lw6cnx_ticket_table_t
          * TICKET_TABLE, char * PEER_ID)
     TICKET_TABLE:  the ticket table to query

     PEER_ID:  the id of remote node

     Acknowledges the ticket used to communicate with peer, to check
     its incoming (recv) messages has been received. This is to avoid
     sending it again when it has been received, as it's kept "forever"
     by peer, we never need to send it again.

     *Return value:*  none.

 -- Function: int lw6cnx_ticket_table_was_recv_exchanged
          (lw6cnx_ticket_table_t * TICKET_TABLE, char * PEER_ID)
     TICKET_TABLE:  the ticket table to query

     PEER_ID:  the id of remote node

     Acknowledges the ticket used to communicate with peer, to check
     its incoming (recv) messages has been received. This is to avoid
     sending it again when it has been received, as it's kept "forever"
     by peer, we never need to send it again.

     *Return value:*  the ticket used to check incoming messages.

 -- Function: u_int64_t lw6cnx_ticket_table_get_send
          (lw6cnx_ticket_table_t * TICKET_TABLE, char * PEER_ID)
     TICKET_TABLE:  the ticket table to query

     PEER_ID:  the id of remote node

     Gets the ticket used to communicate with peer, to stamp the
     outgoing messages. If ticket does not exist yet, 0 is returned,
     indeed this value must be initialized with the value the peer
     gives us.

     *Return value:*  the ticket used to stamp outgoing messages.

 -- Function: void lw6cnx_ticket_table_set_send (lw6cnx_ticket_table_t
          * TICKET_TABLE, char * PEER_ID, u_int64_t SEND_TICKET)
     TICKET_TABLE:  the ticket table to query

     PEER_ID:  the id of remote node

     SEND_TICKET:  the ticket to use to stamp outgoing messages

     Sets the ticket used to communicate with peer, to stamp the
     outgoing (send) messages. This value should be received from the
     network. Note that once it's set, it's impossible to change it, it
     will remain the same for the whole duration of the node existence.

     *Return value:*  NULL


File: liquidwar6.info,  Node: libdat,  Next: libdef,  Prev: libcnx,  Up: C API

5.14 libdat
===========

5.14.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/dat/index.html'.

5.14.2 API
----------

 -- Function: int lw6dat_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `dat' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.

 -- Function: lw6dat_warehouse_t * lw6dat_warehouse_new (u_int64_t
          LOCAL_NODE_ID)
     Creates a new warehouse object.

     *Return value:*  new object, allocated dynamically

 -- Function: void lw6dat_warehouse_free (lw6dat_warehouse_t *
          WAREHOUSE)
     WAREHOUSE:  the object to free

     Frees a warehouse object.

     *Return value:*  new object, allocated dynamically

 -- Function: void lw6dat_warehouse_purge (lw6dat_warehouse_t *
          WAREHOUSE)
     WAREHOUSE:  the object to purge

     Purges a warehouse object.

     *Return value:*  new object, allocated dynamically

 -- Function: int lw6dat_warehouse_get_nb_nodes (lw6dat_warehouse_t *
          WAREHOUSE)
     WAREHOUSE:  the warehouse object to query.

     Tells how many nodes are registered in the object.

     *Return value:*  integer, number of nodes

 -- Function: u_int64_t lw6dat_warehouse_get_local_id
          (lw6dat_warehouse_t * WAREHOUSE)
     WAREHOUSE:  the warehouse object to query.

     Returns the local id.

     *Return value:*  64-bit id.

 -- Function: int lw6dat_warehouse_get_local_serial (lw6dat_warehouse_t
          * WAREHOUSE)
     WAREHOUSE:  the warehouse object to query.

     Returns the latest (highest) serial number given for local node.

     *Return value:*  integer, latest serial number

 -- Function: int lw6dat_warehouse_put_atom_str (lw6dat_warehouse_t *
          WAREHOUSE, u_int64_t LOGICAL_FROM, char * FULL_STR)
     WAREHOUSE:  warehouse object to use

     LOGICAL_FROM:  from who the message came from originally

     FULL_STR:  message of the form serial i n seq from cmd

     Puts an atomic string in the object, this kind of string is
     typically received on the network.

     *Return value:*  1 on success, 0 on error

 -- Function: int lw6dat_warehouse_calc_serial_draft_and_reference
          (lw6dat_warehouse_t * WAREHOUSE)
     WAREHOUSE:  object to work on

     The various `get_seq' functions can perform slowly if we don't
     pre-calculate the serial number of draft and reference atoms. So
     this calculation is not within the functions themselves but can be
     cached by using this function. Just call it and after you might
     query the object for reference and draft info.

     *Return value:*  1 on success, 0 on failure.

 -- Function: int lw6dat_warehouse_put_local_msg (lw6dat_warehouse_t *
          WAREHOUSE, char * MSG)
     WAREHOUSE:  warehouse object to use

     MSG:  message

     Puts a message in the object. The message will be splitted into
     several atoms if needed, it can be arbitrary long.

     *Return value:*  1 on success, 0 on error

 -- Function: int lw6dat_warehouse_get_seq_min (lw6dat_warehouse_t *
          WAREHOUSE)
     WAREHOUSE:  object to query

     Tells the lowest seq referenced in the warehouse. Does not mean
     this is the lowest ever received, only we really have no chances
     of going below that point, nothing is stored, either complete or
     partial, below that.

     *Return value:*  integer.

 -- Function: int lw6dat_warehouse_get_seq_max (lw6dat_warehouse_t *
          WAREHOUSE)
     WAREHOUSE:  object to query

     Tells the highest seq referenced in the warehouse. Does not mean
     an actual message can be built from it, only we've got some traces
     of such a high seq.

     *Return value:*  integer.

 -- Function: int lw6dat_warehouse_get_seq_draft (lw6dat_warehouse_t *
          WAREHOUSE)
     WAREHOUSE:  object to query

     Tells the highest seq that can be considered as a valid draft.
     This is not exactly the maximimum seq encountered, for here we
     want at least one complete message and not just one chunk of data
     (an atom) referring to a high seq, we want the complete stuff.
     However there can be missing messages in between.

     *Return value:*  integer.

 -- Function: int lw6dat_warehouse_get_seq_reference
          (lw6dat_warehouse_t * WAREHOUSE)
     WAREHOUSE:  object to query

     Tells the highest seq that can be considered as a reference.
     Being considered as a reference means we received all messages for
     this seq *and* at least one message from the following seq, and
     this for every node involved. This being said, we're sure to have
     the right information, nothing is missing.

     *Return value:*  integer.

 -- Function: lw6sys_list_t * lw6dat_warehouse_get_msg_list_by_seq
          (lw6dat_warehouse_t * WAREHOUSE, int SEQ_MIN, int SEQ_MAX)
     WAREHOUSE:  object to query

     SEQ_MIN:  lowest sequence number (round or chat index)

     SEQ_MAX:  highest sequence number (round or chat index)

     Gets the list of messages for a given sequence (round or chat
     index), polling all the nodes. The from and to boundaries are
     included.

     *Return value:*  a list of strings.

 -- Function: lw6sys_list_t *
lw6dat_warehouse_get_atom_str_list_not_sent (lw6dat_warehouse_t *
          WAREHOUSE, u_int64_t LOGICAL_TO)
     WAREHOUSE:  object to query

     LOGICAL_TO:  the id of the node that we want to send data to

     Returns all the messages that were not sent for the given
     warehouse.

     *Return value:*  a list of strings, containing atoms.


File: liquidwar6.info,  Node: libdef,  Next: libdsp,  Prev: libdat,  Up: C API

5.15 libdef
===========

5.15.1 Overview
---------------

5.15.2 API
----------

There are no functions in `libdef', only a header file with constants.


File: liquidwar6.info,  Node: libdsp,  Next: libdyn,  Prev: libdef,  Up: C API

5.16 libdsp
===========

5.16.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/dsp/index.html'.

5.16.2 API
----------

 -- Function: lw6dsp_backend_t * lw6dsp_create_backend (int ARGC, char
          * [] ARGV, char * GFX_BACKEND_NAME)
     ARGC:  argc as passed to `main'

     ARGV:  argv as passed to `main'

     GFX_BACKEND_NAME:  the id/name of the gfx backend to use

     Creates a dsp_backend object. The created object won't be
     displaying things until `lw6dsp_init' is called. No thread is
     created, but the graphics backend is loaded into memory. If video
     mode is not available, it will appear later, when trying to start
     displaying things, this function only allocates memory and checks
     code is available in case of a dynamically loaded gfx backend.

     *Return value:*  a newly allocated object.

 -- Function: void lw6dsp_destroy_backend (lw6dsp_backend_t *
          DSP_BACKEND)
     DSP_BACKEND:  the dsp_backend object to free

     Frees all ressources used by a dsp_backend object. Note that you
     must call this on a inactive 'stopped' dsp_backend object.

     *Return value:*  none.

 -- Function: char * lw6dsp_repr (lw6dsp_backend_t * DSP_BACKEND)
     DSP_BACKEND:  the object to represent

     Gives a short human-readable description of the object.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: int lw6dsp_init (lw6dsp_backend_t * DSP_BACKEND,
          lw6dsp_param_t * PARAM, lw6gui_resize_callback_func_t
          RESIZE_CALLBACK)
     DSP_BACKEND:  the dsp_backend to start

     PARAM:  parameters to pass to the display funcs

     RESIZE_CALLBACK:  a function which will be called when there's a
     resize event

     Starts a dsp_backend object, that is, fire a separate thread and
     start rendering. This will set up a video mode, so it's very
     likely to fail if for some reason the video context isn't right,
     for instance if you try to set up graphical stuff but only have
     console access.

     *Return value:*  1 if success, 0 if error.

 -- Function: void lw6dsp_quit (lw6dsp_backend_t * DSP_BACKEND)
     DSP_BACKEND:  the dsp_backend to stop

     Stops a dsp_backend, that is, cancel rendering and unset the video
     mode, hardware shouldn't be used any more after this call.

     *Return value:*  none.

 -- Function: int lw6dsp_update (lw6dsp_backend_t * DSP_BACKEND,
          lw6dsp_param_t * PARAM)
     DSP_BACKEND:  the dsp_backend to update

     PARAM:  parameters to pass to the dsp_backend funcs

     Passes a new set of parameters to the display function.  This is
     in fact the only way to pass informations to the dsp_backend
     object once it's been started. This function will acquire a mutex,
     copy parameters, then give control back to the main thread while
     display keeps on going with new parameters in the background. It
     will get input informations.  You really must call it often
     otherwise the screen won't get updated, or, at least, it will
     always display the same informations.  It should be reasonnable to
     call this 10 or 20 times per second, the display itself can be
     faster, run at 60 or 100 fps to show smooth animation (eye candy).

     *Return value:*  1 if success, 0 if error.

 -- Function: int lw6dsp_get_nb_frames (lw6dsp_backend_t * DSP_BACKEND)
     DSP_BACKEND:  the dsp_backend to query

     Returns the number of frames displayed since the display was
     started.

     *Return value:*  the number of frames displayed.

 -- Function: int lw6dsp_get_last_frame_rendering_time
          (lw6dsp_backend_t * DSP_BACKEND)
     DSP_BACKEND:  the dsp_backend to query

     Returns the rendering time of the last frame. Gives clues about
     performance.

     *Return value:*  the number of milliseconds it took to draw screen

 -- Function: int lw6dsp_get_instant_fps (lw6dsp_backend_t *
          DSP_BACKEND)
     DSP_BACKEND:  the dsp_backend to query

     Returns the current frames per sec display rate. This is the
     instant value, it changes very often even if display seems smooth.

     *Return value:*  the current instant display rate.

 -- Function: int lw6dsp_get_average_fps (lw6dsp_backend_t *
          DSP_BACKEND)
     DSP_BACKEND:  the dsp_backend to query

     Returns the current frames per sec display rate. This is not
     absolutely accurate but fits for displaying info to the player,
     it's an average.

     *Return value:*  the current averaged display rate.

 -- Function: int lw6dsp_get_video_mode (lw6dsp_backend_t *
          DSP_BACKEND, lw6gui_video_mode_t * VIDEO_MODE)
     DSP_BACKEND:  the dsp_backend to query

     VIDEO_MODE:  a structure which will contain the results

     Returns the current video mode, the one obtained by the driver.
     This function is also a way to know wether display is running
     correcly or not, by testing its return value.

     *Return value:*  1 if ok, 0 if failure (mode not set)

 -- Function: int lw6dsp_get_fullscreen_modes (lw6dsp_backend_t *
          DSP_BACKEND, lw6gui_fullscreen_modes_t * FULLSCREEN_MODES)
     DSP_BACKEND:  the dsp_backend to query

     FULLSCREEN_MODES:  a structure which will contain the results

     Returns the current available fullscreen modes. Note that this one
     will only work if display is started, unlike
     `lw6gfx_get_fullscreen_modes' which is used internally. The reason
     is that in this dsp module context, we need the thread to be
     launched, and the thread does start/stop display on its own.

     *Return value:*  1 if ok, 0 if failure (mode not set)

 -- Function: void lw6dsp_param_zero (lw6dsp_param_t * PARAM)
     PARAM:  the structure to initialize

     Fills a display param struct with zeros, this is mandatory before
     any use. Think of it as a raw memset.

     *Return value:*  none.

 -- Function: int lw6dsp_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the test suite for the dsp module. In check (0) mode, won't
     test much to avoid failure because of missing graphical
     environment.

     *Return value:*  1 if OK, 0 if error.


File: liquidwar6.info,  Node: libdyn,  Next: libgfx,  Prev: libdsp,  Up: C API

5.17 libdyn
===========

5.17.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/dyn/index.html'.

5.17.2 API
----------

 -- Function: lw6dyn_dl_handle_t * lw6dyn_dlopen_backend_so (char *
          SO_FILE)
     Opens a .so file directly, using a valid (full) path name.

     *Return value:*  a handle to the module, once it's opened. You
     might still need to call a module specific `init'() function, but
     it's another story.

 -- Function: lw6dyn_dl_handle_t * lw6dyn_dlopen_backend (int ARGC,
          char * [] ARGV, char * TOP_LEVEL_LIB, char * BACKEND_NAME)
     ARGC:  the number of command-line arguments as passed to `main'

     TOP_LEVEL_LIB:  the top-level library concerned, this means is it
     "cli", "gfx", "snd" or "srv". This will tell the function to search
     for the .so file in the correct subdirectory. Think of this as a
     category.

     Opens a .so file corresponding to the given backend, it is capable
     to search for system libraries installed after "make install" but
     if not found, it will also search in the current build directory,
     finding the .so files in hidden .libs subdirectories.

     *Return value:*  a handle to the module, once it's opened. You
     might still need to call a module specific `init'() function, but
     it's another story.

 -- Function: int lw6dyn_dlclose_backend (lw6dyn_dl_handle_t * HANDLE)
     HANDLE:  the backend to close.

     Closes an opened backend. Note that you must call any backend
     specific clear, destroy, deinit, exit, function before.

     *Return value:*  1 if success, 0 on error.

 -- Function: void * lw6dyn_dlsym (lw6dyn_dl_handle_t * HANDLE, char *
          FUNC_NAME)
     HANDLE:  the backend concerned

     FUNC_NAME:  the function name, as a NULL terminated string

     Finds a C function in the given backend.

     *Return value:*  a pointer to the function, NULL if not found.

 -- Function: lw6sys_assoc_t * lw6dyn_list_backends (int ARGC, char *
          [] ARGV, char * TOP_LEVEL_LIB)
     ARGC:  the number of command line args, as passed to main

     ARGV:  the commind line args, as passed to main

     TOP_LEVEL_LIB:  the library category to query (gfx, snd, cli, srv
     ...)

     Returns an assoc which lists all the available modules. The key of
     the assoc entries in the module internal name such as 'gl' and the
     value associated is a NULL terminated string describing the
     module, for instance 'OpenGL'.

     *Return value:*  an assoc object containing key/label pairs.

 -- Function: char * lw6dyn_path_find_backend (int ARGC, char * []
          ARGV, char * TOP_LEVEL_LIB, char * BACKEND_NAME)
     ARGC:  the number of command-line arguments as passed to `main'

     TOP_LEVEL_LIB:  the top-level library concerned, this means is it
     "cli", "gfx", "snd" or "srv". This will tell the function to search
     for the .so file in the correct subdirectory. Think of this as a
     category.

     BACKEND_NAME:  the actual name of the backend, this is the name of
     the .so file, between "libmod_" and ".so". For instance, to find
     "libmod_gl.so", the right argument is "gl".

     Get the full path to a .so file corresponding to the given backend,
     it is capable to search for system libraries installed after "make
     install" but if not found, it will also search in the current
     build directory, finding the .so files in hidden .libs
     subdirectories.

     *Return value:*  the full path of the .so file, needs to be freed.

 -- Function: int lw6dyn_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `dyn' module test suite, testing most (if not all...)
     functions. Will try to load libraries and query them for standard
     LW6-expected functions.

     *Return value:*  1 if test is successfull, 0 on error.


File: liquidwar6.info,  Node: libgfx,  Next: mod-gl,  Prev: libdyn,  Up: C API

5.18 libgfx
===========

5.18.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/gfx/index.html'.

5.18.2 API
----------

 -- Function: int lw6gfx_init (lw6gfx_backend_t * BACKEND,
          lw6gui_video_mode_t * VIDEO_MODE,
          lw6gui_resize_callback_func_t RESIZE_CALLBACK)
     BACKEND:  the graphical backend to use

     VIDEO_MODE:  the video mode to use at start up

     RESIZE_CALLBACK:  a callback function which will be called at each
     resize event

     Sets up the graphical backend for good, initializing a video mode
     and allocating ressources. This call can typically fail if there's
     no device available, if the user doesn't have enough rights to
     access the hardware, and so on.

     *Return value:*  1 on success, 0 if not

 -- Function: void lw6gfx_quit (lw6gfx_backend_t * BACKEND)
     BACKEND:  the backend to quit

     Uninitializes the backend, that is, exits the graphical mode. All
     threads that use graphics must be closed when this is called.

     *Return value:*  none.

 -- Function: char * lw6gfx_repr (lw6gfx_backend_t * BACKEND)
     BACKEND:  the backend to represent

     Returns a readable version of the backend object.

     *Return value:*  a newly allocated pointer.

 -- Function: int lw6gfx_set_video_mode (lw6gfx_backend_t * BACKEND,
          lw6gui_video_mode_t * VIDEO_MODE)
     BACKEND:  the backend to use

     VIDEO_MODE:  the new video mode

     This function changes the video mode. Note that the first time you
     set up the graphical environment you must call `lw6gfx_init' but
     to change the current mode, use this function. It should reload
     backend data automatically if needed (textures for instance). Note
     that before giving up and failing this function will try alternate
     video modes, and you're not garanteed to have the right mode after
     the call, even if it returns true. To check this, use
     `lw6gfx_get_video_mode'.

     *Return value:*  1 on success, 0 on failure;

 -- Function: int lw6gfx_get_video_mode (lw6gfx_backend_t * BACKEND,
          lw6gui_video_mode_t * VIDEO_MODE)
     BACKEND:  the backend to use

     VIDEO_MODE:  the current video mode (will be overwritten, out
     parameter)

     This function returns the current video mode.

     *Return value:*  1 on success, 0 on failure;

 -- Function: int lw6gfx_get_fullscreen_modes (lw6gfx_backend_t *
          BACKEND, lw6gui_fullscreen_modes_t * FULLSCREEN_MODES)
     BACKEND:  the backend to use

     FULLSCREEN_MODES:  the available fullscreen modes (will be
     overwritten, out parameter)

     This function returns the current video mode.

     *Return value:*  1 on success, 0 on failure;

 -- Function: lw6gui_input_t * lw6gfx_pump_events (lw6gfx_backend_t *
          BACKEND)
     BACKEND:  the backend to use

     This function "pumps" events, that is gets pending events, puts
     them in queues, maintains internal states up to date. You really
     must call this very often or no input will be processed at all.

     *Return value:*  a pointer on the internal input state, musn't be
     freed.

 -- Function: int lw6gfx_display (lw6gfx_backend_t * BACKEND, int MASK,
          lw6gui_look_t * LOOK, lw6map_level_t * LEVEL,
          lw6ker_game_struct_t * GAME_STRUCT, lw6ker_game_state_t *
          GAME_STATE, lw6pil_local_cursors_t * LOCAL_CURSORS,
          lw6gui_menu_t * MENU, float PROGRESS, float FPS, float MPS,
          char ** LOG_LIST, int CAPTURE, int GFX_DEBUG, int
          DEBUG_TEAM_ID, int DEBUG_LAYER_ID)
     BACKEND:  the graphical backend to use

     MASK:  display flag, tells what to display

     LOOK:  the look, the skin, contains display options

     LEVEL:  the level to display

     GAME_STRUCT:  the game_struct associated with the level

     GAME_STATE:  the game_state associated with the level

     LOCAL_CURSORS:  the cursor to center the focus on

     MENU:  the menu to display

     PROGRESS:  the value of the progress indicator

     FPS:  the number of frames per second to display

     MPS:  the number of moves per second to display

     LOG_LIST:  log messages to display

     CAPTURE:  wether to enable capture mode or not

     GFX_DEBUG:  wether to enable gfx debugging tools

     DEBUG_TEAM_ID:  for debug display, team to display informations
     about

     DEBUG_LAYER_ID:  for debug display, layer to display

     This is the major drawing function, the one that encapsulates all
     others. As the program uses a separate thread to display things,
     we just pass this function many parameters, and let it do its job
     alone. So many parameters might sometimes be useless. It also
     allows the graphics backend decide wether menus and hud and
     background should interact. Or not.

     *Return value:*  1 on success, 0 on failure.

 -- Function: lw6sys_assoc_t * lw6gfx_get_backends (int ARGC, char * []
          ARGV)
     ARGC:  argc, as passed to `main'

     ARGV:  argv, as passed to `main'

     List available gfx backends. The hash contains pairs with id and
     name for each backend. The id is the technical key you can use to
     load the backend, the name is something more readable you can
     display in an interface. The backend objects themselves are not
     instanciated by this (in fact, they are, but released on the fly)
     you need to load and initialize them afterwards.

     *Return value:*  hash containing id/name pairs.

 -- Function: lw6gfx_backend_t * lw6gfx_create_backend (int ARGC, char
          * [] ARGV, char * NAME)
     ARGC:  argc, as passed to `main'

     ARGV:  argv, as passed to `main'

     NAME:  string containing gfx key, typically got from
     `lw6gfx_get_backends'

     Creates a gfx backend, this is just about loading the dynamic
     library if needed, and/or check gfx engine is available, and
     connect to it. It does not perform initialization.

     *Return value:*  gfx backend.

 -- Function: void lw6gfx_destroy_backend (lw6gfx_backend_t * BACKEND)
     BACKEND:  gfx backend to destroy

     Frees the ressources associated to a gfx, which must have been
     properly uninitialized before.

     *Return value:*  none.

 -- Function: int lw6gfx_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `gfx' module test suite. In check-only mode, this
     function won't test many things, for it requires a graphical mode
     to be available to perform the complete test.

     *Return value:*  1 if test is successfull, 0 on error.


File: liquidwar6.info,  Node: mod-gl,  Next: libglb,  Prev: libgfx,  Up: C API

5.19 mod-gl
===========

5.19.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/gfx/mod-gl/gl-utils/index.html'
(as there are many sub-directories in this module, please refer to the
test coverage directory index
(http://www.gnu.org/software/liquidwar6/coverage/index.html) for
complete information).

5.19.2 API
----------


File: liquidwar6.info,  Node: libglb,  Next: libgui,  Prev: mod-gl,  Up: C API

5.20 libglb
===========

5.20.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/glb/index.html'.

5.20.2 API
----------

 -- Function: char * lw6glb_base64_encode_bin (char * BUF, int SIZE)
     BUF:  the data to encode

     SIZE:  the size of data to encode

     Encodes data into base64. Memory allocation is done automatically.

     *Return value:*  newly allocated string.

 -- Function: char * lw6glb_base64_decode_bin (int * SIZE, char *
          BASE64_STR)
     SIZE:  the size of the decoded data

     BASE64_STR:  the string to decode

     Decodes data from base64. Memory allocation is done automatically.
     Note that this function only works for strings, other data might
     not be handled correctly.

     *Return value:*  newly allocated pointer, NULL on error.

 -- Function: char * lw6glb_base64_encode_str (char * STR)
     STR:  the string to encode

     Encodes a string into base64.

     *Return value:*  newly allocated string.

 -- Function: char * lw6glb_base64_decode_str (char * STR)
     STR:  the string to decode

     Decodes a string from base64.

     *Return value:*  newly allocated string, NULL on error.

 -- Function: char * lw6glb_base64_encode_bin_prefix (char * BUF, int
          SIZE, char * PREFIX)
     BUF:  the data to encode

     SIZE:  the size of data to encode

     PREFIX:  a prefix string

     Encodes data into base64. Memory allocation is done automatically.
     The encoded string will be prefixed with `prefix'.

     *Return value:*  newly allocated string.

 -- Function: char * lw6glb_base64_decode_bin_prefix (int * SIZE, char
          * BASE64_STR, char * PREFIX)
     SIZE:  the size of the decoded data

     BASE64_STR:  the string to decode

     PREFIX:  a prefix string

     Decodes data from base64. Memory allocation is done automatically.
     Note that this function only works for strings, other data might
     not be handled correctly.  The encoded is expected to start with
     prefix `prefix' and then contain base64 data.

     *Return value:*  newly allocated pointer, NULL on error.

 -- Function: char * lw6glb_base64_encode_str_prefix (char * STR, char
          * PREFIX)
     STR:  the string to encode

     PREFIX:  a prefix string

     Encodes a string into base64. The encoded string will be prefixed
     with `prefix'.

     *Return value:*  newly allocated string.

 -- Function: char * lw6glb_base64_decode_str_prefix (char * STR, char
          * PREFIX)
     STR:  the string to decode

     PREFIX:  a prefix string

     Decodes a string from base64. The encoded is expected to start
     with prefix `prefix' and then contain base64 data.

     *Return value:*  newly allocated string, NULL on error.

 -- Function: char * lw6glb_sha1_hmac_80_bin (char * KEY, int KEY_SIZE,
          char * BUF, int BUF_SIZE)
     KEY:  the key buffer `key_size'

     BUF:  the data to analyse

     BUF_SIZE:  the size of data to analyse

     Calculates an SHA-1 sum of buffer, using key to seed calc.

     *Return value:*  newly allocated string, containing 20 chars
     checksum.

 -- Function: char * lw6glb_sha1_hmac_80_str (char * KEY, char * STR)
     KEY:  a key (string)

     STR:  the string to calculate the checksum for

     Calculates an SHA-1 sum of a string, using key to seed calc.

     *Return value:*  newly allocated string, containing 20 chars
     checksum.

 -- Function: u_int32_t lw6glb_sha1_hmac_32_bin (char * KEY, int
          KEY_SIZE, char * BUF, int BUF_SIZE)
     KEY:  the key buffer `key_size'

     BUF:  the data to analyse

     BUF_SIZE:  the size of data to analyse

     Calculates an SHA-1 sum of buffer, using key to seed calc.

     *Return value:*  a 32-bit unsigned integer

 -- Function: u_int32_t lw6glb_sha1_hmac_32_str (char * KEY, char * STR)
     KEY:  a key (string)

     STR:  the string to calculate the checksum for

     Calculates an SHA-1 sum of a string, using key to seed calc.

     *Return value:*  a 32-bit unsigned integer

 -- Function: int lw6glb_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `glb' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.


File: liquidwar6.info,  Node: libgui,  Next: libhlp,  Prev: libglb,  Up: C API

5.21 libgui
===========

5.21.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/gui/index.html'.

5.21.2 API
----------

