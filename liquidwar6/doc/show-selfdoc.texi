@subsection show-build-bin-id
@deffn {Command-line option} @code{--show-build-bin-id}
Shows the internal 'bin-id' value. This value does not mean anything in itself
but it's supposed to change each time you compile the game.
@end deffn

@subsection show-build-bugs-url
@deffn {Command-line option} @code{--show-build-bugs-url}
Shows the URL to make bug reports.
@end deffn

@subsection show-build-cflags
@deffn {Command-line option} @code{--show-build-cflags}
Shows what value you should put in 'CFLAGS' (environment variable) if you want
to compile programs that use Liquid War 6 as a library, and include
'liquidwar6.h'.
@end deffn

@subsection show-build-codename
@deffn {Command-line option} @code{--show-build-codename}
Shows the codename associated with this version, generally the name of someone
famous who is war-related (a general, an emperor...).
@end deffn

@subsection show-build-configure-args
@deffn {Command-line option} @code{--show-build-configure-args}
Shows the arguments that have been passed to the GNU Autoconf './configure'
script when building the program. This can be very usefull if you want to know
how the program has been built.
@end deffn

@subsection show-build-copyright
@deffn {Command-line option} @code{--show-build-copyright}
Shows a very short copyright notice.
@end deffn

@subsection show-build-datadir
@deffn {Command-line option} @code{--show-build-datadir}
Shows the 'datadir' value as passed to the GNU Autoconf './configure' script
when compiling the program. Default is '/usr/local/share'. This is the
generic, non Liquid War 6 specific data directory. Liquid War 6 related data
is stored elsewhere (usually in a sub-directory) see the 'data-dir' switch for
more information. 'datadir' is not 'data-dir'. That's the point.
@end deffn

@subsection show-build-date
@deffn {Command-line option} @code{--show-build-date}
Shows the date when the binary was compiled.
@end deffn

@subsection show-build-docdir
@deffn {Command-line option} @code{--show-build-docdir}
Shows the 'docdir' value as passed to the GNU Autoconf './configure' script
when compiling the program. Default is '/usr/local/share/doc/liquidwar6'.
@end deffn

@subsection show-build-enable-allinone
@deffn {Command-line option} @code{--show-build-enable-allinone}
Shows wether the 'allinone' option has been chosen when building the game.
This depends on parameters passed to './configure'.
@end deffn

@subsection show-build-enable-console
@deffn {Command-line option} @code{--show-build-enable-console}
Shows wether the console has been enabled when building the game. This depends
on parameters passed to './configure' and also on the presence of ncurses and
readline.
@end deffn

@subsection show-build-enable-fullstatic
@deffn {Command-line option} @code{--show-build-enable-fullstatic}
Shows wether the 'fullstatic' option has been chosen when building the game.
This depends on parameters passed to './configure'.
@end deffn

@subsection show-build-enable-gcov
@deffn {Command-line option} @code{--show-build-enable-gcov}
Shows wether the game was build with suitable informations for gcov. This
depends on parameters passed to './configure'.
@end deffn

@subsection show-build-enable-gprof
@deffn {Command-line option} @code{--show-build-enable-gprof}
Shows wether the game was build with suitable informations for gprof. This
depends on parameters passed to './configure'.
@end deffn

@subsection show-build-enable-gtk
@deffn {Command-line option} @code{--show-build-enable-gtk}
Shows wether GTK+ support has been enabled when building the game. This
depends on parameters passed to './configure' and also on the presence of GTK+
headers and libs. It uses pkg-config to detect it.
@end deffn

@subsection show-build-enable-instrument
@deffn {Command-line option} @code{--show-build-enable-instrument}
Shows wether the game was build with the '-finstrument-functions' GCC switch.
This depends on parameters passed to './configure'.
@end deffn

@subsection show-build-enable-mod-csound
@deffn {Command-line option} @code{--show-build-enable-mod-csound}
Shows wether the mod-csound audio backend has been enabled when building the
game. This depends on parameters passed to './configure' and also on the
presence of the csound library.
@end deffn

@subsection show-build-enable-mod-gl1
@deffn {Command-line option} @code{--show-build-enable-mod-gl1}
Shows wether the mod-gl1 graphical backend has been enabled when building the
game. This depends on parameters passed to './configure' and also on the
presence of SDL and OpenGL related libraries.
@end deffn

@subsection show-build-enable-mod-gles2
@deffn {Command-line option} @code{--show-build-enable-mod-gles2}
Shows wether the mod-gles2 graphical backend has been enabled when building
the game. This depends on parameters passed to './configure' and also on the
presence of SDL and OpenGL ES related libraries.
@end deffn

@subsection show-build-enable-mod-http
@deffn {Command-line option} @code{--show-build-enable-mod-http}
Shows wether the mod-http network backend has been enabled when building the
game. This depends on parameters passed to './configure' and also on the
presence of libCurl.
@end deffn

@subsection show-build-enable-mod-ogg
@deffn {Command-line option} @code{--show-build-enable-mod-ogg}
Shows wether the mod-ogg audio backend has been enabled when building the
game. This depends on parameters passed to './configure' and also on the
presence of SDL and related libraries.
@end deffn

@subsection show-build-enable-openmp
@deffn {Command-line option} @code{--show-build-enable-openmp}
Shows wether the program was built with OpenMP support. This depends on
parameters passed to './configure'.
@end deffn

@subsection show-build-enable-optimize
@deffn {Command-line option} @code{--show-build-enable-optimize}
Shows wether the 'optimize' option has been chosen when building the game.
This depends on parameters passed to './configure'.
@end deffn

@subsection show-build-enable-paranoid
@deffn {Command-line option} @code{--show-build-enable-paranoid}
Shows wether the game was build with paranoid memory management. This is for
debugging purposes, the default already includes some controls, with turned
it's really... paranoid.
@end deffn

@subsection show-build-enable-profiler
@deffn {Command-line option} @code{--show-build-enable-profiler}
Shows wether the game was build with Google Profiler support. This depends on
parameters passed to './configure'.
@end deffn

@subsection show-build-enable-valgrind
@deffn {Command-line option} @code{--show-build-enable-valgrind}
Shows wether the game was build with valgrind later use in mind. This depends
on parameters passed to './configure'.
@end deffn

@subsection show-build-endianness
@deffn {Command-line option} @code{--show-build-endianness}
Returns the endianness. 'little' corresponds to x86-like systems, 'big' to
ppc-like systems.
@end deffn

@subsection show-build-gcc-version
@deffn {Command-line option} @code{--show-build-gcc-version}
Returns the version of the GNU C compiler which was used to compile the
program.
@end deffn

@subsection show-build-gnu
@deffn {Command-line option} @code{--show-build-gnu}
Returns 1 (true) if host OS is a GNU system, or at least has been considered
as such when compiling, 0 (false) if not.
@end deffn

@subsection show-build-gp2x
@deffn {Command-line option} @code{--show-build-gp2x}
Returns 1 (true) if host is a GP2X, 0 (false) if not.
@end deffn

@subsection show-build-home-url
@deffn {Command-line option} @code{--show-build-home-url}
Shows the URL of the program, its homepage.
@end deffn

@subsection show-build-host-cpu
@deffn {Command-line option} @code{--show-build-host-cpu}
Shows the host CPU, as defined by 'host_cpu' in GNU Autoconf.
@end deffn

@subsection show-build-host-os
@deffn {Command-line option} @code{--show-build-host-os}
Shows the host OS, as defined by 'host_os' in GNU Autoconf.
@end deffn

@subsection show-build-hostname
@deffn {Command-line option} @code{--show-build-hostname}
Shows the name of the host where the binary was compiled.
@end deffn

@subsection show-build-includedir
@deffn {Command-line option} @code{--show-build-includedir}
Shows the 'includedir' value as passed to the GNU Autoconf './configure'
script when compiling the program. Default is '/usr/local/include'.
@end deffn

@subsection show-build-ldflags
@deffn {Command-line option} @code{--show-build-ldflags}
Shows what value you should put in 'LDFLAGS' (environment variable) if you
want to link programs against libliquidwar6.
@end deffn

@subsection show-build-libdir
@deffn {Command-line option} @code{--show-build-libdir}
Shows the 'libdir' value as passed to the GNU Autoconf './configure' script
when compiling the program. Default is '/usr/local/lib'. This is the generic,
non Liquid War 6 specific library directory. Dedicated Liquid War 6 modules
are stored elsewhere (usually in a sub-directory) see the 'mod-dir' switch for
more information.
@end deffn

@subsection show-build-license
@deffn {Command-line option} @code{--show-build-license}
Shows the license of the program (GNU GPL v3 or later).
@end deffn

@subsection show-build-localedir
@deffn {Command-line option} @code{--show-build-localedir}
Shows the 'localedir' value as passed to the GNU Autoconf './configure' script
when compiling the program. Default is '/usr/local/share/locale'.
@end deffn

@subsection show-build-mac-os-x
@deffn {Command-line option} @code{--show-build-mac-os-x}
Returns 1 (true) if host OS is Mac OS X, 0 (false) if not.
@end deffn

@subsection show-build-md5sum
@deffn {Command-line option} @code{--show-build-md5sum}
Shows the MD5 checksum, which has been calculated from the C source files.
Complementary with 'show-build-stamp'.
@end deffn

@subsection show-build-ms-windows
@deffn {Command-line option} @code{--show-build-ms-windows}
Returns 1 (true) if host OS is Microsoft Windows, 0 (false) if not.
@end deffn

@subsection show-build-package-id
@deffn {Command-line option} @code{--show-build-package-id}
Shows the package tarname with its version, that is, 'liquidwar6-<version>
@end deffn

@subsection show-build-package-name
@deffn {Command-line option} @code{--show-build-package-name}
Shows the package name, that is, 'Liquid War 6'.
@end deffn

@subsection show-build-package-string
@deffn {Command-line option} @code{--show-build-package-string}
Shows the package string, that is, 'Liquid War 6 <version>
@end deffn

@subsection show-build-package-tarname
@deffn {Command-line option} @code{--show-build-package-tarname}
Shows the package tarname, that is, liquidwar6.
@end deffn

@subsection show-build-pointer-size
@deffn {Command-line option} @code{--show-build-pointer-size}
Returns the pointer size, in bytes. Should be 4 on 32-bit systems and 8 on
64-bit systems.
@end deffn

@subsection show-build-prefix
@deffn {Command-line option} @code{--show-build-prefix}
Shows the 'prefix' value as passed to the GNU Autoconf './configure' script
when compiling the program. Default is '/usr/local'.
@end deffn

@subsection show-build-stamp
@deffn {Command-line option} @code{--show-build-stamp}
Shows the build stamp. A very usefull value, more precise than the version to
track down binaries. It is incremented each time the core C code is updated.
It won't reflect all the programs for it does not take scripts in account, but
if you are running a work-in-progress version, it might be very convenient to
use this to know what your are running exactly.
@end deffn

@subsection show-build-time
@deffn {Command-line option} @code{--show-build-time}
Shows the time when the binary was compiled.
@end deffn

@subsection show-build-top-srcdir
@deffn {Command-line option} @code{--show-build-top-srcdir}
Shows the top source directory on the machine where the binary was compiled.
@end deffn

@subsection show-build-unix
@deffn {Command-line option} @code{--show-build-unix}
Returns 1 (true) if host OS is a UNIX system, or at least has been considered
as such when compiling, 0 (false) if not.
@end deffn

@subsection show-build-version
@deffn {Command-line option} @code{--show-build-version}
Shows the version. Note that this is different from the standard GNU 'version'
command line option which shows a complete message with a short copyright
notice. This one will just return the version, without the package tarname or
anything else.
@end deffn

@subsection show-build-x86
@deffn {Command-line option} @code{--show-build-x86}
Tells wether the CPU belongs to x86 family.
@end deffn

@subsection show-config-file
@deffn {Command-line option} @code{--show-config-file}
Shows the config file path. Default is '$HOME/.liquidwar6/config.xml'.
@end deffn

@subsection show-cwd
@deffn {Command-line option} @code{--show-cwd}
Shows the current working directory, the value that the pwd command would
return.
@end deffn

@subsection show-data-dir
@deffn {Command-line option} @code{--show-data-dir}
Shows the data directory path. This is where the games searches for most of
its data,the most important exception being maps, which are stored elsewhere.
Default is '/usr/local/share/liquidwar6-<version>/data'.
@end deffn

@subsection show-default-config-file
@deffn {Command-line option} @code{--show-default-config-file}
Shows the default config file path. Default is '$HOME/.liquidwar6/config.xml'.
@end deffn

@subsection show-default-data-dir
@deffn {Command-line option} @code{--show-default-data-dir}
Shows the default data directory path. This is where the games searches for
most of its data,the most important exception being maps, which are stored
elsewhere. Default is '/usr/local/share/liquidwar6-<version>/data'.
@end deffn

@subsection show-default-log-file
@deffn {Command-line option} @code{--show-default-log-file}
Shows the default log file path. Default is '$HOME/.liquidwar6/log.csv'.
@end deffn

@subsection show-default-map-dir
@deffn {Command-line option} @code{--show-default-map-dir}
Shows the default map directory. This is where builtin maps are stored.
Default is '/usr/local/share/liquidwar6-<version>/map'.
@end deffn

@subsection show-default-map-path
@deffn {Command-line option} @code{--show-default-map-path}
Shows the default map search path. This is where the game searches for maps.
It's the combination of command-line arguments and builtin paths. Might return
more directories than the one specified in a single 'map-path=dir1:dir2'
argument.
@end deffn

@subsection show-default-mod-dir
@deffn {Command-line option} @code{--show-default-mod-dir}
Shows the default module directory path. This is where all dynamically loaded
modules are stored. Default is '/usr/local/lib/liquidwar6-<version>'.
@end deffn

@subsection show-default-music-dir
@deffn {Command-line option} @code{--show-default-music-dir}
Shows the default music directory. This is where builtin musics are stored.
Default is '/usr/local/share/liquidwar6-<version>/music'.
@end deffn

@subsection show-default-music-path
@deffn {Command-line option} @code{--show-default-music-path}
Shows the default music search path. This is where the game searches for
musics. It's the combination of command-line arguments and builtin paths.
Might return more directories than the one specified in a single
'music-path=dir1:dir2' argument.
@end deffn

@subsection show-default-prefix
@deffn {Command-line option} @code{--show-default-prefix}
Shows the default prefix used. This should logically be the value passed to
the GNU Autoconf ./configure script when building the game. Most other path
are deduced from this one. Default is '/usr/local'.
@end deffn

@subsection show-default-script-file
@deffn {Command-line option} @code{--show-default-script-file}
Shows the default main script file path. This file is very important, since
the program is more or less a hudge scheme interpreter, and this file is the
file loaded by Guile. In short, it is the main program. Default is
'/usr/local/share/liquidwar6-<version>/script/liquidwar6.scm'.
@end deffn

@subsection show-default-user-dir
@deffn {Command-line option} @code{--show-default-user-dir}
Shows the default user directory path. This is where run-time data, config
files, log files, are stored. Default is '$HOME/.liquidwar6/'.
@end deffn

@subsection show-log-file
@deffn {Command-line option} @code{--show-log-file}
Shows the log file path. Default is '$HOME/.liquidwar6/log.csv'.
@end deffn

@subsection show-map-dir
@deffn {Command-line option} @code{--show-map-dir}
Shows the map directory. This is where builtin maps are stored. Default is
'/usr/local/share/liquidwar6-<version>/map'.
@end deffn

@subsection show-map-path
@deffn {Command-line option} @code{--show-map-path}
Shows the map search path. This is where the game searches for maps. It's the
combination of command-line arguments and builtin paths. Might return more
directories than the one specified in a single 'map-path=dir1:dir2' argument.
@end deffn

@subsection show-mod-dir
@deffn {Command-line option} @code{--show-mod-dir}
Shows the module directory path. This is where all dynamically loaded modules
are stored. Default is '/usr/local/lib/liquidwar6-<version>'.
@end deffn

@subsection show-music-dir
@deffn {Command-line option} @code{--show-music-dir}
Shows the music directory. This is where builtin maps are stored. Default is
'/usr/local/share/liquidwar6-<version>/music'.
@end deffn

@subsection show-music-path
@deffn {Command-line option} @code{--show-music-path}
Shows the music search path. This is where the game searches for musics. It's
the combination of command-line arguments and builtin paths. Might return more
directories than the one specified in a single 'music-path=dir1:dir2'
argument.
@end deffn

@subsection show-prefix
@deffn {Command-line option} @code{--show-prefix}
Shows the prefix used. This should logically be the value passed to the GNU
Autoconf ./configure script when building the game. Most other path are
deduced from this one. Default is '/usr/local'.
@end deffn

@subsection show-run-dir
@deffn {Command-line option} @code{--show-run-dir}
Shows the run directory, usually the path where the binary is. It depends on
how and where the program is launched. It is guessed from the argc/argv values
at runtime.
@end deffn

@subsection show-script-file
@deffn {Command-line option} @code{--show-script-file}
Shows the main script file path. This file is very important, since the
program is more or less a hudge scheme interpreter, and this file is the file
loaded by Guile. In short, it is the main program. Default is
'/usr/local/share/liquidwar6-<version>/script/liquidwar6.scm'.
@end deffn

@subsection show-user-dir
@deffn {Command-line option} @code{--show-user-dir}
Shows the user directory path. This is where run-time data, config files, log
files, are stored. Default is '$HOME/.liquidwar6/'.
@end deffn

