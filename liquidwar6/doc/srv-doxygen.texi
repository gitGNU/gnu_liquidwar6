

  
@deftp {Struct} {lw6srv_backend_s}

    
The srv backend is the first argument passed to any srv function, it contains reference to all the functions which can be used as well as a pointer on associated data. In OO, this would just be an object, with members and methods, using polymorphism through opaque pointers.     
@end deftp

@defcv {Member} {lw6srv_backend_s} {dl_handle}
@strong{Type:} @code{lw6dyn_dl_handle_t *}

@strong{Definition:} @code{lw6dyn_dl_handle_t* lw6srv_backend_s::dl_handle}


Handle on dynamic library (if it makes sense).         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {srv_context}
@strong{Type:} @code{void *}

@strong{Definition:} @code{void* lw6srv_backend_s::srv_context}


        
Srv specific data, what is behind this pointer really depends on the srv engine.         
@end defcv

@defcv {Member} {lw6srv_backend_s} {argc}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6srv_backend_s::argc}


The argc value passed to main.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {argv}
@strong{Type:} @code{const char **}

@strong{Definition:} @code{const char** lw6srv_backend_s::argv}


The argv value passed to main.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {id}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6srv_backend_s::id}


        
The id of the object, this is non-zero and unique within one run session, incremented at each object creation.         
@end defcv

@defcv {Member} {lw6srv_backend_s} {name}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6srv_backend_s::name}


Module name.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {properties}
@strong{Type:} @code{lw6cnx_properties_t}

@strong{Definition:} @code{lw6cnx_properties_t lw6srv_backend_s::properties}


General backend properties.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {info}
@strong{Type:} @code{lw6nod_info_t *}

@strong{Definition:} @code{lw6nod_info_t* lw6srv_backend_s::info}


Information about local node.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {init}
@strong{Type:} @code{void *(*}

@strong{Definition:} @code{void*(* lw6srv_backend_s::init)(int argc, const char *argv[], lw6cnx_properties_t *properties, lw6srv_listener_t *listener)}


Pointer on lw6srv_init callback code.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {quit}
@strong{Type:} @code{void(*}

@strong{Definition:} @code{void(* lw6srv_backend_s::quit)(void *srv_context)}


Pointer on lw6srv_quit callback code.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {analyse_tcp}
@strong{Type:} @code{int(*}

@strong{Definition:} @code{int(* lw6srv_backend_s::analyse_tcp)(void *srv_context, lw6srv_tcp_accepter_t *tcp_accepter, lw6nod_info_t *node_info, u_int64_t *remote_id, char **remote_url)}


Pointer on lw6srv_analyse_tcp callback code.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {analyse_udp}
@strong{Type:} @code{int(*}

@strong{Definition:} @code{int(* lw6srv_backend_s::analyse_udp)(void *srv_context, lw6srv_udp_buffer_t *udp_buffer, lw6nod_info_t *node_info, u_int64_t *remote_id, char **remote_url)}


Pointer on lw6srv_analyse_udp callback code.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {process_oob}
@strong{Type:} @code{int(*}

@strong{Definition:} @code{int(* lw6srv_backend_s::process_oob)(void *srv_context, lw6nod_info_t *node_info, lw6srv_oob_data_t *oob_data)}


Pointer on lw6srv_process_oob callback code.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {open}
@strong{Type:} @code{lw6cnx_connection_t *(*}

@strong{Definition:} @code{lw6cnx_connection_t*(* lw6srv_backend_s::open)(void *srv_context, lw6srv_listener_t *listener, const char *local_url, const char *remote_url, const char *remote_ip, int remote_port, const char *password, u_int64_t local_id, u_int64_t remote_id, int dns_ok, int network_reliability, lw6cnx_recv_callback_t recv_callback_func, void *recv_callback_data)}


Pointer on lw6srv_open callback code.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {feed_with_tcp}
@strong{Type:} @code{int(*}

@strong{Definition:} @code{int(* lw6srv_backend_s::feed_with_tcp)(void *srv_context, lw6cnx_connection_t *connection, lw6srv_tcp_accepter_t *tcp_accepter)}


Pointer on lw6srv_feed_with_tcp callback code.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {feed_with_udp}
@strong{Type:} @code{int(*}

@strong{Definition:} @code{int(* lw6srv_backend_s::feed_with_udp)(void *srv_context, lw6cnx_connection_t *connection, lw6srv_udp_buffer_t *udp_buffer)}


Pointer on lw6srv_feed_with_udp callback code.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {close}
@strong{Type:} @code{void(*}

@strong{Definition:} @code{void(* lw6srv_backend_s::close)(void *srv_context, lw6cnx_connection_t *connection)}


Pointer on lw6srv_close callback code.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {send}
@strong{Type:} @code{int(*}

@strong{Definition:} @code{int(* lw6srv_backend_s::send)(void *srv_context, lw6cnx_connection_t *connection, u_int32_t physical_ticket_sig, u_int32_t logical_ticket_sig, u_int64_t logical_from_id, u_int64_t logical_to_id, const char *message)}


Pointer on lw6srv_send callback code.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {poll}
@strong{Type:} @code{void(*}

@strong{Definition:} @code{void(* lw6srv_backend_s::poll)(void *srv_context, lw6cnx_connection_t *connection)}


Pointer on lw6srv_poll callback code.         
        
@end defcv

@defcv {Member} {lw6srv_backend_s} {repr}
@strong{Type:} @code{char *(*}

@strong{Definition:} @code{char*(* lw6srv_backend_s::repr)(void *srv_context, lw6cnx_connection_t *connection)}


Pointer on lw6srv_repr callback code.         
        
@end defcv



  
@deftp {Struct} {lw6srv_client_id_s}

    
Parsed client ID, this is not the numerical 64-bit ID but an IP:port pair which uniquely and physically identifies the peer.     
@end deftp

@defcv {Member} {lw6srv_client_id_s} {client_ip}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6srv_client_id_s::client_ip}


Client IP address, as a string.         
        
@end defcv

@defcv {Member} {lw6srv_client_id_s} {client_port}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6srv_client_id_s::client_port}


Client IP port.         
        
@end defcv



  
@deftp {Struct} {lw6srv_listener_s}

    
The listener is the object which listens on the network and can create tcp accepters or udp buffers depending on what is received.     
@end deftp

@defcv {Member} {lw6srv_listener_s} {ip}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6srv_listener_s::ip}


IP address we are binded to.         
        
@end defcv

@defcv {Member} {lw6srv_listener_s} {port}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6srv_listener_s::port}


IP port we are binded to.         
        
@end defcv

@defcv {Member} {lw6srv_listener_s} {tcp_sock}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6srv_listener_s::tcp_sock}


TCP socket, binded in listening mode.         
        
@end defcv

@defcv {Member} {lw6srv_listener_s} {tcp_accepters}
@strong{Type:} @code{lw6sys_list_t *}

@strong{Definition:} @code{lw6sys_list_t* lw6srv_listener_s::tcp_accepters}


        
List of lw6srv_tcp_accepter_t objects, created when data is received.         
@end defcv

@defcv {Member} {lw6srv_listener_s} {udp_sock}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6srv_listener_s::udp_sock}


UDP socket, binded.         
        
@end defcv

@defcv {Member} {lw6srv_listener_s} {udp_buffers}
@strong{Type:} @code{lw6sys_list_t *}

@strong{Definition:} @code{lw6sys_list_t* lw6srv_listener_s::udp_buffers}


        
List of lw6srv_udp_buffer_t objects, created when data is received.         
@end defcv



  
@deftp {Struct} {lw6srv_oob_data_s}

    
Used to store out of band data. Typically, when data is recognized as out of band, it's treated in a separate thread, and not mainstream. This is both because out-of-band data is the default (anything not recognized and/or not trusted is OOB) and because this can easily be treated separately as all we need is to server nearly static informations.     
@end deftp

@defcv {Member} {lw6srv_oob_data_s} {creation_timestamp}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6srv_oob_data_s::creation_timestamp}


Date of the request.         
        
@end defcv

@defcv {Member} {lw6srv_oob_data_s} {do_not_finish}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6srv_oob_data_s::do_not_finish}


Used to interrupt the OOB process before it's over.         
        
@end defcv

@defcv {Member} {lw6srv_oob_data_s} {remote_ip}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6srv_oob_data_s::remote_ip}


IP address of peer.         
        
@end defcv

@defcv {Member} {lw6srv_oob_data_s} {remote_port}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6srv_oob_data_s::remote_port}


IP port of peer.         
        
@end defcv

@defcv {Member} {lw6srv_oob_data_s} {sock}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6srv_oob_data_s::sock}


Socket used, can either be TCP or UDP, depends on backend.         
        
@end defcv

@defcv {Member} {lw6srv_oob_data_s} {first_line}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6srv_oob_data_s::first_line}


First line of data.         
        
@end defcv



  
@deftp {Struct} {lw6srv_oob_s}

    
Used to handle OOB requests. This is a container over the OOB data and its treatment thread.     
@end deftp

@defcv {Member} {lw6srv_oob_s} {thread}
@strong{Type:} @code{lw6sys_thread_handler_t *}

@strong{Definition:} @code{lw6sys_thread_handler_t* lw6srv_oob_s::thread}


Thread use to handle the data.         
        
@end defcv

@defcv {Member} {lw6srv_oob_s} {data}
@strong{Type:} @code{lw6srv_oob_data_t}

@strong{Definition:} @code{lw6srv_oob_data_t lw6srv_oob_s::data}


The OOB data, what we received from the network.         
        
@end defcv



  
@deftp {Struct} {lw6srv_tcp_accepter_s}

    
A TCP accepter is an object which is created after a listening socket received some random information (in TCP mode, hence its name). Itprovides basic support to accept/reject requests and choose the right protocol/backend for the answer.     
@end deftp

@defcv {Member} {lw6srv_tcp_accepter_s} {client_id}
@strong{Type:} @code{lw6srv_client_id_t}

@strong{Definition:} @code{lw6srv_client_id_t lw6srv_tcp_accepter_s::client_id}


Where the data does come from.         
        
@end defcv

@defcv {Member} {lw6srv_tcp_accepter_s} {sock}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6srv_tcp_accepter_s::sock}


        
Socket returned by the accept POSIX function, this is the one we can use to reply and send data back.         
@end defcv

@defcv {Member} {lw6srv_tcp_accepter_s} {first_line}
@strong{Type:} @code{char}

@strong{Definition:} @code{char lw6srv_tcp_accepter_s::first_line[LW6SRV_PROTOCOL_BUFFER_SIZE+1]}


        
First line received over the network. This is "peeked" so it's still available for the actual backend, in fact that's the very thing we need an object for, with the information "these bytes came from ip:port" one can take a decision on what to do with the request.         
@end defcv

@defcv {Member} {lw6srv_tcp_accepter_s} {creation_timestamp}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6srv_tcp_accepter_s::creation_timestamp}


        
Timestamp of accepter creation. This is more or less the same that the instant we received data on the network. There's a small lag, but not that bad. This is mostly used for timeout.         
@end defcv



  
@deftp {Struct} {lw6srv_udp_buffer_s}

    
A UDP datagram, this structure contains both the data and information about who sent it.     
@end deftp

@defcv {Member} {lw6srv_udp_buffer_s} {client_id}
@strong{Type:} @code{lw6srv_client_id_t}

@strong{Definition:} @code{lw6srv_client_id_t lw6srv_udp_buffer_s::client_id}


Where the data does come from.         
        
@end defcv

@defcv {Member} {lw6srv_udp_buffer_s} {line}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6srv_udp_buffer_s::line}


        
The data itself. This is typically a C-string with a 0 char at the end, anything else will be rejected anyway.         
@end defcv


