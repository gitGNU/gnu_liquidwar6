@subsection background-color-auto
@deffn {Command-line option} @code{--background-color-auto=<value>}
@deffnx {Environment variable} @code{LW6_BACKGROUND_COLOR_AUTO}
@deffnx {XML key} @code{background-color-auto}
Type: boolean

Default value: true

Defines wether hud colors will be set automatically from base and alternate
colors. This is a time saver to keep map designers from requiring to redefined
every single color in the game. You only need to set color-base-bg,
color-base-fg, color-alternate-bg and color-alternate-fg. Then
hud_color_frame_bg, hud_color_frame_fg, hud_color_text_bg and
hud_color_text_fg will be automatically set.
@end deffn

@subsection downsize-using-bench-value
@deffn {Command-line option} @code{--downsize-using-bench-value=<value>}
@deffnx {Environment variable} @code{LW6_DOWNSIZE_USING_BENCH_VALUE}
@deffnx {XML key} @code{downsize-using-bench-value}
Type: boolean

Default value: true

If set, then the game will automatically downsize a map according to the
'bench-value' parameter. Downsizing means: a 1600x1200 maps becomes 200x150,
for instance. Downsizing causes fighters to be bigger because map resolution
is lower. This will avoid running the game on a too big map, with your
computer not being able to handle it at the required speed.
@end deffn

@subsection downsize-using-fighter-scale
@deffn {Command-line option} @code{--downsize-using-fighter-scale=<value>}
@deffnx {Environment variable} @code{LW6_DOWNSIZE_USING_FIGHTER_SCALE}
@deffnx {XML key} @code{downsize-using-fighter-scale}
Type: boolean

Default value: false

If set, then the game will automatically downsize a map according to the
'fighter-scale' parameter. Downsizing means: a 1600x1200 maps becomes 200x150,
for instance. Downsizing causes fighters to be bigger because map resolution
is lower. This can be usefull if you don't want fighters to be too small.
@end deffn

@subsection fighter-scale
@deffn {Command-line option} @code{--fighter-scale=<value>}
@deffnx {Environment variable} @code{LW6_FIGHTER_SCALE}
@deffnx {XML key} @code{fighter-scale}
Type: float

Default value: 1.0

Defines how wide (in pixels) fighters must be. This parameter is very
important and will largely condition the number of fighters on the map. It is
used when loading the map. If it is, for instance, set to 1, there will be
exactly a fighter per pixel on the screen. That is, if you play 640x480 on an
empty map, the maximum fighters you could have is about 300000. The idea is
that by changing the resolution, you also define the density of the map. In
pratice, this is done in the hope that someone with a slow computer will pick
up a low resolution and therefore play small levels. Conversely, someone with
a brand new computer with powerfull CPU & GPU will use great resolutions and
be happy with many fighters on the map. Still, changing the resolution after
loading the map will not affet the number of fighters. Same for network games,
the first player, who loads the map, defines its properties according to its
own settings.
@end deffn

@subsection guess-colors
@deffn {Command-line option} @code{--guess-colors=<value>}
@deffnx {Environment variable} @code{LW6_GUESS_COLORS}
@deffnx {XML key} @code{guess-colors}
Type: boolean

Default value: true

Defines wether colors should be set automatically from texture colors. If set
to true, then the program will try to pick up colors automatically from the
texture, and will override the values of the color-base-bg, color-base-fg,
color-alternate-bg and color-alternate-fg parameters. How these colors are
picked up can't be garanteed, so if the map does not have strong contrast or
if there can be any form of ambiguity, it's safe to set this to false and
define one's own colors.
@end deffn

@subsection guess-moves-per-sec
@deffn {Command-line option} @code{--guess-moves-per-sec=<value>}
@deffnx {Environment variable} @code{LW6_GUESS_MOVES_PER_SEC}
@deffnx {XML key} @code{guess-moves-per-sec}
Type: boolean

Default value: true

If set, then loader will use 'time-to-cross-level' to guess the game speed
parameters.
@end deffn

@subsection hud-color-auto
@deffn {Command-line option} @code{--hud-color-auto=<value>}
@deffnx {Environment variable} @code{LW6_HUD_COLOR_AUTO}
@deffnx {XML key} @code{hud-color-auto}
Type: boolean

Default value: true

Defines wether hud colors will be set automatically from base and alternate
colors. This is a time saver to keep map designers from requiring to redefined
every single color in the game. You only need to set color-base-bg,
color-base-fg, color-alternate-bg and color-alternate-fg. Then
hud_color_frame_bg, hud_color_frame_fg, hud_color_text_bg and
hud_color_text_fg will be automatically set.
@end deffn

@subsection max-map-height
@deffn {Command-line option} @code{--max-map-height=<value>}
@deffnx {Environment variable} @code{LW6_MAX_MAP_HEIGHT}
@deffnx {XML key} @code{max-map-height}
Type: integer

Default value: 1000

Allows you to give a maximum map height. When designing a map you might
wonder: this is dumb I'm conceiving this map I know its height, why should I
limit it? Now think of the play who plays on a old slowish computer with a
tiny screen. He might redefine this himself, and does not necessarly wishes to
fire Gimp to rescale the map.
@end deffn

@subsection max-map-surface
@deffn {Command-line option} @code{--max-map-surface=<value>}
@deffnx {Environment variable} @code{LW6_MAX_MAP_SURFACE}
@deffnx {XML key} @code{max-map-surface}
Type: integer

Default value: 1000000

Allows you to give a maximum map surface. Map surface is simply (width *
height). This parameter is just here to save you the hassle of defining both
'max-map-width' and 'max-map-height' in a consistent manner.
@end deffn

@subsection max-map-width
@deffn {Command-line option} @code{--max-map-width=<value>}
@deffnx {Environment variable} @code{LW6_MAX_MAP_WIDTH}
@deffnx {XML key} @code{max-map-width}
Type: integer

Default value: 1500

Allows you to give a maximum map width. When designing a map you might wonder:
this is dumb I'm conceiving this map I know its width, why should I limit it?
Now think of the play who plays on a old slowish computer with a tiny screen.
He might redefine this himself, and does not necessarly wishes to fire Gimp to
rescale the map.
@end deffn

@subsection menu-color-auto
@deffn {Command-line option} @code{--menu-color-auto=<value>}
@deffnx {Environment variable} @code{LW6_MENU_COLOR_AUTO}
@deffnx {XML key} @code{menu-color-auto}
Type: boolean

Default value: true

Defines wether menu colors will be set automatically from base and alternate
colors. This is a time saver to keep map designers from requiring to redefined
every single color in the game. You only need to set color-base-bg,
color-base-fg, color-alternate-bg and color-alternate-fg. Then
menu_color_default_bg, menu_color_default_fg, menu_color_selected_bg,
menu_color_selected_fg, menu_color_disabled_bg and menu_color_disabled_fg will
be automatically set.
@end deffn

@subsection min-map-height
@deffn {Command-line option} @code{--min-map-height=<value>}
@deffnx {Environment variable} @code{LW6_MIN_MAP_HEIGHT}
@deffnx {XML key} @code{min-map-height}
Type: integer

Default value: 30

Allows you to give a minimum map height. When designing a map you might
wonder: this is dumb I'm conceiving this map I know its height, why should I
limit it? Now think of the player who decided to play with highly-defined maps
because he has a super calculator and a hudge screen. He might redefine this
himself, and does not necessarly wishes to fire Gimp to rescale the map.
@end deffn

@subsection min-map-surface
@deffn {Command-line option} @code{--min-map-surface=<value>}
@deffnx {Environment variable} @code{LW6_MIN_MAP_SURFACE}
@deffnx {XML key} @code{min-map-surface}
Type: integer

Default value: 3600

Allows you to give a minimum map surface. Map surface is simply (width *
height). This parameter is just here to save you the hassle of defining both
'min-map-width' and 'min-map-height' in a consistent manner.
@end deffn

@subsection min-map-width
@deffn {Command-line option} @code{--min-map-width=<value>}
@deffnx {Environment variable} @code{LW6_MIN_MAP_WIDTH}
@deffnx {XML key} @code{min-map-width}
Type: integer

Default value: 40

Allows you to give a minimum map width. When designing a map you might wonder:
this is dumb I'm conceiving this map I know its width, why should I limit it?
Now think of the player who decided to play with highly-defined maps because
he has a super calculator and a hudge screen. He might redefine this himself,
and does not necessarly wishes to fire Gimp to rescale the map.
@end deffn

@subsection resample
@deffn {Command-line option} @code{--resample=<value>}
@deffnx {Environment variable} @code{LW6_RESAMPLE}
@deffnx {XML key} @code{resample}
Type: boolean

Default value: true

If set to true, maps will always be resampled to a size which depends on your
screen resolution, zoom factor, and the rest. If false, maps will be set at
the exact resolution of map.png.
@end deffn

@subsection speed
@deffn {Command-line option} @code{--speed=<value>}
@deffnx {Environment variable} @code{LW6_SPEED}
@deffnx {XML key} @code{speed}
Type: float

Default value: 1.0

This parameter is the main parameter on which game speed depends. The map
loader will garantee, by downscaling the map, that to cross the level (by
crossing the level we mean, for instance, going from top-left corner to
bottom-right corner in a straight line) a fighter will take a constant amount
of time. Under the hood, the loader might of course rescale the map but it
will also change game speed so that, at the end, fighters take a constant time
to cross the level. This is, indeed, the most important thing, players do not
care much if internally there are X or Y moves per second, the global game
experience depends on how fast fighter movement looks on the screen. The
default settings corresponds roughly to one second to cross the level. If you
set this to 2.0, it will go twice faster.
@end deffn

@subsection system-color-auto
@deffn {Command-line option} @code{--system-color-auto=<value>}
@deffnx {Environment variable} @code{LW6_SYSTEM_COLOR_AUTO}
@deffnx {XML key} @code{system-color-auto}
Type: boolean

Default value: true

Defines wether system colors will be set automatically from base and alternate
colors. This is a time saver to keep map designers from requiring to redefined
every single color in the game. You only need to set color-base-bg,
color-base-fg, color-alternate-bg and color-alternate-fg. Then system_color_bg
and system_color_fg will be automatically set.
@end deffn

@subsection upsize-using-bench-value
@deffn {Command-line option} @code{--upsize-using-bench-value=<value>}
@deffnx {Environment variable} @code{LW6_UPSIZE_USING_BENCH_VALUE}
@deffnx {XML key} @code{upsize-using-bench-value}
Type: boolean

Default value: false

If set, then the game will automatically upsize a map according to the
'fighter-scale' parameter. Upsizing means: a 160x120 maps becomes 400x300, for
instance. Upsizing causes fighters to be smaller because map resolution is
higher. This will avoid useless pixelish 'jumbo fighters' look when your
computer is powerfull enough to do better.
@end deffn

@subsection upsize-using-fighter-scale
@deffn {Command-line option} @code{--upsize-using-fighter-scale=<value>}
@deffnx {Environment variable} @code{LW6_UPSIZE_USING_FIGHTER_SCALE}
@deffnx {XML key} @code{upsize-using-fighter-scale}
Type: boolean

Default value: true

If set, then the game will automatically upsize a map according to the
'fighter-scale' parameter. Upsizing means: a 160x120 maps becomes 400x300, for
instance. Upsizing causes fighters to be smaller because map resolution is
higher. This can be usefull if you don't want fighters to be too big.
@end deffn

@subsection view-color-auto
@deffn {Command-line option} @code{--view-color-auto=<value>}
@deffnx {Environment variable} @code{LW6_VIEW_COLOR_AUTO}
@deffnx {XML key} @code{view-color-auto}
Type: boolean

Default value: true

Defines wether view colors will be set automatically from base and alternate
colors. This is a time saver to keep map designers from requiring to redefined
every single color in the game. You only need to set color-base-bg,
color-base-fg, color-alternate-bg and color-alternate-fg. Then
view_color_cursor_bg, view_color_cursor_fg, view_color_map_bg and
view_color_map_fg will be automatically set.
@end deffn

@subsection wall-grease
@deffn {Command-line option} @code{--wall-grease=<value>}
@deffnx {Environment variable} @code{LW6_WALL_GREASE}
@deffnx {XML key} @code{wall-grease}
Type: integer

Default value: 0
Min value: -5
Max value: 5

This parameter allows you to make walls (AKA map foreground) thicker, or
thiner, when map is loaded. Indeed, when map are resampled, and especially
when they are downscaled, some walls may disappear, or some passages may be
blocked. The loader can't automatically figure out wether it's more important
to keep an existing wall or to keep an open passage for fighters. This
parameter helps doing so, if you set it to a low value, level will be less
greasy, and many passages might open themselves. On the contrary, if grease is
at a high level, then a thin line of almost isolated pixels might become a
thick wall. There's no real garantee your wall or passage will always be
present, but it's a same bet to assume on a 'tunnel-like' level one needs to
set grease to a low value, and on a 'wide open' level with few walls one needs
to set grease to a high value.
@end deffn

