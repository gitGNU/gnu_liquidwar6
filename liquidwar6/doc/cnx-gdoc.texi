@deftypefun {lw6cnx_connection_t *} {lw6cnx_connection_new} (char * @var{local_url}, char * @var{remote_url}, char * @var{remote_ip}, int @var{remote_port}, char * @var{password}, char * @var{local_id}, char * @var{remote_id}, lw6cnx_recv_callback_t @var{recv_callback_func}, void * @var{recv_callback_data})
@var{local_url}:  the local public URL

@var{remote_url}:  the remote public URL

@var{remote_ip}:  the remote IP address

@var{remote_port}:  the remote port

@var{password}:  the password to use

@var{local_id}:  the local ID

@var{remote_id}:  the remote ID

@var{recv_callback_func}:  a callback to call when data is received

@var{recv_callback_data}:  additionnal data to pass to the callback

Create a connection object. This object in itself does
nothing, it's just to share common structures among
modules, more precisely, between cli and srv code.
It's the responsability off the caller/backend to handle
the @code{backend_specific_data} field which is NULL after this
call.

@strong{Return value:}  newly allocated object.
@end deftypefun

@deftypefun {void} {lw6cnx_connection_free} (lw6cnx_connection_t * @var{connection})
@var{connection}:  object to free

Frees a connection object. It's the responsibility of
the caller/backend to handle the @code{backend_specific_data} field.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6cnx_test} (int @var{mode})
@var{mode}:  0 for check only, 1 for full test

Runs the @code{cnx} module test suite.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

