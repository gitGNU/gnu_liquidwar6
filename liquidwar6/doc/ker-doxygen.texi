

  
@deftp {Struct} {lw6ker_cursor_control_s}

    
Contains a cursor controls state, basically a cursor is a position plus a fire and fire2 booleans.     
@end deftp

@defcv {Member} {lw6ker_cursor_control_s} {pos}
@strong{Type:} @code{lw6sys_xyz_t}

@strong{Definition:} @code{lw6sys_xyz_t lw6ker_cursor_control_s::pos}


Cursor position, z isn't relevant for now.         
        
@end defcv

@defcv {Member} {lw6ker_cursor_control_s} {fire}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_cursor_control_s::fire}


Fire, 1 if primary weapon must be used.         
        
@end defcv

@defcv {Member} {lw6ker_cursor_control_s} {fire2}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_cursor_control_s::fire2}


Fire2, 1 if secondary weapon must be used.         
        
@end defcv



  
@deftp {Struct} {lw6ker_cursor_s}

    
Data about a given cursor.     
@end deftp

@defcv {Member} {lw6ker_cursor_s} {node_id}
@strong{Type:} @code{u_int64_t}

@strong{Definition:} @code{u_int64_t lw6ker_cursor_s::node_id}


The id of the node this cursor belongs to.         
        
@end defcv

@defcv {Member} {lw6ker_cursor_s} {cursor_id}
@strong{Type:} @code{u_int16_t}

@strong{Definition:} @code{u_int16_t lw6ker_cursor_s::cursor_id}


The id of this cursor.         
        
@end defcv

@defcv {Member} {lw6ker_cursor_s} {letter}
@strong{Type:} @code{char}

@strong{Definition:} @code{char lw6ker_cursor_s::letter}


ASCII code of the letter associated to the cursor.         
        
@end defcv

@defcv {Member} {lw6ker_cursor_s} {enabled}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_cursor_s::enabled}


Wether the cursor is enabled/active or not.         
        
@end defcv

@defcv {Member} {lw6ker_cursor_s} {team_color}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_cursor_s::team_color}


Team associated with this cursor.         
        
@end defcv

@defcv {Member} {lw6ker_cursor_s} {pos}
@strong{Type:} @code{lw6sys_xyz_t}

@strong{Definition:} @code{lw6sys_xyz_t lw6ker_cursor_s::pos}


Cursor position, z isn't relevant for now.         
        
@end defcv

@defcv {Member} {lw6ker_cursor_s} {fire}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_cursor_s::fire}


Primary fire button state.         
        
@end defcv

@defcv {Member} {lw6ker_cursor_s} {fire2}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_cursor_s::fire2}


Alternate fire button state.         
        
@end defcv

@defcv {Member} {lw6ker_cursor_s} {apply_pos}
@strong{Type:} @code{lw6sys_xyz_t}

@strong{Definition:} @code{lw6sys_xyz_t lw6ker_cursor_s::apply_pos}


        
Position to apply cursor on. Problem follows: cursor might be hanging on a wall, somewhere fighters can't go. In that case an alternate position is find, usually the closest free space. But this can take time to calculate so we cache this value here, as it is convenient to have it at hand.         
@end defcv

@defcv {Member} {lw6ker_cursor_s} {pot_offset}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6ker_cursor_s::pot_offset}


        
Potential offset. Whenever the cursor is applied to some place, one can add a potential to it, this can be used to make some cursor more attractive than others.         
@end defcv



  
@deftp {Struct} {lw6ker_fighter_s}

    
Contains the parameters of a fighter, one of those little squares that are that at the very heart of Liquid War.     
@end deftp

@defcv {Member} {lw6ker_fighter_s} {team_color}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6ker_fighter_s::team_color}


Team color from 0 to 9, -1 if invalid.         
        
@end defcv

@defcv {Member} {lw6ker_fighter_s} {last_direction}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6ker_fighter_s::last_direction}


        
Last direction this fighter used, this is important for in some cases we want to know where the fighter was heading before, our current choice might rely on previous state.         
@end defcv

@defcv {Member} {lw6ker_fighter_s} {health}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6ker_fighter_s::health}


Fighter health from 0 to 10000.         
        
@end defcv

@defcv {Member} {lw6ker_fighter_s} {act_counter}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6ker_fighter_s::act_counter}


        
This counter is used to handle speed up/slow down. At each round it's incremented, whenever it reaches 100 then the fighter really acts. Basically, there's a Bresenham algorithm behind all that.         
@end defcv

@defcv {Member} {lw6ker_fighter_s} {pad}
@strong{Type:} @code{int32_t}

@strong{Definition:} @code{int32_t lw6ker_fighter_s::pad}


Free for later use.         
        
@end defcv

@defcv {Member} {lw6ker_fighter_s} {pos}
@strong{Type:} @code{lw6sys_xyz_t}

@strong{Definition:} @code{lw6sys_xyz_t lw6ker_fighter_s::pos}


Fighter position.         
        
@end defcv



  
@deftp {Struct} {lw6ker_game_state_s}

    
Game structure containing all changeable data state, this will hold the fighter positions, their health, the cursors position, the gradient, anything that is dynamic. Note that this structure is a wrapper over the internal structure which contains the real members, the first two members need be the same as it is casted internally.     
@end deftp

@defcv {Member} {lw6ker_game_state_s} {id}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6ker_game_state_s::id}


        
The id of the object, this is non-zero and unique within one run session, incremented at each object creation.         
@end defcv

@defcv {Member} {lw6ker_game_state_s} {game_struct}
@strong{Type:} @code{lw6ker_game_struct_t *}

@strong{Definition:} @code{lw6ker_game_struct_t* lw6ker_game_state_s::game_struct}


        
Pointer on the game non-mutable structure, which holds the data that is never changed within a game.         
@end defcv



  
@deftp {Struct} {lw6ker_game_struct_s}

    
Game struct is very similar to the level struct of the lw6map module. Indeed, it's immutable and won't change during the game. The difference with lw6map_level is that game_struct is algorithm aware and has many tricks, special internals, cached data, so that it speeds up the overall algorithm. In fact it contains everything lw6ker_game_state needs to have but need not change during the game. The 3 first members, id, level, rules are the same as the internal _lw6ker_game_struct_t structure. The rest of it is hidden. The program will cast from lw6ker_game_struct_t to _lw6ker_game_struct_t internally.     
@end deftp

@defcv {Member} {lw6ker_game_struct_s} {id}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6ker_game_struct_s::id}


        
The id of the object, this is non-zero and unique within one run session, incremented at each object creation.         
@end defcv

@defcv {Member} {lw6ker_game_struct_s} {level}
@strong{Type:} @code{lw6map_level_t *}

@strong{Definition:} @code{lw6map_level_t* lw6ker_game_struct_s::level}


        
Pointer on the level source structure. This one might still retain informations we don't want to duplicate here, for instance the textures, which are of no use for the core algorithm so are pointless to backup here, but are still of interest for high-level functions such as display stuff.         
@end defcv

@defcv {Member} {lw6ker_game_struct_s} {rules}
@strong{Type:} @code{lw6map_rules_t}

@strong{Definition:} @code{lw6map_rules_t lw6ker_game_struct_s::rules}


        
Game rules, this is just a cached copy to avoid derefencing the level pointer any time we need to query a parameter.         
@end defcv



  
@deftp {Struct} {lw6ker_score_array_s}

    
This is an array which contains all scores for all teams, it's calculated from game_state and should be used read only by code which is not within lw6ker.     
@end deftp

@defcv {Member} {lw6ker_score_array_s} {active_fighters}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_score_array_s::active_fighters}


Number of fighters on the battlefield.         
        
@end defcv

@defcv {Member} {lw6ker_score_array_s} {nb_scores}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_score_array_s::nb_scores}


        
Number of score items. This can be greater than the number of active teams, since it retains informations about teams which have disappeared.         
@end defcv

@defcv {Member} {lw6ker_score_array_s} {scores}
@strong{Type:} @code{lw6ker_score_t}

@strong{Definition:} @code{lw6ker_score_t lw6ker_score_array_s::scores[LW6MAP_NB_TEAM_COLORS]}


        
Scores for each team, they are sorted, the first one with index 0 is the current winner, then all other teams follow, the last one being Mr Looser.         
@end defcv



  
@deftp {Struct} {lw6ker_score_s}

    
Stores the score information about a team, this structure is used to get informations from the game, and display them.     
@end deftp

@defcv {Member} {lw6ker_score_s} {has_been_active}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_score_s::has_been_active}


        
Wether this team (this color) has been active at some point during the game. This is important for at score time, many teams might have been disabled, this is typical of dead teams in the LW5 last player wins scheme. It can also happen in network games after a team leaves. Note that this way of counting active teams does not allow fine grain knowledge of who played, for the yellow team might have been played by different nodes through a single game session.         
@end defcv

@defcv {Member} {lw6ker_score_s} {team_color}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_score_s::team_color}


The color of the team this score is about.         
        
@end defcv

@defcv {Member} {lw6ker_score_s} {fighters_percent}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_score_s::fighters_percent}


        
Percentage of fighters for this team. The global score array object will take care of making the sum of fighters_percent be exactly 100, regardless of exactitude, it will round this number to make a nice total and hide rounding errors.         
@end defcv

@defcv {Member} {lw6ker_score_s} {fighters_absolute}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_score_s::fighters_absolute}


Absolute number of fighters for this team.         
        
@end defcv

@defcv {Member} {lw6ker_score_s} {fighters_ratio}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6ker_score_s::fighters_ratio}


        
One of the rare float in lw6ker, only for eye candy, this is the equivalent of fighters_percent but as a float between 0.0f and 1.0f. It gives the possibility of more precise graphical displays, will its integer companion value is usefull for writing down scores.         
@end defcv

@defcv {Member} {lw6ker_score_s} {frags}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_score_s::frags}


        
Number of frags. Note that depending on game rules, this can have very different meanings.         
@end defcv

@defcv {Member} {lw6ker_score_s} {consolidated_percent}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ker_score_s::consolidated_percent}


        
OK, this is probably the most non-intuitive number but still the most usefull. It will show a percentage that is greater as we estimate the team in a stronger position. For instance, it can be higher if the team has very few fighters on the field but has a great number of frags. The one who has the greatest number here is the winner.         
@end defcv


