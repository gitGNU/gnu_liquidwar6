@subsection base64-decode
@deffn {Command-line option} @code{--base64-decode}
If specified, program will take stdin and base64 decode it to stdout. This is
for testing purpose (for network messages for instance). Will decode in
standard base64 encoding using characters + and / but also the url-compliant
version using - and /, see RFC 4648 for details.
@end deffn

@subsection base64-encode
@deffn {Command-line option} @code{--base64-encode}
If specified, program will take stdin and base64 encode it to stdout. This is
for testing purpose (for network messages for instance). Will *not* use
standard base64 encoding using characters + and / but - and _ instead to be
url-compliant, see RFC 4648 for details.
@end deffn

@subsection bench
@deffn {Command-line option} @code{--bench}
Runs a benchmarking test which will report an approximative performance
estimation of the game on your computer.
@end deffn

@subsection bench-value
@deffn {Command-line option} @code{--bench-value=<value>}
@deffnx {Environment variable} @code{LW6_BENCH_VALUE}
@deffnx {XML key} @code{bench-value}
Type: integer

Default value: 20

Contains the current bench value of the computer running the game. This is
used internally to choose the right map settings. You can override this value
and use your own but... use at your own risk. Pretending you have a faster
computer than what you really have can lead to confusion.
@end deffn

@subsection bin-id
@deffn {Command-line option} @code{--bin-id=<value>}
@deffnx {Environment variable} @code{LW6_BIN_ID}
@deffnx {XML key} @code{bin-id}
Type: integer

Default value: 0

The internal 'bin-id' value. Note that this is not necessarly equal to the
value returned by 'show-build-bin-id'. When they are different, it is assumed
this is because of a software upgrade.
@end deffn

@subsection check
@deffn {Command-line option} @code{--check}
Running the game with '--check' is almost like running '--test', the
difference is that '--check' will not run tests which involve graphics or
sound backends, so it's adapted to pure console mode. This can be usefull for
automated checks on a build farm, or if you want to check things in a headless
(pure console) environment.
@end deffn

@subsection commands-per-sec
@deffn {Command-line option} @code{--commands-per-sec=<value>}
@deffnx {Environment variable} @code{LW6_COMMANDS_PER_SEC}
@deffnx {XML key} @code{commands-per-sec}
Type: integer

Default value: 10

Defines the number of commands per second. When a command is generated, orders
are actually sent to the game engine, for instance, 'this cursor moved there'.
So this option will affect game responsiveness, setting this to a high value
will make the game more responsive but consume bandwidth on network games.
@end deffn

@subsection daemon
@deffn {Command-line option} @code{--daemon}
Start the game in daemon mode, this is typically used with the server mode, if
you want the process to be detached from the console and executed in the
background.
@end deffn

@subsection debug-layer-id
@deffn {Command-line option} @code{--debug-layer-id=<value>}
@deffnx {Environment variable} @code{LW6_DEBUG_LAYER_ID}
@deffnx {XML key} @code{debug-layer-id}
Type: integer

Default value: 0
Min value: 0
Max value: 6

A team id which will be used for debugging purposes, for instance when
displaying gradient.
@end deffn

@subsection debug-team-id
@deffn {Command-line option} @code{--debug-team-id=<value>}
@deffnx {Environment variable} @code{LW6_DEBUG_TEAM_ID}
@deffnx {XML key} @code{debug-team-id}
Type: integer

Default value: 0
Min value: 0
Max value: 9

A team id which will be used for debugging purposes, for instance when
displaying gradient.
@end deffn

@subsection demo
@deffn {Command-line option} @code{--demo}
Start the game in demo mode. 2 bots play against each other forever.
@end deffn

@subsection dirty-read
@deffn {Command-line option} @code{--dirty-read=<value>}
@deffnx {Environment variable} @code{LW6_DIRTY_READ}
@deffnx {XML key} @code{dirty-read}
Type: integer

Default value: 2
Min value: 0
Max value: 2

How to handle dirty reads and locks when displaying stuff. If set to 0, there
will be no dirty reads at all, a lock (mutex) will be set whenever it's
needed. If set to 1, display might be done with inconsistent data, however the
data itself won't be modified while displaying. If set to 2, displayed data
can (and will) be modified while the rendering thread is running.
@end deffn

@subsection display-background
@deffn {Command-line option} @code{--display-background=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_BACKGROUND}
@deffnx {XML key} @code{display-background}
Type: boolean

Default value: true

Decides wether the background animation/image should be displayed at all.
@end deffn

@subsection display-console
@deffn {Command-line option} @code{--display-console=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_CONSOLE}
@deffnx {XML key} @code{display-console}
Type: boolean

Default value: false

Defines wether the interactive system console must be displayed. Note that
console support must have been enabled at compilation time. It might not be
available on your computer, for instance if you are running a system such as
Microsoft Windows.
@end deffn

@subsection display-cursors
@deffn {Command-line option} @code{--display-cursors=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_CURSORS}
@deffnx {XML key} @code{display-cursors}
Type: boolean

Default value: true

Debugging option which can be set to 'false' to disable the display of cursors
when playing.
@end deffn

@subsection display-debug-gradient
@deffn {Command-line option} @code{--display-debug-gradient=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_DEBUG_GRADIENT}
@deffnx {XML key} @code{display-debug-gradient}
Type: boolean

Default value: false

Set this to 'true' to display the gradient, this is usefull to debug the core
algorithm or understand how it works.
@end deffn

@subsection display-debug-zones
@deffn {Command-line option} @code{--display-debug-zones=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_DEBUG_ZONES}
@deffnx {XML key} @code{display-debug-zones}
Type: boolean

Default value: false

Set this to 'true' to display the zones, this is usefull to debug the core
algorithm or understand how it works.
@end deffn

@subsection display-fighters
@deffn {Command-line option} @code{--display-fighters=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_FIGHTERS}
@deffnx {XML key} @code{display-fighters}
Type: boolean

Default value: true

Debugging option which can be set to 'false' to disable the display of
fighters when playing.
@end deffn

@subsection display-fps
@deffn {Command-line option} @code{--display-fps=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_FPS}
@deffnx {XML key} @code{display-fps}
Type: boolean

Default value: false

Set this to 'true' to display the number of frames per second. When this gets
too low... play a smaller map, buy a new computer or contribute and hack
Liquid War 6 so that it runs faster!
@end deffn

@subsection display-hud
@deffn {Command-line option} @code{--display-hud=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_HUD}
@deffnx {XML key} @code{display-hud}
Type: boolean

Default value: true

Decides wether the hud (informations while playing) should be displayed.
@end deffn

@subsection display-log
@deffn {Command-line option} @code{--display-log=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_LOG}
@deffnx {XML key} @code{display-log}
Type: boolean

Default value: true

Set this to 'false' to disable the display of error messages on the screen.
Mote that you can miss valuable informations.
@end deffn

@subsection display-map
@deffn {Command-line option} @code{--display-map=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_MAP}
@deffnx {XML key} @code{display-map}
Type: boolean

Default value: true

Debugging option which can be set to 'false' to disable map (level) display
when playing.
@end deffn

@subsection display-menu
@deffn {Command-line option} @code{--display-menu=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_MENU}
@deffnx {XML key} @code{display-menu}
Type: boolean

Default value: true

Debugging option which can be set to 'false' to disable the display of menus.
@end deffn

@subsection display-meta
@deffn {Command-line option} @code{--display-meta=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_META}
@deffnx {XML key} @code{display-meta}
Type: boolean

Default value: true

Set to 'false' to disable the display of meta information, this includes the
help, tootips and breadcrumbs in menus.
@end deffn

@subsection display-mouse
@deffn {Command-line option} @code{--display-mouse=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_MOUSE}
@deffnx {XML key} @code{display-mouse}
Type: boolean

Default value: true

Set this to 'false' to always hide the mouse pointer.
@end deffn

@subsection display-mps
@deffn {Command-line option} @code{--display-mps=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_MPS}
@deffnx {XML key} @code{display-mps}
Type: boolean

Default value: false

Set this to 'true' to display the number of moves per second. In theory the
game should maintain this constant but in practise it can get low if your
computer is too slow or too busy.
@end deffn

@subsection display-preview
@deffn {Command-line option} @code{--display-preview=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_PREVIEW}
@deffnx {XML key} @code{display-preview}
Type: boolean

Default value: true

Decides wether a map preview should be displayed when choosing a level.
@end deffn

@subsection display-progress
@deffn {Command-line option} @code{--display-progress=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_PROGRESS}
@deffnx {XML key} @code{display-progress}
Type: boolean

Default value: true

Decides wether a progress bar should be displayed when a long operation is
realized as a background task.
@end deffn

@subsection display-score
@deffn {Command-line option} @code{--display-score=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_SCORE}
@deffnx {XML key} @code{display-score}
Type: boolean

Default value: true

Decides wether the score screen should be displayed.
@end deffn

@subsection display-splash
@deffn {Command-line option} @code{--display-splash=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_SPLASH}
@deffnx {XML key} @code{display-splash}
Type: boolean

Default value: true

Set this to 'false' to disable the display of the splash screen at game
startup.
@end deffn

@subsection display-url
@deffn {Command-line option} @code{--display-url=<value>}
@deffnx {Environment variable} @code{LW6_DISPLAY_URL}
@deffnx {XML key} @code{display-url}
Type: boolean

Default value: false

Set this to 'true' to display the URL (homepage) of the game. This is mostly
used when doing screenshots, so that generated images contain a link to the
homepage.
@end deffn

@subsection executed-again
@deffn {Command-line option} @code{--executed-again=<value>}
@deffnx {Environment variable} @code{LW6_EXECUTED_AGAIN}
@deffnx {XML key} @code{executed-again}
Type: boolean

Default value: false

This environment variable/keyword is used to detect wether the program has
been launched by itself with an internal execv call. This is used as a
workarround to set some environment variables (DYLD_LIBRARY_PATH on Mac OS X
for instance) before the program is run, as sometimes using setenv() inside
the program does not work.
@end deffn

@subsection gfx-cpu-usage
@deffn {Command-line option} @code{--gfx-cpu-usage=<value>}
@deffnx {Environment variable} @code{LW6_GFX_CPU_USAGE}
@deffnx {XML key} @code{gfx-cpu-usage}
Type: float

Default value: 0.75
Min value: 0
Max value: 1

Percentage of the CPU which will be used by the display thread. It's wise to
leave some time to other threads to execute. The OS does it naturally, but
setting this helps the whole process by explicitely pausing (sleep call) the
display thread. You could change this to a low value if you have lagging games
but smooth display.
@end deffn

@subsection gfx-debug
@deffn {Command-line option} @code{--gfx-debug=<value>}
@deffnx {Environment variable} @code{LW6_GFX_DEBUG}
@deffnx {XML key} @code{gfx-debug}
Type: boolean

Default value: false

Enables dedicated graphics debugging tools. This is different from 'debug'
mode which is global, this one is really graphics specific.
@end deffn

@subsection io-per-sec
@deffn {Command-line option} @code{--io-per-sec=<value>}
@deffnx {Environment variable} @code{LW6_IO_PER_SEC}
@deffnx {XML key} @code{io-per-sec}
Type: integer

Default value: 20

Defines the number of calls to input/output functions per second. This can
affect speed of menus but also cursors, but won't change the speed of the game
itself. It's a cosmectic, comfort option.
@end deffn

@subsection jpeg-quality
@deffn {Command-line option} @code{--jpeg-quality=<value>}
@deffnx {Environment variable} @code{LW6_JPEG_QUALITY}
@deffnx {XML key} @code{jpeg-quality}
Type: integer

Default value: 85
Min value: 0
Max value: 85

Quality used by libjpeg when creating screenshot images. The same value you
would give to Gimp before exporting an image as a JPEG.
@end deffn

@subsection loader-sleep
@deffn {Command-line option} @code{--loader-sleep=<value>}
@deffnx {Environment variable} @code{LW6_LOADER_SLEEP}
@deffnx {XML key} @code{loader-sleep}
Type: float

Default value: 0.5

Defines how long the loader thread should wait between two polls. Default
value should fit in most cases.
@end deffn

@subsection log-level
@deffn {Command-line option} @code{--log-level=<value>}
@deffnx {Environment variable} @code{LW6_LOG_LEVEL}
@deffnx {XML key} @code{log-level}
Type: integer

Default value: 3
Min value: 0
Max value: 4

Defines the log level, that is, how verbose the program will be regarding logs
and console output. 0 (ERROR) is the minimum, only errors are reported. 1
(WARNING) means errors + warnings. 2 (NOTICE) displays most important
messages. 3 (INFO) is the default, the log file will contain all messages but
debug stuff. 4 (DEBUG) logs everything, including debug informations.
@end deffn

@subsection log-timeout
@deffn {Command-line option} @code{--log-timeout=<value>}
@deffnx {Environment variable} @code{LW6_LOG_TIMEOUT}
@deffnx {XML key} @code{log-timeout}
Type: integer

Default value: 5000

Delay, in msec, for which a log message will stay displayed on the screen.
@end deffn

@subsection magic-number
@deffn {Command-line option} @code{--magic-number=<value>}
@deffnx {Environment variable} @code{LW6_MAGIC_NUMBER}
@deffnx {XML key} @code{magic-number}
Type: integer

Default value: 14741

This 'magic' number probably requires an explanation. It's used to estimate
how big a map can be built. The calculus is very approximative, basically
bench_value*magic_number=total_fighters_on_map*rounds_per_sec*moves_per_round
with total_fighters_on_map depending on various parameters such as map size
but also how many fighters are on the map. The map loader will try and adjust
the map size so that it is just big enough not to saturate your CPU while
being as high-res as possible. The magic number in itself has no real meaning,
the higher it gets, the more optimized it means the game is. Normally you
shouldn't change this but if you find the map resizing is too agressively
pessimistic, or if for some reason bench returns bogus values, you can modify
it.
@end deffn

@subsection max-local-bench-value
@deffn {Command-line option} @code{--max-local-bench-value=<value>}
@deffnx {Environment variable} @code{LW6_MAX_LOCAL_BENCH_VALUE}
@deffnx {XML key} @code{max-local-bench-value}
Type: integer

Default value: 800

Even if your computer is very fast, this parameter will be used to tame the
optimism of the test, and do not load maps in very high detail. It's believed
at some point, it's best to keep your extra power to deal with unordinary
situations rather than waste it on useless details. Game should be fun with
that setting, but if you really want to use your shiny CPU at its maximum,
raise this.
@end deffn

@subsection max-network-bench-value
@deffn {Command-line option} @code{--max-network-bench-value=<value>}
@deffnx {Environment variable} @code{LW6_MAX_NETWORK_BENCH_VALUE}
@deffnx {XML key} @code{max-network-bench-value}
Type: integer

Default value: 200

On network games, we need to be sure everyone can play in correct conditions,
therefore maps won't be loaded with more details than this, by default. You're
free to increase this parameter but it can cause your games to be unjoignable
by some people.
@end deffn

@subsection memory-bazooka-eraser
@deffn {Command-line option} @code{--memory-bazooka-eraser=<value>}
@deffnx {Environment variable} @code{LW6_MEMORY_BAZOOKA_ERASER}
@deffnx {XML key} @code{memory-bazooka-eraser}
Type: boolean

Default value: true

The memory eraser is a tool which will systematically fill allocated memory
with 'M', and overwrite all allocated bytes with 'F' before freeing memory. It
will even handle realloc calls. This is usefull to track bugs. Indeed, with
this option enabled, freshly allocated memory will never contain zeroes unless
one calls calloc, and if you ever free some memory zone before being done with
it, it will be filled with junk and therefore not be usable. The memory
bazooka must be big enough if you want this feature to actually work.
@end deffn

@subsection memory-bazooka-size
@deffn {Command-line option} @code{--memory-bazooka-size=<value>}
@deffnx {Environment variable} @code{LW6_MEMORY_BAZOOKA_SIZE}
@deffnx {XML key} @code{memory-bazooka-size}
Type: integer

Default value: 99991

The memory bazooka is a brute-force tool, conceived after a full night spent
tracking some memory leak. The idea is to keep a track of all allocated
pointers, when the data was allocated (timestamp), where in the code (file,
line), and even point out what data there is in that place. A memory bazooka
report at the end of the game will just show what's left. There should be
nothing. This parameter is here to avoid wasting CPU cycles on a feature which
is very debug-oriented and does not really make sense for the casual user. Set
it to 0 for best performance, something like 100 might just be helpfull, but
1000000 is the right way to seriously debug code.
@end deffn

@subsection net-log
@deffn {Command-line option} @code{--net-log=<value>}
@deffnx {Environment variable} @code{LW6_NET_LOG}
@deffnx {XML key} @code{net-log}
Type: boolean

Default value: false

Activates network log, that is, logs everything sent/received over the
network, except data which is sent through a third party library such as
libCurl. This is mostly for debugging purpose, it can lead to rather big log
files.
@end deffn

@subsection network-reliability
@deffn {Command-line option} @code{--network-reliability=<value>}
@deffnx {Environment variable} @code{LW6_NETWORK_RELIABILITY}
@deffnx {XML key} @code{network-reliability}
Type: integer

Default value: 1000
Min value: 1
Max value: 1000000000

The program assumes network is non-reliable, however the problem with those
assumptions is that when you test, network is always reliable, even with
non-garanteed protocols like UDP. This option will force the program to
actually ignore some calls to send or recv functions, simulating a network
disfunction. This is to ensure the internal mecanisms correcting network
problems do work for good, on daily regular use. It's not possible to set it
to a perfect behavior, never dropping any packet, however using the default
settings you probably won't even notice the performance drop induced by having
to fix problems. The highest the number is, the most reliable network will
look, the algorithm is simply to drop one message out of X.
@end deffn

@subsection open-relay
@deffn {Command-line option} @code{--open-relay=<value>}
@deffnx {Environment variable} @code{LW6_OPEN_RELAY}
@deffnx {XML key} @code{open-relay}
Type: boolean

Default value: false

Enables forwarding of abritrary network messages. If open relay is forbidden,
the game will only forward messages when physical sender and logical sender
are the same. This is to say if messages come from A for C and is sent by A to
B, B will forward it to C. But if message comes from X to C and is sent by A
to B, then B won't forward it. In practice, it means without open relay,
messages can only be forwarded once.
@end deffn

@subsection pilot-lag
@deffn {Command-line option} @code{--pilot-lag=<value>}
@deffnx {Environment variable} @code{LW6_PILOT_LAG}
@deffnx {XML key} @code{pilot-lag}
Type: integer

Default value: 10

Maximum lag, in rounds, until the game engine is slowed down. This will
typically be usefull if your computer is too slow for the map resolution and
the game speed you set up.
@end deffn

@subsection quick-start
@deffn {Command-line option} @code{--quick-start}
Start the game just like if the player had requested a quick start, without
showing any menu.
@end deffn

@subsection reset
@deffn {Command-line option} @code{--reset}
Clears the config file so that the game will run with defaults next time. The
idea is to get rid of traces of previous executions. The difference with
'--defaults' is that '--reset' does not run the game, while '--defaults' does.
@end deffn

@subsection reset-config-on-upgrade
@deffn {Command-line option} @code{--reset-config-on-upgrade=<value>}
@deffnx {Environment variable} @code{LW6_RESET_CONFIG_ON_UPGRADE}
@deffnx {XML key} @code{reset-config-on-upgrade}
Type: boolean

Default value: true

If set, then a reset (config file set to defaults) is run every time you
upgrade the game.
@end deffn

@subsection server
@deffn {Command-line option} @code{--server}
Start the game in server mode, without requiring any graphics backend. Server
mode is usefull if you just want to start a network node without hosting any
real game on it. It can be used to list existing nodes and sessions or as a
bounce server in case some clients can't contact each other because
firewalled. If you only want to start a server game on your computer, don't
use this option, just start the game normally and start a game server by
clicking on the GUI buttons.
@end deffn

@subsection simulate-basic
@deffn {Command-line option} @code{--simulate-basic}
Simulates some fights using the basic colors red, green, yellow and blue. Will
output on the console a percentage based on scores obtained by the teams. This
is typically for map designers and/or people who want to fiddle with team
profiles, if some team is really stronger than another one, it should appear
in these percentages.
@end deffn

@subsection simulate-full
@deffn {Command-line option} @code{--simulate-full}
Simulates some fights using all available colors. This can be very long, it
will run approximatively 1000 games consecutively, you can look in the log
file to see the progress. Will output on the console a percentage based on
scores obtained by the teams. This is typically for map designers and/or
people who want to fiddle with team profiles, if some team is really stronger
than another one, it should appear in these percentages.
@end deffn

@subsection target-fps
@deffn {Command-line option} @code{--target-fps=<value>}
@deffnx {Environment variable} @code{LW6_TARGET_FPS}
@deffnx {XML key} @code{target-fps}
Type: integer

Default value: 60

Defines how many frames will be displayed per second. Of course this is a
maximum value, if your hardware can't keep up with this value, display will
just be slow, no matter what value you define here. Note that you might really
wish to have something rather low here, to keep network and 'logic' function
responsiveness. Passed 60 frames per second, speed is really only for visual
comfort, as Liquid War 6 is now so fast-paced that it requires 200 frames/sec
to outperform opponents.
@end deffn

@subsection trap-errors
@deffn {Command-line option} @code{--trap-errors=<value>}
@deffnx {Environment variable} @code{LW6_TRAP_ERRORS}
@deffnx {XML key} @code{trap-errors}
Type: boolean

Default value: true

If set to true, will trap segmentation fault and floating point errors, and
display messages about those in a custom box instead of the default one
@end deffn

@subsection trojan
@deffn {Command-line option} @code{--trojan=<value>}
@deffnx {Environment variable} @code{LW6_TROJAN}
@deffnx {XML key} @code{trojan}
Type: boolean

Default value: false

Make the program act like a (stupid) trojan horse, trying to fake messages,
sending various inconsistent informations. This is to check the normal version
of the program is able to detect such a fake and kick it out of the game. It's
of no use for regular players, be sure to unset this if you want to play for
good.
@end deffn

@subsection z-decode
@deffn {Command-line option} @code{--z-decode}
If specified, program will take stdin and z-decode it to stdout. This is for
testing purpose (for network messages for instance). Z-decoding, here means
verifying there a Z at the beginning, base64 decode and pass the content
through Zlib inflating. I content is not Z-prefixed, will be returned as is.
@end deffn

@subsection z-encode
@deffn {Command-line option} @code{--z-encode}
If specified, program will take stdin and z-encode it to stdout. This is for
testing purpose (for network messages for instance). Z-encoding, here means
passing the message through Zlib deflating then base64 encoding and prefix it
with a Z.
@end deffn

