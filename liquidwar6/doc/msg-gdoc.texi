@deftypefun {char *} {lw6msg_oob_generate_info} (lw6nod_info_t * @var{info})
@var{info}:  the node to generate info about

Generates a standard response to the INFO question for OOB
(out of band) messages. The same message is sent, be it
on http or tcp or udp, so it's factorized here. Function
will lock the info object when needed.

@strong{Return value:}  newly allocated string.
@end deftypefun

@deftypefun {char *} {lw6msg_oob_generate_list} (lw6nod_info_t * @var{info})
@var{info}:  the node to generate info about

Generates a standard response to the LIST question for OOB
(out of band) messages. The same message is sent, be it
on http or tcp or udp, so it's factorized here. Function
will lock the info object when needed.

@strong{Return value:}  newly allocated string.
@end deftypefun

@deftypefun {char *} {lw6msg_oob_generate_pong} (lw6nod_info_t * @var{info})
@var{info}:  the node to generate info about

Generates a standard response to the PING question for OOB
(out of band) messages. The same message is sent, be it
on http or tcp or udp, so it's factorized here. Function
will lock the info object when needed.

@strong{Return value:}  newly allocated string.
@end deftypefun

@deftypefun {int} {lw6msg_oob_analyse_info_line} (lw6nod_info_t * @var{info}, char * @var{line})
@var{info}:  the info object to populate/update

@var{line}:  the line to read

Analyses a line of an INFO message (typically "Key: value") and
modifies the info object according to the information received.

@strong{Return value:}  1 if OK, 0 if error or if EOF.
@end deftypefun

@deftypefun {char *} {lw6msg_oob_analyse_pong} (char * @var{text})
@var{text}:  the text of the message to parse

Analyses a PONG message and gets the public_url from it, if
it exists.

@strong{Return value:}  newly allocated string containing public_url if OK, NULL on error.
@end deftypefun

@deftypefun {int} {lw6msg_test} (int @var{mode})
@var{mode}:  0 for check only, 1 for full test

Runs the @code{nod} module test suite.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

@deftypefun {int} {lw6msg_utils_is_space} (char @var{c})
@var{c}:  char to tesst

Tests if a character is a space. Note that this is not a universal
multi-purpose function in the sense it has its own understanding
fo 'what a space is'. In practice it's used to find the limit between words,
so it will interpret space (' ', char 32) as space but also tab, newline...
@end deftypefun

