@deftypefun {char *} {lw6msg_oob_generate_info} (lw6nod_info_t * @var{info})
@var{info}:  the node to generate info about

Generates a standard response to the INFO question for OOB
(out of band) messages. The same message is sent, be it
on http or tcp or udp, so it's factorized here. Function
will lock the info object when needed.

@strong{Return value:}  newly allocated string.
@end deftypefun

@deftypefun {char *} {lw6msg_oob_generate_list} (lw6nod_info_t * @var{info})
@var{info}:  the node to generate info about

Generates a standard response to the LIST question for OOB
(out of band) messages. The same message is sent, be it
on http or tcp or udp, so it's factorized here. Function
will lock the info object when needed.

@strong{Return value:}  newly allocated string.
@end deftypefun

@deftypefun {char *} {lw6msg_oob_generate_pong} (lw6nod_info_t * @var{info})
@var{info}:  the node to generate info about

Generates a standard response to the PING question for OOB
(out of band) messages. The same message is sent, be it
on http or tcp or udp, so it's factorized here. Function
will lock the info object when needed.

@strong{Return value:}  newly allocated string.
@end deftypefun

@deftypefun {char *} {lw6msg_oob_generate_request} (char * @var{command}, char * @var{remote_url}, char * @var{password}, char * @var{local_url})
@var{command}:  the command to send (PING, INFO, LIST)

@var{remote_url}:  the remote URL (used to seed password)

@var{password}:  the password, can be NULL or ""

@var{local_url}:  the public URL to send along with the message, can be NULL or ""

Generates a simple clear text OOB request, with a password if needed.

@strong{Return value:}  a newly allocated string
@end deftypefun

@deftypefun {int} {lw6msg_oob_analyse_request} (int * @var{syntax_ok}, char ** @var{command}, int * @var{password_ok}, char ** @var{remote_url}, char * @var{request}, char * @var{local_url}, char * @var{password})
@var{syntax_ok}:  will contain 1 if syntax is OK, 0 if not

@var{command}:  the command (out param, needs *not* to be freed) 

@var{password_ok}:  will contain 1 if password is OK, 0 if not

@var{remote_url}:  the URL detected, if provided (out param, does needs to be freed)

@var{request}:  the request to analyse

@var{local_url}:  the local url (used to seed password)

@var{password}:  the password to check against

Analyses a simple OOB message of the form COMMAND <passwd> <url>. 

@strong{Return value:}  1 if OK, 0 if not. If 0, check the value of password_ok. 
@end deftypefun

@deftypefun {char *} {lw6msg_oob_analyse_pong} (char * @var{text})
@var{text}:  the text of the message to parse

Analyses a PONG message and gets the public_url from it, if
it exists.

@strong{Return value:}  newly allocated string containing public_url if OK, NULL on error.
@end deftypefun

@deftypefun {int} {lw6msg_test} (int @var{mode})
@var{mode}:  0 for check only, 1 for full test

Runs the @code{nod} module test suite.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

@deftypefun {int} {lw6msg_utils_parse_key_value_to_ptr} (char ** @var{key}, char ** @var{value}, char * @var{line})
@var{key}:  will contain the key detected

@var{value}:  will contain the value detected

@var{line}:  the line to analyse

Analyses a trivial "KEY value" line and returns the key and the value in
the passed pointers.

@strong{Return value:}  1 if line OK (and in this case @code{key} and @code{value} are set), 0 if not.
@end deftypefun

@deftypefun {int} {lw6msg_utils_parse_key_value_to_assoc} (lw6sys_assoc_t ** @var{assoc}, char * @var{line})
@var{assoc}:  an assoc object which will contain the result

@var{line}:  the line to analyse

Analyses a trivial "KEY value" line and sets the @code{assoc} parameter according
to detected values. Note that @code{assoc} must be set to contain string, and
free them automatically with @code{lw6sys_free_callback} for instance.

@strong{Return value:}  1 if line OK (and in this case @code{assoc} is updated), 0 if not.
@end deftypefun

@deftypefun {char *} {lw6msg_utils_get_assoc_str_with_default} (lw6sys_assoc_t * @var{assoc}, char * @var{key}, char * @var{default_value})
@var{assoc}:  the string assoc to query

@var{key}:  the key to find in the assoc

@var{default_value}:  the default value to return

Queries a string assoc for a given value, and if not available, returns
default value. Not that default value (nor the assoc value) is copied,
so you must take care all remain valid until usage of returned value
is over.

@strong{Return value:}  a string, must not be freed.
@end deftypefun

@deftypefun {int} {lw6msg_utils_get_assoc_int_with_default} (lw6sys_assoc_t * @var{assoc}, char * @var{key}, int @var{default_value})
@var{assoc}:  the string assoc to query

@var{key}:  the key to find in the assoc

@var{default_value}:  the default value to return

Queries a string assoc for a given value, and if not available, returns
default value. Not that default value (nor the assoc value) is copied,
so you must take care all remain valid until usage of returned value
is over. This one will returned an int converted with @code{lw6sys_atoi}.

@strong{Return value:}  a string, must not be freed.
@end deftypefun

