
  
@deftp {Struct} {lw6bot_backend_s}

    
The bot bakckend is the first argument passed to any bot function, it contains reference to all the functions which can be used as well as a pointer on associated data. In OO, this would just be an object, with members and methods, using polymorphism through opaque pointers.     
@end deftp

@defcv {Member} {lw6bot_backend_s} {dl_handle}
@strong{Type:} @code{lw6dyn_dl_handle_t *}

@strong{Definition:} @code{lw6dyn_dl_handle_t* lw6bot_backend_s::dl_handle}


        
Handle on dynamic library (if it makes sense).         
@end defcv

@defcv {Member} {lw6bot_backend_s} {bot_context}
@strong{Type:} @code{void *}

@strong{Definition:} @code{void* lw6bot_backend_s::bot_context}


        
Bot specific data, what is behind this pointer really depends on the bot engine.         
@end defcv

@defcv {Member} {lw6bot_backend_s} {argc}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6bot_backend_s::argc}


        
The argc value passed to main.         
@end defcv

@defcv {Member} {lw6bot_backend_s} {argv}
@strong{Type:} @code{const char **}

@strong{Definition:} @code{const char** lw6bot_backend_s::argv}


        
The argv value passed to main.         
@end defcv

@defcv {Member} {lw6bot_backend_s} {id}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6bot_backend_s::id}


        
The id of the object, this is non-zero and unique within one run session, incremented at each object creation.         
@end defcv

@defcv {Member} {lw6bot_backend_s} {seed}
@strong{Type:} @code{lw6bot_seed_t}

@strong{Definition:} @code{lw6bot_seed_t lw6bot_backend_s::seed}


        
Parameters passed at initialization.         
@end defcv

@defcv {Member} {lw6bot_backend_s} {init}
@strong{Type:} @code{void *(*}

@strong{Definition:} @code{void*(* lw6bot_backend_s::init)(int argc, const char *argv[], lw6bot_data_t *data)}


        
Pointer on init callback, this is the code used when calling lw6bot_init.         
@end defcv

@defcv {Member} {lw6bot_backend_s} {quit}
@strong{Type:} @code{void(*}

@strong{Definition:} @code{void(* lw6bot_backend_s::quit)(void *bot_context)}


        
Pointer on quit callback, this is the code used when calling lw6bot_quit.         
@end defcv

@defcv {Member} {lw6bot_backend_s} {next_move}
@strong{Type:} @code{int(*}

@strong{Definition:} @code{int(* lw6bot_backend_s::next_move)(void *bot_context, int *x, int *y, lw6bot_data_t *data)}


        
Pointer on next_move callback, this is the code used when calling lw6bot_next_move.         
@end defcv

@defcv {Member} {lw6bot_backend_s} {repr}
@strong{Type:} @code{char *(*}

@strong{Definition:} @code{char*(* lw6bot_backend_s::repr)(void *bot_context, u_int32_t id)}


        
Pointer on repr callback, this is the code used when calling lw6bot_repr.         
@end defcv



  
@deftp {Struct} {lw6bot_data_s}

    
Data used by a bot, those are essentially stable data passed as an argument plus changing data, that is, the game state.     
@end deftp

@defcv {Member} {lw6bot_data_s} {game_state}
@strong{Type:} @code{lw6ker_game_state_t *}

@strong{Definition:} @code{lw6ker_game_state_t* lw6bot_data_s::game_state}


        
Game state the bot will have to base its reflexion upon. This not need be always the same game state, the pointer might change, but it should always refer to the same logical game, that is, at least, same struct.         
@end defcv

@defcv {Member} {lw6bot_data_s} {param}
@strong{Type:} @code{lw6bot_param_t}

@strong{Definition:} @code{lw6bot_param_t lw6bot_data_s::param}


        
Constant parameters passed to the bot at creation.         
@end defcv



  
@deftp {Struct} {lw6bot_param_s}

    
Parameters usable by a bot engine. Those are the stable, fixed parameters passed at bot creation, they don't change during the bot life.     
@end deftp

@defcv {Member} {lw6bot_param_s} {speed}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6bot_param_s::speed}


        
Speed of the bot, this is a value between 0.0f and 1.0f, 1 means normal speed, 0 is as slow as possible. Values over 1 will make the bot act/move faster than usual.         
@end defcv

@defcv {Member} {lw6bot_param_s} {iq}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6bot_param_s::iq}


        
IQ is supposed to reflect the cleverness of the bot. The default is 100 (this value is basically a percentage), 0 means just so stupid, and a high value, for instance 200, means very clever.         
@end defcv

@defcv {Member} {lw6bot_param_s} {cursor_id}
@strong{Type:} @code{u_int16_t}

@strong{Definition:} @code{u_int16_t lw6bot_param_s::cursor_id}


        
The cursor ID, which is a 16-bit non-null integer.         
@end defcv



  
@deftp {Struct} {lw6bot_seed_s}

    
Parameters passed at bot creation, the only use for this is to simplify the protoype of the init function.     
@end deftp

@defcv {Member} {lw6bot_seed_s} {game_state}
@strong{Type:} @code{lw6ker_game_state_t *}

@strong{Definition:} @code{lw6ker_game_state_t* lw6bot_seed_s::game_state}


        
Game state, that is, the level used, the fighters on it, the other cursors positions, and so on.         
@end defcv

@defcv {Member} {lw6bot_seed_s} {pilot}
@strong{Type:} @code{lw6pil_pilot_t *}

@strong{Definition:} @code{lw6pil_pilot_t* lw6bot_seed_s::pilot}


        
This can be NULL, it's a pilot object which can be used in some case, when, for instance, in dirty read mode, we want to read the level on the fly without syncing.         
@end defcv

@defcv {Member} {lw6bot_seed_s} {dirty_read}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6bot_seed_s::dirty_read}


        
The dirty read mode (between 0 and 2).         
@end defcv

@defcv {Member} {lw6bot_seed_s} {param}
@strong{Type:} @code{lw6bot_param_t}

@strong{Definition:} @code{lw6bot_param_t lw6bot_seed_s::param}


        
Parameters given to the bot at creation.         
@end defcv


