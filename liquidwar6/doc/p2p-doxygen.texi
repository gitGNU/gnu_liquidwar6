

  
@deftp {Struct} {lw6p2p_db_s}

    
Handler on a database connection, this must be used to pass order to store/retrieve persistent informations about peers.     
@end deftp

@defcv {Member} {lw6p2p_db_s} {id}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6p2p_db_s::id}


        
The first member, id, is the same as the internal _lw6p2p_db_t structure. The rest of it is hidden. The program will cast from lw6p2p_db_t to _lw6p2p_db_t internally.         
@end defcv



  
@deftp {Struct} {lw6p2p_entry_s}

    
This entry object matches as close as possible the corresponding (node) entry in the database.     
@end deftp

@defcv {Member} {lw6p2p_entry_s} {creation_timestamp}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::creation_timestamp}


Node creation timestamp.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {version}
@strong{Type:} @code{char}

@strong{Definition:} @code{char lw6p2p_entry_s::version[LW6P2P_VERSION_SIZE+1]}


Node version.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {codename}
@strong{Type:} @code{char}

@strong{Definition:} @code{char lw6p2p_entry_s::codename[LW6P2P_CODENAME_SIZE+1]}


Node codename.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {stamp}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::stamp}


Node stamp.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {id}
@strong{Type:} @code{char}

@strong{Definition:} @code{char lw6p2p_entry_s::id[LW6P2P_ID_SIZE+1]}


Node id, 64-bit integer as an hexa string.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {url}
@strong{Type:} @code{char}

@strong{Definition:} @code{char lw6p2p_entry_s::url[LW6P2P_URL_SIZE+1]}


Node URL, the public URL it displays to others.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {title}
@strong{Type:} @code{char}

@strong{Definition:} @code{char lw6p2p_entry_s::title[LW6P2P_TITLE_SIZE+1]}


Node title, the short readable name for the node.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {description}
@strong{Type:} @code{char}

@strong{Definition:} @code{char lw6p2p_entry_s::description[LW6P2P_DESCRIPTION_SIZE+1]}


Node description, mode details about this node.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {has_password}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::has_password}


Wether it requires a password or not.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {bench}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::bench}


Node bench, reflects how powerfull it is.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {open_relay}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::open_relay}


Wether this node acts as an open relay or not.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {community_id}
@strong{Type:} @code{char}

@strong{Definition:} @code{char lw6p2p_entry_s::community_id[LW6P2P_COMMUNITY_ID_SIZE+1]}


Community id, 64-bit integer as an hexa string.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {round}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::round}


Current round.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {level}
@strong{Type:} @code{char}

@strong{Definition:} @code{char lw6p2p_entry_s::level[LW6P2P_LEVEL_SIZE+1]}


Level used.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {required_bench}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::required_bench}


Required bench to connect to this community.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {nb_colors}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::nb_colors}


Number of colors playing.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {max_nb_colors}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::max_nb_colors}


Maximum number of colors allowed to play.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {nb_cursors}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::nb_cursors}


Number of cursors playing.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {max_nb_cursors}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::max_nb_cursors}


Maximum number of cursors allowed to play.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {nb_nodes}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::nb_nodes}


Number of nodes playing.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {max_nb_nodes}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::max_nb_nodes}


Maximum number of nodes playing.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {ip}
@strong{Type:} @code{char}

@strong{Definition:} @code{char lw6p2p_entry_s::ip[LW6P2P_IP_SIZE+1]}


IP addess of node.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {port}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::port}


IP port of node.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {last_ping_timestamp}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::last_ping_timestamp}


Last time this node has been pinged.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {ping_delay_msec}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::ping_delay_msec}


Ping delay, in milliseconds.         
        
@end defcv

@defcv {Member} {lw6p2p_entry_s} {available}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6p2p_entry_s::available}


Wether this node is ready to accept connections.         
        
@end defcv



  
@deftp {Struct} {lw6p2p_node_s}

    
Node object, the main network object, this one will encaspulate everything else, the node can connect to other peers, listen on the network, it's the high-level interface.     
@end deftp

@defcv {Member} {lw6p2p_node_s} {id}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6p2p_node_s::id}


        
The first member, id, is the same as the internal _lw6p2p_node_t structure. The rest of it is hidden. The program will cast from lw6p2p_node_t to _lw6p2p_node_t internally.         
@end defcv


