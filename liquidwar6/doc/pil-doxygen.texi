

  
@deftp {Struct} {lw6pil_add_args_s}

    
Arguments passed to the ADD command.     
@end deftp

@defcv {Member} {lw6pil_add_args_s} {cursor_id}
@strong{Type:} @code{u_int16_t}

@strong{Definition:} @code{u_int16_t lw6pil_add_args_s::cursor_id}


Cursor ID (16-bit non-zero unsigned int).         
        
@end defcv

@defcv {Member} {lw6pil_add_args_s} {team_color}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_add_args_s::team_color}


Team color (0 to 9).         
        
@end defcv



  
@deftp {Struct} {lw6pil_command_s}

    
Command structure, contains both full-text version and parsed information.     
@end deftp

@defcv {Member} {lw6pil_command_s} {seq}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6pil_command_s::seq}


        
The sequence number, a very large 64-bit integer. The sequence is here because the round wouldn't be able to stand multiple games for long as it is only 32-bit. OTOH making round a 64-bit would cause multithread problems because of non-atomicity of 64-bit affectation on truely 32-bit platforms.         
@end defcv

@defcv {Member} {lw6pil_command_s} {round}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_command_s::round}


The game round.         
        
@end defcv

@defcv {Member} {lw6pil_command_s} {node_id}
@strong{Type:} @code{u_int64_t}

@strong{Definition:} @code{u_int64_t lw6pil_command_s::node_id}


The node ID issuing that command.         
        
@end defcv

@defcv {Member} {lw6pil_command_s} {code}
@strong{Type:} @code{lw6pil_command_code_t}

@strong{Definition:} @code{lw6pil_command_code_t lw6pil_command_s::code}


The command code.         
        
@end defcv

@defcv {Member} {lw6pil_command_s} {args}
@strong{Type:} @code{lw6pil_command_args_t}

@strong{Definition:} @code{lw6pil_command_args_t lw6pil_command_s::args}


The command arguments, parsed.         
        
@end defcv

@defcv {Member} {lw6pil_command_s} {text}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6pil_command_s::text}


The original full text of the command.         
        
@end defcv



  
@deftp {Struct} {lw6pil_dump_args_s}

    
Arguments passed to the DUMP command.     
@end deftp

@defcv {Member} {lw6pil_dump_args_s} {level_hexa}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6pil_dump_args_s::level_hexa}


Hexa dump of level.         
        
@end defcv

@defcv {Member} {lw6pil_dump_args_s} {game_struct_hexa}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6pil_dump_args_s::game_struct_hexa}


Hexa dump of game struct.         
        
@end defcv

@defcv {Member} {lw6pil_dump_args_s} {game_state_hexa}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6pil_dump_args_s::game_state_hexa}


Hexa dump of game state.         
        
@end defcv



  
@deftp {Struct} {lw6pil_dump_s}

    
Stores the information contained in a dump, this is just an utility struct used to hold all the data (level, game struct, game state and pilot) together     
@end deftp

@defcv {Member} {lw6pil_dump_s} {level}
@strong{Type:} @code{lw6map_level_t *}

@strong{Definition:} @code{lw6map_level_t* lw6pil_dump_s::level}


Will hold the new level if a dump is received.         
        
@end defcv

@defcv {Member} {lw6pil_dump_s} {game_struct}
@strong{Type:} @code{lw6ker_game_struct_t *}

@strong{Definition:} @code{lw6ker_game_struct_t* lw6pil_dump_s::game_struct}


Will hold the new game struct if a dump is received.         
        
@end defcv

@defcv {Member} {lw6pil_dump_s} {game_state}
@strong{Type:} @code{lw6ker_game_state_t *}

@strong{Definition:} @code{lw6ker_game_state_t* lw6pil_dump_s::game_state}


Will hold the new game state if a dump is received.         
        
@end defcv

@defcv {Member} {lw6pil_dump_s} {pilot}
@strong{Type:} @code{lw6pil_pilot_t *}

@strong{Definition:} @code{lw6pil_pilot_t* lw6pil_dump_s::pilot}


Will hold the new pilot if a dump is received.         
        
@end defcv



  
@deftp {Struct} {lw6pil_local_cursors_s}

    
Contains information about all local cursors, which will override information from game state.     
@end deftp

@defcv {Member} {lw6pil_local_cursors_s} {main_cursor_id}
@strong{Type:} @code{u_int16_t}

@strong{Definition:} @code{u_int16_t lw6pil_local_cursors_s::main_cursor_id}


        
Main cursor ID (16-bit non-zero unsigned int). By main, we usually mean the mouse-driven one but necessarily. But still, this is a cursor which will have a special role, it will be used to center the map if needed, among other things.         
@end defcv

@defcv {Member} {lw6pil_local_cursors_s} {main_i}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_local_cursors_s::main_i}


Main cursor index.         
        
@end defcv

@defcv {Member} {lw6pil_local_cursors_s} {nb_cursors}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_local_cursors_s::nb_cursors}


Number of cursors.         
        
@end defcv

@defcv {Member} {lw6pil_local_cursors_s} {cursors}
@strong{Type:} @code{lw6pil_local_cursor_t}

@strong{Definition:} @code{lw6pil_local_cursor_t lw6pil_local_cursors_s::cursors[LW6MAP_MAX_NB_CURSORS]}


The cursors array.         
        
@end defcv



  
@deftp {Struct} {lw6pil_local_cursor_s}

    
Stores informations about local cursors. This is usefull for user feedback. Indeed there can be some delay between, for instance, a mouse move or a keyboard press, and the time this information makes it through the whole pipeline. Players wouldn't understand such a lag so for local cursors we override the information from the game state with that information we get right from the GUI.     
@end deftp

@defcv {Member} {lw6pil_local_cursor_s} {cursor_id}
@strong{Type:} @code{u_int16_t}

@strong{Definition:} @code{u_int16_t lw6pil_local_cursor_s::cursor_id}


Cursor ID (16-bit non-zero unsigned int).         
        
@end defcv

@defcv {Member} {lw6pil_local_cursor_s} {x}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_local_cursor_s::x}


X position (map coords).         
        
@end defcv

@defcv {Member} {lw6pil_local_cursor_s} {y}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_local_cursor_s::y}


Y position (map coords).         
        
@end defcv

@defcv {Member} {lw6pil_local_cursor_s} {mouse_controlled}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_local_cursor_s::mouse_controlled}


        
Wether this cursor is mouse controlled. If yes, then information will be taken directly from the mouse driver.         
@end defcv

@defcv {Member} {lw6pil_local_cursor_s} {is_main}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_local_cursor_s::is_main}


Wether this cursor is the main cursor.         
        
@end defcv



  
@deftp {Struct} {lw6pil_pilot_s}

    
Pilot is a container for several game states, a reference state which we can rely upon and a draft state which is anticipated to provide interactive feedback but reflects non-validated informations. The first member, id, is the same as the internal _lw6pil_pilot_t structure. The rest of it is hidden. The program will cast from lw6pil_pilot_t to _lw6pil_pilot_t internally.     
@end deftp

@defcv {Member} {lw6pil_pilot_s} {id}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6pil_pilot_s::id}


        
The id of the object, this is non-zero and unique within one run session, incremented at each object creation.         
@end defcv



  
@deftp {Struct} {lw6pil_remove_args_s}

    
Arguments passed to the REMOVE command.     
@end deftp

@defcv {Member} {lw6pil_remove_args_s} {cursor_id}
@strong{Type:} @code{u_int16_t}

@strong{Definition:} @code{u_int16_t lw6pil_remove_args_s::cursor_id}


Cursor ID (16-bit non-zero unsigned int).         
        
@end defcv



  
@deftp {Struct} {lw6pil_set_args_s}

    
Arguments passed to the SET command.     
@end deftp

@defcv {Member} {lw6pil_set_args_s} {cursor_id}
@strong{Type:} @code{u_int64_t}

@strong{Definition:} @code{u_int64_t lw6pil_set_args_s::cursor_id}


Cursor ID (16-bit non-zero unsigned int).         
        
@end defcv

@defcv {Member} {lw6pil_set_args_s} {x}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_set_args_s::x}


X position (map coords).         
        
@end defcv

@defcv {Member} {lw6pil_set_args_s} {y}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_set_args_s::y}


Y position (map coords).         
        
@end defcv

@defcv {Member} {lw6pil_set_args_s} {fire}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_set_args_s::fire}


Wether to activate primary weapon.         
        
@end defcv

@defcv {Member} {lw6pil_set_args_s} {fire2}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_set_args_s::fire2}


Wether to activate secondary weapon.         
        
@end defcv



  
@deftp {Struct} {lw6pil_worker_s}

    
Worker thread data, used to calculate stuff in a separate thread. The principle is simple, it tries to keep up with a given target round, whenever this round isn't reached, it computes more and more rounds.     
@end deftp

@defcv {Member} {lw6pil_worker_s} {run}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_worker_s::run}


Wether this thread should run, 0 will stop it.         
        
@end defcv

@defcv {Member} {lw6pil_worker_s} {current_round}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_worker_s::current_round}


Current game round.         
        
@end defcv

@defcv {Member} {lw6pil_worker_s} {target_round}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_worker_s::target_round}


Round up to which we should compute stuff.         
        
@end defcv

@defcv {Member} {lw6pil_worker_s} {computed_rounds}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_worker_s::computed_rounds}


How many rounds where computed since object creation.         
        
@end defcv

@defcv {Member} {lw6pil_worker_s} {over}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6pil_worker_s::over}


Wether the game is over or not.         
        
@end defcv

@defcv {Member} {lw6pil_worker_s} {compute_thread}
@strong{Type:} @code{lw6sys_thread_handler_t *}

@strong{Definition:} @code{lw6sys_thread_handler_t* lw6pil_worker_s::compute_thread}


The thread that does the job.         
        
@end defcv

@defcv {Member} {lw6pil_worker_s} {global_mutex}
@strong{Type:} @code{lw6sys_mutex_t *}

@strong{Definition:} @code{lw6sys_mutex_t* lw6pil_worker_s::global_mutex}


Global data mutex.         
        
@end defcv

@defcv {Member} {lw6pil_worker_s} {compute_mutex}
@strong{Type:} @code{lw6sys_mutex_t *}

@strong{Definition:} @code{lw6sys_mutex_t* lw6pil_worker_s::compute_mutex}


Mutex used for the computing thread.         
        
@end defcv

@defcv {Member} {lw6pil_worker_s} {commands_spinlock}
@strong{Type:} @code{lw6sys_spinlock_t *}

@strong{Definition:} @code{lw6sys_spinlock_t* lw6pil_worker_s::commands_spinlock}


        
Mutex used for the commands object, uses a spinlock instead of a standard lock as updating commands is (should) be pretty fast.         
@end defcv

@defcv {Member} {lw6pil_worker_s} {game_state}
@strong{Type:} @code{lw6ker_game_state_t *}

@strong{Definition:} @code{lw6ker_game_state_t* lw6pil_worker_s::game_state}


Game state the computing thread is working on.         
        
@end defcv

@defcv {Member} {lw6pil_worker_s} {commands}
@strong{Type:} @code{lw6sys_list_t *}

@strong{Definition:} @code{lw6sys_list_t* lw6pil_worker_s::commands}


List of commands to be processed.         
        
@end defcv

@defcv {Member} {lw6pil_worker_s} {dump}
@strong{Type:} @code{lw6pil_dump_t}

@strong{Definition:} @code{lw6pil_dump_t lw6pil_worker_s::dump}


Dump information.         
        
@end defcv


