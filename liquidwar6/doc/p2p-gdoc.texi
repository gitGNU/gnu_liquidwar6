@deftypefun {lw6p2p_db_t *} {lw6p2p_db_open} (int @var{argc}, const char * [] @var{argv}, char * @var{name})
@var{argc}:  number of args, as passed to @code{main}

@var{argv}:  args array, as passed to @code{main}

@var{name}:  the database name

Creates a new database object. Normally there's only one object
like this at a given time, it can be shared among various nodes.
The database name is appended to user directory path, this allows
different databases to be created, in theory.

@strong{Return value:}  a pointer on the newly created object.
@end deftypefun

@deftypefun {void} {lw6p2p_db_close} (lw6p2p_db_t * @var{db})
@var{db}:  the db to close

Closes a db object, memory ressources will be freed.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {char *} {lw6p2p_db_repr} (lw6p2p_db_t * @var{db})
@var{db}:  the db to work on

Gives a readable representation of the db

@strong{Return value:}  a dynamically allocated string
@end deftypefun

@deftypefun {int} {lw6p2p_db_reset} (int @var{argc}, const char * [] @var{argv}, char * @var{name})
@var{argc}:  number of args, as passed to @code{main}

@var{argv}:  args array, as passed to @code{main}

@var{name}:  the database name

Clears the database. Simply removes the db file, in fact. Do
not call while database is used...

@strong{Return value:}  1 on success, 0 if failed.
@end deftypefun

@deftypefun {char *} {lw6p2p_db_default_name} ()

Returns the default database name, should be p2p.db (this is a relative path,
not an absolute path, will be appended to user dir).

@strong{Return value:}  the default database name, need not (must not) be freed.
@end deftypefun

@deftypefun {int} {_lw6p2p_db_now} (_lw6p2p_db_t * @var{db})
@var{db}:  the db object concerned (used to calculate time origin)

Returns a timestamp suitable for db usage. The reason we don't use
regular timestamps is that they are 1) too accurate (msec is useless
for what's involved here) and 2) too big and likely to be negative
in signed mode even if converted to seconds.

@strong{Return value:}  a timestamp, 0 means "beginning of program" (think of it as uptime)
@end deftypefun

@deftypefun {lw6p2p_entry_t *} {lw6p2p_entry_new} (int @var{creation_timestamp}, char * @var{version}, char * @var{codename}, int @var{stamp}, char * @var{id}, char * @var{url}, char * @var{title}, char * @var{description}, int @var{has_password}, int @var{bench}, int @var{open_relay}, char * @var{community_id}, int @var{round}, char * @var{level}, int @var{required_bench}, int @var{nb_colors}, int @var{max_nb_colors}, int @var{nb_cursors}, int @var{max_nb_cursors}, int @var{nb_nodes}, int @var{max_nb_nodes}, char * @var{ip}, int @var{port}, int @var{last_ping_timestamp}, int @var{ping_delay_msec}, int @var{available})
@var{creation_timestamp}:  when it has been created, UNIX timestamp

@var{version}:  version of the node

@var{codename}:  codename of the node

@var{stamp}:  stamp of the node

@var{id}:  id of the node (string representation)

@var{url}:  public url of the node

@var{title}:  title of the node

@var{description}:  description of the node

@var{has_password}:  wether node is password protected or not

@var{bench}:  node bench

@var{open_relay}:  wether the node is in open relay mode or not

@var{round}:  current round

@var{level}:  current level played

@var{required_bench}:  current bench

@var{nb_colors}:  number of colors playing

@var{max_nb_colors}:  maximum number of colors

@var{nb_cursors}:  number of cursors playing

@var{max_nb_cursors}:  maximum number of cursors

@var{nb_nodes}:  number of nodes playing

@var{max_nb_nodes}:  maximum number of nodes

@var{ip}:  node ip (string representation)

@var{port}:  node port

@var{last_ping_timestamp}:  UNIX timestamp of last contact with node

@var{ping_delay_msec}:  ping delay, in milliseconds

@var{available}:  wether node is available, wether we can connect to it

Creates a new p2p entry. Will accept NULL parameters for strings
as well as arbitrary long strings, will simply cut them short if
there aren't already limited to max size.

@strong{Return value:}  newly allocated object
@end deftypefun

@deftypefun {void} {lw6p2p_entry_free} (lw6p2p_entry_t * @var{entry})
@var{entry}:  entry to free

Frees a p2p entry.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {char *} {lw6p2p_entry_repr} (lw6p2p_entry_t * @var{entry})
@var{entry}:  entry to represent

Gives a human-readable representation of the entry

@strong{Return value:}  dynamically allocated string
@end deftypefun

@deftypefun {lw6p2p_node_t *} {lw6p2p_node_new} (int @var{argc}, const char * [] @var{argv}, lw6p2p_db_t * @var{db}, char * @var{client_backends}, char * @var{server_backends}, char * @var{bind_ip}, int @var{bind_port}, int @var{broadcast}, u_int64_t @var{node_id}, char * @var{public_url}, char * @var{title}, char * @var{description}, char * @var{password}, int @var{bench}, int @var{open_relay}, char * @var{known_nodes}, int @var{network_reliability}, int @var{trojan})
@var{argc}:  number of args, as passed to @code{main}

@var{argv}:  args array, as passed to @code{main}

@var{db}:  the database to use

@var{client_backends}:  the list of client backends to use

@var{server_backends}:  the list of server backends to use

@var{bind_ip}:  the IP address to bind on

@var{bind_port}:  the IP port to listen on

@var{broadcast}:  wether broadcast is allowed on this node

@var{node_id}:  the node id

@var{public_url}:  the public URL we want to show

@var{title}:  the title of the node

@var{description}:  the description of the node

@var{password}:  the password to use

@var{bench}:  the bench of the node (its power)

@var{open_relay}:  act as an open relay or not

@var{known_nodes}:  list of already known nodes

@var{network_reliability}:  drop 1 packet out of X

@var{trojan}:  act as a stupid trojan to test out automatic kick-off 

Creates a new "pear to pear" node. This will fire the server
and allow client access, on demand. A lot of stuff can be done
in the background once this is called.

@strong{Return value:}  a pointer on the newly created objects.
@end deftypefun

@deftypefun {void} {lw6p2p_node_free} (lw6p2p_node_t * @var{node})
@var{node}:  the node to free

Frees a node object, all network communications will be shut.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {char *} {lw6p2p_node_repr} (lw6p2p_node_t * @var{node})
@var{node}:  the node to work on

Gives a readable representation of the node

@strong{Return value:}  a dynamically allocated string
@end deftypefun

@deftypefun {int} {lw6p2p_node_poll} (lw6p2p_node_t * @var{node}, lw6sys_progress_t * @var{progress})
@var{node}:  the node to poll

@var{progress}:  progress indicator to show the advancement

Polls a p2p node. This must be called on a regular basis, else
network communication is stalled.

@strong{Return value:}  1 on success, 0 on error.
@end deftypefun

@deftypefun {void} {lw6p2p_node_close} (lw6p2p_node_t * @var{node})
@var{node}:  the node to close

Closes a p2p node. Closing is necessary in some contexts, for instance
scheme/smob instanciation when you want to release the object ressources
(sockets, ports, threads...) *before* it is deleted by, for instance,
a garbage collector.

@strong{Return value:}  1 on success, 0 on error.
@end deftypefun

@deftypefun {u_int64_t} {lw6p2p_node_get_id} (lw6p2p_node_t * @var{node})
@var{node}:  the node to query

Returns the node id, an id which is supposed to uniquely identify
the node at run-time.

@strong{Return value:}  numerical id.
@end deftypefun

@deftypefun {lw6sys_list_t *} {lw6p2p_node_get_entries} (lw6p2p_node_t * @var{node})
@var{node}:  node to query

Returns a list of all known nodes, this is a plain
table dump, sorted so that the most likely to be interesting
to connect oneself to are listed *last*, this is just a (little)
optimization, since we know we'll need to parse this list
to construct a Guile object, we reverse the order.

@strong{Return value:}  list object containing @code{lw6p2p_entry_t} objects
@end deftypefun

@deftypefun {int} {lw6p2p_node_server_start} (lw6p2p_node_t * @var{node}, int64_t @var{seq_0})
@var{node}:  node to start

@var{seq_0}:  seq when starting the server

Starts a node in server mode, if node was previously connected to other
nodes, disconnect it from any peer.

@strong{Return value:}  1 on success, 0 on failure.
@end deftypefun

@deftypefun {int} {lw6p2p_node_client_join} (lw6p2p_node_t * @var{node}, u_int64_t @var{remote_id}, const char * @var{remote_url}, lw6sys_progress_t * @var{progress})
@var{node}:  node to use

@var{remote_id}:  id of remote node to join

@var{remote_url}:  url of remote node to join

@var{progress}:  progress indicator to show end-user the advancement of process

Starts a node in client mode, joins the given node, 
if node was previously connected to other
nodes, disconnect it from any peer.

@strong{Return value:}  1 on success, 0 on failure.
@end deftypefun

@deftypefun {void} {lw6p2p_node_disconnect} (lw6p2p_node_t * @var{node})
@var{node}:  node to disconnect

Disconnects a node, if node was previously connected to other
nodes, disconnect it from any peer. Note that this does not
affect out-of-band connections, only real game-related links.

@strong{Return value:}  1 on success, 0 on failure.
@end deftypefun

@deftypefun {int} {lw6p2p_node_update_info} (lw6p2p_node_t * @var{node}, int @var{round}, const char * @var{level}, int @var{nb_colors}, int @var{max_nb_colors}, int @var{nb_cursors}, int @var{max_nb_cursors}, int @var{nb_nodes}, int @var{max_nb_nodes}, int @var{game_screenshot_size}, void * @var{game_screenshot_data})
@var{node}:  node to update

@var{round}:  the current round (can have an offset with real round number)

@var{level}:  the name of the current level (map)

@var{nb_colors}:  number of colors playing

@var{max_nb_colors}:  max number of colors allowed

@var{nb_cursors}:  number of cursors playing

@var{max_nb_cursors}:  max number of cursors allowed

@var{nb_nodes}:  number of nodes playing

@var{max_nb_nodes}:  max number of nodes allowed

@var{game_screenshot_size}:  size of screenshot (bytes)

@var{game_screenshot_data}:  screenshot data (byte buffer, contains JPEG)

Updates node info, that is, all the data/metadata which can be displayed
to other peers and are, by nature, dynamic.

@strong{Return value:}  1 on success, 0 on failure.
@end deftypefun

@deftypefun {void} {lw6p2p_node_calibrate} (lw6p2p_node_t * @var{node}, int64_t @var{timestamp}, int64_t @var{seq})
@var{node}:  the object to calibrate

@var{timestamp}:  the current ticks setting (1000 ticks per second)

@var{seq}:  the round expected to be returned with this ticks value

Calibrates the node, so that sequence numbering is consistent
accross nodes.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int64_t} {lw6p2p_node_get_local_seq_0} (lw6p2p_node_t * @var{node})
@var{node}:  the object to query

Gets the reference local seq_0 for this node, the information
is taken from the warehouse, even if node->calibrate_seq
should probably return the same value.

@strong{Return value:}  the seq.
@end deftypefun

@deftypefun {int64_t} {lw6p2p_node_get_local_seq_last} (lw6p2p_node_t * @var{node})
@var{node}:  the object to query

Gets the local seq_last for this node, the information
is taken from the warehouse, which has parsed the messages
and this information can in return be used to avoid maintaining
outside of the node the information about what was the last
seq used for a local message.

@strong{Return value:}  the seq.
@end deftypefun

@deftypefun {int64_t} {lw6p2p_node_get_seq_min} (lw6p2p_node_t * @var{node})
@var{node}:  the object to query

Gets the minimum seq registered, not of utmost importance but
interesting for debugging purpose, to check what's in the
warehouse.

@strong{Return value:}  the seq.
@end deftypefun

@deftypefun {int64_t} {lw6p2p_node_get_seq_max} (lw6p2p_node_t * @var{node})
@var{node}:  the object to query

Gets the maximum seq registered, this is typically used for guessing
which seq might make sense for this node, but in a real example one
should rely on algorithm/ker-side kept values.

@strong{Return value:}  the seq.
@end deftypefun

@deftypefun {int64_t} {lw6p2p_node_get_seq_draft} (lw6p2p_node_t * @var{node})
@var{node}:  the object to query

Gets the seq of the current draft as the warehouse understands it.
Note that it's the responsibility of the caller to update the pilot
according to this, this information is just about what is in the
warehouse, not necessarly what is in the pilot / game_state.

@strong{Return value:}  the seq.
@end deftypefun

@deftypefun {int64_t} {lw6p2p_node_get_seq_reference} (lw6p2p_node_t * @var{node})
@var{node}:  the object to query

Gets the seq of the current reference as the warehouse understands it.
Note that it's the responsibility of the caller to update the pilot
according to this, this information is just about what is in the
warehouse, not necessarly what is in the pilot / game_state.

@strong{Return value:}  the seq.
@end deftypefun

@deftypefun {int} {lw6p2p_node_is_seed_needed} (lw6p2p_node_t * @var{node})
@var{node}:  node to query

Returns true (1) if the local node needs to send a SEED message.
A SEED message will basically be sent at the beginning of a session
when a client connects to a server. Basically this message is of
no use but it's interesting to have a short message (not DUMP) to
start with.

@strong{Return value:}  1 if SEED must be sent.
@end deftypefun

@deftypefun {int} {lw6p2p_node_is_dump_needed} (lw6p2p_node_t * @var{node})
@var{node}:  node to query

Returns true (1) if the local node needs to send a DUMP message.
A DUMP message will basically reset level, game struct, game state,
it's typically sent when a new player is connected. This function
will return true once then always 0 so one should really act and
do something whenever it's called and returns 1.

@strong{Return value:}  1 if DUMP must be sent.
@end deftypefun

@deftypefun {int} {lw6p2p_node_put_local_msg} (lw6p2p_node_t * @var{node}, const char * @var{msg}, int @var{reg})
@var{node}:  node object to use

@var{msg}:  message

@var{reg}:  wether the message should register the author on other nodes

Puts a message in the object. The message will be splitted into
several atoms if needed, it can be arbitrary long.

@strong{Return value:}  1 on success, 0 on error
@end deftypefun

@deftypefun {char *} {lw6p2p_node_get_next_reference_msg} (lw6p2p_node_t * @var{node}, lw6sys_progress_t * @var{progress})
@var{node}:  node to query

@var{progress}:  progress indicator (read/write)

Get the next waiting reference msg. This is used to maintain
the stable reference game state we can rely upon. One is
supposed to call this until it returns NULL, then switch
draft messages.

@strong{Return value:}  newly allocated string, must be freed.
@end deftypefun

@deftypefun {char *} {lw6p2p_node_get_next_draft_msg} (lw6p2p_node_t * @var{node}, lw6sys_progress_t * @var{progress})
@var{node}:  node to query

@var{progress}:  progress indicator (read/write)

Get the next waiting draft msg. This is used to maintain
the anticipated draft game state we use for drawing. One is
supposed to call this after all reference messages have been
treated.

@strong{Return value:}  newly allocated string, must be freed.
@end deftypefun

@deftypefun {int} {lw6p2p_test} (int @var{mode})
@var{mode}:  0 for check only, 1 for full test

Runs the @code{p2p} module test suite. This test can fail if one
cannot bind on some network port, in a general manner it is
dependent on the network environment, so it's better if there's
some sort of human control on it.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

