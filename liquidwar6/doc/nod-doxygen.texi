

  
@deftp {Struct} {lw6nod_const_info_s}

    
Constant informations about a node, these are informations that do not vary through the node's life, so they are set object creation then left unchanged.     
@end deftp

@defcv {Member} {lw6nod_const_info_s} {program}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6nod_const_info_s::program}


Program, this should be set to liquidwar6.         
        
@end defcv

@defcv {Member} {lw6nod_const_info_s} {version}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6nod_const_info_s::version}


The version of the program.         
        
@end defcv

@defcv {Member} {lw6nod_const_info_s} {codename}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6nod_const_info_s::codename}


The codename of the program.         
        
@end defcv

@defcv {Member} {lw6nod_const_info_s} {stamp}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_const_info_s::stamp}


The stamp of the program.         
        
@end defcv

@defcv {Member} {lw6nod_const_info_s} {ref_info}
@strong{Type:} @code{lw6nod_ref_info_t}

@strong{Definition:} @code{lw6nod_ref_info_t lw6nod_const_info_s::ref_info}


Reference information, how to uniquely identify node.         
        
@end defcv

@defcv {Member} {lw6nod_const_info_s} {title}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6nod_const_info_s::title}


The title of the node, its readable short name.         
        
@end defcv

@defcv {Member} {lw6nod_const_info_s} {description}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6nod_const_info_s::description}


More details about the node.         
        
@end defcv

@defcv {Member} {lw6nod_const_info_s} {has_password}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_const_info_s::has_password}


Wether the node is password protected or not.         
        
@end defcv

@defcv {Member} {lw6nod_const_info_s} {password}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6nod_const_info_s::password}


The password used, cleartext.         
        
@end defcv

@defcv {Member} {lw6nod_const_info_s} {bench}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_const_info_s::bench}


The node bench.         
        
@end defcv

@defcv {Member} {lw6nod_const_info_s} {open_relay}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_const_info_s::open_relay}


Wether the node acts as an open relay or not.         
        
@end defcv

@defcv {Member} {lw6nod_const_info_s} {creation_timestamp}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6nod_const_info_s::creation_timestamp}


The node creation timestamp.         
        
@end defcv

@defcv {Member} {lw6nod_const_info_s} {idle_screenshot_size}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_const_info_s::idle_screenshot_size}


Size of the screenshot (in bytes) when in idle mode.         
        
@end defcv

@defcv {Member} {lw6nod_const_info_s} {idle_screenshot_data}
@strong{Type:} @code{void *}

@strong{Definition:} @code{void* lw6nod_const_info_s::idle_screenshot_data}


        
Idle mode screenshot data. This is just a plain JPEG buffer, which will be used as a fallback if there's no real screenshot available.         
@end defcv



  
@deftp {Struct} {lw6nod_dyn_info_s}

    
Dynamic informations about a node, these are informations that vary through the node's life, so they are unset at object creation and can then be updated from game context.     
@end deftp

@defcv {Member} {lw6nod_dyn_info_s} {community_id_int}
@strong{Type:} @code{u_int64_t}

@strong{Definition:} @code{u_int64_t lw6nod_dyn_info_s::community_id_int}


        
The ID of the community this node belongs to, as a 64-bit unsigned integer.         
@end defcv

@defcv {Member} {lw6nod_dyn_info_s} {community_id_str}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6nod_dyn_info_s::community_id_str}


        
The ID of the community this node belongs to, as a string (64-bit integer converted to hexa).         
@end defcv

@defcv {Member} {lw6nod_dyn_info_s} {community_peers}
@strong{Type:} @code{lw6nod_ref_info_t}

@strong{Definition:} @code{lw6nod_ref_info_t lw6nod_dyn_info_s::community_peers[LW6NOD_MAX_NB_PEERS]}


        
The list of community members, you need to refer to the nb_nodes member to know quickly how many members they are but actually, in practice, there can be holes in this array, you need to check each slot, for instance 0 can be filled, 2 can be filled too, but 1 be empty. Note that we don't count ourselves in this list.         
@end defcv

@defcv {Member} {lw6nod_dyn_info_s} {round}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_dyn_info_s::round}


The current round.         
        
@end defcv

@defcv {Member} {lw6nod_dyn_info_s} {level}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6nod_dyn_info_s::level}


The current level.         
        
@end defcv

@defcv {Member} {lw6nod_dyn_info_s} {required_bench}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_dyn_info_s::required_bench}


The required bench to connect to this node.         
        
@end defcv

@defcv {Member} {lw6nod_dyn_info_s} {nb_colors}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_dyn_info_s::nb_colors}


Number of colors playing.         
        
@end defcv

@defcv {Member} {lw6nod_dyn_info_s} {max_nb_colors}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_dyn_info_s::max_nb_colors}


Maximum number of colors allowed to play.         
        
@end defcv

@defcv {Member} {lw6nod_dyn_info_s} {nb_cursors}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_dyn_info_s::nb_cursors}


Number of cursors playing.         
        
@end defcv

@defcv {Member} {lw6nod_dyn_info_s} {max_nb_cursors}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_dyn_info_s::max_nb_cursors}


Maximum number of cursors allowed to play.         
        
@end defcv

@defcv {Member} {lw6nod_dyn_info_s} {nb_nodes}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_dyn_info_s::nb_nodes}


Number of nodes playing.         
        
@end defcv

@defcv {Member} {lw6nod_dyn_info_s} {max_nb_nodes}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_dyn_info_s::max_nb_nodes}


Maximum number of nodes allowed to play.         
        
@end defcv

@defcv {Member} {lw6nod_dyn_info_s} {game_screenshot_size}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6nod_dyn_info_s::game_screenshot_size}


Size of the screenshot, in bytes.         
        
@end defcv

@defcv {Member} {lw6nod_dyn_info_s} {game_screenshot_data}
@strong{Type:} @code{void *}

@strong{Definition:} @code{void* lw6nod_dyn_info_s::game_screenshot_data}


        
Game screenshot data. This is just a plain JPEG buffer, which will be served when peers and/or web clients want to gather informations about the game. This can be NULL, in that the fallback constant data will be used.         
@end defcv



  
@deftp {Struct} {lw6nod_info_s}

    
Informations about a node. Note that in practice this structure is just used to describe our current node, there might be several instances of this if a program instanciates several nodes, but another data structure is used to store information about peers.typedef struct lw6nod_info_s     
@end deftp

@defcv {Member} {lw6nod_info_s} {mutex}
@strong{Type:} @code{lw6sys_mutex_t *}

@strong{Definition:} @code{lw6sys_mutex_t* lw6nod_info_s::mutex}


Mutex used to access dynamic informations.         
        
@end defcv

@defcv {Member} {lw6nod_info_s} {const_info}
@strong{Type:} @code{lw6nod_const_info_t}

@strong{Definition:} @code{lw6nod_const_info_t lw6nod_info_s::const_info}


Constant informations, never changes.         
        
@end defcv

@defcv {Member} {lw6nod_info_s} {dyn_info}
@strong{Type:} @code{lw6nod_dyn_info_t}

@strong{Definition:} @code{lw6nod_dyn_info_t lw6nod_info_s::dyn_info}


        
Dynamic informations, can be updated. Do not modify this directly, instead use appropriate functions which will use mutexes properly.         
@end defcv

@defcv {Member} {lw6nod_info_s} {discovered_nodes}
@strong{Type:} @code{lw6sys_hash_t *}

@strong{Definition:} @code{lw6sys_hash_t* lw6nod_info_s::discovered_nodes}


        
List of discovered nodes, do not access this directly, instead use proper query functions which, in turn, will use mutexes properly.         
@end defcv

@defcv {Member} {lw6nod_info_s} {verified_nodes}
@strong{Type:} @code{lw6sys_list_t *}

@strong{Definition:} @code{lw6sys_list_t* lw6nod_info_s::verified_nodes}


        
List of verified nodes, do not access this directly, instead use proper query functions which, in turn, will use mutexes properly.         
@end defcv



  
@deftp {Struct} {lw6nod_ref_info_s}

    
Reference information about a node, this is all you need to uniquely identify a node. In theory, only the ID are only the URL are enough, in practice it's not that bad to have some redundancy, plus it makes it easier and faster to connect to them and transmit informations.     
@end deftp

@defcv {Member} {lw6nod_ref_info_s} {id_int}
@strong{Type:} @code{u_int64_t}

@strong{Definition:} @code{u_int64_t lw6nod_ref_info_s::id_int}


The id of the node, as an integer (64-bit unsigned).         
        
@end defcv

@defcv {Member} {lw6nod_ref_info_s} {id_str}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6nod_ref_info_s::id_str}


The id of the node, as a string (64-bit converted to hexa).         
        
@end defcv

@defcv {Member} {lw6nod_ref_info_s} {url}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6nod_ref_info_s::url}


The public URL of the node.         
        
@end defcv


