

  
@deftp {Struct} {lw6gui_button_s}

    
Used to store a complete button state, along with repeat informations, queues. It might be overkill for basic cases, having different types of buttons (union?) for different cases might be a good idea.     
@end deftp

@defcv {Member} {lw6gui_button_s} {is_pressed}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_button_s::is_pressed}


Wether button is pressed, 1 means pressed, 0 unpressed.         
        
@end defcv

@defcv {Member} {lw6gui_button_s} {press_queue}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_button_s::press_queue}


        
Each time the button is pressed, this increases, each times one "pops" a press from it, it's decreased. This allows for button buffering, as events might take some time to go through the pipeline given the heavily multithreaded nature of the dsp/gfx couple.         
@end defcv

@defcv {Member} {lw6gui_button_s} {simple_click_queue}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_button_s::simple_click_queue}


        
Simple-click counter, as opposed to double-click. A "simple-click" is validated when one has pressed the button, and then waiting long enough to discard the possibility to double-click. This is not really buffered, queue will ignore simple-clicks if one is already buffered.         
@end defcv

@defcv {Member} {lw6gui_button_s} {double_click_queue}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_button_s::double_click_queue}


        
Double-click counter. This is not really buffered, queue will ignore double-clicks if one is already buffered.         
@end defcv

@defcv {Member} {lw6gui_button_s} {triple_click_queue}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_button_s::triple_click_queue}


        
Triple-click counter. This is not really buffered, queue will ignore triple-clicks if one is already buffered.         
@end defcv

@defcv {Member} {lw6gui_button_s} {last_press}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6gui_button_s::last_press}


Timestamp of last key press.         
        
@end defcv

@defcv {Member} {lw6gui_button_s} {last_repeat}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6gui_button_s::last_repeat}


Timestamp of last key repeat.         
        
@end defcv

@defcv {Member} {lw6gui_button_s} {double_click_t1}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6gui_button_s::double_click_t1}


        
Used to handle multiple-clicks, this is the timestamp of the click "2 clicks ago".         
@end defcv

@defcv {Member} {lw6gui_button_s} {double_click_t2}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6gui_button_s::double_click_t2}


        
Used to handle multiple-clicks, this is the timestamp of the click just before the last click.         
@end defcv

@defcv {Member} {lw6gui_button_s} {double_click_t3}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6gui_button_s::double_click_t3}


        
Used to handle multiple-clicks, this is the timestamp of the last click.         
@end defcv



  
@deftp {Struct} {lw6gui_fullscreen_modes_s}

    
    
@end deftp

@defcv {Member} {lw6gui_fullscreen_modes_s} {low}
@strong{Type:} @code{lw6gui_video_mode_t}

@strong{Definition:} @code{lw6gui_video_mode_t lw6gui_fullscreen_modes_s::low}


        
        
@end defcv

@defcv {Member} {lw6gui_fullscreen_modes_s} {standard}
@strong{Type:} @code{lw6gui_video_mode_t}

@strong{Definition:} @code{lw6gui_video_mode_t lw6gui_fullscreen_modes_s::standard}


        
        
@end defcv

@defcv {Member} {lw6gui_fullscreen_modes_s} {high}
@strong{Type:} @code{lw6gui_video_mode_t}

@strong{Definition:} @code{lw6gui_video_mode_t lw6gui_fullscreen_modes_s::high}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_input_s}

    
    
@end deftp

@defcv {Member} {lw6gui_input_s} {need_sync}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_input_s::need_sync}


        
        
@end defcv

@defcv {Member} {lw6gui_input_s} {keyboard}
@strong{Type:} @code{lw6gui_keyboard_t}

@strong{Definition:} @code{lw6gui_keyboard_t lw6gui_input_s::keyboard}


        
        
@end defcv

@defcv {Member} {lw6gui_input_s} {mouse}
@strong{Type:} @code{lw6gui_mouse_t}

@strong{Definition:} @code{lw6gui_mouse_t lw6gui_input_s::mouse}


        
        
@end defcv

@defcv {Member} {lw6gui_input_s} {joysticks}
@strong{Type:} @code{lw6gui_joystick_t}

@strong{Definition:} @code{lw6gui_joystick_t lw6gui_input_s::joysticks[LW6GUI_NB_JOYSTICKS]}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_joystick_s}

    
    
@end deftp

@defcv {Member} {lw6gui_joystick_s} {pad_up}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_joystick_s::pad_up}


        
        
@end defcv

@defcv {Member} {lw6gui_joystick_s} {pad_down}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_joystick_s::pad_down}


        
        
@end defcv

@defcv {Member} {lw6gui_joystick_s} {pad_left}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_joystick_s::pad_left}


        
        
@end defcv

@defcv {Member} {lw6gui_joystick_s} {pad_right}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_joystick_s::pad_right}


        
        
@end defcv

@defcv {Member} {lw6gui_joystick_s} {button_a}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_joystick_s::button_a}


        
        
@end defcv

@defcv {Member} {lw6gui_joystick_s} {button_b}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_joystick_s::button_b}


        
        
@end defcv

@defcv {Member} {lw6gui_joystick_s} {button_c}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_joystick_s::button_c}


        
        
@end defcv

@defcv {Member} {lw6gui_joystick_s} {button_d}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_joystick_s::button_d}


        
        
@end defcv

@defcv {Member} {lw6gui_joystick_s} {button_e}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_joystick_s::button_e}


        
        
@end defcv

@defcv {Member} {lw6gui_joystick_s} {button_f}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_joystick_s::button_f}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_keyboard_s}

    
Stores a complete keyboard state.     
@end deftp

@defcv {Member} {lw6gui_keyboard_s} {arrow_up}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_keyboard_s::arrow_up}


        
State of keyboard up arrow. This can be the combination of several keys, for instance the numeric pad up arrow, and the corresponding arrow pad key.         
@end defcv

@defcv {Member} {lw6gui_keyboard_s} {arrow_down}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_keyboard_s::arrow_down}


        
State of keyboard down arrow. This can be the combination of several keys, for instance the numeric pad down arrow, and the corresponding arrow pad key.         
@end defcv

@defcv {Member} {lw6gui_keyboard_s} {arrow_left}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_keyboard_s::arrow_left}


        
State of keyboard left arrow. This can be the combination of several keys, for instance the numeric pad left arrow, and the corresponding arrow pad key.         
@end defcv

@defcv {Member} {lw6gui_keyboard_s} {arrow_right}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_keyboard_s::arrow_right}


        
State of keyboard right arrow. This can be the combination of several keys, for instance the numeric pad right arrow, and the corresponding arrow pad key.         
@end defcv

@defcv {Member} {lw6gui_keyboard_s} {key_enter}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_keyboard_s::key_enter}


        
State of keyboard ENTER key. This can be the combination of several keys, for instance both the numeric pad ENTER and the standard, default one.         
@end defcv

@defcv {Member} {lw6gui_keyboard_s} {key_esc}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_keyboard_s::key_esc}


        
State of keyboard ESC key. This can be the combination of several keys, for instance both the standard ESC key and another key.         
@end defcv

@defcv {Member} {lw6gui_keyboard_s} {key_ctrl}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_keyboard_s::key_ctrl}


        
State of keyboard ESC key. This can be the combination of several keys, for instance both left and right CTRL keys.         
@end defcv

@defcv {Member} {lw6gui_keyboard_s} {key_alt}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_keyboard_s::key_alt}


        
State of keyboard ESC key. This can be the combination of several keys, for instance both left and right ALT keys.         
@end defcv

@defcv {Member} {lw6gui_keyboard_s} {key_pgup}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_keyboard_s::key_pgup}


        
State of keyboard PAGE UP key. This can be the combination of several keys.         
@end defcv

@defcv {Member} {lw6gui_keyboard_s} {key_pgdown}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_keyboard_s::key_pgdown}


        
State of keyboard PAGE UP key. This can be the combination of several keys.         
@end defcv

@defcv {Member} {lw6gui_keyboard_s} {queue}
@strong{Type:} @code{lw6sys_list_t *}

@strong{Definition:} @code{lw6sys_list_t* lw6gui_keyboard_s::queue}


List of events, contains keypress objects.         
        
@end defcv

@defcv {Member} {lw6gui_keyboard_s} {keys_state}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_keyboard_s::keys_state[LW6GUI_NB_KEYS]}


Array of button states, indexed by keycodes.         
        
@end defcv



  
@deftp {Struct} {lw6gui_keypress_s}

    
Keypress information, contains more than just a keycode but also meta/readable informations about it.     
@end deftp

@defcv {Member} {lw6gui_keypress_s} {keysym}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_keypress_s::keysym}


        
The keysym, note that this is implementation specific. In practice, SDL uniformizes this, but there's no garantee all graphics engine are SDL based, so don't rely on this too much outside the graphics backend.         
@end defcv

@defcv {Member} {lw6gui_keypress_s} {unicode}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_keypress_s::unicode}


Unicode code for this letter/key.         
        
@end defcv

@defcv {Member} {lw6gui_keypress_s} {label}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6gui_keypress_s::label}


        
Readable label for the key, typically usable in a "choose keyboard settings" interface.         
@end defcv



  
@deftp {Struct} {lw6gui_look_s}

    
The look structure contains everything the renderer needs to skin the display. This is where one specifies the color set, dynamic zoom effect, and possibly other things.     
@end deftp

@defcv {Member} {lw6gui_look_s} {id}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6gui_look_s::id}


        
The id of the object, this is non-zero and unique within one run session, incremented at each object creation.         
@end defcv

@defcv {Member} {lw6gui_look_s} {dynamic_zoom}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_look_s::dynamic_zoom}


        
Dynamic zoom, this is multiplicated by the map zoom, and gives the global zoom, the one finally used.         
@end defcv

@defcv {Member} {lw6gui_look_s} {gfx_quality}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_look_s::gfx_quality}


        
Overall graphics quality, the higher the better, will trigger various parameters, depending on the renderer.         
@end defcv

@defcv {Member} {lw6gui_look_s} {style}
@strong{Type:} @code{lw6map_style_t}

@strong{Definition:} @code{lw6map_style_t lw6gui_look_s::style}


        
A style structure which will override the one from the map, depending on the local options (config file, environnement, command-line options).         
@end defcv



  
@deftp {Struct} {lw6gui_menuitem_s}

    
    
@end deftp

@defcv {Member} {lw6gui_menuitem_s} {id}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6gui_menuitem_s::id}


        
        
@end defcv

@defcv {Member} {lw6gui_menuitem_s} {label}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6gui_menuitem_s::label}


        
        
@end defcv

@defcv {Member} {lw6gui_menuitem_s} {tooltip}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6gui_menuitem_s::tooltip}


        
        
@end defcv

@defcv {Member} {lw6gui_menuitem_s} {value}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_menuitem_s::value}


        
        
@end defcv

@defcv {Member} {lw6gui_menuitem_s} {enabled}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_menuitem_s::enabled}


        
        
@end defcv

@defcv {Member} {lw6gui_menuitem_s} {selected}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_menuitem_s::selected}


        
        
@end defcv

@defcv {Member} {lw6gui_menuitem_s} {colored}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_menuitem_s::colored}


        
        
@end defcv

@defcv {Member} {lw6gui_menuitem_s} {last_change}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_menuitem_s::last_change}


        
        
@end defcv

@defcv {Member} {lw6gui_menuitem_s} {last_select}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_menuitem_s::last_select}


        
        
@end defcv

@defcv {Member} {lw6gui_menuitem_s} {last_unselect}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_menuitem_s::last_unselect}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_menu_s}

    
    
@end deftp

@defcv {Member} {lw6gui_menu_s} {id}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6gui_menu_s::id}


        
        
@end defcv

@defcv {Member} {lw6gui_menu_s} {title}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6gui_menu_s::title}


        
        
@end defcv

@defcv {Member} {lw6gui_menu_s} {help}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6gui_menu_s::help}


        
        
@end defcv

@defcv {Member} {lw6gui_menu_s} {popup}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6gui_menu_s::popup}


        
        
@end defcv

@defcv {Member} {lw6gui_menu_s} {nb_items}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_menu_s::nb_items}


        
        
@end defcv

@defcv {Member} {lw6gui_menu_s} {esc_item}
@strong{Type:} @code{lw6gui_menuitem_t *}

@strong{Definition:} @code{lw6gui_menuitem_t* lw6gui_menu_s::esc_item}


        
        
@end defcv

@defcv {Member} {lw6gui_menu_s} {items}
@strong{Type:} @code{lw6gui_menuitem_t **}

@strong{Definition:} @code{lw6gui_menuitem_t** lw6gui_menu_s::items}


        
        
@end defcv

@defcv {Member} {lw6gui_menu_s} {selected_item}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_menu_s::selected_item}


        
        
@end defcv

@defcv {Member} {lw6gui_menu_s} {first_item_displayed}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_menu_s::first_item_displayed}


        
        
@end defcv

@defcv {Member} {lw6gui_menu_s} {nb_items_displayed}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_menu_s::nb_items_displayed}


        
        
@end defcv

@defcv {Member} {lw6gui_menu_s} {order_of_selected_on_display}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_menu_s::order_of_selected_on_display}


        
        
@end defcv

@defcv {Member} {lw6gui_menu_s} {allow_scroll}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_menu_s::allow_scroll}


        
        
@end defcv

@defcv {Member} {lw6gui_menu_s} {breadcrumbs}
@strong{Type:} @code{lw6sys_list_t *}

@strong{Definition:} @code{lw6sys_list_t* lw6gui_menu_s::breadcrumbs}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_mouse_pointer_s}

    
    
@end deftp

@defcv {Member} {lw6gui_mouse_pointer_s} {pos_x}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_mouse_pointer_s::pos_x}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_pointer_s} {pos_y}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_mouse_pointer_s::pos_y}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_pointer_s} {speed_x}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_mouse_pointer_s::speed_x}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_pointer_s} {speed_y}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_mouse_pointer_s::speed_y}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_mouse_s}

    
    
@end deftp

@defcv {Member} {lw6gui_mouse_s} {moved}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_mouse_s::moved}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_s} {last_moved}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6gui_mouse_s::last_moved}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_s} {screen_pointer}
@strong{Type:} @code{lw6gui_mouse_pointer_t}

@strong{Definition:} @code{lw6gui_mouse_pointer_t lw6gui_mouse_s::screen_pointer}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_s} {map_pointer}
@strong{Type:} @code{lw6gui_mouse_pointer_t}

@strong{Definition:} @code{lw6gui_mouse_pointer_t lw6gui_mouse_s::map_pointer}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_s} {screen_drag_start}
@strong{Type:} @code{lw6gui_mouse_pointer_t}

@strong{Definition:} @code{lw6gui_mouse_pointer_t lw6gui_mouse_s::screen_drag_start}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_s} {drag_mode}
@strong{Type:} @code{lw6gui_drag_mode_t}

@strong{Definition:} @code{lw6gui_drag_mode_t lw6gui_mouse_s::drag_mode}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_s} {menu_position}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_mouse_s::menu_position}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_s} {menu_scroll}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_mouse_s::menu_scroll}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_s} {menu_esc}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_mouse_s::menu_esc}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_s} {button_left}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_mouse_s::button_left}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_s} {button_right}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_mouse_s::button_right}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_s} {button_middle}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_mouse_s::button_middle}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_s} {wheel_up}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_mouse_s::wheel_up}


        
        
@end defcv

@defcv {Member} {lw6gui_mouse_s} {wheel_down}
@strong{Type:} @code{lw6gui_button_t}

@strong{Definition:} @code{lw6gui_button_t lw6gui_mouse_s::wheel_down}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_move_pad_s}

    
Standard interface for joypad-like interfaces, can also be used to map keyboard arrows.     
@end deftp

@defcv {Member} {lw6gui_move_pad_s} {up}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_move_pad_s::up}


Up button (boolean).         
        
@end defcv

@defcv {Member} {lw6gui_move_pad_s} {down}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_move_pad_s::down}


Down button (boolean).         
        
@end defcv

@defcv {Member} {lw6gui_move_pad_s} {left}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_move_pad_s::left}


Left button (boolean).         
        
@end defcv

@defcv {Member} {lw6gui_move_pad_s} {right}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_move_pad_s::right}


Right button (boolean).         
        
@end defcv



  
@deftp {Struct} {lw6gui_point_s}

    
    
@end deftp

@defcv {Member} {lw6gui_point_s} {x}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_point_s::x}


        
        
@end defcv

@defcv {Member} {lw6gui_point_s} {y}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_point_s::y}


        
        
@end defcv

@defcv {Member} {lw6gui_point_s} {z}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_point_s::z}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_quad_s}

    
    
@end deftp

@defcv {Member} {lw6gui_quad_s} {p1}
@strong{Type:} @code{lw6gui_point_t}

@strong{Definition:} @code{lw6gui_point_t lw6gui_quad_s::p1}


        
        
@end defcv

@defcv {Member} {lw6gui_quad_s} {p2}
@strong{Type:} @code{lw6gui_point_t}

@strong{Definition:} @code{lw6gui_point_t lw6gui_quad_s::p2}


        
        
@end defcv

@defcv {Member} {lw6gui_quad_s} {p3}
@strong{Type:} @code{lw6gui_point_t}

@strong{Definition:} @code{lw6gui_point_t lw6gui_quad_s::p3}


        
        
@end defcv

@defcv {Member} {lw6gui_quad_s} {p4}
@strong{Type:} @code{lw6gui_point_t}

@strong{Definition:} @code{lw6gui_point_t lw6gui_quad_s::p4}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_rect_array_s}

    
    
@end deftp

@defcv {Member} {lw6gui_rect_array_s} {source}
@strong{Type:} @code{lw6sys_whd_t}

@strong{Definition:} @code{lw6sys_whd_t lw6gui_rect_array_s::source}


        
        
@end defcv

@defcv {Member} {lw6gui_rect_array_s} {limits}
@strong{Type:} @code{lw6gui_rect_t}

@strong{Definition:} @code{lw6gui_rect_t lw6gui_rect_array_s::limits}


        
        
@end defcv

@defcv {Member} {lw6gui_rect_array_s} {tile_size}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_rect_array_s::tile_size}


        
        
@end defcv

@defcv {Member} {lw6gui_rect_array_s} {border_size}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_rect_array_s::border_size}


        
        
@end defcv

@defcv {Member} {lw6gui_rect_array_s} {tile_spacing}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_rect_array_s::tile_spacing}


        
        
@end defcv

@defcv {Member} {lw6gui_rect_array_s} {nb_tiles_w}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_rect_array_s::nb_tiles_w}


        
        
@end defcv

@defcv {Member} {lw6gui_rect_array_s} {nb_tiles_h}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_rect_array_s::nb_tiles_h}


        
        
@end defcv

@defcv {Member} {lw6gui_rect_array_s} {nb_tiles}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_rect_array_s::nb_tiles}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_rect_s}

    
    
@end deftp

@defcv {Member} {lw6gui_rect_s} {x1}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_rect_s::x1}


        
        
@end defcv

@defcv {Member} {lw6gui_rect_s} {y1}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_rect_s::y1}


        
        
@end defcv

@defcv {Member} {lw6gui_rect_s} {x2}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_rect_s::x2}


        
        
@end defcv

@defcv {Member} {lw6gui_rect_s} {y2}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_rect_s::y2}


        
        
@end defcv

@defcv {Member} {lw6gui_rect_s} {w}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_rect_s::w}


        
        
@end defcv

@defcv {Member} {lw6gui_rect_s} {h}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_rect_s::h}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_repeat_settings_s}

    
Parameters used to handle repeat. This is used both by keys and buttons (joystick buttons and mouse buttons).     
@end deftp

@defcv {Member} {lw6gui_repeat_settings_s} {delay}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_repeat_settings_s::delay}


        
Delay, in milliseconds, after which a given key/button enters repeat mode.         
@end defcv

@defcv {Member} {lw6gui_repeat_settings_s} {interval}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_repeat_settings_s::interval}


        
Interval, in milliseconds, between two key/button press events in repeat mode.         
@end defcv

@defcv {Member} {lw6gui_repeat_settings_s} {double_click_delay}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_repeat_settings_s::double_click_delay}


        
If pressed twice within this delay (in milliseconds) then a double-click event is generated.         
@end defcv



  
@deftp {Struct} {lw6gui_segment_s}

    
    
@end deftp

@defcv {Member} {lw6gui_segment_s} {p1}
@strong{Type:} @code{lw6gui_point_t}

@strong{Definition:} @code{lw6gui_point_t lw6gui_segment_s::p1}


        
        
@end defcv

@defcv {Member} {lw6gui_segment_s} {p2}
@strong{Type:} @code{lw6gui_point_t}

@strong{Definition:} @code{lw6gui_point_t lw6gui_segment_s::p2}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_smoother_s}

    
    
@end deftp

@defcv {Member} {lw6gui_smoother_s} {s1}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_smoother_s::s1}


        
        
@end defcv

@defcv {Member} {lw6gui_smoother_s} {y1}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_smoother_s::y1}


        
        
@end defcv

@defcv {Member} {lw6gui_smoother_s} {y2}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_smoother_s::y2}


        
        
@end defcv

@defcv {Member} {lw6gui_smoother_s} {t1}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6gui_smoother_s::t1}


        
        
@end defcv

@defcv {Member} {lw6gui_smoother_s} {duration}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_smoother_s::duration}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_triangle_s}

    
    
@end deftp

@defcv {Member} {lw6gui_triangle_s} {p1}
@strong{Type:} @code{lw6gui_point_t}

@strong{Definition:} @code{lw6gui_point_t lw6gui_triangle_s::p1}


        
        
@end defcv

@defcv {Member} {lw6gui_triangle_s} {p2}
@strong{Type:} @code{lw6gui_point_t}

@strong{Definition:} @code{lw6gui_point_t lw6gui_triangle_s::p2}


        
        
@end defcv

@defcv {Member} {lw6gui_triangle_s} {p3}
@strong{Type:} @code{lw6gui_point_t}

@strong{Definition:} @code{lw6gui_point_t lw6gui_triangle_s::p3}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_video_mode_s}

    
Contains the parameters for a video mode, regardless of driver used.     
@end deftp

@defcv {Member} {lw6gui_video_mode_s} {width}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_video_mode_s::width}


Width, in pixels.         
        
@end defcv

@defcv {Member} {lw6gui_video_mode_s} {height}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_video_mode_s::height}


Height, in pixels.         
        
@end defcv

@defcv {Member} {lw6gui_video_mode_s} {fullscreen}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_video_mode_s::fullscreen}


1 for fullscreen mode, 0 for windowed mode.         
        
@end defcv



  
@deftp {Struct} {lw6gui_viewport_s}

    
    
@end deftp

@defcv {Member} {lw6gui_viewport_s} {map_shape}
@strong{Type:} @code{lw6sys_whd_t}

@strong{Definition:} @code{lw6sys_whd_t lw6gui_viewport_s::map_shape}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {screen_shape}
@strong{Type:} @code{lw6sys_whd_t}

@strong{Definition:} @code{lw6sys_whd_t lw6gui_viewport_s::screen_shape}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {center_x}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_viewport_s::center_x}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {center_y}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_viewport_s::center_y}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {old_center_x}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_viewport_s::old_center_x}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {old_center_y}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_viewport_s::old_center_y}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {speed_x}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_viewport_s::speed_x}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {speed_y}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_viewport_s::speed_y}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {x_polarity}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_viewport_s::x_polarity}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {y_polarity}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_viewport_s::y_polarity}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {x_wrap}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_viewport_s::x_wrap}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {y_wrap}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6gui_viewport_s::y_wrap}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {drawable}
@strong{Type:} @code{lw6gui_zone_t}

@strong{Definition:} @code{lw6gui_zone_t lw6gui_viewport_s::drawable}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {map_main}
@strong{Type:} @code{lw6gui_zone_t}

@strong{Definition:} @code{lw6gui_zone_t lw6gui_viewport_s::map_main}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {map_main_clipped}
@strong{Type:} @code{lw6gui_zone_t}

@strong{Definition:} @code{lw6gui_zone_t lw6gui_viewport_s::map_main_clipped}


        
        
@end defcv

@defcv {Member} {lw6gui_viewport_s} {map_visible}
@strong{Type:} @code{lw6gui_zone_t}

@strong{Definition:} @code{lw6gui_zone_t lw6gui_viewport_s::map_visible}


        
        
@end defcv



  
@deftp {Struct} {lw6gui_zone_s}

    
    
@end deftp

@defcv {Member} {lw6gui_zone_s} {x1}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_zone_s::x1}


        
        
@end defcv

@defcv {Member} {lw6gui_zone_s} {y1}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_zone_s::y1}


        
        
@end defcv

@defcv {Member} {lw6gui_zone_s} {x2}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_zone_s::x2}


        
        
@end defcv

@defcv {Member} {lw6gui_zone_s} {y2}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_zone_s::y2}


        
        
@end defcv

@defcv {Member} {lw6gui_zone_s} {w}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_zone_s::w}


        
        
@end defcv

@defcv {Member} {lw6gui_zone_s} {h}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6gui_zone_s::h}


        
        
@end defcv


