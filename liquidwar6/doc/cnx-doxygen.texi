

  
@deftp {Struct} {lw6cnx_backlog_filter_data_s}

    
Structure used to filter backlog data, that is, data we try to send but were unable to send. The idea is to have the information of the current timestamp (now) + a reference to the last failure timestamp, so that if it failed just now, we don't try anymore.     
@end deftp

@defcv {Member} {lw6cnx_backlog_filter_data_s} {specific_data}
@strong{Type:} @code{void *}

@strong{Definition:} @code{void* lw6cnx_backlog_filter_data_s::specific_data}


        
Pointer specific data, depends on backend using the connection and backlog.         
@end defcv

@defcv {Member} {lw6cnx_backlog_filter_data_s} {now}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6cnx_backlog_filter_data_s::now}


        
Current timestamp, we could technically use a call to a function to get it but the idea is to cache it for both performance and the fact it's easier to detect the fact that it failed during the current filtering.         
@end defcv



  
@deftp {Struct} {lw6cnx_backlog_item_s}

    
Holds an item backlog, that is a message associated to a timestamp and whatever usesfull metadata that can help handling the message.     
@end deftp

@defcv {Member} {lw6cnx_backlog_item_s} {timestamp}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6cnx_backlog_item_s::timestamp}


        
Timestamp when the message was first put in the backlog, this is used for sorting messages and also to find out messages that were in the queue for a very very long time.         
@end defcv

@defcv {Member} {lw6cnx_backlog_item_s} {str}
@strong{Type:} @code{const char *}

@strong{Definition:} @code{const char* lw6cnx_backlog_item_s::str}


        
The message itself, dynamically allocated string.         
@end defcv



  
@deftp {Struct} {lw6cnx_backlog_s}

    
Used to hold per-connection message backlog, the connection might use it or not, it's up to it to decide wether this backlog is usefull, however the code is mutualized.     
@end deftp

@defcv {Member} {lw6cnx_backlog_s} {list}
@strong{Type:} @code{lw6sys_list_t *}

@strong{Definition:} @code{lw6sys_list_t* lw6cnx_backlog_s::list}


        
List of lw6cnx_backlog_t items.         
@end defcv



  
@deftp {Struct} {lw6cnx_connection_s}

    
This structure holds all data associated to a physical connexion with a remote peer. This includes informations about the local node, informations about the peer, and protocol specific details. Depending on which backend is used to handle the connection, it will behave differently. If you search for attributes such as socket id, search for them in backend_specific_data which is, in fact, handle by the backend code.     
@end deftp

@defcv {Member} {lw6cnx_connection_s} {local_url}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6cnx_connection_s::local_url}


URL of our local node.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {remote_url}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6cnx_connection_s::remote_url}


URL of the remote node.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {remote_ip}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6cnx_connection_s::remote_ip}


IP address of the remote node.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {remote_port}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6cnx_connection_s::remote_port}


IP port of the remote node.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {password}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6cnx_connection_s::password}


Password as clear text.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {password_send_checksum}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6cnx_connection_s::password_send_checksum}


Password as a checksum, what will be sent on the network.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {local_id_int}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6cnx_connection_s::local_id_int}


ID of the local node, as an unsigned 64-bit integer.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {local_id_str}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6cnx_connection_s::local_id_str}


ID of the local node, as an hexa string.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {remote_id_int}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6cnx_connection_s::remote_id_int}


ID of the remote node, as an unsigned 64-bit integer.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {remote_id_str}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6cnx_connection_s::remote_id_str}


ID of the local node, as an hexa string.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {dns_ok}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6cnx_connection_s::dns_ok}


        
Will be set to 1 if the peer domain name is the same as the one reported in the URL. For instance, if we get a connection from 23.45.23.45, but this host claims to be on www.foo.bar and DNS reports www.foo.bar as being 111.222.111.222 then there's something strange. It could just be someone doing NAT, but in all cases it's worth mentionning, so we keep the information here. Having 0 here is a bad point for the connection.         
@end defcv

@defcv {Member} {lw6cnx_connection_s} {network_reliability}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6cnx_connection_s::network_reliability}


        
The higher, the most reliable message sending will be. It can never be perfect, LW6 will always drop some packets from time to time, just to simulate real packet loss and be sure if it happens, it's handled nicely.         
@end defcv

@defcv {Member} {lw6cnx_connection_s} {properties}
@strong{Type:} @code{lw6cnx_properties_t}

@strong{Definition:} @code{lw6cnx_properties_t lw6cnx_connection_s::properties}


Properties got from the backend.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {recv_callback_func}
@strong{Type:} @code{lw6cnx_recv_callback_t}

@strong{Definition:} @code{lw6cnx_recv_callback_t lw6cnx_connection_s::recv_callback_func}


        
Function which will be called when receiving data. This one must clearly be reentrant, depending on the backend it could be called in a separate thread, at any time.         
@end defcv

@defcv {Member} {lw6cnx_connection_s} {recv_callback_data}
@strong{Type:} @code{void *}

@strong{Definition:} @code{void* lw6cnx_connection_s::recv_callback_data}


Data passed to recv_callback_func.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {send_mutex}
@strong{Type:} @code{lw6sys_mutex_t *}

@strong{Definition:} @code{lw6sys_mutex_t* lw6cnx_connection_s::send_mutex}


        
Send mutex, this will be used so that sending operations are properly serialized. Indeed, threads that respond on the fly could be likely to call this concurrently.         
@end defcv

@defcv {Member} {lw6cnx_connection_s} {foo_bar_key}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6cnx_connection_s::foo_bar_key}


        
This is used to handle keepalive. Actually, the protocol is that from time to time FOO key is sent and then each connection (in a tentacle object, typically) is supposed to respond BAR key to show it has received the latest message. This field just stores the value so that when we receive a BAR message we know which key to check against.         
@end defcv

@defcv {Member} {lw6cnx_connection_s} {last_send_foo_timestamp}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6cnx_connection_s::last_send_foo_timestamp}


The last time FOO was sent.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {next_send_foo_timestamp}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6cnx_connection_s::next_send_foo_timestamp}


The next time FOO needs to be sent.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {ping_msec}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6cnx_connection_s::ping_msec}


The current ping, updated when receiving BAR message.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {last_recv_timestamp}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6cnx_connection_s::last_recv_timestamp}


Last time something was received on this connection.         
        
@end defcv

@defcv {Member} {lw6cnx_connection_s} {backend_specific_data}
@strong{Type:} @code{void *}

@strong{Definition:} @code{void* lw6cnx_connection_s::backend_specific_data}


        
Store backend data, this is when, for instance, a socket handle will be kept, or a library handle (CURL, to name it). Common code does not know what's in there.         
@end defcv



  
@deftp {Struct} {lw6cnx_properties_s}

    
Used to hold generic client/server properties, set up by the backend, can then be queried by the caller.     
@end deftp

@defcv {Member} {lw6cnx_properties_s} {hint_timeout}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6cnx_properties_s::hint_timeout}


        
Gives an idea of what timeout one can expect with this backend, this is not necessarly the exact timeout but it gives an order of magnitude. Unit is seconds.         
@end defcv

@defcv {Member} {lw6cnx_properties_s} {ping_alter_base}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6cnx_properties_s::ping_alter_base}


        
Modifies the ping returned by terrain experience, this is a way to help some kind of connections to be preferred over others. Set it to N to add N milliseconds to the real ping. Adding a few msecs, such as 1 or 5 will just give an advantage to a given connection while not giving really wrong results. High values like 50 or 100 seriously penalizes some kind of connections, which is whishable, think of the httpd way to send things for instance.         
@end defcv

@defcv {Member} {lw6cnx_properties_s} {ping_alter_percent}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6cnx_properties_s::ping_alter_percent}


        
Modifies the ping returned by terrain experience, this is a way to help some kind of connections to be preferred over others. Set it to 100 for default value, means 100% of real ping delay, set it to 50 to make the algorithm believe lag is twice lower (this means, connection twice faster) and set it to 1000 to make believe that everything is slow. In practice only a slight alteration should be required, one should still favor really fast connections when it's proved in real life that they are faster!         
@end defcv

@defcv {Member} {lw6cnx_properties_s} {reliable}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6cnx_properties_s::reliable}


        
Wether this connexion is to be considered reliable or not. Well, in LW6, all connexions are unrealiable since LW6 will drop packets on purpose to simulate problems, but however, some are well-known to be unreliable (UDP...) while others are OK.         
@end defcv

@defcv {Member} {lw6cnx_properties_s} {backend_id}
@strong{Type:} @code{const char *}

@strong{Definition:} @code{const char* lw6cnx_properties_s::backend_id}


        
The backend id, beware, this is a static string, must not be freed, and depends on backend library to be here, if this one is unloaded, will point to nowhere.         
@end defcv



  
@deftp {Struct} {lw6cnx_ticket_table_s}

    
A common, shared table, to store all the tickets associated with various connections. This needs to be in-memory and quite fast for it's called very often (at each message, in fact) to perform sanity checks and avoid fakes/cheaters.     
@end deftp

@defcv {Member} {lw6cnx_ticket_table_s} {recv_spinlock}
@strong{Type:} @code{lw6sys_spinlock_t *}

@strong{Definition:} @code{lw6sys_spinlock_t* lw6cnx_ticket_table_s::recv_spinlock}


Lock for the recv_table hash.         
        
@end defcv

@defcv {Member} {lw6cnx_ticket_table_s} {recv_ack_spinlock}
@strong{Type:} @code{lw6sys_spinlock_t *}

@strong{Definition:} @code{lw6sys_spinlock_t* lw6cnx_ticket_table_s::recv_ack_spinlock}


Lock for the recv_ack_table hash.         
        
@end defcv

@defcv {Member} {lw6cnx_ticket_table_s} {send_spinlock}
@strong{Type:} @code{lw6sys_spinlock_t *}

@strong{Definition:} @code{lw6sys_spinlock_t* lw6cnx_ticket_table_s::send_spinlock}


Lock for the send_table hash.         
        
@end defcv

@defcv {Member} {lw6cnx_ticket_table_s} {recv_table}
@strong{Type:} @code{lw6sys_hash_t *}

@strong{Definition:} @code{lw6sys_hash_t* lw6cnx_ticket_table_s::recv_table}


        
Hash table containing the tickets for recv operations. This table is auto-generated, if one asks for a ticket for an unknown host, one is generated. The key is the ID (64-bit integer) of the host, as an hexa string.         
@end defcv

@defcv {Member} {lw6cnx_ticket_table_s} {recv_ack_table}
@strong{Type:} @code{lw6sys_hash_t *}

@strong{Definition:} @code{lw6sys_hash_t* lw6cnx_ticket_table_s::recv_ack_table}


        
Hash table containing wether the send ticket was received by a given host. The data is just a NULL pointer, only if the key is present, we know we don't need to resend our key to the peer. An easy way to know that the key was sent is if the peer was abled to produce a valid message/checksum. The key is the ID (64-bit integer) of the host, as an hexa string.         
@end defcv

@defcv {Member} {lw6cnx_ticket_table_s} {send_table}
@strong{Type:} @code{lw6sys_hash_t *}

@strong{Definition:} @code{lw6sys_hash_t* lw6cnx_ticket_table_s::send_table}


        
Hash table containing the tickets for send operations. Those tickets are typically received from the peers themselves who generate them on the fly. The key is the ID (64-bit integer) of the host, as an hexa string.         
@end defcv


