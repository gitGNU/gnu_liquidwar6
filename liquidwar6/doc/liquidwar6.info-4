This is /Users/ufoot/Home/_/liquidwar6/doc/liquidwar6.info, produced by
makeinfo version 4.13 from
/Users/ufoot/Home/_/liquidwar6/doc/liquidwar6.texi.

Liquid War 6, a unique multiplayer wargame.

   Copyright (c)  2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012
Christian Mauduit <ufoot@ufoot.org>

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

START-INFO-DIR-ENTRY
* Liquid War 6: (liquidwar6).   A unique multiplayer wargame.
END-INFO-DIR-ENTRY


File: liquidwar6.info,  Node: libnod,  Next: libp2p,  Prev: libnet,  Up: C API

5.29 libnod
===========

5.29.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/nod/index.html'.

5.29.2 API
----------

 -- Function: int lw6nod_info_community_add (lw6nod_info_t * INFO,
          u_int64_t ID, char * URL)
     INFO:  node info object to modify

     ID:  ID of the new member

     URL:  URL of the new member

     Adds a new member to the community.

     *Return value:*  1 if new member could be added, 0 if not.

 -- Function: int lw6nod_info_community_is_member (lw6nod_info_t *
          INFO, u_int64_t ID, char * URL)
     INFO:  node info object to test

     ID:  ID of the member we want to check

     URL:  URL of the member we want to check

     Tells wether a member is already in the community. Note that if
     there's a member with the same URL but with a different ID, or a
     member with the same ID but a different URL, the function will
     fail, we need URLs and IDs to both be different for the peer to be
     added. Not respecting this would lead to confusion, while sharing
     an ID is conceivable over the whole network, it can't be tolerated
     within a community. Same for the URL.

     *Return value:*  1 if new member could be added, 0 if not.

 -- Function: int lw6nod_info_community_has_id (lw6nod_info_t * INFO,
          u_int64_t ID)
     INFO:  node info object to test

     ID:  ID of the member we want to check

     Tells wether a member exists with this ID. Will test both
     ourselves and remote peers.

     *Return value:*  1 if ID is already taken, 0 if available.

 -- Function: int lw6nod_info_community_has_url (lw6nod_info_t * INFO,
          char * URL)
     INFO:  node info object to test

     URL:  URL of the member we want to check

     Tells wether a member exists with this URL. Will test both
     ourselves and remote peers.

     *Return value:*  1 if URL is already taken, 0 if available.

 -- Function: int lw6nod_info_community_remove_by_id (lw6nod_info_t *
          INFO, u_int64_t ID)
     INFO:  node info object to modify

     ID:  ID of the member we want to remove

     Removes a community member by ID.

     *Return value:*  1 if successfully removed, 0 if was not present.

 -- Function: int lw6nod_info_community_remove_by_url (lw6nod_info_t *
          INFO, char * URL)
     INFO:  node info object to modify

     URL:  URL of the member we want to remove

     Removes a community member by URL.

     *Return value:*  1 if successfully removed, 0 if was not present.

 -- Function: int lw6nod_info_community_count (lw6nod_info_t * INFO)
     INFO:  node info object to modify

     Tells how many members there are in a community. This include
     ourselves so this can never be 0, should at least be 1. Note that
     this is pretty much the same as the nb_nodes member of dyn_info,
     but this one is calculated dynamically from peer list, while the
     other one is updated from time to time from game_state information.

     *Return value:*  number of community members, including this node
     (us).

 -- Function: void lw6nod_info_community_reset (lw6nod_info_t * INFO)
     INFO:  node info object to modify

     Resets all peers, set community to only one member, ourselves.

     *Return value:*  none.

 -- Function: void lw6nod_dyn_info_free (lw6nod_dyn_info_t * DYN_INFO)
     DYN_INFO:  the dyn info struct to free

     Frees a dyn info object, to be used after a call to
     `lw6nod_info_dup_dyn' for instance.

     *Return value:*  none

 -- Function: lw6nod_info_t * lw6nod_info_new (char * PROGRAM, char *
          VERSION, char * CODENAME, int STAMP, u_int64_t ID, char *
          URL, char * TITLE, char * DESCRIPTION, char * PASSWORD, int
          BENCH, int OPEN_RELAY, int UPTIME, int IDLE_SCREENSHOT_SIZE,
          void * IDLE_SCREENSHOT_DATA)
     PROGRAM:  the program (normally it's liquidwar6)

     VERSION:  the version

     CODENAME:  the codename

     STAMP:  the stamp

     ID:  the node id

     URL:  the node public url

     TITLE:  the node title

     DESCRIPTION:  the node description

     PASSWORD:  the node password

     BENCH:  the node bench

     OPEN_RELAY:  open relay or not

     UPTIME:  uptime in seconds

     IDLE_SCREENSHOT_SIZE:  the size (bytes) of the image to display
     when game is idle

     IDLE_SCREENSHOT_DATA:  the data (jpeg) of the image to display
     when game is idle

     Creates a node info object. The arguments correspond to the
     immutable node attributes, other properties such as how many
     players are connected or set in other functions like
     `lw6nod_info_update' which can be called later.

     *Return value:*  newly allocated object, NULL on error.

 -- Function: void lw6nod_info_free (lw6nod_info_t * INFO)
     INFO:  the node info to free

     Frees a node info object.

     *Return value:*  none

 -- Function: int lw6nod_info_lock (lw6nod_info_t * INFO)
     INFO:  the node info to lock

     Locks a node info object, this is usefull for some members,
     typically list of servers, can be accessed by separated threads,
     one reading, many writing, and these objects (chained lists)
     certainly do not want to be modified while being read.

     *Return value:*  1 if ok, 0 if not.

 -- Function: int lw6nod_info_unlock (lw6nod_info_t * INFO)
     INFO:  the node info to unlock

     Unlocks a node info object, this is the compation of the
     `lw6nod_info_lock' function.

     *Return value:*  1 if ok, 0 if not.

 -- Function: void lw6nod_info_idle (lw6nod_info_t * INFO)
     INFO:  the node info to modify

     Clears a node info object and sets all its variable attributes to
     NULL/default values. This is what we want when the node is idle,
     not playing.

     *Return value:*  none.

 -- Function: int lw6nod_info_update (lw6nod_info_t * INFO, u_int64_t
          COMMUNITY_ID, int ROUND, char * LEVEL, int REQUIRED_BENCH,
          int NB_COLORS, int MAX_NB_COLORS, int NB_CURSORS, int
          MAX_NB_CURSORS, int NB_NODES, int MAX_NB_NODES, int
          GAME_SCREENSHOT_SIZE, void * GAME_SCREENSHOT_DATA)
     INFO:  the node info to update

     COMMUNITY_ID:  the id of the community the node belongs to

     ROUND:  the current round (can have an offset with real round
     number)

     LEVEL:  the name of the current level (map)

     REQUIRED_BENCH:  the bench required to connect

     NB_COLORS:  number of colors playing

     MAX_NB_COLORS:  max number of colors allowed

     NB_CURSORS:  number of cursors playing

     MAX_NB_CURSORS:  max number of cursors allowed

     NB_NODES:  number of nodes playing

     MAX_NB_NODES:  max number of nodes allowed

     GAME_SCREENSHOT_SIZE:  size of screenshot (bytes)

     GAME_SCREENSHOT_DATA:  screenshot data (byte buffer, contains JPEG)

     Set a node info object variable attributes. Call this whenever the
     node has changed some parameter. Not too often for it's not needed
     and some operations such as modying the screenshot, can be time
     consuming.

     *Return value:*  1 if OK, 0 if error.

 -- Function: lw6nod_dyn_info_t * lw6nod_info_dup_dyn (lw6nod_info_t *
          INFO)
     INFO:  the node info containing the dyn info to duplicate

     Extracts the dynamic part of an info struct and duplicates it,
     this is to avoid protection fault error when concurrent threads
     access this info.

     *Return value:*  newly allocated object, must be freed.

 -- Function: lw6sys_hash_t * lw6nod_info_new_discovered_nodes ()
     Creates a new hash, to be used as a discovered nodes list.  Using
     this function has the advantage of setting the hash options to
     their defaults.  We use a hash to avoid having uselessly long
     lists containing always the same node due to multiple detections.

     *Return value:*  an empty hash

 -- Function: int lw6nod_info_add_discovered_node (lw6nod_info_t *
          INFO, char * PUBLIC_URL)
     INFO:  the node info to update

     PUBLIC_URL:  the address of the discovered node

     Registers a new server, and queues it as something that should be
     checked later because it's interesting. We can't insert in the
     database all the servers we suspect to exist so network threads
     should use this, then main thread will process discovered servers
     afterwards. This is also a good way to avoid trivial DOS attacks.

     *Return value:*  1 if OK, O if error.

 -- Function: lw6sys_list_t * lw6nod_info_pop_discovered_nodes
          (lw6nod_info_t * INFO)
     INFO:  the node info to query

     Returns a list of all discovered nodes (their public URL) and
     empties the current queue as well.

     *Return value:*  a list of dynamically allocated strings.

 -- Function: lw6sys_list_t * lw6nod_info_new_verified_nodes ()
     Creates a new list, to be filled with nodes and typically passed
     to `lw6nod_info_set_verified_nodes'. Using this function has the
     advantage of setting the listh options to their defaults.

     *Return value:*  an empty list

 -- Function: int lw6nod_info_set_verified_nodes (lw6nod_info_t * INFO,
          lw6sys_list_t * LIST)
     INFO:  the node info to modify

     LIST:  the list of verified nodes, will be freed by this function

     Sets the list of verified nodes, that is, the list of nodes we are
     sure to exist, this is typically the list we will display later on
     a web page. We can't directly display any discovered node, one
     needs to filter them through main thread.  Something very
     important about this function is that `list' will be freed by
     function, that is, if you call this, then you can (you should)
     forget your object, it will disappear any time soon.

     *Return value:*  1 if OK, 0 on error.

 -- Function: void lw6nod_info_map_verified_nodes (lw6nod_info_t *
          INFO, lw6sys_list_callback_func_t FUNC, void * FUNC_DATA)
     INFO:  the node info concerned

     FUNC:  the function to apply

     FUNC_DATA:  arbitrary pointer holding data to pass to function

     Calls `lw6sys_hash_map' with `func' on every member of the list of
     verified nodes. The reason there's a function for this is that it
     is very important that list object is locked when doing this.
     This function does perform a lock/unlock so it is safe.

     *Return value:*  none.

 -- Function: int lw6nod_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `nod' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.

 -- Struct: lw6nod_const_info_s
     Constant informations about a node, these are informations that do
     not vary through the node's life, so they are set object creation
     then left unchanged.

 -- Member of lw6nod_const_info_s: program
     *Type:* `char *'

     *Definition:* `char* lw6nod_const_info_s::program'

     Program, this should be set to liquidwar6.


 -- Member of lw6nod_const_info_s: version
     *Type:* `char *'

     *Definition:* `char* lw6nod_const_info_s::version'

     The version of the program.


 -- Member of lw6nod_const_info_s: codename
     *Type:* `char *'

     *Definition:* `char* lw6nod_const_info_s::codename'

     The codename of the program.


 -- Member of lw6nod_const_info_s: stamp
     *Type:* `int'

     *Definition:* `int lw6nod_const_info_s::stamp'

     The stamp of the program.


 -- Member of lw6nod_const_info_s: ref_info
     *Type:* `lw6nod_ref_info_t'

     *Definition:* `lw6nod_ref_info_t lw6nod_const_info_s::ref_info'

     Reference information, how to uniquely identify node.


 -- Member of lw6nod_const_info_s: title
     *Type:* `char *'

     *Definition:* `char* lw6nod_const_info_s::title'

     The title of the node, its readable short name.


 -- Member of lw6nod_const_info_s: description
     *Type:* `char *'

     *Definition:* `char* lw6nod_const_info_s::description'

     More details about the node.


 -- Member of lw6nod_const_info_s: has_password
     *Type:* `int'

     *Definition:* `int lw6nod_const_info_s::has_password'

     Wether the node is password protected or not.


 -- Member of lw6nod_const_info_s: password
     *Type:* `char *'

     *Definition:* `char* lw6nod_const_info_s::password'

     The password used, cleartext.


 -- Member of lw6nod_const_info_s: bench
     *Type:* `int'

     *Definition:* `int lw6nod_const_info_s::bench'

     The node bench.


 -- Member of lw6nod_const_info_s: open_relay
     *Type:* `int'

     *Definition:* `int lw6nod_const_info_s::open_relay'

     Wether the node acts as an open relay or not.


 -- Member of lw6nod_const_info_s: creation_timestamp
     *Type:* `int64_t'

     *Definition:* `int64_t lw6nod_const_info_s::creation_timestamp'

     The node creation timestamp.


 -- Member of lw6nod_const_info_s: idle_screenshot_size
     *Type:* `int'

     *Definition:* `int lw6nod_const_info_s::idle_screenshot_size'

     Size of the screenshot (in bytes) when in idle mode.


 -- Member of lw6nod_const_info_s: idle_screenshot_data
     *Type:* `void *'

     *Definition:* `void* lw6nod_const_info_s::idle_screenshot_data'

     Idle mode screenshot data. This is just a plain JPEG buffer, which
     will be used as a fallback if there's no real screenshot available.

 -- Struct: lw6nod_dyn_info_s
     Dynamic informations about a node, these are informations that
     vary through the node's life, so they are unset at object creation
     and can then be updated from game context.

 -- Member of lw6nod_dyn_info_s: community_id_int
     *Type:* `u_int64_t'

     *Definition:* `u_int64_t lw6nod_dyn_info_s::community_id_int'

     The ID of the community this node belongs to, as a 64-bit unsigned
     integer.

 -- Member of lw6nod_dyn_info_s: community_id_str
     *Type:* `char *'

     *Definition:* `char* lw6nod_dyn_info_s::community_id_str'

     The ID of the community this node belongs to, as a string (64-bit
     integer converted to hexa).

 -- Member of lw6nod_dyn_info_s: community_peers
     *Type:* `lw6nod_ref_info_t'

     *Definition:* `lw6nod_ref_info_t
     lw6nod_dyn_info_s::community_peers[LW6NOD_MAX_NB_PEERS]'

     The list of community members, you need to refer to the nb_nodes
     member to know quickly how many members they are but actually, in
     practice, there can be holes in this array, you need to check each
     slot, for instance 0 can be filled, 2 can be filled too, but 1 be
     empty. Note that we don't count ourselves in this list.

 -- Member of lw6nod_dyn_info_s: round
     *Type:* `int'

     *Definition:* `int lw6nod_dyn_info_s::round'

     The current round.


 -- Member of lw6nod_dyn_info_s: level
     *Type:* `char *'

     *Definition:* `char* lw6nod_dyn_info_s::level'

     The current level.


 -- Member of lw6nod_dyn_info_s: required_bench
     *Type:* `int'

     *Definition:* `int lw6nod_dyn_info_s::required_bench'

     The required bench to connect to this node.


 -- Member of lw6nod_dyn_info_s: nb_colors
     *Type:* `int'

     *Definition:* `int lw6nod_dyn_info_s::nb_colors'

     Number of colors playing.


 -- Member of lw6nod_dyn_info_s: max_nb_colors
     *Type:* `int'

     *Definition:* `int lw6nod_dyn_info_s::max_nb_colors'

     Maximum number of colors allowed to play.


 -- Member of lw6nod_dyn_info_s: nb_cursors
     *Type:* `int'

     *Definition:* `int lw6nod_dyn_info_s::nb_cursors'

     Number of cursors playing.


 -- Member of lw6nod_dyn_info_s: max_nb_cursors
     *Type:* `int'

     *Definition:* `int lw6nod_dyn_info_s::max_nb_cursors'

     Maximum number of cursors allowed to play.


 -- Member of lw6nod_dyn_info_s: nb_nodes
     *Type:* `int'

     *Definition:* `int lw6nod_dyn_info_s::nb_nodes'

     Number of nodes playing.


 -- Member of lw6nod_dyn_info_s: max_nb_nodes
     *Type:* `int'

     *Definition:* `int lw6nod_dyn_info_s::max_nb_nodes'

     Maximum number of nodes allowed to play.


 -- Member of lw6nod_dyn_info_s: game_screenshot_size
     *Type:* `int'

     *Definition:* `int lw6nod_dyn_info_s::game_screenshot_size'

     Size of the screenshot, in bytes.


 -- Member of lw6nod_dyn_info_s: game_screenshot_data
     *Type:* `void *'

     *Definition:* `void* lw6nod_dyn_info_s::game_screenshot_data'

     Game screenshot data. This is just a plain JPEG buffer, which will
     be served when peers and/or web clients want to gather
     informations about the game. This can be NULL, in that the
     fallback constant data will be used.

 -- Struct: lw6nod_info_s
     Informations about a node. Note that in practice this structure is
     just used to describe our current node, there might be several
     instances of this if a program instanciates several nodes, but
     another data structure is used to store information about
     peers.typedef struct lw6nod_info_s

 -- Member of lw6nod_info_s: mutex
     *Type:* `lw6sys_mutex_t *'

     *Definition:* `lw6sys_mutex_t* lw6nod_info_s::mutex'

     Mutex used to access dynamic informations.


 -- Member of lw6nod_info_s: const_info
     *Type:* `lw6nod_const_info_t'

     *Definition:* `lw6nod_const_info_t lw6nod_info_s::const_info'

     Constant informations, never changes.


 -- Member of lw6nod_info_s: dyn_info
     *Type:* `lw6nod_dyn_info_t'

     *Definition:* `lw6nod_dyn_info_t lw6nod_info_s::dyn_info'

     Dynamic informations, can be updated. Do not modify this directly,
     instead use appropriate functions which will use mutexes properly.

 -- Member of lw6nod_info_s: discovered_nodes
     *Type:* `lw6sys_hash_t *'

     *Definition:* `lw6sys_hash_t* lw6nod_info_s::discovered_nodes'

     List of discovered nodes, do not access this directly, instead use
     proper query functions which, in turn, will use mutexes properly.

 -- Member of lw6nod_info_s: verified_nodes
     *Type:* `lw6sys_list_t *'

     *Definition:* `lw6sys_list_t* lw6nod_info_s::verified_nodes'

     List of verified nodes, do not access this directly, instead use
     proper query functions which, in turn, will use mutexes properly.

 -- Struct: lw6nod_ref_info_s
     Reference information about a node, this is all you need to
     uniquely identify a node. In theory, only the ID are only the URL
     are enough, in practice it's not that bad to have some redundancy,
     plus it makes it easier and faster to connect to them and transmit
     informations.

 -- Member of lw6nod_ref_info_s: id_int
     *Type:* `u_int64_t'

     *Definition:* `u_int64_t lw6nod_ref_info_s::id_int'

     The id of the node, as an integer (64-bit unsigned).


 -- Member of lw6nod_ref_info_s: id_str
     *Type:* `char *'

     *Definition:* `char* lw6nod_ref_info_s::id_str'

     The id of the node, as a string (64-bit converted to hexa).


 -- Member of lw6nod_ref_info_s: url
     *Type:* `char *'

     *Definition:* `char* lw6nod_ref_info_s::url'

     The public URL of the node.



File: liquidwar6.info,  Node: libp2p,  Next: libpil,  Prev: libnod,  Up: C API

5.30 libp2p
===========

5.30.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/p2p/index.html'.

5.30.2 API
----------

 -- Function: lw6p2p_db_t * lw6p2p_db_open (int ARGC, const char * []
          ARGV, char * NAME)
     ARGC:  number of args, as passed to `main'

     ARGV:  args array, as passed to `main'

     NAME:  the database name

     Creates a new database object. Normally there's only one object
     like this at a given time, it can be shared among various nodes.
     The database name is appended to user directory path, this allows
     different databases to be created, in theory.

     *Return value:*  a pointer on the newly created object.

 -- Function: void lw6p2p_db_close (lw6p2p_db_t * DB)
     DB:  the db to close

     Closes a db object, memory ressources will be freed.

     *Return value:*  none.

 -- Function: char * lw6p2p_db_repr (lw6p2p_db_t * DB)
     DB:  the db to work on

     Gives a readable representation of the db

     *Return value:*  a dynamically allocated string

 -- Function: int lw6p2p_db_reset (int ARGC, const char * [] ARGV, char
          * NAME)
     ARGC:  number of args, as passed to `main'

     ARGV:  args array, as passed to `main'

     NAME:  the database name

     Clears the database. Simply removes the db file, in fact. Do not
     call while database is used...

     *Return value:*  1 on success, 0 if failed.

 -- Function: char * lw6p2p_db_default_name ()
     Returns the default database name, should be p2p.db (this is a
     relative path, not an absolute path, will be appended to user dir).

     *Return value:*  the default database name, need not (must not) be
     freed.

 -- Function: int _lw6p2p_db_now (_lw6p2p_db_t * DB)
     DB:  the db object concerned (used to calculate time origin)

     Returns a timestamp suitable for db usage. The reason we don't use
     regular timestamps is that they are 1) too accurate (msec is
     useless for what's involved here) and 2) too big and likely to be
     negative in signed mode even if converted to seconds.

     *Return value:*  a timestamp, 0 means "beginning of program"
     (think of it as uptime)

 -- Function: lw6p2p_entry_t * lw6p2p_entry_new (int
          CREATION_TIMESTAMP, char * VERSION, char * CODENAME, int
          STAMP, char * ID, char * URL, char * TITLE, char *
          DESCRIPTION, int HAS_PASSWORD, int BENCH, int OPEN_RELAY,
          char * COMMUNITY_ID, int ROUND, char * LEVEL, int
          REQUIRED_BENCH, int NB_COLORS, int MAX_NB_COLORS, int
          NB_CURSORS, int MAX_NB_CURSORS, int NB_NODES, int
          MAX_NB_NODES, char * IP, int PORT, int LAST_PING_TIMESTAMP,
          int PING_DELAY_MSEC, int AVAILABLE)
     CREATION_TIMESTAMP:  when it has been created, UNIX timestamp

     VERSION:  version of the node

     CODENAME:  codename of the node

     STAMP:  stamp of the node

     ID:  id of the node (string representation)

     URL:  public url of the node

     TITLE:  title of the node

     DESCRIPTION:  description of the node

     HAS_PASSWORD:  wether node is password protected or not

     BENCH:  node bench

     OPEN_RELAY:  wether the node is in open relay mode or not

     ROUND:  current round

     LEVEL:  current level played

     REQUIRED_BENCH:  current bench

     NB_COLORS:  number of colors playing

     MAX_NB_COLORS:  maximum number of colors

     NB_CURSORS:  number of cursors playing

     MAX_NB_CURSORS:  maximum number of cursors

     NB_NODES:  number of nodes playing

     MAX_NB_NODES:  maximum number of nodes

     IP:  node ip (string representation)

     PORT:  node port

     LAST_PING_TIMESTAMP:  UNIX timestamp of last contact with node

     PING_DELAY_MSEC:  ping delay, in milliseconds

     AVAILABLE:  wether node is available, wether we can connect to it

     Creates a new p2p entry. Will accept NULL parameters for strings
     as well as arbitrary long strings, will simply cut them short if
     there aren't already limited to max size.

     *Return value:*  newly allocated object

 -- Function: void lw6p2p_entry_free (lw6p2p_entry_t * ENTRY)
     ENTRY:  entry to free

     Frees a p2p entry.

     *Return value:*  none.

 -- Function: char * lw6p2p_entry_repr (lw6p2p_entry_t * ENTRY)
     ENTRY:  entry to represent

     Gives a human-readable representation of the entry

     *Return value:*  dynamically allocated string

 -- Function: lw6p2p_node_t * lw6p2p_node_new (int ARGC, const char *
          [] ARGV, lw6p2p_db_t * DB, char * CLIENT_BACKENDS, char *
          SERVER_BACKENDS, char * BIND_IP, int BIND_PORT, int
          BROADCAST, char * PUBLIC_URL, char * TITLE, char *
          DESCRIPTION, char * PASSWORD, int BENCH, int OPEN_RELAY, char
          * KNOWN_NODES, int NETWORK_RELIABILITY, int TROJAN)
     ARGC:  number of args, as passed to `main'

     ARGV:  args array, as passed to `main'

     DB:  the database to use

     CLIENT_BACKENDS:  the list of client backends to use

     SERVER_BACKENDS:  the list of server backends to use

     BIND_IP:  the IP address to bind on

     BIND_PORT:  the IP port to listen on

     BROADCAST:  wether broadcast is allowed on this node

     PUBLIC_URL:  the public URL we want to show

     TITLE:  the title of the node

     DESCRIPTION:  the description of the node

     PASSWORD:  the password to use

     BENCH:  the bench of the node (its power)

     OPEN_RELAY:  act as an open relay or not

     KNOWN_NODES:  list of already known nodes

     NETWORK_RELIABILITY:  drop 1 packet out of X

     TROJAN:  act as a stupid trojan to test out automatic kick-off

     Creates a new "pear to pear" node. This will fire the server and
     allow client access, on demand. A lot of stuff can be done in the
     background once this is called.

     *Return value:*  a pointer on the newly created objects.

 -- Function: void lw6p2p_node_free (lw6p2p_node_t * NODE)
     NODE:  the node to free

     Frees a node object, all network communications will be shut.

     *Return value:*  none.

 -- Function: char * lw6p2p_node_repr (lw6p2p_node_t * NODE)
     NODE:  the node to work on

     Gives a readable representation of the node

     *Return value:*  a dynamically allocated string

 -- Function: int lw6p2p_node_poll (lw6p2p_node_t * NODE)
     NODE:  the node to poll

     Polls a p2p node. This must be called on a regular basis, else
     network communication is stalled.

     *Return value:*  1 on success, 0 on error.

 -- Function: void lw6p2p_node_close (lw6p2p_node_t * NODE)
     NODE:  the node to close

     Closes a p2p node. Closing is necessary in some contexts, for
     instance scheme/smob instanciation when you want to release the
     object ressources (sockets, ports, threads...) *before* it is
     deleted by, for instance, a garbage collector.

     *Return value:*  1 on success, 0 on error.

 -- Function: u_int64_t lw6p2p_node_get_id (lw6p2p_node_t * NODE)
     NODE:  the node to query

     Returns the node id, an id which is supposed to uniquely identify
     the node at run-time.

     *Return value:*  numerical id.

 -- Function: lw6sys_list_t * lw6p2p_node_get_entries (lw6p2p_node_t *
          NODE)
     NODE:  node to query

     Returns a list of all known nodes, this is a plain table dump,
     sorted so that the most likely to be interesting to connect
     oneself to are listed *last*, this is just a (little)
     optimization, since we know we'll need to parse this list to
     construct a Guile object, we reverse the order.

     *Return value:*  list object containing `lw6p2p_entry_t' objects

 -- Function: int lw6p2p_node_server_start (lw6p2p_node_t * NODE,
          int64_t SEQ_0)
     NODE:  node to start

     SEQ_0:  seq when starting the server

     Starts a node in server mode, if node was previously connected to
     other nodes, disconnect it from any peer.

     *Return value:*  1 on success, 0 on failure.

 -- Function: int lw6p2p_node_client_join (lw6p2p_node_t * NODE,
          u_int64_t REMOTE_ID, char * REMOTE_URL)
     NODE:  node to use

     REMOTE_ID:  id of remote node to join

     REMOTE_URL:  url of remote node to join

     Starts a node in client mode, joins the given node, if node was
     previously connected to other nodes, disconnect it from any peer.

     *Return value:*  1 on success, 0 on failure.

 -- Function: void lw6p2p_node_disconnect (lw6p2p_node_t * NODE)
     NODE:  node to disconnect

     Disconnects a node, if node was previously connected to other
     nodes, disconnect it from any peer. Note that this does not affect
     out-of-band connections, only real game-related links.

     *Return value:*  1 on success, 0 on failure.

 -- Function: int lw6p2p_node_update_info (lw6p2p_node_t * NODE, int
          ROUND, char * LEVEL, int NB_COLORS, int MAX_NB_COLORS, int
          NB_CURSORS, int MAX_NB_CURSORS, int NB_NODES, int
          MAX_NB_NODES, int GAME_SCREENSHOT_SIZE, void *
          GAME_SCREENSHOT_DATA)
     NODE:  node to update

     ROUND:  the current round (can have an offset with real round
     number)

     LEVEL:  the name of the current level (map)

     NB_COLORS:  number of colors playing

     MAX_NB_COLORS:  max number of colors allowed

     NB_CURSORS:  number of cursors playing

     MAX_NB_CURSORS:  max number of cursors allowed

     NB_NODES:  number of nodes playing

     MAX_NB_NODES:  max number of nodes allowed

     GAME_SCREENSHOT_SIZE:  size of screenshot (bytes)

     GAME_SCREENSHOT_DATA:  screenshot data (byte buffer, contains JPEG)

     Updates node info, that is, all the data/metadata which can be
     displayed to other peers and are, by nature, dynamic.

     *Return value:*  1 on success, 0 on failure.

 -- Function: void lw6p2p_node_calibrate (lw6p2p_node_t * NODE, int64_t
          TIMESTAMP, int64_t SEQ)
     NODE:  the object to calibrate

     TIMESTAMP:  the current ticks setting (1000 ticks per second)

     SEQ:  the round expected to be returned with this ticks value

     Calibrates the node, so that sequence numbering is consistent
     accross nodes.

     *Return value:*  none.

 -- Function: int lw6p2p_node_is_dump_needed (lw6p2p_node_t * NODE)
     NODE:  node to query

     Returns true (1) if the local node needs to send a DUMP message.
     A DUMP message will basically reset level, game struct, game state,
     it's typically sent when a new player is connected. This function
     will return true once then always 0 so one should really act and
     do something whenever it's called and returns 1.

     *Return value:*  1 if DUMP must be sent.

 -- Function: int lw6p2p_node_put_local_msg (lw6p2p_node_t * NODE, char
          * MSG)
     NODE:  node object to use

     MSG:  message

     Puts a message in the object. The message will be splitted into
     several atoms if needed, it can be arbitrary long.

     *Return value:*  1 on success, 0 on error

 -- Function: char * lw6p2p_node_get_next_reference_msg (lw6p2p_node_t
          * NODE)
     NODE:  node to query

     Get the next waiting reference msg. This is used to maintain the
     stable reference game state we can rely upon. One is supposed to
     call this until it returns NULL, then switch draft messages.

     *Return value:*  newly allocated string, must be freed.

 -- Function: char * lw6p2p_node_get_next_draft_msg (lw6p2p_node_t *
          NODE)
     NODE:  node to query

     Get the next waiting draft msg. This is used to maintain the
     anticipated draft game state we use for drawing. One is supposed
     to call this after all reference messages have been treated.

     *Return value:*  newly allocated string, must be freed.

 -- Function: int lw6p2p_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `p2p' module test suite. This test can fail if one cannot
     bind on some network port, in a general manner it is dependent on
     the network environment, so it's better if there's some sort of
     human control on it.

     *Return value:*  1 if test is successfull, 0 on error.

 -- Struct: lw6p2p_db_s
     Handler on a database connection, this must be used to pass order
     to store/retrieve persistent informations about peers.

 -- Member of lw6p2p_db_s: id
     *Type:* `u_int32_t'

     *Definition:* `u_int32_t lw6p2p_db_s::id'

     The first member, id, is the same as the internal _lw6p2p_db_t
     structure. The rest of it is hidden. The program will cast from
     lw6p2p_db_t to _lw6p2p_db_t internally.

 -- Struct: lw6p2p_entry_s
     This entry object matches as close as possible the corresponding
     (node) entry in the database.

 -- Member of lw6p2p_entry_s: creation_timestamp
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::creation_timestamp'

     Node creation timestamp.


 -- Member of lw6p2p_entry_s: version
     *Type:* `char'

     *Definition:* `char lw6p2p_entry_s::version[LW6P2P_VERSION_SIZE+1]'

     Node version.


 -- Member of lw6p2p_entry_s: codename
     *Type:* `char'

     *Definition:* `char
     lw6p2p_entry_s::codename[LW6P2P_CODENAME_SIZE+1]'

     Node codename.


 -- Member of lw6p2p_entry_s: stamp
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::stamp'

     Node stamp.


 -- Member of lw6p2p_entry_s: id
     *Type:* `char'

     *Definition:* `char lw6p2p_entry_s::id[LW6P2P_ID_SIZE+1]'

     Node id, 64-bit integer as an hexa string.


 -- Member of lw6p2p_entry_s: url
     *Type:* `char'

     *Definition:* `char lw6p2p_entry_s::url[LW6P2P_URL_SIZE+1]'

     Node URL, the public URL it displays to others.


 -- Member of lw6p2p_entry_s: title
     *Type:* `char'

     *Definition:* `char lw6p2p_entry_s::title[LW6P2P_TITLE_SIZE+1]'

     Node title, the short readable name for the node.


 -- Member of lw6p2p_entry_s: description
     *Type:* `char'

     *Definition:* `char
     lw6p2p_entry_s::description[LW6P2P_DESCRIPTION_SIZE+1]'

     Node description, mode details about this node.


 -- Member of lw6p2p_entry_s: has_password
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::has_password'

     Wether it requires a password or not.


 -- Member of lw6p2p_entry_s: bench
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::bench'

     Node bench, reflects how powerfull it is.


 -- Member of lw6p2p_entry_s: open_relay
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::open_relay'

     Wether this node acts as an open relay or not.


 -- Member of lw6p2p_entry_s: community_id
     *Type:* `char'

     *Definition:* `char
     lw6p2p_entry_s::community_id[LW6P2P_COMMUNITY_ID_SIZE+1]'

     Community id, 64-bit integer as an hexa string.


 -- Member of lw6p2p_entry_s: round
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::round'

     Current round.


 -- Member of lw6p2p_entry_s: level
     *Type:* `char'

     *Definition:* `char lw6p2p_entry_s::level[LW6P2P_LEVEL_SIZE+1]'

     Level used.


 -- Member of lw6p2p_entry_s: required_bench
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::required_bench'

     Required bench to connect to this community.


 -- Member of lw6p2p_entry_s: nb_colors
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::nb_colors'

     Number of colors playing.


 -- Member of lw6p2p_entry_s: max_nb_colors
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::max_nb_colors'

     Maximum number of colors allowed to play.


 -- Member of lw6p2p_entry_s: nb_cursors
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::nb_cursors'

     Number of cursors playing.


 -- Member of lw6p2p_entry_s: max_nb_cursors
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::max_nb_cursors'

     Maximum number of cursors allowed to play.


 -- Member of lw6p2p_entry_s: nb_nodes
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::nb_nodes'

     Number of nodes playing.


 -- Member of lw6p2p_entry_s: max_nb_nodes
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::max_nb_nodes'

     Maximum number of nodes playing.


 -- Member of lw6p2p_entry_s: ip
     *Type:* `char'

     *Definition:* `char lw6p2p_entry_s::ip[LW6P2P_IP_SIZE+1]'

     IP addess of node.


 -- Member of lw6p2p_entry_s: port
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::port'

     IP port of node.


 -- Member of lw6p2p_entry_s: last_ping_timestamp
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::last_ping_timestamp'

     Last time this node has been pinged.


 -- Member of lw6p2p_entry_s: ping_delay_msec
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::ping_delay_msec'

     Ping delay, in milliseconds.


 -- Member of lw6p2p_entry_s: available
     *Type:* `int'

     *Definition:* `int lw6p2p_entry_s::available'

     Wether this node is ready to accept connections.


 -- Struct: lw6p2p_node_s
     Node object, the main network object, this one will encaspulate
     everything else, the node can connect to other peers, listen on
     the network, it's the high-level interface.

 -- Member of lw6p2p_node_s: id
     *Type:* `u_int32_t'

     *Definition:* `u_int32_t lw6p2p_node_s::id'

     The first member, id, is the same as the internal _lw6p2p_node_t
     structure. The rest of it is hidden. The program will cast from
     lw6p2p_node_t to _lw6p2p_node_t internally.


File: liquidwar6.info,  Node: libpil,  Next: libscm,  Prev: libp2p,  Up: C API

5.31 libpil
===========

5.31.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/pil/index.html'.

5.31.2 API
----------

 -- Function: int lw6pil_bench (float * BENCH_RESULT, lw6sys_progress_t
          * PROGRESS)
     BENCH_RESULT:  pointer to float, will contain the bench result

     PROGRESS:  to inform the caller of the process advancement

     Runs a standard, normalized bench on a default map. Results can be
     interpreted as an estimated speed/power of your computer.

     *Return value:*  1 on success, 0 if failure

 -- Function: void lw6pil_coords_fix (lw6map_rules_t * RULES,
          lw6sys_whd_t * SHAPE, float * X, float * Y, float * Z)
     RULES:  the set of rules to use (defines polarity)

     SHAPE:  the shape of the map (logical part)

     X:  the x coord to fix

     Y:  the y coord to fix

     Z:  the z coord to fix

     Similar to `lw6map_coords_fix' but using floats, this function can
     be used to check cursor position boundaries. Any float pointer can
     be NULL.

     *Return value:*  none.

 -- Function: void lw6pil_coords_fix_x10 (lw6map_rules_t * RULES,
          lw6sys_whd_t * SHAPE, float * X, float * Y, float * Z)
     RULES:  the set of rules to use (defines polarity)

     SHAPE:  the shape of the map (logical part)

     X:  the x coord to fix

     Y:  the y coord to fix

     Z:  the z coord to fix

     Similar to `lw6pil_coords_fix' but does use a wider range, say 10
     times the actual size of the map, this is not to contain the
     cursor within the map but just to avoid overflow errors.

     *Return value:*  none.

 -- Function: void lw6pil_local_cursors_reset (lw6pil_local_cursors_t *
          LOCAL_CURSORS)
     Resets a local cursors struct. Note that this need not be called
     very often, in fact the local cursors can cope with "dead" cursors
     easily. In practise, in a local game, there are only 4 of them,
     great maximum.

     *Return value:*  none.

 -- Function: lw6pil_local_cursor_t * lw6pil_local_cursors_get_cursor
          (lw6pil_local_cursors_t * LOCAL_CURSORS, u_int16_t CURSOR_ID)
     CURSOR_ID:  the id of the cursor to query

     Returns a pointer on the cursor with the given id.

     *Return value:*  a pointer (must *not* be freed) which is NULL is
     cursor does not exist.

 -- Function: int lw6pil_local_cursors_get_info (lw6pil_local_cursors_t
          * LOCAL_CURSORS, int * X, int * Y, int * MOUSE_CONTROLLED,
          u_int16_t CURSOR_ID)
     X:  a pointer to the x position, may be NULL

     Y:  a pointer to the y position, may be NULL

     MOUSE_CONTROLLED:  a pointer to the mouse_controlled flag, may be
     NULL

     CURSOR_ID:  the id of the cursor to query

     Gets the x,y position of the cursor, and tells if it's mouse
     controlled.

     *Return value:*  1 on success (cursor exists), 0 on failure (no
     such cursor).

 -- Function: int lw6pil_local_cursors_set_xy (lw6pil_local_cursors_t *
          LOCAL_CURSORS, u_int16_t CURSOR_ID, int X, int Y)
     CURSOR_ID:  the id of the cursor to modify

     X:  the x position

     Y:  the y position

     Sets the position of a cursor in the local cursors struct. If
     cursor does not exists, it's appended to the list.

     *Return value:*  1 on success (cursor exists), 0 on failure (no
     such cursor).

 -- Function: int lw6pil_local_cursors_set_mouse_controlled
          (lw6pil_local_cursors_t * LOCAL_CURSORS, u_int16_t CURSOR_ID,
          int MOUSE_CONTROLLED)
     CURSOR_ID:  the id of the cursor to modify

     MOUSE_CONTROLLED:  the mouse_controlled attribute

     Sets which cursor is mouse controlled. If mouse_controlled is 1,
     the flag is set for this cursor and cleared for all others. If set
     to 0, only this cursor's flag is cleared.

     *Return value:*  1 on success (cursor exists), 0 on failure (no
     such cursor).

 -- Function: int lw6pil_local_cursors_get_main_info
          (lw6pil_local_cursors_t * LOCAL_CURSORS, u_int16_t *
          CURSOR_ID, int * X, int * Y, int * MOUSE_CONTROLLED)
     CURSOR_ID:  the id of the main cursor, may be NULL

     X:  a pointer to the x position, may be NULL

     Y:  a pointer to the y position, may be NULL

     MOUSE_CONTROLLED:  a pointer to the mouse_controlled flag, may be
     NULL

     Gets the x,y position of the main cursor, and tells if it's mouse
     controlled.

     *Return value:*  1 on success (cursor exists), 0 on failure (no
     such cursor).

 -- Function: int lw6pil_local_cursors_set_main (lw6pil_local_cursors_t
          * LOCAL_CURSORS, u_int16_t CURSOR_ID)
     CURSOR_ID:  the id of the cursor to be labelled as main cursor

     Sets the main cursor attribute, the main cursor is later used, for
     instance, to decide how to display the map (centered on it, for
     instance).

     *Return value:*  1 on success (cursor exists), 0 on failure (no
     such cursor).

 -- Function: lw6pil_pilot_t * lw6pil_pilot_new (lw6ker_game_state_t *
          GAME_STATE, int64_t SEQ_0, int64_t TIMESTAMP,
          lw6sys_progress_t * PROGRESS)
     GAME_STATE:  the game state we're going to work on

     SEQ_0:  the start sequence to use, that is, the seq at round=0

     TIMESTAMP:  the current ticks (1000 ticks per sec, used to
     calibrate)

     PROGRESS:  object used to show the advancement of the process

     Initializes a 'pilot' object, this object is responsible for
     interpreting messages, transform them into low-level 'ker' module
     function calls, and handle all the thread-spooky stuff.

     *Return value:*  a working pilot object. May be NULL on memory
     failure.

 -- Function: void lw6pil_pilot_free (lw6pil_pilot_t * PILOT)
     PILOT:  the object to free.

     Frees a 'pilot' object, note that this might involve joining some
     threads, so it can 'take some time'.

     *Return value:*  none.

 -- Function: int lw6pil_pilot_send_command (lw6pil_pilot_t * PILOT,
          char * COMMAND_TEXT, int VERIFIED)
     PILOT:  the object to send commands to.

     COMMAND_TEXT:  the text of the command, as received form network

     VERIFIED:  wether we're sure this message is valid.

     Sends a command and handles it internally.

     *Return value:*  1 if OK, 0 if not.

 -- Function: int lw6pil_pilot_local_command (lw6pil_pilot_t * PILOT,
          char * COMMAND_TEXT)
     PILOT:  the object to apply the local command on

     COMMAND_TEXT:  the command text

     This function is used to fix the annoying fact that by only sending
     commands a limited number of times per sec to the game state, the
     display always reflect an outdated position for cursors. But
     players do not want to see this, they want to see the cursor in
     the right place.  So what we do is that the pilot can process
     "local" commands which have absolutely no effect on the game but
     simply update a local cursor state, only used for display. It's
     here in the pil module for it's where the command interpreting
     code is, and the fact that there's this lag is directly linked
     with the pilot way of doing things.

     *Return value:*  1 on success, 0 on failure.

 -- Function: int lw6pil_pilot_commit (lw6pil_pilot_t * PILOT)
     PILOT:  the object to commit.

     Commits all commands sent and actually send them to the
     corresponding threads. This commit system allows better performance
     by sending, for instance, all the commands for a given round
     together.

     *Return value:*  none.

 -- Function: int lw6pil_pilot_make_backup (lw6pil_pilot_t * PILOT)
     PILOT:  the object to perform the backup on

     Makes a new backup in the pilot, that is, copy 'reference' to
     'backup'.

     *Return value:*  1 if OK, 0 if not.

 -- Function: int lw6pil_pilot_can_sync (lw6ker_game_state_t * TARGET,
          lw6pil_pilot_t * PILOT)
     TARGET:  the target game_state we would sync on

     PILOT:  the object to perform the backup on

     Tests wether sync functions are callable with a given game state.
     It verifies if the internal game_state and the target look the
     same.

     *Return value:*  1 if sync functions can be called, 0 if not.

 -- Function: int lw6pil_pilot_sync_from_backup (lw6ker_game_state_t *
          TARGET, lw6pil_pilot_t * PILOT)
     TARGET:  the game_state structure which will get the informations.

     PILOT:  the object to get informations from.

     Gets the backup from the pilot object. This is the last snapshot
     taken by `make_backup' or, by default, the game_state the pilot
     was constructed with.

     *Return value:*  1 if OK, 0 if not.

 -- Function: int lw6pil_pilot_sync_from_reference (lw6ker_game_state_t
          * TARGET, lw6pil_pilot_t * PILOT)
     TARGET:  the game_state structure which will get the informations.

     PILOT:  the object to get informations from.

     Gets the latest reference game_state, that is, a stable snapshot
     of the game, with no inconsistency, a game position that exists
     and that we can rely on. Note that getting this can take time
     since a global mutex is required, and computations must end before
     you get the data.

     *Return value:*  1 if OK, 0 if not.

 -- Function: int lw6pil_pilot_sync_from_draft (lw6ker_game_state_t *
          TARGET, lw6pil_pilot_t * PILOT, int DIRTY_READ)
     TARGET:  the game_state structure which will get the informations.

     PILOT:  the object to get informations from.

     DIRTY_READ:  wether to allow dirty read or not

     Gets the informations from the pilot object, not being worried
     about game consistency, this one will just return the latest
     version available.  It might even be in an inconsistent state, the
     position could reflect a position which will never exist. Still,
     the data returned will not correspond to a half-spread or
     half-moved game_state if dirty_read is set to 0. In this case the
     data has at least some basic consistency and getting this does
     require some mutex lock, however wait time should be fairly small
     (max. a round). But, in a general manner, this function is only
     used for display, and we do not care much if there's a small
     glitch, we prefer fast & smooth display.

     *Return value:*  1 if OK, 0 if not.

 -- Function: lw6ker_game_state_t * lw6pil_pilot_dirty_read
          (lw6pil_pilot_t * PILOT)
     PILOT:  the object to get informations from.

     Returns a direct access to the most up-to-date game_state, without
     locking anything whatsoever. This is clearly to implement a dirty
     read mode as the name of the function suggests.

     *Return value:*  1 if OK, 0 if not.

 -- Function: char * lw6pil_pilot_repr (lw6pil_pilot_t * PILOT)
     Returns a string describing the pilot. This is a very short
     description, use it for logs, and to debug stuff. By no means it's
     a complete exhaustive description. Still, the string returned
     should be unique.

     *Return value:*  a dynamically allocated string.

 -- Function: void lw6pil_pilot_calibrate (lw6pil_pilot_t * PILOT,
          int64_t TIMESTAMP, int64_t SEQ)
     PILOT:  the object to calibrate

     TIMESTAMP:  the current ticks setting (1000 ticks per second)

     SEQ:  the round expected to be returned with this ticks value

     Calibrates the pilot, that is, initializes it so that subsequent
     calls to `lw6pil_pilot_get_round' return consistent values.

     *Return value:*  none.

 -- Function: void lw6pil_pilot_speed_up (lw6pil_pilot_t * PILOT, int
          SEQ_INC)
     PILOT:  the pilot to speed up

     SEQ_INC:  the number of seqs

     Re-calibrates the pilot so that it speeds up a bit.  This will
     basically increase next_seq by seq_inc.

     *Return value:*  none.

 -- Function: void lw6pil_pilot_slow_down (lw6pil_pilot_t * PILOT, int
          SEQ_DEC)
     PILOT:  the pilot to speed up

     SEQ_DEC:  the number of seqs

     Re-calibrates the pilot so that it slows down a bit.  This will
     basically decrease next_seq by seq_inc.

     *Return value:*  none.

 -- Function: int64_t lw6pil_pilot_get_seq_0 (lw6pil_pilot_t * PILOT)
     PILOT:  pilot object to query

     Get the initial seq (the one passed at object construction) which
     says what the seq was at round=0, it's just an offset.

     *Return value:*  64-bit integer

 -- Function: int lw6pil_pilot_seq2round (lw6pil_pilot_t * PILOT,
          int64_t SEQ)
     PILOT:  pilot object to work on

     SEQ:  the seq to convert

     Converts a seq (64-bit) to a round (32-bit). 64-bit seqs are used
     to avoid out-of-range errors on very long games, OTOH a round is
     32-bit to garantee the atomicity of its affection, even on
     platforms which are not native 64-bit.

     *Return value:*  the round (32-bit integer)

 -- Function: int64_t lw6pil_pilot_round2seq (lw6pil_pilot_t * PILOT,
          int ROUND)
     PILOT:  pilot object to work on

     ROUND:  the round to convert

     Converts a round (32-bit) to a seq (64-bit). 64-bit seqs are used
     to avoid out-of-range errors on very long games, OTOH a round is
     32-bit to garantee the atomicity of its affection, even on
     platforms which are not native 64-bit.

     *Return value:*  the seq (64-bit integer)

 -- Function: int64_t lw6pil_pilot_get_next_seq (lw6pil_pilot_t *
          PILOT, int64_t TIMESTAMP)
     PILOT:  the object to query

     TIMESTAMP:  the current ticks setting (1000 ticks per second)

     Returns the seq one should use to generate new events/commands at
     a given time (given in ticks).

     *Return value:*  none.

 -- Function: int64_t lw6pil_pilot_get_last_commit_seq (lw6pil_pilot_t
          * PILOT)
     PILOT:  the object to query

     Returns the seq of the last commit (reference game_state) for this
     object.

     *Return value:*  the commit seq (reference object)

 -- Function: int64_t lw6pil_pilot_get_reference_target_seq
          (lw6pil_pilot_t * PILOT)
     PILOT:  the object to query

     Returns the seq which is targetted in the reference game_state,
     this is 'how far computation will go in the reference game_state
     if no new commands are issued'. Note that there can always be some
     commands which are not yet processed, so you should not rely on
     this too heavily, however it gives a good idea of how things are
     going.

     *Return value:*  the target seq (reference object)

 -- Function: int64_t lw6pil_pilot_get_reference_current_seq
          (lw6pil_pilot_t * PILOT)
     PILOT:  the object to query

     Returns the current seq in the reference game_state. There's no
     lock on this call so don't rely on this too heavily, it just gives
     you an idea of wether the pilot is very late on its objectives or
     just on time.

     *Return value:*  the current seq (reference object)

 -- Function: int64_t lw6pil_pilot_get_max_seq (lw6pil_pilot_t * PILOT)
     PILOT:  the object to query

     Returns the max current seq in the reference or draft game states.
     No lock on this call so don't rely on this too heavily, it just
     gives you an idea of computation state.

     *Return value:*  the current seq (reference object)

 -- Function: int lw6pil_pilot_is_over (lw6pil_pilot_t * PILOT)
     PILOT:  the object to query

     Tells wether the game is over or not.

     *Return value:*  1 if over, 0 if not

 -- Function: int lw6pil_pilot_did_cursor_win (lw6pil_pilot_t * PILOT,
          u_int16_t CURSOR_ID)
     PILOT:  the object to query

     CURSOR_ID:  the cursor_id concerned

     Tells wether a given cursor was winner or not.

     *Return value:*  1 if over, 0 if not

 -- Function: int lw6pil_pilot_get_winner (lw6pil_pilot_t * PILOT)
     PILOT:  the object to query

     Gets the winner color.

     *Return value:*  a team color, -1 if no winner and/or error.

 -- Function: int lw6pil_pilot_get_looser (lw6pil_pilot_t * PILOT)
     PILOT:  the object to query

     Gets the looser color.

     *Return value:*  a team color, -1 if no looser and/or error.

 -- Function: lw6pil_local_cursors_t * lw6pil_pilot_get_local_cursors
          (lw6pil_pilot_t * PILOT)
     PILOT:  object to query

     Returns a pointer on the local_cursors struct used within the
     object. Beware, this is the *real* pointer, not a copy...

     *Return value:*  pointer on internal object

 -- Function: int64_t lw6pil_seq_random_0 ()
     Gets a pseudo-random start seq, why do we use this? Just to make
     sure even in non-network situations, seq are always very high and
     random, this way this is one less bug to check in networked
     context.

     *Return value:*  random integer value, always greater than INT_MAX

 -- Function: int lw6pil_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `pil' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.

 -- Struct: lw6pil_add_args_s
     Arguments passed to the ADD command.

 -- Member of lw6pil_add_args_s: cursor_id
     *Type:* `u_int16_t'

     *Definition:* `u_int16_t lw6pil_add_args_s::cursor_id'

     Cursor ID (16-bit non-zero unsigned int).


 -- Member of lw6pil_add_args_s: team_color
     *Type:* `int'

     *Definition:* `int lw6pil_add_args_s::team_color'

     Team color (0 to 9).


 -- Struct: lw6pil_command_s
     Command structure, contains both full-text version and parsed
     information.

 -- Member of lw6pil_command_s: seq
     *Type:* `int64_t'

     *Definition:* `int64_t lw6pil_command_s::seq'

     The sequence number, a very large 64-bit integer. The sequence is
     here because the round wouldn't be able to stand multiple games
     for long as it is only 32-bit. OTOH making round a 64-bit would
     cause multithread problems because of non-atomicity of 64-bit
     affectation on truely 32-bit platforms.

 -- Member of lw6pil_command_s: round
     *Type:* `int'

     *Definition:* `int lw6pil_command_s::round'

     The game round.


 -- Member of lw6pil_command_s: node_id
     *Type:* `u_int64_t'

     *Definition:* `u_int64_t lw6pil_command_s::node_id'

     The node ID issuing that command.


 -- Member of lw6pil_command_s: code
     *Type:* `lw6pil_command_code_t'

     *Definition:* `lw6pil_command_code_t lw6pil_command_s::code'

     The command code.


 -- Member of lw6pil_command_s: args
     *Type:* `lw6pil_command_args_t'

     *Definition:* `lw6pil_command_args_t lw6pil_command_s::args'

     The command arguments, parsed.


 -- Member of lw6pil_command_s: text
     *Type:* `char *'

     *Definition:* `char* lw6pil_command_s::text'

     The original full text of the command.


 -- Struct: lw6pil_local_cursors_s
     Contains information about all local cursors, which will override
     information from game state.

 -- Member of lw6pil_local_cursors_s: main_cursor_id
     *Type:* `u_int16_t'

     *Definition:* `u_int16_t lw6pil_local_cursors_s::main_cursor_id'

     Main cursor ID (16-bit non-zero unsigned int). By main, we usually
     mean the mouse-driven one but necessarily. But still, this is a
     cursor which will have a special role, it will be used to center
     the map if needed, among other things.

 -- Member of lw6pil_local_cursors_s: main_i
     *Type:* `int'

     *Definition:* `int lw6pil_local_cursors_s::main_i'

     Main cursor index.


 -- Member of lw6pil_local_cursors_s: nb_cursors
     *Type:* `int'

     *Definition:* `int lw6pil_local_cursors_s::nb_cursors'

     Number of cursors.


 -- Member of lw6pil_local_cursors_s: cursors
     *Type:* `lw6pil_local_cursor_t'

     *Definition:* `lw6pil_local_cursor_t
     lw6pil_local_cursors_s::cursors[LW6MAP_MAX_NB_CURSORS]'

     The cursors array.


 -- Struct: lw6pil_local_cursor_s
     Stores informations about local cursors. This is usefull for user
     feedback. Indeed there can be some delay between, for instance, a
     mouse move or a keyboard press, and the time this information
     makes it through the whole pipeline. Players wouldn't understand
     such a lag so for local cursors we override the information from
     the game state with that information we get right from the GUI.

 -- Member of lw6pil_local_cursor_s: cursor_id
     *Type:* `u_int16_t'

     *Definition:* `u_int16_t lw6pil_local_cursor_s::cursor_id'

     Cursor ID (16-bit non-zero unsigned int).


 -- Member of lw6pil_local_cursor_s: x
     *Type:* `int'

     *Definition:* `int lw6pil_local_cursor_s::x'

     X position (map coords).


 -- Member of lw6pil_local_cursor_s: y
     *Type:* `int'

     *Definition:* `int lw6pil_local_cursor_s::y'

     Y position (map coords).


 -- Member of lw6pil_local_cursor_s: mouse_controlled
     *Type:* `int'

     *Definition:* `int lw6pil_local_cursor_s::mouse_controlled'

     Wether this cursor is mouse controlled. If yes, then information
     will be taken directly from the mouse driver.

 -- Member of lw6pil_local_cursor_s: is_main
     *Type:* `int'

     *Definition:* `int lw6pil_local_cursor_s::is_main'

     Wether this cursor is the main cursor.


 -- Struct: lw6pil_pilot_s
     Pilot is a container for several game states, a reference state
     which we can rely upon and a draft state which is anticipated to
     provide interactive feedback but reflects non-validated
     informations. The first member, id, is the same as the internal
     _lw6pil_pilot_t structure. The rest of it is hidden. The program
     will cast from lw6pil_pilot_t to _lw6pil_pilot_t internally.

 -- Member of lw6pil_pilot_s: id
     *Type:* `u_int32_t'

     *Definition:* `u_int32_t lw6pil_pilot_s::id'

     The id of the object, this is non-zero and unique within one run
     session, incremented at each object creation.

 -- Struct: lw6pil_remove_args_s
     Arguments passed to the REMOVE command.

 -- Member of lw6pil_remove_args_s: cursor_id
     *Type:* `u_int16_t'

     *Definition:* `u_int16_t lw6pil_remove_args_s::cursor_id'

     Cursor ID (16-bit non-zero unsigned int).


 -- Struct: lw6pil_set_args_s
     Arguments passed to the SET command.

 -- Member of lw6pil_set_args_s: cursor_id
     *Type:* `u_int64_t'

     *Definition:* `u_int64_t lw6pil_set_args_s::cursor_id'

     Cursor ID (16-bit non-zero unsigned int).


 -- Member of lw6pil_set_args_s: x
     *Type:* `int'

     *Definition:* `int lw6pil_set_args_s::x'

     X position (map coords).


 -- Member of lw6pil_set_args_s: y
     *Type:* `int'

     *Definition:* `int lw6pil_set_args_s::y'

     Y position (map coords).


 -- Member of lw6pil_set_args_s: fire
     *Type:* `int'

     *Definition:* `int lw6pil_set_args_s::fire'

     Wether to activate primary weapon.


 -- Member of lw6pil_set_args_s: fire2
     *Type:* `int'

     *Definition:* `int lw6pil_set_args_s::fire2'

     Wether to activate secondary weapon.


 -- Struct: lw6pil_worker_s
     Worker thread data, used to calculate stuff in a separate thread.
     The principle is simple, it tries to keep up with a given target
     round, whenever this round isn't reached, it computes more and
     more rounds.

 -- Member of lw6pil_worker_s: run
     *Type:* `int'

     *Definition:* `int lw6pil_worker_s::run'

     Wether this thread should run, 0 will stop it.


 -- Member of lw6pil_worker_s: current_round
     *Type:* `int'

     *Definition:* `int lw6pil_worker_s::current_round'

     Current game round.


 -- Member of lw6pil_worker_s: target_round
     *Type:* `int'

     *Definition:* `int lw6pil_worker_s::target_round'

     Round up to which we should compute stuff.


 -- Member of lw6pil_worker_s: computed_rounds
     *Type:* `int'

     *Definition:* `int lw6pil_worker_s::computed_rounds'

     How many rounds where computed since object creation.


 -- Member of lw6pil_worker_s: over
     *Type:* `int'

     *Definition:* `int lw6pil_worker_s::over'

     Wether the game is over or not.


 -- Member of lw6pil_worker_s: compute_thread
     *Type:* `lw6sys_thread_handler_t *'

     *Definition:* `lw6sys_thread_handler_t*
     lw6pil_worker_s::compute_thread'

     The thread that does the job.


 -- Member of lw6pil_worker_s: global_mutex
     *Type:* `lw6sys_mutex_t *'

     *Definition:* `lw6sys_mutex_t* lw6pil_worker_s::global_mutex'

     Global data mutex.


 -- Member of lw6pil_worker_s: compute_mutex
     *Type:* `lw6sys_mutex_t *'

     *Definition:* `lw6sys_mutex_t* lw6pil_worker_s::compute_mutex'

     Mutex used for the computing thread.


 -- Member of lw6pil_worker_s: commands_spinlock
     *Type:* `lw6sys_spinlock_t *'

     *Definition:* `lw6sys_spinlock_t*
     lw6pil_worker_s::commands_spinlock'

     Mutex used for the commands object, uses a spinlock instead of a
     standard lock as updating commands is (should) be pretty fast.

 -- Member of lw6pil_worker_s: game_state
     *Type:* `lw6ker_game_state_t *'

     *Definition:* `lw6ker_game_state_t* lw6pil_worker_s::game_state'

     Game state the computing thread is working on.


 -- Member of lw6pil_worker_s: commands
     *Type:* `lw6sys_list_t *'

     *Definition:* `lw6sys_list_t* lw6pil_worker_s::commands'

     List of commands to be processed.



File: liquidwar6.info,  Node: libscm,  Next: libsim,  Prev: libpil,  Up: C API

5.32 libscm
===========

5.32.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/scm/index.html'.

5.32.2 API
----------

 -- Function: int lw6scm_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `scm' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.

 -- Function: int lw6scm_c_define_gsubr (char * NAME, int REQ, int OPT,
          int RST, lw6scm_func_t FCN)
     NAME:  name of the function when called from guile

     REQ:  required parameters

     OPT:  optional parameters

     RST:  ? should RTFM to find that out

     FCN:  the function itself (pointer on the C executable code)

     Wrapper on `scm_c_define_gsubr', one of the value of this function
     is that it does check wether it's documented before registering
     it. So if you try to register something not documented, it will
     fire a warning, which is a very nice code-quality tool.

     *Return value:*  1 on success, 0 on failure.

 -- Function: int lw6scm_c_primitive_load (char * FILENAME)
     FILENAME:  file to execute

     Loads and executes a script. Will add a log message while doing it.

     *Return value:*  1 on success, 0 on failure.


File: liquidwar6.info,  Node: libsim,  Next: libsnd,  Prev: libscm,  Up: C API

5.33 libsim
===========

5.33.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/sim/index.html'.

5.33.2 API
----------

 -- Function: void lw6sim_print (lw6sim_results_t * RESULTS, FILE * F)
     RESULTS:  data to print

     F:  file to print data to

     Pretty prints results on standard output.

     *Return value:*  none.

 -- Function: void lw6sim_results_zero (lw6sim_results_t * RESULTS)
     RESULTS:  out param, will be cleared

     Fills the struct with zeroes.

     *Return value:*  none.

 -- Function: int lw6sim_results_update_percents (lw6sim_results_t *
          RESULTS)
     RESULTS:  results set to work on (in/out param)

     Updates the structure so that the percent members are up to date.

     *Return value:*  1 on success, 0 on failure.

 -- Function: int lw6sim_simulate (int ARGC, const char * [] ARGV,
          lw6sim_results_t * RESULTS, int NB_TEAMS, char * BOT_BACKEND)
     ARGC:  argc as passed to `main'

     ARGV:  argv as passed to `main'

     RESULTS:  out param, results of the simulation

     NB_TEAMS:  number of teams

     BOT_BACKEND:  bot backend to use

     Runs a simulation of several battle/games on the default map using
     different team settings. Will test teams up to the given number,
     for instance if you give 3 as an argument, will run tests with
     teams 0, 1 and 2 (that's to say a total of 3 teams).

     *Return value:*  1 on success, 0 on failure.

 -- Function: int lw6sim_simulate_basic (int ARGC, const char * []
          ARGV, lw6sim_results_t * RESULTS)
     ARGC:  argc as passed to `main'

     ARGV:  argv as passed to `main'

     RESULTS:  out param, results of the simulation

     Runs a simulation of several battle/games on the default map using
     different team settings. Will test the most common colors only,
     with the most popular bot.

     *Return value:*  1 on success, 0 on failure.

 -- Function: int lw6sim_simulate_full (int ARGC, const char * [] ARGV,
          lw6sim_results_t * RESULTS)
     ARGC:  argc as passed to `main'

     ARGV:  argv as passed to `main'

     RESULTS:  out param, results of the simulation

     Runs a simulation of several battle/games on the default map using
     different team settings. Will test all colors, with the most
     popular bot.

     *Return value:*  1 on success, 0 on failure.

 -- Function: int lw6sim_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `sim' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.

 -- Struct: lw6sim_results_s
     Results for the game simulation, contains basic statistics about
     who won the games.

 -- Member of lw6sim_results_s: nb_teams
     *Type:* `int'

     *Definition:* `int lw6sim_results_s::nb_teams'

     Number of teams that were tested.


 -- Member of lw6sim_results_s: absolute
     *Type:* `int'

     *Definition:* `int lw6sim_results_s::absolute[LW6MAP_MAX_NB_TEAMS]'

     Absolute score. The unit is arbitrary and depends on the game
     type, the number of games. Well, it means nothing in itself, each
     team needs to be compared to the other ones.

 -- Member of lw6sim_results_s: percent
     *Type:* `float'

     *Definition:* `float
     lw6sim_results_s::percent[LW6MAP_MAX_NB_TEAMS]'

     Score as a percentage. This is based on several games played, the
     higher it is the stronger the team is.


File: liquidwar6.info,  Node: libsnd,  Next: mod-csound,  Prev: libsim,  Up: C API

5.34 libsnd
===========

5.34.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/snd/index.html'.

5.34.2 API
----------

 -- Function: int lw6snd_play_fx (lw6snd_backend_t * BACKEND, int FX_ID)
     BACKEND:  sound backend to use

     FX_ID:  sound fx id

     Plays a sound fx.

     *Return value:*  1 on success, 0 on error

 -- Function: int lw6snd_is_music_file (lw6snd_backend_t * BACKEND,
          char * MAP_DIR, char * MUSIC_PATH, char * MUSIC_FILE)
     BACKEND:  sound backend to use

     MAP_DIR:  map directory, to search additionnal files

     MUSIC_PATH:  config entry containing multiple paths

     MUSIC_FILE:  relative/local name of a music file

     Tells wether a file is a valid music file, typicallly based on file
     existence and extension. Not bullet proof, file might actually not
     be loadable, but chances are 99%.

     *Return value:*  1 if music file, 0 if not

 -- Function: int lw6snd_play_music_file (lw6snd_backend_t * BACKEND,
          char * MAP_DIR, char * MUSIC_PATH, char * MUSIC_FILE)
     BACKEND:  sound backend to use

     MAP_DIR:  map directory, to search additionnal files

     MUSIC_PATH:  config entry containing multiple paths

     MUSIC_FILE:  relative/local name of a music file

     Plays a music file.

     *Return value:*  1 if OK, 0 if not.

 -- Function: int lw6snd_play_music_random (lw6snd_backend_t * BACKEND,
          char * MUSIC_PATH, char * MUSIC_FILTER, char * MUSIC_EXCLUDE)
     BACKEND:  sound backend to use

     MUSIC_PATH:  config entry containing multiple paths

     MUSIC_FILTER:  string filter, must be present

     MUSIC_EXCLUDE:  string filter, must not be present

     Plays a random music file. The filter and exclude mecanisms are
     not complete regex filters, only a quick and dirty feature which
     should still help in some cases, such as sorting musics for the
     menus and for the rest.

     *Return value:*  1 if OK, 0 if not.

 -- Function: void lw6snd_stop_music (lw6snd_backend_t * BACKEND)
     BACKEND:  sound backend to use

     Stops the music.

     *Return value:*  none.

 -- Function: int lw6snd_init (lw6snd_backend_t * BACKEND, float
          FX_VOLUME, float WATER_VOLUME, float MUSIC_VOLUME)
     BACKEND:  the graphical backend to use

     FX_VOLUME:  sound fx volume

     WATER_VOLUME:  water sounds volume

     MUSIC_VOLUME:  music volume

     Sets up the sound backend for good, initializing a playback engine
     ready to play sounds and set to defaults.  This call can typically
     fail if there's no device available, if the user doesn't have
     enough rights to access the hardware, and so on.

     *Return value:*  1 on success, 0 if not

 -- Function: void lw6snd_set_fx_volume (lw6snd_backend_t * BACKEND,
          float VOLUME)
     BACKEND:  sound backend to use

     VOLUME:  sound fx volume

     Changes sound fx volume.

     *Return value:*  none.

 -- Function: void lw6snd_set_water_volume (lw6snd_backend_t * BACKEND,
          float VOLUME)
     BACKEND:  sound backend to use

     VOLUME:  water sounds volume

     Changes water sounds volume.

     *Return value:*  none.

 -- Function: void lw6snd_set_music_volume (lw6snd_backend_t * BACKEND,
          float VOLUME)
     BACKEND:  sound backend to use

     VOLUME:  music volume

     Changes music volume.

     *Return value:*  none.

 -- Function: void lw6snd_poll (lw6snd_backend_t * BACKEND)
     BACKEND:  sound backend to use

     Polling function, must be called on a regular basis.

     *Return value:*  none.

 -- Function: void lw6snd_quit (lw6snd_backend_t * BACKEND)
     BACKEND:  the backend to quit

     Uninitializes the backend, that is, releases resources, stops
     playback.

     *Return value:*  none.

 -- Function: char * lw6snd_repr (lw6snd_backend_t * BACKEND)
     BACKEND:  the backend to represent

     Returns a readable version of the backend object.

     *Return value:*  a newly allocated pointer.

 -- Function: lw6sys_assoc_t * lw6snd_get_backends (int ARGC, const
          char * [] ARGV)
     ARGC:  argc, as passed to `main'

     ARGV:  argv, as passed to `main'

     List available snd backends. The hash contains pairs with id and
     name for each backend. The id is the technical key you can use to
     load the backend, the name is something more readable you can
     display in an interface. The backend objects themselves are not
     instanciated by this (in fact, they are, but released on the fly)
     you need to load and initialize them afterwards.

     *Return value:*  hash containing id/name pairs.

 -- Function: lw6snd_backend_t * lw6snd_create_backend (int ARGC, const
          char * [] ARGV, char * NAME)
     ARGC:  argc, as passed to `main'

     ARGV:  argv, as passed to `main'

     NAME:  string containing snd key, typically got from
     `lw6snd_get_backends'

     Creates a snd backend, this is just about loading the dynamic
     library if needed, and/or check snd engine is available, and
     connect to it. It does not perform initialization.

     *Return value:*  snd backend.

 -- Function: void lw6snd_destroy_backend (lw6snd_backend_t * BACKEND)
     BACKEND:  snd backend to destroy

     Frees the ressources associated to a snd, which must have been
     properly uninitialized before.

     *Return value:*  none.

 -- Function: int lw6snd_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `snd' module test suite. If run in check mode (0), won't
     really perform the test, since it could fail because of hardware
     problems, context, permissions...

     *Return value:*  1 if test is successfull, 0 on error.

 -- Struct: lw6snd_backend_s
     The snd backend is the first argument passed to any snd function,
     it contains reference to all the functions which can be used as
     well as a pointer on associated data. In OO, this would just be an
     object, with members and methods, using polymorphism through
     opaque pointers.

 -- Member of lw6snd_backend_s: dl_handle
     *Type:* `lw6dyn_dl_handle_t *'

     *Definition:* `lw6dyn_dl_handle_t* lw6snd_backend_s::dl_handle'

     Handle on dynamic library (if it makes sense).


 -- Member of lw6snd_backend_s: snd_context
     *Type:* `void *'

     *Definition:* `void* lw6snd_backend_s::snd_context'

     Snd specific data, what is behind this pointer really depends on
     the snd engine.

 -- Member of lw6snd_backend_s: argc
     *Type:* `int'

     *Definition:* `int lw6snd_backend_s::argc'

     The argc value passed to main.


 -- Member of lw6snd_backend_s: argv
     *Type:* `const char **'

     *Definition:* `const char** lw6snd_backend_s::argv'

     The argv value passed to main.


 -- Member of lw6snd_backend_s: id
     *Type:* `u_int32_t'

     *Definition:* `u_int32_t lw6snd_backend_s::id'

     The id of the object, this is non-zero and unique within one run
     session, incremented at each object creation.

 -- Member of lw6snd_backend_s: play_fx
     *Type:* `int(*'

     *Definition:* `int(* lw6snd_backend_s::play_fx)(void *snd_context,
     int fx_id)'

     Pointer on lw6snd_play_fx callback code.


 -- Member of lw6snd_backend_s: is_music_file
     *Type:* `int(*'

     *Definition:* `int(* lw6snd_backend_s::is_music_file)(void
     *snd_context, char *music_file)'

     Pointer on lw6snd_is_music_file callback code.


 -- Member of lw6snd_backend_s: play_music_file
     *Type:* `int(*'

     *Definition:* `int(* lw6snd_backend_s::play_music_file)(void
     *snd_context, char *music_file)'

     Pointer on lw6snd_play_music_file callback code.


 -- Member of lw6snd_backend_s: play_music_random
     *Type:* `int(*'

     *Definition:* `int(* lw6snd_backend_s::play_music_random)(void
     *snd_context, char *music_path, char *music_filter, char
     *music_exclude)'

     Pointer on lw6snd_play_music_randomcallback code.


 -- Member of lw6snd_backend_s: stop_music
     *Type:* `void(*'

     *Definition:* `void(* lw6snd_backend_s::stop_music)(void
     *snd_context)'

     Pointer on lw6snd_stop_music callback code.


 -- Member of lw6snd_backend_s: init
     *Type:* `void *(*'

     *Definition:* `void*(* lw6snd_backend_s::init)(int argc, const
     char *argv[], float fx_volume, float water_volume, float
     music_volume)'

     Pointer on lw6snd_init callback code.


 -- Member of lw6snd_backend_s: set_fx_volume
     *Type:* `void(*'

     *Definition:* `void(* lw6snd_backend_s::set_fx_volume)(void
     *snd_context, float volume)'

     Pointer on lw6snd_set_fx_volume callback code.


 -- Member of lw6snd_backend_s: set_water_volume
     *Type:* `void(*'

     *Definition:* `void(* lw6snd_backend_s::set_water_volume)(void
     *snd_context, float volume)'

     Pointer on lw6snd_set_water_volume callback code.


 -- Member of lw6snd_backend_s: set_music_volume
     *Type:* `void(*'

     *Definition:* `void(* lw6snd_backend_s::set_music_volume)(void
     *snd_context, float volume)'

     Pointer on lw6snd_set_music_volume callback code.


 -- Member of lw6snd_backend_s: poll
     *Type:* `void(*'

     *Definition:* `void(* lw6snd_backend_s::poll)(void *snd_context)'

     Pointer on lw6snd_poll callback code.


 -- Member of lw6snd_backend_s: quit
     *Type:* `void(*'

     *Definition:* `void(* lw6snd_backend_s::quit)(void *snd_context)'

     Pointer on lw6snd_quit callback code.


 -- Member of lw6snd_backend_s: repr
     *Type:* `char *(*'

     *Definition:* `char*(* lw6snd_backend_s::repr)(void *snd_context,
     u_int32_t id)'

     Pointer on lw6snd_repr callback code.



File: liquidwar6.info,  Node: mod-csound,  Next: mod-ogg,  Prev: libsnd,  Up: C API

5.35 mod-csound
===============

5.35.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/snd/mod-csound/index.html'.

5.35.2 API
----------


File: liquidwar6.info,  Node: mod-ogg,  Next: libsrv,  Prev: mod-csound,  Up: C API

5.36 mod-ogg
============

5.36.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/snd/mod-ogg/index.html'.

5.36.2 API
----------


File: liquidwar6.info,  Node: libsrv,  Next: mod-httpd,  Prev: mod-ogg,  Up: C API

5.37 libsrv
===========

5.37.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/srv/index.html'.

5.37.2 API
----------

 -- Function: int lw6srv_init (lw6srv_backend_t * BACKEND,
          lw6srv_listener_t * LISTENER)
     BACKEND:  backend to use

     Initializes a server backend. Must be performed before any other
     call.

     *Return value:*  1 on success, 0 on failure

 -- Function: void lw6srv_quit (lw6srv_backend_t * BACKEND)
     BACKEND:  unitialize a srv backend

     Closes a srv, but does not free all ressources.

 -- Function: int lw6srv_analyse_tcp (lw6srv_backend_t * BACKEND,
          lw6srv_tcp_accepter_t * TCP_ACCEPTER, lw6nod_info_t *
          NODE_INFO, u_int64_t * REMOTE_ID, char ** REMOTE_URL)
     BACKEND:  server backend to use

     TCP_ACCEPTER:  TCP mode accepter

     NODE_INFO:  this node information

     REMOTE_ID:  remote host id (out param)

     REMOTE_URL:  remote host URL (out param, dynamically allocated)

     Analyzes new TCP messages, typically handled within the accepter
     object. The result is a combination of bitwise flags, namely
     namely `LW6SRV_ANALYSE_DEAD', `LW6SRV_ANALYSE_UNDERSTANDABLE', and
     `LW6SRV_ANALYSE_OOB' which helps knowing what to do with message.

     *Return value:*  bitwise flag.

 -- Function: int lw6srv_analyse_udp (lw6srv_backend_t * BACKEND,
          lw6srv_udp_buffer_t * UDP_BUFFER, lw6nod_info_t * NODE_INFO,
          u_int64_t * REMOTE_ID, char ** REMOTE_URL)
     BACKEND:  server backend to use

     UDP_BUFFER:  UDP buffer

     NODE_INFO:  this node information

     REMOTE_ID:  remote host id (out param)

     REMOTE_URL:  remote host URL (out param, dynamically allocated)

     Analyzes an UDP buffer, received on a socket.  The result is a
     combination of bitwise flags, namely namely `LW6SRV_ANALYSE_DEAD',
     `LW6SRV_ANALYSE_UNDERSTANDABLE', and `LW6SRV_ANALYSE_OOB' which
     helps knowing what to do with message.

     *Return value:*  bitwise flag.

 -- Function: int lw6srv_process_oob (lw6srv_backend_t * BACKEND,
          lw6nod_info_t * NODE_INFO, lw6srv_oob_data_t * OOB_DATA)
     BACKEND:  server backend to use

     NODE_INFO:  this node information

     OOB_DATA:  OOB data received

     Processes an OOB message sent from a client.

     *Return value:*  1 if OK, 0 if not.

 -- Function: lw6cnx_connection_t * lw6srv_open (lw6srv_backend_t *
          BACKEND, lw6srv_listener_t * LISTENER, char * LOCAL_URL, char
          * REMOTE_URL, char * REMOTE_IP, int REMOTE_PORT, char *
          PASSWORD, u_int64_t LOCAL_ID, u_int64_t REMOTE_ID, int
          DNS_OK, int NETWORK_RELIABILITY, lw6cnx_recv_callback_t
          RECV_CALLBACK_FUNC, void * RECV_CALLBACK_DATA)
     BACKEND:  server backend to use

     LOCAL_URL:  local url to use (to send to peer)

     REMOTE_URL:  remote url to communicate with

     REMOTE_IP:  remote ip to communicate with

     REMOTE_PORT:  remote port to communicate with

     PASSWORD:  password to use (the real password, not a hash)

     LOCAL_ID:  the local 64-bit id

     REMOTE_ID:  the remove 64-bit id

     DNS_OK:  1 if no DNS mismatch, 0 if situation is unclear

     NETWORK_RELIABILITY:  the greater, the more reliable it is

     RECV_CALLBACK_FUNC:  callback fired when receiving data

     RECV_CALLBACK_DATA:  additionnal data passed to callback

     Opens a server connection. One might wonder, clients open
     connections, but servers? To some extent, this is the equivalent
     of `accept' in the socket API, it will actually create an object
     one can then use to communicate. Be carefull with the
     implementation of the callback, keep in mind it can be called any
     time in multithreaded mode, you need to set up locks when
     accessing shared objects, including, but not limited to, your own
     data buffers.

     *Return value:*  new connection object.

 -- Function: int lw6srv_feed_with_tcp (lw6srv_backend_t * BACKEND,
          lw6cnx_connection_t * CONNECTION, lw6srv_tcp_accepter_t *
          TCP_ACCEPTER)
     CONNECTION:  connection to use

     TCP_ACCEPTER:  TCP accepter holding data

     When data is receivedm feeds the server object with data.  Will
     typically fire the callback receive function if there are actually
     some data stuff.

     *Return value:*  1 some data processed, else 0

 -- Function: int lw6srv_feed_with_udp (lw6srv_backend_t * BACKEND,
          lw6cnx_connection_t * CONNECTION, lw6srv_udp_buffer_t *
          UDP_BUFFER)
     CONNECTION:  connection to use

     When data is receivedm feeds the server object with data.  Will
     typically fire the callback receive function if there are actually
     some data stuff.

     *Return value:*  1 some data processed, else 0

 -- Function: void lw6srv_close (lw6srv_backend_t * BACKEND,
          lw6cnx_connection_t * CONNECTION)
     BACKEND:  server backend to use

     CONNECTION:  connection to close

     Closes a connection, will also free it.

     *Return value:*  none.

 -- Function: int lw6srv_send (lw6srv_backend_t * BACKEND,
          lw6cnx_connection_t * CONNECTION, u_int32_t
          PHYSICAL_TICKET_SIG, u_int32_t LOGICAL_TICKET_SIG, u_int64_t
          LOGICAL_FROM_ID, u_int64_t LOGICAL_TO_ID, char * MESSAGE)
     BACKEND:  server backend to use

     CONNECTION:  connection to use

     PHYSICAL_TICKET_SIG:  physical ticket

     LOGICAL_TICKET_SIG:  logical ticket

     LOGICAL_FROM_ID:  logical id of sender

     LOGICAL_TO_ID:  logical id of receiver

     MESSAGE:  string with the message to send

     Sends a message. The added value with a plain send is that it
     handles all the special ticket fields.

     *Return value:*  1 on success, 0 if not

 -- Function: void lw6srv_poll (lw6srv_backend_t * BACKEND,
          lw6cnx_connection_t * CONNECTION)
     BACKEND:  server backend to use

     CONNECTION:  connection to use

     Polling function, to be called on a regular basis.

     *Return value:*  none.

 -- Function: char * lw6srv_repr (lw6srv_backend_t * BACKEND,
          lw6cnx_connection_t * CONNECTION)
     BACKEND:  backend to use

     CONNECTION:  connection to represent

     Gives a human readable representation of the connection.

     *Return value:*  dynamically allocated string.

 -- Function: lw6srv_listener_t * lw6srv_start (char * IP, int PORT)
     IP:  ip address to listen on

     PORT:  port IP to bind to

     Starts a server, binds the socket(s) and returns a listener object
     which can in turn be used to create connections.

     *Return value:*  new listener object.

 -- Function: void lw6srv_stop (lw6srv_listener_t * LISTENER)
     LISTENER:  listener to stop

     Stops a listener object, and frees it.

     *Return value:*  none.

 -- Function: lw6srv_oob_t * lw6srv_oob_new (char * REMOTE_IP, int
          REMOTE_PORT, int SOCK, char * FIRST_LINE)
     REMOTE_IP:  remote IP address

     REMOTE_PORT:  remote port

     SOCK:  the socket handler (either TCP or UDP)

     FIRST_LINE:  the first line of data (can be NULL)

     Create a new OOB structure, copying required objects.  We need to
     make copies for this is for usage in a separate thread. The thread
     member is not set here since the right way to do things is first to
     set up data then to fire the thread.

     *Return value:*  new object

 -- Function: void lw6srv_oob_free (lw6srv_oob_t * OOB)
     OOB:  the object to free

     Frees an OOB structure.

     *Return value:*  none

 -- Function: char * lw6srv_default_backends ()
     Returns the list of the default srv backends.

     *Return value:*  comma separated string, must not be freed.

 -- Function: lw6sys_assoc_t * lw6srv_get_backends (int ARGC, const
          char * [] ARGV)
     ARGC:  argc, as passed to `main'

     ARGV:  argv, as passed to `main'

     List available srv backends. The hash contains pairs with id and
     name for each backend. The id is the technical key you can use to
     load the backend, the name is something more readable you can
     display in an interface. The backend objects themselves are not
     instanciated by this (in fact, they are, but released on the fly)
     you need to load and initialize them afterwards.

     *Return value:*  hash containing id/name pairs.

 -- Function: lw6srv_backend_t * lw6srv_create_backend (int ARGC, const
          char * [] ARGV, char * NAME)
     ARGC:  argc, as passed to `main'

     ARGV:  argv, as passed to `main'

     NAME:  string containing srv key, typically got from
     `lw6srv_get_backends'

     Creates a srv backend, this is just about loading the dynamic
     library if needed, and/or check srv engine is available, and
     connect to it. It does not perform initialization.

     *Return value:*  srv backend.

 -- Function: void lw6srv_destroy_backend (lw6srv_backend_t * BACKEND)
     BACKEND:  backend to destroy

     Destroys a srv backend.

     *Return value:*  none.

 -- Function: lw6srv_tcp_accepter_t * lw6srv_tcp_accepter_new (char *
          CLIENT_IP, int CLIENT_PORT, int SOCK)
     CLIENT_IP:  the client ip, will be freed when accepter is freed,
     do not copy it

     CLIENT_PORT:  the client port

     SOCK:  the socket used

     Creates a tcp_accepter object.

     *Return value:*  none

 -- Function: void lw6srv_tcp_accepter_free (lw6srv_tcp_accepter_t *
          TCP_ACCEPTER)
     TCP_ACCEPTER:  the object to free

     Frees a tcp_accepter object.

     *Return value:*  none

 -- Function: int lw6srv_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `srv' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.

 -- Function: lw6srv_udp_buffer_t * lw6srv_udp_buffer_new (char *
          CLIENT_IP, int CLIENT_PORT, char * LINE)
     CLIENT_IP:  the client ip, will be freed when object is freed, do
     not free it

     CLIENT_PORT:  the client port

     LINE:  the line received, will be freed when object is freed, do
     not free it

     Creates an udp_buffer object.

     *Return value:*  none

 -- Function: void lw6srv_udp_buffer_free (lw6srv_udp_buffer_t *
          UDP_BUFFER)
     UDP_BUFFER:  the object to free

     Frees a udp_buffer object.

     *Return value:*  none

 -- Struct: lw6srv_backend_s
     The srv backend is the first argument passed to any srv function,
     it contains reference to all the functions which can be used as
     well as a pointer on associated data. In OO, this would just be an
     object, with members and methods, using polymorphism through
     opaque pointers.

 -- Member of lw6srv_backend_s: dl_handle
     *Type:* `lw6dyn_dl_handle_t *'

     *Definition:* `lw6dyn_dl_handle_t* lw6srv_backend_s::dl_handle'

     Handle on dynamic library (if it makes sense).


 -- Member of lw6srv_backend_s: srv_context
     *Type:* `void *'

     *Definition:* `void* lw6srv_backend_s::srv_context'

     Srv specific data, what is behind this pointer really depends on
     the srv engine.

 -- Member of lw6srv_backend_s: argc
     *Type:* `int'

     *Definition:* `int lw6srv_backend_s::argc'

     The argc value passed to main.


 -- Member of lw6srv_backend_s: argv
     *Type:* `const char **'

     *Definition:* `const char** lw6srv_backend_s::argv'

     The argv value passed to main.


 -- Member of lw6srv_backend_s: id
     *Type:* `u_int32_t'

     *Definition:* `u_int32_t lw6srv_backend_s::id'

     The id of the object, this is non-zero and unique within one run
     session, incremented at each object creation.

 -- Member of lw6srv_backend_s: name
     *Type:* `char *'

     *Definition:* `char* lw6srv_backend_s::name'

     Module name.


 -- Member of lw6srv_backend_s: info
     *Type:* `lw6nod_info_t *'

     *Definition:* `lw6nod_info_t* lw6srv_backend_s::info'

     Information about local node.


 -- Member of lw6srv_backend_s: init
     *Type:* `void *(*'

     *Definition:* `void*(* lw6srv_backend_s::init)(int argc, const
     char *argv[], lw6srv_listener_t *listener)'

     Pointer on lw6srv_init callback code.


 -- Member of lw6srv_backend_s: quit
     *Type:* `void(*'

     *Definition:* `void(* lw6srv_backend_s::quit)(void *srv_context)'

     Pointer on lw6srv_quit callback code.


 -- Member of lw6srv_backend_s: analyse_tcp
     *Type:* `int(*'

     *Definition:* `int(* lw6srv_backend_s::analyse_tcp)(void
     *srv_context, lw6srv_tcp_accepter_t *tcp_accepter, lw6nod_info_t
     *node_info, u_int64_t *remote_id, char **remote_url)'

     Pointer on lw6srv_analyse_tcp callback code.


 -- Member of lw6srv_backend_s: analyse_udp
     *Type:* `int(*'

     *Definition:* `int(* lw6srv_backend_s::analyse_udp)(void
     *srv_context, lw6srv_udp_buffer_t *udp_buffer, lw6nod_info_t
     *node_info, u_int64_t *remote_id, char **remote_url)'

     Pointer on lw6srv_analyse_udp callback code.


 -- Member of lw6srv_backend_s: process_oob
     *Type:* `int(*'

     *Definition:* `int(* lw6srv_backend_s::process_oob)(void
     *srv_context, lw6nod_info_t *node_info, lw6srv_oob_data_t
     *oob_data)'

     Pointer on lw6srv_process_oob callback code.


 -- Member of lw6srv_backend_s: open
     *Type:* `lw6cnx_connection_t *(*'

     *Definition:* `lw6cnx_connection_t*(* lw6srv_backend_s::open)(void
     *srv_context, lw6srv_listener_t *listener, char *local_url, char
     *remote_url, char *remote_ip, int remote_port, char *password,
     u_int64_t local_id, u_int64_t remote_id, int dns_ok, int
     network_reliability, lw6cnx_recv_callback_t recv_callback_func,
     void *recv_callback_data)'

     Pointer on lw6srv_open callback code.


 -- Member of lw6srv_backend_s: feed_with_tcp
     *Type:* `int(*'

     *Definition:* `int(* lw6srv_backend_s::feed_with_tcp)(void
     *srv_context, lw6cnx_connection_t *connection,
     lw6srv_tcp_accepter_t *tcp_accepter)'

     Pointer on lw6srv_feed_with_tcp callback code.


 -- Member of lw6srv_backend_s: feed_with_udp
     *Type:* `int(*'

     *Definition:* `int(* lw6srv_backend_s::feed_with_udp)(void
     *srv_context, lw6cnx_connection_t *connection, lw6srv_udp_buffer_t
     *udp_buffer)'

     Pointer on lw6srv_feed_with_udp callback code.


 -- Member of lw6srv_backend_s: close
     *Type:* `void(*'

     *Definition:* `void(* lw6srv_backend_s::close)(void *srv_context,
     lw6cnx_connection_t *connection)'

     Pointer on lw6srv_close callback code.


 -- Member of lw6srv_backend_s: send
     *Type:* `int(*'

     *Definition:* `int(* lw6srv_backend_s::send)(void *srv_context,
     lw6cnx_connection_t *connection, u_int32_t physical_ticket_sig,
     u_int32_t logical_ticket_sig, u_int64_t logical_from_id, u_int64_t
     logical_to_id, char *message)'

     Pointer on lw6srv_send callback code.


 -- Member of lw6srv_backend_s: poll
     *Type:* `void(*'

     *Definition:* `void(* lw6srv_backend_s::poll)(void *srv_context,
     lw6cnx_connection_t *connection)'

     Pointer on lw6srv_poll callback code.


 -- Member of lw6srv_backend_s: repr
     *Type:* `char *(*'

     *Definition:* `char*(* lw6srv_backend_s::repr)(void *srv_context,
     lw6cnx_connection_t *connection)'

     Pointer on lw6srv_repr callback code.


 -- Struct: lw6srv_client_id_s
     Parsed client ID, this is not the numerical 64-bit ID but an
     IP:port pair which uniquely and physically identifies the peer.

 -- Member of lw6srv_client_id_s: client_ip
     *Type:* `char *'

     *Definition:* `char* lw6srv_client_id_s::client_ip'

     Client IP address, as a string.


 -- Member of lw6srv_client_id_s: client_port
     *Type:* `int'

     *Definition:* `int lw6srv_client_id_s::client_port'

     Client IP port.


 -- Struct: lw6srv_listener_s
     The listener is the object which listens on the network and can
     create tcp accepters or udp buffers depending on what is received.

 -- Member of lw6srv_listener_s: ip
     *Type:* `char *'

     *Definition:* `char* lw6srv_listener_s::ip'

     IP address we are binded to.


 -- Member of lw6srv_listener_s: port
     *Type:* `int'

     *Definition:* `int lw6srv_listener_s::port'

     IP port we are binded to.


 -- Member of lw6srv_listener_s: tcp_sock
     *Type:* `int'

     *Definition:* `int lw6srv_listener_s::tcp_sock'

     TCP socket, binded in listening mode.


 -- Member of lw6srv_listener_s: tcp_accepters
     *Type:* `lw6sys_list_t *'

     *Definition:* `lw6sys_list_t* lw6srv_listener_s::tcp_accepters'

     List of lw6srv_tcp_accepter_t objects, created when data is
     received.

 -- Member of lw6srv_listener_s: udp_sock
     *Type:* `int'

     *Definition:* `int lw6srv_listener_s::udp_sock'

     UDP socket, binded.


 -- Member of lw6srv_listener_s: udp_buffers
     *Type:* `lw6sys_list_t *'

     *Definition:* `lw6sys_list_t* lw6srv_listener_s::udp_buffers'

     List of lw6srv_udp_buffer_t objects, created when data is received.

 -- Struct: lw6srv_oob_data_s
     Used to store out of band data. Typically, when data is recognized
     as out of band, it's treated in a separate thread, and not
     mainstream. This is both because out-of-band data is the default
     (anything not recognized and/or not trusted is OOB) and because
     this can easily be treated separately as all we need is to server
     nearly static informations.

 -- Member of lw6srv_oob_data_s: creation_timestamp
     *Type:* `int64_t'

     *Definition:* `int64_t lw6srv_oob_data_s::creation_timestamp'

     Date of the request.


 -- Member of lw6srv_oob_data_s: do_not_finish
     *Type:* `int'

     *Definition:* `int lw6srv_oob_data_s::do_not_finish'

     Used to interrupt the OOB process before it's over.


 -- Member of lw6srv_oob_data_s: remote_ip
     *Type:* `char *'

     *Definition:* `char* lw6srv_oob_data_s::remote_ip'

     IP address of peer.


 -- Member of lw6srv_oob_data_s: remote_port
     *Type:* `int'

     *Definition:* `int lw6srv_oob_data_s::remote_port'

     IP port of peer.


 -- Member of lw6srv_oob_data_s: sock
     *Type:* `int'

     *Definition:* `int lw6srv_oob_data_s::sock'

     Socket used, can either be TCP or UDP, depends on backend.


 -- Member of lw6srv_oob_data_s: first_line
     *Type:* `char *'

     *Definition:* `char* lw6srv_oob_data_s::first_line'

     First line of data.


 -- Struct: lw6srv_oob_s
     Used to handle OOB requests. This is a container over the OOB data
     and its treatment thread.

 -- Member of lw6srv_oob_s: thread
     *Type:* `lw6sys_thread_handler_t *'

     *Definition:* `lw6sys_thread_handler_t* lw6srv_oob_s::thread'

     Thread use to handle the data.


 -- Member of lw6srv_oob_s: data
     *Type:* `lw6srv_oob_data_t'

     *Definition:* `lw6srv_oob_data_t lw6srv_oob_s::data'

     The OOB data, what we received from the network.


 -- Struct: lw6srv_tcp_accepter_s
     A TCP accepter is an object which is created after a listening
     socket received some random information (in TCP mode, hence its
     name). Itprovides basic support to accept/reject requests and
     choose the right protocol/backend for the answer.

 -- Member of lw6srv_tcp_accepter_s: client_id
     *Type:* `lw6srv_client_id_t'

     *Definition:* `lw6srv_client_id_t lw6srv_tcp_accepter_s::client_id'

     Where the data does come from.


 -- Member of lw6srv_tcp_accepter_s: sock
     *Type:* `int'

     *Definition:* `int lw6srv_tcp_accepter_s::sock'

     Socket returned by the accept POSIX function, this is the one we
     can use to reply and send data back.

 -- Member of lw6srv_tcp_accepter_s: first_line
     *Type:* `char'

     *Definition:* `char
     lw6srv_tcp_accepter_s::first_line[LW6SRV_PROTOCOL_BUFFER_SIZE+1]'

     First line received over the network. This is "peeked" so it's
     still available for the actual backend, in fact that's the very
     thing we need an object for, with the information "these bytes
     came from ip:port" one can take a decision on what to do with the
     request.

 -- Member of lw6srv_tcp_accepter_s: creation_timestamp
     *Type:* `int64_t'

     *Definition:* `int64_t lw6srv_tcp_accepter_s::creation_timestamp'

     Timestamp of accepter creation. This is more or less the same that
     the instant we received data on the network. There's a small lag,
     but not that bad. This is mostly used for timeout.

 -- Struct: lw6srv_udp_buffer_s
     A UDP datagram, this structure contains both the data and
     information about who sent it.

 -- Member of lw6srv_udp_buffer_s: client_id
     *Type:* `lw6srv_client_id_t'

     *Definition:* `lw6srv_client_id_t lw6srv_udp_buffer_s::client_id'

     Where the data does come from.


 -- Member of lw6srv_udp_buffer_s: line
     *Type:* `char *'

     *Definition:* `char* lw6srv_udp_buffer_s::line'

     The data itself. This is typically a C-string with a 0 char at the
     end, anything else will be rejected anyway.


File: liquidwar6.info,  Node: mod-httpd,  Next: mod-tcpd,  Prev: libsrv,  Up: C API

5.38 mod-httpd
==============

5.38.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/srv/mod-httpd/index.html'.

5.38.2 API
----------


File: liquidwar6.info,  Node: mod-tcpd,  Next: mod-udpd,  Prev: mod-httpd,  Up: C API

5.39 mod-tcpd
=============

5.39.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/srv/mod-tcpd/index.html'.

5.39.2 API
----------


File: liquidwar6.info,  Node: mod-udpd,  Next: libsys,  Prev: mod-tcpd,  Up: C API

5.40 mod-udpd
=============

5.40.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/srv/mod-udpd/index.html'.

5.40.2 API
----------


File: liquidwar6.info,  Node: libsys,  Next: libtsk,  Prev: mod-udpd,  Up: C API

5.41 libsys
===========

5.41.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/sys/index.html'.

5.41.2 API
----------

 -- Function: int lw6sys_arg_match (const char * KEYWORD, const char *
          ARGV_STRING)
     KEYWORD:  the option to match, without the prefix "-" or "-"

     ARGV_STRING:  the argv value, for instance argv[1]

     This is an utility function which allow the program to handle
     options in a uniform manner. Key comparison is insensitive, that
     is, -option and -OPTION are equivalent. Besides, -option and
     -OPTION are equivalent too. Liquid War 6 documentation mentions
     options in lowercase with a double dash (-option) by default, but
     it's a fact, the program supports variants. This is just for
     convenience, the philosophy behind this behavior is "be as
     permissive as possible when interpreting input, and as strict as
     possible when generating output". In fact, it's even said that
     Liquid War 6 will accept the argument without any prefix dash as
     being valid... This is to say running "liquidwar6 -option" is the
     same as running "liquidwar6 option". But, this is a secret 8-)

     *Return value:*  non zero if it matches, 0 if it doesn't.

 -- Function: int lw6sys_arg_exists (int ARGC, const char * [] ARGV,
          const char * KEYWORD)
     ARGC:  the number of arguments, as passed to `main'

     ARGV:  an array of arguments, as passed to `main'

     KEYWORD:  the keyword to match

     Parses all command-line arguments, searching for one precise
     "-key[=...]" entry.

     *Return value:*  1 if key is present, 0 if not.

 -- Function: char * lw6sys_arg_get_value (int ARGC, const char * []
          ARGV, const char * KEYWORD)
     ARGC:  the number of arguments, as passed to `main'

     ARGV:  an array of arguments, as passed to `main'

     KEYWORD:  the keyword to match

     Parses all command-line arguments, searching for one precise
     "-key=value" pair, and returns the value.

     *Return value:*  a pointer to the value. May be NULL. Must be
     freed.

 -- Function: char * lw6sys_arg_get_value_with_env (int ARGC, const
          char * [] ARGV, const char * KEYWORD)
     ARGC:  the number of arguments, as passed to `main'

     ARGV:  an array of arguments, as passed to `main'

     KEYWORD:  the keyword to match

     Parses all command-line arguments, searching for one precise
     "-key=value" pair, and returns the value.  If a corresponding
     environment variable is available, but no command-line parameter
     was passed, the environment variable is intepreted. Such
     environment variables are uppercased, prefixed by "LW6_" and "_"
     replaces "-". The environment variable will be overriden if the
     command-line parameter is present.

     *Return value:*  a pointer to the value. May be NULL. Must be
     freed.

 -- Function: int lw6sys_arg_test_mode (int ARGC, const char * [] ARGV)
     ARGC:  argc as passed to main

     ARGV:  argv as passed to main

     Chooses between the two test modes "check" or "test". Check (value
     0) is a lighter test which should never fail even if some special
     hardware or environment is missing. Test (value 1) is a more
     complete test which does things which *can* require some special
     conditions.  Function will log and be verbose is syntax is not
     correct.

     *Return value:*  1 if complete test must be run, 0 is only check

 -- Function: lw6sys_assoc_t * lw6sys_assoc_new (lw6sys_free_func_t
          FREE_FUNC)
     FREE_FUNC:  optional callback used to free memory when stored date
     is a pointer. Can be NULL when one stores non dynamically
     allocated data, such as an integer or a static array.

     Creates an empty assoc. There's a difference between NULL and an
     empty assoc. The empty assoc would (in Scheme) be '() whereas NULL
     corresponds to undefined "is not a assoc and will generate errors
     if you ever call assoc functions on it". Such created assoc are
     not performant hash tables but slowish "strcmp me for each key"
     associative arrays, the key being a "char *" string and the value
     a "void *" pointer.

     *Return value:*  a pointer to the newly allocated associative
     array. Must be freed with `lw6sys_assoc_free'.

 -- Function: void lw6sys_assoc_free (lw6sys_assoc_t * ASSOC)
     ASSOC:  the assoc to be freed.

     The function will cascade  delete all elements, using (if not
     NULL...)  the callback passed when first creating the assoc.

     *Return value:*  void

 -- Function: int lw6sys_assoc_has_key (lw6sys_assoc_t * ASSOC, const
          char * KEY)
     ASSOC:  the assoc to test

     KEY:  the key to search

     Not a very fast function, since on a "big" assoc, strcmp will be
     called internally until the key is found.

     *Return value:*  non-zero if there's an entry with the
     corresponding key.

 -- Function: void * lw6sys_assoc_get (lw6sys_assoc_t * ASSOC, const
          char * KEY)
     ASSOC:  the assoc to query

     KEY:  the key of which we want the value

     *Return value:*  a void pointer to the data contained in the
     assoc. Note that the pointer on the actual data is returned, that
     is, if it's static data, you must not try to free it... As long as
     memory management is concerned, destroying the assoc will actually
     free the data if needed.

 -- Function: void lw6sys_assoc_set (lw6sys_assoc_t ** ASSOC, const
          char * KEY, void * VALUE)
     ASSOC:  the assoc to modify

     KEY:  the key we want to updated

     VALUE:  the new value

     Sets a value in an associative array. The key pointer need not be
     persistent, it can be freed after affectation. In fact a new
     string will be created internally. This is not true for the value,
     it's hard to find way to copy "any object".  So if you want an
     associative array of strings, key can disappear after calling this
     function, but not value. The function passed as free_func when
     creating the assoc will be used to free stuff whenever needed
     (unset or free).

     *Return value:*  void

 -- Function: void lw6sys_assoc_unset (lw6sys_assoc_t * ASSOC, const
          char * KEY)
     ASSOC:  the assoc concerned

     KEY:  the key to unset

     Clears an entry in an associative array. The callback passed when
     creating the assoc will be called if needed, to free the data
     automatically.

     *Return value:*  void

 -- Function: lw6sys_list_t * lw6sys_assoc_keys (lw6sys_assoc_t * ASSOC)
     ASSOC:  the assoc to work on

     Returns a list containing all the keys of the assoc. The list must
     be free with lw6sys_list_free by the caller.  This list copies all
     the keys of the assoc, so it is safe to use it once the assoc is
     deleted. However the keys will of course be of little interest in
     this case.  But the program won't segfault.

     *Return value:*  the list of keys.

 -- Function: void lw6sys_assoc_map (lw6sys_assoc_t * ASSOC,
          lw6sys_assoc_callback_func_t FUNC, void * FUNC_DATA)
     ASSOC:  the assoc to work on

     FUNC:  a callback to call on each entry

     FUNC_DATA:  a pointer on some data which will be passed to the
     callback

     Executes a function on all assoc items.  The func_data parameter
     allows you to pass extra values to the function, such as a file
     handler or any variable which can not be inferred from list item
     values, and you of course do not want to make global...

     *Return value:*  void

 -- Function: void lw6sys_assoc_sort_and_map (lw6sys_assoc_t * ASSOC,
          lw6sys_assoc_callback_func_t FUNC, void * FUNC_DATA)
     ASSOC:  the assoc to work on

     FUNC:  a callback to call on each entry, may be NULL

     FUNC_DATA:  a pointer on some data which will be passed to the
     callback

     Executes a function on all assoc items, like
     `lw6sys_assoc_sort_and_map' but befor doing so, sorts all entries
     in alphabetical order.

     *Return value:*  void

 -- Function: lw6sys_assoc_t * lw6sys_assoc_dup (lw6sys_assoc_t *
          ASSOC, lw6sys_dup_func_t DUP_FUNC)
     ASSOC:  the assoc to duplicate, can be NULL

     DUP_FUNC:  the function which will be called to duplicate data

     Duplicates an assoc. All keys will be copied so that if the first
     assoc is deleted, the duplicated one is fine. Additionnaly,
     dup_func will be called with all data fields. If dup_func is NULL,
     then data values will simply be copied. This is likely to be
     usefull when data is not dynamically allocated.

     *Returned value:*  a newly allocated assoc.

 -- Function: char * lw6sys_backtrace (int SKIP)
     SKIP:  number of calls to skip

     Returns the current backtrace as a comma separated list.  This can
     typically be used for debugging purposes. Not available on some
     platforms, including mingw32, it requires backtrace_symbols to be
     defined. Note that this function calls internal string functions
     so it makes usage of the sys module in many ways, therefore should
     be used only in other modules, it can't be used for debugging of
     internal memory functions for instance. To debug those, use
     backtrace_symbols_fd directly (or maybe just gdb...). The skip
     parameter allows you to skip caller's stack, 0 will display
     everything but `lw6sys_backtrace' itself.

     *Return value:*  dynamically allocated string

 -- Function: int lw6sys_default_memory_bazooka ()
     Will set up a default memory bazooka, a slow yet convenient tool
     to track down and hopefully kill memory leaks.  Named bazooka
     after a night wasted to track down an unfoundable leak...
     BAZOOOOOOKA!!!

     *Return value:*  1 if success, 0 if failed.

 -- Function: void lw6sys_clear_memory_bazooka ()
     Clears the memory bazooka.

     *Return value:*  none.

 -- Function: int lw6sys_set_memory_bazooka_size (int SIZE)
     SIZE:  number of items (calls to malloc) to keep

     Resizes, the memory bazooka. What's this? It's an inelegant yet
     efficient tool to track down memory leak. Memory bazooka will keep
     track of every call to malloc, keeping a trace of what has been
     malloced, where it has been called (from which file, which line),
     how much memory was allocated, it will even show you what's at the
     address in a 0-terminated string-friendly fashion. Of course this
     slows down the program, so in production, you might set this to 0,
     but for debugging, a million bazooka is worth the megabytes and
     CPU cycles it wastes.

     *Return value:*  1 if success, 0 if failure.

 -- Function: int lw6sys_get_memory_bazooka_size ()
     The companion of `lw6sys_set_memory_bazooka_size'. This function
     will return how many calls to malloc can be traced. A return value
     of 0 indicates that feature is disabled.

     *Return value:*  size of the bazooka array.

 -- Function: int lw6sys_set_memory_bazooka_eraser (int STATE)
     STATE:  the state of the eraser

     Sets the memory bazooka eraser state. Note that to really work, it
     requires the memory bazooka to be "big enough".

     *Return value:*  1 if activated, 0 if not. Note that the main
     reason for it not to be activated is if the memory bazooka has
     zero size.

 -- Function: int lw6sys_get_memory_bazooka_malloc_count ()
     Provided you have always called the `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC' to allocate memory, this function will tell you
     how many times `malloc' has been called.

     *Return value:*  the number of calls to `lw6sys_malloc' or
     `lw6sys_calloc' since program was started.

 -- Function: int lw6sys_get_memory_bazooka_free_count ()
     Provided you have always called the `LW6SYS_FREE' macro to free
     memory, this function will tell you how many times `free' has been
     called.

     *Return value:*  the number of calls to `lw6sys_free' since
     program was started.

 -- Function: int lw6sys_get_memory_bazooka_malloc_current_count ()
     Provided you have always called the `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC' to allocate memory, this function will tell you
     the current number of pointer returned by `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC', currently alive on the heap.

     *Return value:*  the number of calls to `lw6sys_malloc' or
     `lw6sys_calloc' since program was started.

 -- Function: int lw6sys_get_memory_bazooka_malloc_max_count ()
     Provided you have always called the `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC' to allocate memory, this function will tell you
     the maximum of pointers returned by `malloc' that were present at
     the same time on the heap.

     *Return value:*  the number of calls to `lw6sys_malloc' or
     `lw6sys_calloc' since program was started.

 -- Function: int lw6sys_get_memory_bazooka_malloc_megabytes ()
     Provided you have always called the `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC' to allocate memory, this function will tell you
     how many bytes `malloc' has reserved.

     *Return value:*  the number of calls to `lw6sys_malloc' or
     `lw6sys_calloc' since program was started.

 -- Function: int lw6sys_get_memory_bazooka_free_megabytes ()
     Provided you have always called the `LW6SYS_FREE' macro to free
     memory, this function will tell you how many bytes `free' has
     freed.

     *Return value:*  the number of calls to `lw6sys_free' since
     program was started.

 -- Function: int lw6sys_get_memory_bazooka_malloc_current_bytes ()
     Provided you have always called the `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC' to allocate memory, this function will tell you
     the current number of bytes returned by `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC', currently alive on the heap.

     *Return value:*  the number of calls to `lw6sys_malloc' or
     `lw6sys_calloc' since program was started.

 -- Function: int lw6sys_get_memory_bazooka_malloc_max_bytes ()
     Provided you have always called the `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC' to allocate memory, this function will tell you
     the maximum bytes returned by `malloc' that were present at the
     same time on the heap.

     *Return value:*  the number of calls to `lw6sys_malloc' or
     `lw6sys_calloc' since program was started.

 -- Function: int lw6sys_is_memory_bazooka_trustable ()
     Returns true if memory bazooka data are perfectly trustable, that
     is, it has never been resetted or resized.

     *Return value:*  1 if trustable, 0 if not.

 -- Function: int lw6sys_memory_bazooka_report ()
     Reports memory bazooka diagnostics on the console. Carefull, this
     one is not reentrant, call at the end of your program when all
     threads are joined.

     *Return value:*  1 if no allocated stuff left, 0 if there are
     still malloc'ed stuff

 -- Function: char * lw6sys_build_get_package_tarname ()
     Returns the name of the package. This is the `PACKAGE_TARNAME'
     constant defined by the GNU Autoconf ./configure script. While
     it's always possible to use the defined constant directly, using
     this function will return the value defined when compiling the
     binary, not the one you're using when compiling another program
     relying on Liquid War as a library.

     *Return value:*  a non-NULL string "liquidwar6", must not be freed.

 -- Function: char * lw6sys_build_get_package_name ()
     Returns the name of the package, in a user friendly form, which can
     include spaces, for instance. This is the `PACKAGE_NAME' constant
     defined by the GNU Autoconf ./configure script. While it's always
     possible to use the defined constant directly, using this function
     will return the value defined when compiling the binary, not the
     one you're using when compiling another program relying on Liquid
     War as a library.

     *Return value:*  a non-NULL string "Liquid War 6", must not be
     freed.

 -- Function: char * lw6sys_build_get_package_string ()
     Returns the description of the package. This is the
     `PACKAGE_STRING' constant defined by the GNU Autoconf ./configure
     script. It's the concatenation of `PACKAGE_NAME' and `VERSION'.
     While it's always possible to use the defined constant directly,
     using this function will return the value defined when compiling
     the binary, not the one you're using when compiling another
     program relying on Liquid War as a library.

     *Return value:*  a non-NULL string "Liquid War 6 <version>", must
     not be freed.

 -- Function: char * lw6sys_build_get_version ()
     Returns the version of the program. This is the `VERSION' constant
     defined by the GNU Autoconf ./configure script. Same as
     `PACKAGE_VERSION'.  Note that while using a function to get
     `PACKAGE_TARNAME' might seem useless, having both ways to get the
     version, that is, a function and a constant, is very usefull.
     Think, for instance, that a dynamically loaded shared library
     might need to check its own version against the version of the
     core program.

     *Return value:*  a non-NULL string, which must not be freed.

 -- Function: char * lw6sys_build_get_codename ()
     Returns the the program codename. This is the little name of the
     version. It's been decided that all LW6 releases would take the
     name of a famous general, warrior, whatever. For instance, it could
     be "Napoleon".

     *Return value:*  a non-NULL string, traditionnally the name of a
     famous general, someone which has been involved in war. Must not
     be freed (I mean, the string, not the general).

 -- Function: char * lw6sys_build_get_stamp ()
     Returns the program stamp. This is like a serial number. It's is
     not the same as the version. The version is meant to be set to
     something readable. This is just a cryptic thing, incremented at
     each ./configure or each developper's "I feel like it needs to be
     incremented". The idea is just to keep (one more...) track of
     which source code is build.  Ideally, this would be plugged to the
     source revision control system but this has some drawbacks,
     including that it would require it to modify files before
     commiting them, which is not safe, and almost impossible if you
     sign archives. One more point: this is a string. It's true the
     return value is actually a string containing the representation of
     an integer, but because all other build parameters are strings, and
     because we don't know what the future reserves, it's a string.

     *Return value:*  a non-NULL string like "42", which must not be
     freed.

 -- Function: char * lw6sys_build_get_md5sum ()
     Returns an md5 checkum which is caculated from C (.c and .h) source
     files. This is complementary with the build stamp. By default the
     stamp will be enough to check what has been compiled, but one can
     always imagine a case where Bob compiles something a little
     different than Alice, with the same stamp, incremented by 1 from a
     common source tree. They apply their own patches, for instance.
     This md5sum double-checks that two binaries have been built from
     the same sources. Note that this is not the md5 checksum of the
     generated binary. Nor does it include any information about scheme
     scripts and data.

     *Return value:*  a non-NULL string, which must not be freed.

 -- Function: char * lw6sys_build_get_copyright ()
     Returns a (very) short copyright information about the program.

     *Return value:*  a non-NULL string, single line whithout '\n' at
     the end.  Must not be freed.

 -- Function: char * lw6sys_build_get_license ()
     Returns the license for the program (GNU GPL v3 or later).

     *Return value:*  a non-NULL string, single line whithout '\n' at
     the end.  Must not be freed.

 -- Function: char * lw6sys_build_get_home_url ()
     Returns the URL of the game, its homepage.

     *Return value:*  a non-NULL string, single line whithout '\n' at
     the end.  Must not be freed.

 -- Function: char * lw6sys_build_get_bugs_url ()
     Returns the URL for bugs, the bug reports page.

     *Return value:*  a non-NULL string, single line whithout '\n' at
     the end.  Must not be freed.

 -- Function: char * lw6sys_build_get_configure_args ()
     Returns the arguments passed to the GNU Autoconf ./configure
     script when buildling the game. Very usefull to know how the
     binary was generated, that is, what kind of optimizations are
     peculiar settings it uses.

     *Return value:*  a non-NULL string, which, passed to ./configure
     again, would hopefully generate the same binary. Must not be freed.

 -- Function: char * lw6sys_build_get_gcc_version ()
     Returns __VERSION__ GCC preprocessor value, that is, the human
     readable version of the compiler.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: char * lw6sys_build_get_cflags ()
     Returns the arguments which would allow another program to use
     liquidwar6 as a library. Typically, pass this to gcc when
     compiling your sources. Basically contains "-I" switches which
     tell where the headers are.

     *Return value:*  a non-NULL string, which must not be freed.

 -- Function: char * lw6sys_build_get_ldflags ()
     Returns the arguments which would allow another program to link
     against liquidwar6. Pass this to gcc or libtool when compiling
     your program. Basically contains a "-L" option which says where
     the library is. Note that this will only allow you to link against
     the main libliquidwar6 library, but not the dynamically loaded
     modules.

     *Return value:*  a non-NULL string, which must not be freed.

 -- Function: char * lw6sys_build_get_hostname ()
     Returns the value return by the standard shell `hostname' command
     on the machine where the game has been built. Usefull to track
     binaries and know where do they come from.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: char * lw6sys_build_get_date ()
     Returns the compilation date. While this information can easily be
     obtained with the C `__DATE__' macro, having this function is
     convenient for it returns a value which is the same for the whole
     program, and does not possibly change in every file.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: char * lw6sys_build_get_time ()
     Returns the compilation date. While this information can easily be
     obtained with the C `__TIME__' macro, having this function is
     convenient for it returns a value which is the same for the whole
     program, and does not possibly change in every file.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: char * lw6sys_build_get_host_cpu ()
     Returns the CPU this program is designed for. Convenient on i386
     compatible CPUs to know which flavor (i386, i586...) the binary is
     made for.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: char * lw6sys_build_get_endianness ()
     Returns the endianness of the computer.

     *Return value:*  'little' (x86-like) or 'big' (ppc-like), as a
     string.  Must not be freed.

 -- Function: int lw6sys_build_get_pointer_size ()
     Returns the system pointer size, in bytes.

     *Return value:*  4 for 32-bit, 8 for 64-bit.

 -- Function: int lw6sys_build_is_x86 ()
     Tells wether CPU belongs to x86 family or not.

     *Return value:*  1 if x86, 0 if not

 -- Function: char * lw6sys_build_get_host_os ()
     Returns the OS this program is designed for. Usefull for bug
     reports.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: int lw6sys_build_is_gnu ()
     Tells wether the program was compiled for a GNU system, or not.

     *Return value:*  1 if compiled on windows, 0 if not

 -- Function: int lw6sys_build_is_unix ()
     Tells wether the program was compiled for a UNIX system, or not.

     *Return value:*  1 if compiled on windows, 0 if not

 -- Function: int lw6sys_build_is_ms_windows ()
     Tells wether the program was compiled for Microsoft Windows, or
     not.

     *Return value:*  1 if compiled on windows, 0 if not

 -- Function: int lw6sys_build_is_mac_os_x ()
     Tells wether the program was compiled for Mac OS X, or not.

     *Return value:*  1 if compiled on OS X, 0 if not

 -- Function: int lw6sys_build_is_gp2x ()
     Tells wether the program was compiled for GP2X, or not.

     *Return value:*  1 if compiled on OS X, 0 if not

 -- Function: char * lw6sys_build_get_top_srcdir ()
     Returns the top source directory, when the game was built. This can
     seem useless and non relevant on the end-user's machine, but...
     it's a must-have for developpers and packagers. Without this,
     binaries would never find their associated data, especially when
     building outside the source tree. Or, testing the game would be
     impossible without installing it, given the fact that most of the
     code is in scripts that are stored in /usr/local by default, this
     would be painfull. So this function is here to help finding data
     within the source tree when the game is not installed yet. Note
     that the function is rather clever, since it will automatically
     try to remove useless '../' sequences at the beginning of a
     possibly relative path.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: char * lw6sys_build_get_prefix ()
     Returns the `prefix' value as given to the GNU Autoconf
     ./configure script.  Used to deduce the path to other directories
     and files.

     *Return value:*  a non-NULL string, "/usr/local" by default.  Must
     not be freed.

 -- Function: char * lw6sys_build_get_datadir ()
     Returns the `datadir' value defined by the GNU Autoconf
     ./configure script.  This is not the value which can be overriden
     by the Liquid War 6 specific.  "-data-dir" option. `datadir' is
     usually something like "/usr/local/share" while the actual Liquid
     War 6 defined data dir is a more profound path which includes the
     name of the package, its version, and so on.

     *Return value:*  a non-NULL string, "/usr/local/share" by default.
     Must not be freed.

 -- Function: char * lw6sys_build_get_libdir ()
     Returns the `libdir' value defined by the GNU Autoconf ./configure
     script.  This is not the value which can be overriden by the
     Liquid War 6 specific.  "-mod-dir" option. `libdir' is usually
     something like "/usr/local/lib" while the actual Liquid War 6
     defined module dir is a more profound path which includes the name
     of the package, its version, and so on.

     *Return value:*  a non-NULL string, "/usr/local/lib" by default.
     Must not be freed.

 -- Function: char * lw6sys_build_get_includedir ()
     Returns the `includedir' value defined by the GNU Autoconf
     ./configure script.  As for other options, it's interesting to
     have this value, this enables the program to inform people who
     want to hack the game of the place headers are supposed to be
     installed.

     *Return value:*  a non-NULL string, "/usr/local/include" by
     default.  Must not be freed.

 -- Function: char * lw6sys_build_get_localedir ()
     Returns the `localedir' value defined by the GNU Autoconf
     ./configure script.  Used as an argument for gettext / libintl
     functions.

     *Return value:*  a non-NULL string, "/usr/local/share/locale" by
     default.  Must not be freed.

 -- Function: char * lw6sys_build_get_docdir ()
     Returns the `docdir' value defined by the GNU Autoconf ./configure
     script.  Used to write consistent XML file headers.

     *Return value:*  a non-NULL string,
     "/usr/local/share/doc/liquidwar6" by default.  Must not be freed.

 -- Function: char * lw6sys_build_get_enable_console ()
     Tells wether console is enabled or not.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_gtk ()
     Tells wether gtk is enabled or not.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_mod_gl ()
     Tells wether the graphical mod-gl backend was compiled.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_mod_csound ()
     Tells wether the audio mod-csound backend was compiled.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_mod_ogg ()
     Tells wether the audio mod-ogg backend was compiled.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_mod_http ()
     Tells wether the network mod-http backend was compiled.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_openmp ()
     Tells wether the game was compiled with openmp support.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_optimize ()
     Tells wether the game was compiled in optimize mode.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_allinone ()
     Tells wether the game was compiled in allinone mode.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_fullstatic ()
     Tells wether the game was compiled in fullstatic mode.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_paranoid ()
     Tells wether the game was compiled with paranoid memory management.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_gprof ()
     Tells wether the game was compiled with suitable informations for
     gprof.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_instrument ()
     Tells wether the game was compiled with the
     '-finstrument-fonctions' GCC flag.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_profiler ()
     Tells wether the game was compiled for later use with Google
     Profiler support.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_gcov ()
     Tells wether the game was compiled with suitable informations for
     gcov.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_valgrind ()
     Tells wether the game was compiled for later use with valgrind.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: int lw6sys_build_get_bin_id ()
     Returns the internal bin-id value, which does not mean anything
     but changes at each build.

     *Return value:*  an integer

 -- Function: void lw6sys_build_log_all ()
     Dumps in the log file the whole program pedigree, host, modules,
     that is, what are the values of all the build options.  Usefull
     for bug reports.

     *Return value:*  none.

 -- Function: u_int32_t lw6sys_checksum (unsigned char * DATA, int LEN)
     DATA:  the data to process

     LEN:  the length, in bytes, of the data to process

     Creates a checksum from a byte array. This could be mapped on any
     standard CRC-32 and/or MD5 algorithm, but licence issues for those
     are such a headache that for the sake of simplicity, it's wrapped
     here. In LW6 context, we do not really really fear any attack for
     these checksums are used internally to track bugs and check, for
     instance, that two game states are actually the same on two
     distant computers in a network game.  Data encryption and security
     of network links is another debate.  Additionnally, this function
     returns an integer, easier to handle in standard C than any
     malloc'ed stuff.

     *Return value:*  the checksum, as an integer.

 -- Function: u_int32_t lw6sys_checksum_str (const char * VALUE)
     VALUE:  the string to process

     Creates a checksum from a string. This is a convenience function
     to save the programmer the hassle of calling strlen before any
     checksum calculation.

     *Return value:*  the checksum, as an integer.

 -- Function: u_int32_t lw6sys_checksum_int32 (u_int32_t VALUE)
     VALUE:  the integer to process

     Creates a checksum from an integer. This is a convenience function
     to save the programmer the hassle of passing a pointer to the
     integer with the size of it each time there's a checksum to do.
     Additionnally, with this one you can pass an int8 or an int16, and
     function will work just the same indenpendantly of endianness.

     *Return value:*  the checksum, as an integer.

 -- Function: u_int32_t lw6sys_checksum_int64 (u_int64_t VALUE)
     VALUE:  the integer to process

     Creates a checksum from an integer. This is a convenience function
     to save the programmer the hassle of passing a pointer to the
     integer with the size of it each time there's a checksum to do.
     This function handles 64-bit long long integers..

     *Return value:*  the checksum, as an integer.

 -- Function: u_int32_t lw6sys_checksum_whd (lw6sys_whd_t * WHD)
     WHD:  a pointer to the wh struct to be processed

     Creates a checksum from the given structure. Convenience function
     to save the hassle of passing a pointer to and the size of the
     `lw6sys_wh_t' struct each time, knowing that there are very often
     checksums calculated on it. Also avoids endianess issues.

     *Return value:*  the checksum, as an integer.

 -- Function: u_int32_t lw6sys_checksum_xyz (lw6sys_xyz_t * XYZ)
     XYZ:  a pointer to the xy struct to be processed

     Creates a checksum from the given structure. Convenience function
     to save the hassle of passing a pointer to and the size of the
     `lw6sys_xy_t' struct each time, knowing that there are very often
     checksums calculated on it. Also avoids endianess issues.

     *Return value:*  the checksum, as an integer.

 -- Function: void lw6sys_checksum_update (u_int32_t * CHECKSUM,
          unsigned char * DATA, int LEN)
     CHECKSUM:  a pointer to the previous checksum

     DATA:  the data to process

     LEN:  the length, in bytes, of the data to process

     Creates a checksum from the given data. The difference with
     `lw6sys_checksum' is that this one updates an existing checksum,
     thus enabling the programmer to call it sequentially and get a
     global checksum on different sources.

     *Return value:*  none.

 -- Function: void lw6sys_checksum_update_str (u_int32_t * CHECKSUM,
          const char * VALUE)
     CHECKSUM:  a pointer to the previous checksum

     VALUE:  the string to process

     Creates a checksum from the given string. The difference with
     `lw6sys_checksum_str' is that this one updates an existing
     checksum, thus enabling the programmer to call it sequentially and
     get a global checksum on different sources.

     *Return value:*  none.

 -- Function: void lw6sys_checksum_update_int32 (u_int32_t * CHECKSUM,
          int32_t VALUE)
     CHECKSUM:  a pointer to the previous checksum

     VALUE:  the integer to process

     Creates a checksum from the given integer. The difference with
     `lw6sys_checksum_int32' is that this one updates an existing
     checksum, thus enabling the programmer to call it sequentially and
     get a global checksum on different sources.

     *Return value:*  none.

 -- Function: void lw6sys_checksum_update_int64 (u_int32_t * CHECKSUM,
          int64_t VALUE)
     CHECKSUM:  a pointer to the previous checksum

     VALUE:  the integer to process

     Creates a checksum from the given integer. The difference with
     `lw6sys_checksum_int64' is that this one updates an existing
     checksum, thus enabling the programmer to call it sequentially and
     get a global checksum on different sources.

     *Return value:*  none.

 -- Function: void lw6sys_checksum_update_whd (u_int32_t * CHECKSUM,
          lw6sys_whd_t * WHD)
     CHECKSUM:  a pointer to the previous checksum

     WHD:  a pointer to the wh struct to be processed

     Creates a checksum from the given structure. The difference with
     `lw6sys_checksum_whd' is that this one updates an existing
     checksum, thus enabling the programmer to call it sequentially and
     get a global checksum on different sources.

     *Return value:*  none.

 -- Function: void lw6sys_checksum_update_xyz (u_int32_t * CHECKSUM,
          lw6sys_xyz_t * XYZ)
     CHECKSUM:  a pointer to the previous checksum

     XYZ:  a pointer to the xy struct to be processed

     Creates a checksum from the given structure. The difference with
     `lw6sys_checksum_xyz' is that this one updates an existing
     checksum, thus enabling the programmer to call it sequentially and
     get a global checksum on different sources.

     *Return value:*  none.

 -- Function: u_int8_t lw6sys_color_float2char (float F)
     F:  the value to convert, from 0.0f to 1.0f

     Converts a floating point value between 0.0f and 1.0f to its 8-bit
     equivalent between 0 and 255. Usefull in color conversion.

     *Return value:*  an integer between 0 and 255.

 -- Function: float lw6sys_color_char2float (u_int8_t I)
     I:  the value to convert, from 0 to 255

     Converts an 8-bit value between 0 and 255 to its floating-point
     equivalent between 0.0f and 1.0f. Usefull in color conversion.

     *Return value:*  a float between 0.0f and 1.0f.

 -- Function: lw6sys_color_8_t lw6sys_color_f_to_8 (const
          lw6sys_color_f_t * COLOR_F)
     COLOR_F:  the color to convert

     Converts a color from floating point format to the integer "0 to
     255" common format.  All fields (RGBA) are converted.

     *Return value:*  the color in 8-bit format.

 -- Function: void lw6sys_color_8_to_f (lw6sys_color_f_t * COLOR_F,
          lw6sys_color_8_t COLOR_8)
     COLOR_F:  the converted color (pointer must point to writable
     memory)

     COLOR_8:  the color to convert

     Converts a color from the integer "0 to 255" common format to
     floating point format.  All fields (RGBA) are converted.

     *Return value:*  none.

 -- Function: u_int32_t lw6sys_color_f_to_i (const lw6sys_color_f_t *
          COLOR_F)
     COLOR_F:  the color to convert

     Converts a color from floating point format to a single integer,
     where all fields (RGBA) are serialized. This serialization is
     endianess independant. Could be used directly by low-level
     libraries such as SDL.

     *Return value:*  the color serialized in an integer.

 -- Function: u_int32_t lw6sys_color_8_to_i (lw6sys_color_8_t COLOR_8)
     COLOR_8:  the color to convert

     Converts a color from common "0 to 255" structured format to a
     single integer, where all fields (RGBA) are serialized. This
     serialization is endianess independant. Could be used directly by
     low-level libraries such as SDL.

     *Return value:*  the color serialized in an integer.

 -- Function: void lw6sys_color_i_to_f (lw6sys_color_f_t * COLOR_F,
          u_int32_t COLOR_I)
     COLOR_F:  the converted color (point must point to writable memory)

     COLOR_I:  the color to convert

     Converts a color from a serialized integer format to a floating
     point structure.

     *Return value:*  none.

 -- Function: lw6sys_color_8_t lw6sys_color_i_to_8 (u_int32_t COLOR_I)
     COLOR_I:  the color to convert

     Converts a color from a serialized integer format to a "0 to 255"
     based structure.

     *Return value:*  the converted color (structure).

 -- Function: lw6sys_color_8_t lw6sys_color_a_to_8 (const char * ASCII)
     ASCII:  the color to convert

     Converts a color from a human readable string to a "0 to 255"
     based structure. The string must be of the form "#RRGGBBAA" or
     "#RGB", in a general manner any HTML-valid value should work.

     *Return value:*  the converted color (structure).

 -- Function: void lw6sys_color_a_to_f (lw6sys_color_f_t * COLOR_F,
          const char * ASCII)
     COLOR_F:  the converted color (pointer must point to writable
     memory)

     ASCII:  the color to convert

     Converts a color from a human readable string to a float based
     structure. The string must be of the form "#RRGGBBAA" or "#RGB",
     in a general manner any HTML-valid value should work.

     *Return value:*  none.

 -- Function: char * lw6sys_color_8_to_a (lw6sys_color_8_t COLOR_8)
     COLOR_8:  the color to convert

     Converts a color from a "0 - 255" integer based structure to its
     readable form "#RRGGBBAA". If alpha is 255 (0xFF), that is, if
     it's opaque, then the "AA" part is ommitted.

     *Return value:*  a newly allocated string.

 -- Function: void lw6sys_color_rgb_to_hsv (lw6sys_color_hsv_t *
          COLOR_HSV, lw6sys_color_8_t COLOR_8)
     COLOR_HSV:  the target color, in HSV format

     COLOR_8:  the source color, in RGB 256 format

     Converts from HSV to RGB. Usefull for color manipulation, since
     most colors are stored in RGB but HSV is convenient for
     transformation. Alpha layer is kept as is.

     *Return value:*  none.

 -- Function: lw6sys_color_8_t lw6sys_color_hsv_to_rgb (const
          lw6sys_color_hsv_t * COLOR_HSV)
     COLOR_HSV:  the source color, in HSV format

     Converts from RGB to HSV. Usefull to make colors transformed in HSV
     format usable again by all display routines, which consume RGB.
     Alpha layer is kept as is.

     *Return value:*  the RGB color.

 -- Function: void lw6sys_color_hsv_invert (lw6sys_color_hsv_t *
          COLOR_HSV, int INVERT_H, int INVERT_S, int INVERT_V)
     COLOR_HSV:  the source color, in HSV format

     INVERT_H:  wether to invert the hue

     INVERT_S:  wether to invert the saturation

     INVERT_V:  wether to invert the value

     Inverts an HSV color, calling it with 1,0,0 the color will become
     a color with opposite hue but same saturation and same value.

     *Return value:*  none.

 -- Function: int lw6sys_color_is_grey (lw6sys_color_8_t COLOR)
     COLOR:  the color to test

     Tells wether a color is pure grey or not. This is interesting for
     such colors have no hue and sometimes need special handling.

     *Return value:*  1 if grey, 0 if colored

 -- Function: lw6sys_color_8_t lw6sys_color_average (int SIZE, const
          lw6sys_color_8_t * COLORS)
     SIZE:  number of the color array (number of items)

     COLORS:  the colors to compute

     Tries to find out the "average" color from an array of colors.
     The algorithm is far from perfect, but should output a color which
     reflects the colors passed in.

     *Return value:*  the (inexact) average color.

 -- Function: lw6sys_color_8_t lw6sys_color_ponderate (lw6sys_color_8_t
          COLOR1, lw6sys_color_8_t COLOR2, float COEFF)
     COLOR1:  first color

     COLOR2:  second color

     COEFF:  the ponderation coefficient

     Tries to find a color between the two colors passed as an argument.
     The coefficient can be used, to set the relative weight of each
     color.  Using 0 will return color1, 1 will return color2 and 0.5
     will make an average between the two colors. Any value between 0
     and 1 can be used.

     *Return value:*  the (inexact) ponderated color.

 -- Function: float lw6sys_color_distance (lw6sys_color_8_t COLOR1,
          lw6sys_color_8_t COLOR2)
     COLOR1:  first color

     COLOR2:  second color

     Calculates the distance between two colors. The unit is arbitrary,
     a big value means "colors are different", 0 means they are the
     same. A distance of 1 corresponds to colors which have barely
     anything in common, but the result can still be greater than 1.
     Alpha layer is not taken in account.

     *Return value:*  the distance.

 -- Function: int lw6sys_color_is_same (lw6sys_color_8_t COLOR1,
          lw6sys_color_8_t COLOR2)
     COLOR1:  the first color to compare

     COLOR2:  the second color to compare

     Compares two colors.

     *Return value:*  1 if they are the same, 0 if not.

 -- Function: void lw6sys_color_8_solid (lw6sys_color_8_t * COLOR)
     color: the color to modify

     Make a color "solid" that is make it not transparent at all.

     *Return value:*  none.

 -- Function: void lw6sys_color_f_solid (lw6sys_color_f_t * COLOR)
     color: the color to modify

     Make a color "solid" that is make it not transparent at all.

     *Return value:*  none.

 -- Function: int lw6sys_atoi (const char * STR)
     STR:  string to convert

     Just a plain wrapper on `atoi', it's here for API consistency.
     Will check if str is NULL (and in this case return 0).

     *Return value:*  an integer.

 -- Function: int64_t lw6sys_atoll (const char * STR)
     STR:  string to convert

     Wrapper on `atoll', it's here for API consistency.  Will check if
     str is NULL (and in this case return 0).

     *Return value:*  a 64-bit integer.

 -- Function: int lw6sys_atob (const char * STR)
     STR:  string to convert

     Transform a string into a boolean value. Accepts "0"/"1" in input,
     but also y/n, yes/no, true/false, on/off.  Will check if str is
     NULL (and in this case return 0).

     *Return value:*  an integer, 0 or 1.

 -- Function: float lw6sys_atof (const char * STR)
     STR:  string to convert

     A wrapper on `atof', makes sure the locale used is C (default) and
     won't change the decimal separator whatsoever. Usefull for
     serialization for instance.  Will check if str is NULL (and in
     this case return 0).

     *Return value:*  a float.

 -- Function: char * lw6sys_itoa (int VALUE)
     VALUE:  the integer to convert

     Converts an integer to a string, the advantage of this function is
     it allocates memory, and does the dirty job.

     *Return value:*  a newly allocated pointer, must be freed, may be
     NULL.

 -- Function: char * lw6sys_lltoa (int64_t VALUE)
     VALUE:  the integer to convert

     Converts a 64-bit integer to a string, the advantage of this
     function is it allocates memory, and does the dirty job.

     *Return value:*  a newly allocated pointer, must be freed, may be
     NULL.

 -- Function: char * lw6sys_btoa (int VALUE)
     VALUE:  the boolean to convert

     Converts a boolean to a string, the advantage of this function is
     it allocates memory, and does the dirty job.

     *Return value:*  a newly allocated pointer, must be freed, may be
     NULL.

 -- Function: char * lw6sys_ftoa (float VALUE)
     VALUE:  the float to convert

     Converts a float to a string, the advantage of this function is it
     allocates memory, and does the dirty job.

     *Return value:*  a newly allocated pointer, must be freed, may be
     NULL.

 -- Function: char * lw6sys_daemon_pid_file (int ARGC, const char * []
          ARGV)
     ARGC:  argc as passed to `main'

     ARGV:  argv as passed to `main'

     Get the default pid file, used to lock daemon and avoid 2 daemons
     running at the same time.

     *Return value:*  newly allocated string

 -- Function: int lw6sys_daemon_start (char * PID_FILE)
     PID_FILE:  the pid file used for the daemon

     Calls `fork'() internally to put the process in the program, make
     it a daemon. Note this won't work on all platforms, for instance
     it won't work on MS-Windows but this is rarely an issue as
     MS-Windows users are rarely concerned with detaching a program
     from a tty. Note that this isn't a wrapper on `fork'(), the return
     value is different, 1 on success, 0 if failed.

     *Return value:*  a process ID on success, 0 on failure.

 -- Function: int lw6sys_daemon_stop (char * PID_FILE)
     PID_FILE:  the pid file used for the daemon

     Removes the daemon pid file. Can be called safely even if daemon
     wasn't started.

     *Return value:*  1 on success, 0 on failure

 -- Function: int lw6sys_debug_get ()
     Gets the debug mode.

 -- Function: void lw6sys_debug_set (int MODE)
     MODE:  the debug mode, 1 if set, 0 if not.

     Sets the debug mode.

 -- Function: void lw6sys_dump_clear (char * USER_DIR)
     USER_DIR:  the user directory, where user can write data.

     Clears the dump file. That is, resets it to a "0 byte" file.

     *Return value:*  none.

 -- Function: int lw6sys_dump (char * USER_DIR, char * CONTENT)
     USER_DIR:  the user directory, where user can write data.

     CONTENT:  the content to be written in the dump file.

     Writes the dump file onto the disk. The dump is used for special
     error messages which do not really fit in the standard log, and
     require a special treatment. In pratice, it's used to log fatal
     script (Guile) errors.

     *Return value:*  1 if success, 0 if failure.

 -- Function: char lw6sys_env_separator_char ()
     Gets the ENV separator, that is, for instance, the character used
     to separate paths in environment variables. Typically, this would
     be ":" on GNU and ";" on Microsft platforms.

     *Return value:*  the ascii character code.

 -- Function: char * lw6sys_env_separator_str ()
     Gets the ENV separator, that is, for instance, the character used
     to separate paths in environment variables. Typically, this would
     be ":" on GNU and ";" on Microsft platforms.

     *Return value:*  a pointer to a single 0-terminated character
     string which contains the character. Must not be freed.

 -- Function: char * lw6sys_env_concat (const char * VALUE1, const char
          * VALUE2)
     VALUE1:  the left part to be concatenated

     VALUE2:  the right part to be concatenated

     Concatenates two values and puts the ENV separator, as returned by
     `lw6sys_env_separator_char' between them.

     *Return value:*  the concatenated string, must be freed.

 -- Function: int lw6sys_env_exists_prefixed (const char * KEYWORD)
     KEYWORD:  the keyword to be searched in the environment variables.

     Searches environment variables for the given keyword. The keyword
     will be fixed so that all dashes "-" characters are replaced by
     underscores "_" characters. Characters will be changed to
     uppercase. Any non alphanumeric character will be replaced by "_".
     Finally, an "LW6_" prefix will be added. That is to say, calling
     this function with "my-param" will search for the "LW6_MY_PARAM"
     environment variable.

     *Return value:*  1 if the environment variable exists, 0 if not.

 -- Function: char * lw6sys_getenv (const char * KEY)
     KEY:  the environment variable to get.

     Searches environment variables for the given value.  This is a
     wrapper over the standard C getenv, the difference is it will
     return a dynamically allocated pointer, and on some platforms will
     query specific OS functions.

     *Return value:*  the value for the given keyword. May be NULL.
     Must be freed.

 -- Function: char * lw6sys_getenv_prefixed (const char * KEYWORD)
     KEYWORD:  the keyword to be searched in the environment variables.

     Searches environment variables for the given value. The keyword
     will be fixed so that all dashes "-" characters are replaced by
     underscores "_" characters. Characters will be changed to
     uppercase. Any non alphanumeric character will be replaced by "_".
     Finally, an "LW6_" prefix will be added. That is to say, calling
     this function with "my-param" will search for the "LW6_MY_PARAM"
     environment variable.

     *Return value:*  the value for the given keyword. May be NULL.
     Must be freed.

 -- Function: int lw6sys_setenv (const char * KEYWORD, const char *
          VALUE)
     KEYWORD:  the environment variable to set

     VALUE:  the value of the environment variable to set

     Sets the environment variable to a given value. If value is NULL,
     variable is unset. Note that unlike lw6sys_getenv_prefixed, this
     function does not transform the keyword into "LW6_..."  before
     setting the value, so it's your responsability to call
     "lw6sys_keyword_as_env" if needed.

     *Return value:*  1 if success, 0 if failed

 -- Function: int lw6sys_setenv_prefixed (const char * KEYWORD, const
          char * VALUE)
     KEYWORD:  the keyword to be searched in the environment variables.

     VALUE:  the value of the environment variable to set

     Sets the environment variable to the given value. The keyword will
     be fixed so that all dashes "-" characters are replaced by
     underscores "_" characters. Characters will be changed to
     uppercase. Any non alphanumeric character will be replaced by "_".
     Finally, an "LW6_" prefix will be added. That is to say, calling
     this function with "my-param" will set the "LW6_MY_PARAM"
     environment variable.

     *Return value:*  1 if success, 0 if failure

 -- Function: lw6sys_list_t * lw6sys_env_split (const char * VALUE)
     VALUE:  the value, a list of item separated by... the separator

     Splits the environment value into a list of strings containing
     each element. All strings are dynamically allocated, but they will
     be freed automatically when the list is freed.

     *Return value:*  a list of strings.

 -- Function: char * lw6sys_get_home ()
     Gets the home directory of the user. Used internally to calculate
     the `user'-dir value. Note that Liquid War 6, by default, never
     stores files under '$HOME', instead it put things in
     '$HOME/.liquidwar6', that is 'user-dir'. If the environment
     variable 'HOME' is not set, will return '.'.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_get_username ()
     Gets the name of the current user. Difference with the standard
     function `getlogin' is that this function will returned a
     dynamically allocated pointer, and provide a default value if it's
     undefined.  Also, if will look at the content of the 'LOGNAME'
     environment variable if needed, and will even provide a default
     value.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_get_hostname ()
     Gets the name of the current host. The name of the computer.
     Might not work perfectly, this function is just used to provide
     default values for player names and such things.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_escape_http_uri (char * SRC)
     SRC:  the string to escape

     Transforms a string so that it does not contain any non-valid URL
     chars, it will mostly convert chars over 128 into their XY form
     where XY is the hexadecimal code. Note that this function is non
     really standard compliant for it won't encode '%' but keep it the
     same. This is to allow using it several times on the same string
     and avoid double-triple encoding of '%'. In practice it's not
     recommended to have public_url for nodes with '%' in them, and the
     program will never generate such url when guessing urls.

     *Return value:*  newly allocated string.

 -- Function: char * lw6sys_escape_html_attribute (char * SRC)
     SRC:  the string to escape

     Transforms a string so that it can fit in a html field, this is
     typically for alt="" or title="" fields so it will convert " into
     `quot';.

     *Return value:*  newly allocated string.

 -- Function: char * lw6sys_escape_sql_value (char * SRC)
     SRC:  the string to escape

     Transforms a string so that it can fit as an SQL parameter, it
     will get rid URL chars, it will mostly convert chars over 128 into
     their XY form where XY is the hexadecimal code.

     *Return value:*  newly allocated string.

 -- Function: char * lw6sys_exec_find_myself (int ARGC, const char * []
          ARGV)
     ARGC:  number of args as passed to main

     ARGV:  array of args as passed to main

     Finds the path of the program currently run, this is typically to
     pass it to `lw6sys_exec_again' and run it again.

     *Return value:*  the path (newly allocated string).

 -- Function: int lw6sys_is_executed_again (int ARGC, const char * []
          ARGV)
     ARGC:  number of args as passed to main

     ARGV:  array of args as passed to main

     Tells wether the program is already executed by itself by
     `lw6sys_exec_again' function. Based on environment and command
     switches.

     *Return value:*  1 if executed again, 0 if not.

 -- Function: int lw6sys_exec_again (int ARGC, const char * [] ARGV)
     ARGC:  number of args as passed to main

     ARGV:  array of args as passed to main

     Runs the program from itsef, that is fires a new program (the same
     running) and ends up the current one. This is used to fix some
     environment variable issues. If LW6_EXECUTED_AGAIN (environment
     variable) is set, will not run the program so this is not really
     like `exec' as in the C standard library, this function will
     actually return and be successfull even if no other process was
     started. It's just designed to bootstrap/launch the process once.

     *Return value:*  1 on success, 0 on failure (always fail)

 -- Function: int lw6sys_exec_restart (int ARGC, const char * [] ARGV)
     ARGC:  number of args as passed to main

     ARGV:  array of args as passed to main

     Restart the program with exactly the same arguments it was given
     the first time.

     *Return value:*  1 on success, 0 on failure (always fail)

 -- Function: int lw6sys_clear_file (const char * FILENAME)
     FILENAME:  absolute or relative filename

     Clears a file, that is, make it a 0 byte file, empty, ready to be
     filled if needed. If this function is called successfully, program
     can reasonnably assume file will be writable during its execution.

     *Return value:*  1 if success, 0 if failure.

 -- Function: char * lw6sys_read_file_content (const char * FILENAME)
     FILENAME:  absolute or relative filename

     Reads the content of a file, and returns it as a string.  Note
     that content might or might not be ascii or binary, the function
     will however put a tailing 0 character at the end so that
     low-level standard C functions do not segfault when used with the
     returned value.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: void * lw6sys_read_file_content_bin (int * FILESIZE,
          const char * FILENAME)
     FILESIZE:  will contain the file size, in bytes

     FILENAME:  absolute or relative filename

     Reads the content of a file, and returns it as a binary buffer.
     Even if not ascii or binary, the function will however put a
     tailing 0 character at the end so that low-level standard C
     functions do not segfault when used with the returned value. This
     0 character is not included in `filesize' so if there are 4 bytes
     in the file the 5 bytes will be allocated, this is just for string
     functions not to explode if called by accident. The `filesize' can
     be NULL, in that case function is just like the
     `lw6sys_read_file_content' function.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: int lw6sys_write_file_content (const char * FILENAME,
          const char * CONTENT)
     FILENAME:  absolute or relative filename

     CONTENT:  the content to be written.

     Writes the content into the file. Content is assumed to be a
     string, function will segfault if it's not correctly 0 terminated
     as in C string convention. So this function will not allow you to
     write down arbitrary binary data, however LW6 uses mostly text
     files to store information, and opaque binary data usage is not
     recommended.

 -- Function: lw6sys_hash_t * lw6sys_hash_new (lw6sys_free_func_t
          FREE_FUNC, int SIZE)
     FREE_FUNC:  optional callback used to free memory when stored date
     is a pointer. Can be NULL when one stores non dynamically
     allocated data, such as an integer or a static array.

     SIZE:  the estimated size of the hash table. Note that this is an
     estimation only. You could theorically fit 1000000 objects in a
     3-sized hash. Problem -> this is inefficient, you'd better use an
     assoc or a bigger hash. If you store 3 elements in a 1000000-sized
     hash, you'll waste memory. It might be wise to use a prime number
     as the estimated size. 421 is prime ;)

     Creates an empty hash. There's a difference between NULL and an
     empty hash.

     *Return value:*  a pointer to the newly allocated hash table.
     Must be freed with `lw6sys_hash_free'.

 -- Function: void lw6sys_hash_free (lw6sys_hash_t * HASH)
     HASH:  the hash to be freed.

     The function will cascade  delete all elements, using (if not
     NULL...)  the callback passed when first creating the hash.

     *Return value:*  void

 -- Function: int lw6sys_hash_has_key (lw6sys_hash_t * HASH, const char
          * KEY)
     HASH:  the hash to test

     KEY:  the key to search

     Not a very fast function, since on a "big" hash, strcmp will be
     called internally until the key is found.

     *Return value:*  non-zero if there's an entry with the
     corresponding key.

 -- Function: void * lw6sys_hash_get (lw6sys_hash_t * HASH, const char
          * KEY)
     HASH:  the hash to query

     KEY:  the key of which we want the value

     *Return value:*  a void pointer to the data contained in the hash.
     Note that the pointer on the actual data is returned, that is, if
     it's static data, you must not try to free it... As long as memory
     management is concerned, destroying the hash will actually free
     the data if needed.

 -- Function: void lw6sys_hash_set (lw6sys_hash_t * HASH, const char *
          KEY, void * VALUE)
     HASH:  the hash to modify

     KEY:  the key we want to updated

     VALUE:  the new value

     Sets a value in a hash table. The key pointer need not be
     persistent, it can be freed after affectation. In fact a new
     string will be created internally. This is not true for the value,
     it's hard to find way to copy "any object".  So if you want a hash
     table of strings, key can disappear after calling this function,
     but not value. The function passed as free_func when creating the
     hash will be used to free stuff whenever needed (unset or free).

     *Return value:*  void

 -- Function: void lw6sys_hash_unset (lw6sys_hash_t * HASH, const char
          * KEY)
     HASH:  the hash concerned

     KEY:  the key to unset

     Clears an entry in a hash table. The callback passed when creating
     the hash will be called if needed, to free the data automatically.

     *Return value:*  void

 -- Function: lw6sys_list_t * lw6sys_hash_keys (lw6sys_hash_t * HASH)
     HASH:  the hash to work on

     Returns a list containing all the keys of the hash. The list must
     be free with lw6sys_list_free by the caller.  This list copies all
     the keys of the hash, so it is safe to use it once the hash is
     deleted. However the keys will of course be of little interest in
     this case.  But the program won't segfault.

     *Return value:*  the list of keys.

 -- Function: void lw6sys_hash_map (lw6sys_hash_t * HASH,
          lw6sys_assoc_callback_func_t FUNC, void * FUNC_DATA)
     HASH:  the hash to work on

     FUNC:  a callback to call on each entry

     FUNC_DATA:  a pointer on some data which will be passed to the
     callback

     Executes a function on all hash items.  The func_data parameter
     allows you to pass extra values to the function, such as a file
     handler or any variable which can not be inferred from list item
     values, and you of course do not want to make global...

     *Return value:*  void

 -- Function: void lw6sys_hash_sort_and_map (lw6sys_hash_t * HASH,
          lw6sys_assoc_callback_func_t FUNC, void * FUNC_DATA)
     HASH:  the hash to work on

     FUNC:  a callback to call on each entry, may be NULL

     FUNC_DATA:  a pointer on some data which will be passed to the
     callback

     Executes a function on all hash items, like
     `lw6sys_hash_sort_and_map' but befor doing so, sorts all entries
     in alphabetical order.

     *Return value:*  void

 -- Function: lw6sys_hash_t * lw6sys_hash_dup (lw6sys_hash_t * HASH,
          lw6sys_dup_func_t DUP_FUNC)
     HASH:  the hash to duplicate, can be NULL

     DUP_FUNC:  the function which will be called to duplicate data

     Duplicates an hash. All keys will be copied so that if the first
     hash is deleted, the duplicated one is fine. Additionnaly, dup_func
     will be called with all data fields. If dup_func is NULL, then data
     values will simply be copied. This is likely to be usefull when
     data is not dynamically allocated.

     *Returned value:*  a newly allocated hash.

 -- Function: lw6sys_hexa_serializer_t * lw6sys_hexa_serializer_new
          (const char * HEXA_STRING)
     HEXA_STRING:  an initialization string, can be NULL.

     Creates an hexa serializer object. It can be initialized or not,
     if an initialization string is provided it must of course be valid
     hexadecimal ascii code, and all serialized content will simply be
     appended to it.

     *Return value:*  a newly allocated object.

 -- Function: void lw6sys_hexa_serializer_free
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER)
     HEXA_SERIALIZER:  an hexa serializer object

     Frees an hexa serializer object.

     *Return value:*  none.

 -- Function: void lw6sys_hexa_serializer_rewind
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER)
     HEXA_SERIALIZER:  an hexa serializer object

     Rewinds the serializer pointer, that is, make it point to start.
     Usefull before calling pop functions, when one wants to be sure to
     get the first object.

     *Return value:*  none.

 -- Function: int lw6sys_hexa_serializer_eof (lw6sys_hexa_serializer_t
          * HEXA_SERIALIZER)
     HEXA_SERIALIZER:  an hexa serializer object

     Tests wether we're at EOF. Usefull when one wants to know if
     there's still some data or if all objects have been correctly
     popped.

     *Return value:*  1 if at end of file, 0 if not.

 -- Function: char * lw6sys_hexa_serializer_as_string
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER)
     HEXA_SERIALIZER:  an hexa serializer object

     Exports the current content of the serializer as a string.  String
     can then safely be sent on the network, for instance.  String is
     copied from internal value, so it's safe to use it after
     serializer has been freed or modified.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: int lw6sys_hexa_serializer_push_int64
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int64_t VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a 64 bit integer in the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_int32
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int32_t VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a 32 bit integer in the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_int16
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int16_t VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a 16 bit integer in the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_int8
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int8_t VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes an 8 bit integer in the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_float
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, float VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a floating point value in the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_str
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, const char *
          VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a string in the serializer object. Note that the string is
     not directly copied in the serializer, instead all its characters
     are converted to their ASCII equivalent, then appended.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_xyz
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, lw6sys_xyz_t
          VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a lw6sys_xyz_t structure in the serializer object.  Calling
     this avoids calling push for 2 integers separately.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_whd
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, lw6sys_whd_t
          VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a lw6sys_whd_t structure in the serializer object.  Calling
     this avoids calling push for 2 integers separately.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_color
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, lw6sys_color_8_t
          VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a color structure in the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_int64
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int64_t * VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a 64 bit integer from the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_int32
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int32_t * VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a 32 bit integer from the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_int16
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int16_t * VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a 16 bit integer from the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_int8
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int8_t * VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops an 8 bit integer from the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_float
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, float * VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a floating point value from the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_str
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, char ** VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a string from the serializer object. The returned value is a
     newly allocated pointer, which must be freed, you don't need to
     provide a buffer, just a valid pointer on a NULL pointer.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_xyz
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, lw6sys_xyz_t *
          VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a lw6sys_xyz_t structure from the serializer object.  Avoids
     calling two integer pops.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_whd
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, lw6sys_whd_t *
          VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a lw6sys_whd_t structure from the serializer object.  Avoids
     calling two integer pops.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_color
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, lw6sys_color_8_t
          * VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a color from the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_str_to_buf (void * BUF, int SIZE, const
          char * STR)
     BUF:  binary buffer to convert

     SIZE:  binary buffer length

     STR:  the source string

     Converts the stringified hexa representation of a string to its
     source binary buffer. Buffer must be exactly `strlen'(str)/2

     *Return value:*  1 on success

 -- Function: char * lw6sys_hexa_buf_to_str (void * BUF, int SIZE)
     BUF:  the buffer to stringify

     SIZE:  the length of the buffer

     Transforms a binary buffer into its hexa representation.

     *Return value:*  newly allocated string.

 -- Function: void * lw6sys_hexa_str_to_ptr (const char * STR)
     STR:  the string containing an hexa representation of pointer

     Transforms a string into a pointer, this is typically used to
     store pointers in temporary agnostic storage such as a database.
     Beware not to use that to exchange data with other computers
     and/or use it for persistent data. This is a high-risk function as
     it lets you do real dirty stuff but it really does save time
     compared to using a key returned by the database engine and then
     search this key in a user-space hash table. Direct pointer access
     is definitely faster.

     *Return value:*  the pointer, or NULL is str is invalid.

 -- Function: char * lw6sys_hexa_ptr_to_str (void * PTR)
     PTR:  pointer to convert into string representation

     Transforms a pointer into a string, this is typically used to
     store pointers in temporary agnostic storage such as a database.
     Beware not to use that to exchange data with other computers
     and/or use it for persistent data. This is a high-risk function as
     it lets you do real dirty stuff but it really does save time
     compared to using a key returned by the database engine and then
     search this key in a user-space hash table. Direct pointer access
     is definitely faster.

     *Return value:*  the string, can be NULL on errror, must be freed.

 -- Function: void lw6sys_history_init ()
     Initializes the history system. Not initializing won't cause any
     segfault, but data will be inconsistent.

     *Return value:*  none.

 -- Function: void lw6sys_history_register (char * MSG)
     MSG:  the message to register.

     Registers a message in the history log, that is, adds it.

     *Return value:*  none.

 -- Function: char_ptr_t * lw6sys_history_get (int64_t TIMEOUT)
     TIMEOUT:  the message age limit.

     Get all the messages that are younger than timeout (in seconds).

     *Return value:*  a pointer on string pointers. May be NULL. Last
     pointer is NULL too, that's how you know the array is over.

 -- Function: void lw6sys_history_free (char ** HISTORY)
     HISTORY:  the data to free

     Frees a pointer returned by `lw6sys_history_get'.

     *Return value:*  none.

 -- Function: char * lw6sys_locale_to_utf8 (const char * STRING)
     STRING:  the string to convert

     Used to force strings into UTF-8 mode, this is basically to match
     the TTF font settings used when displaying stuff on OpenGL.
     Indeed, in this case, the standard _ gettext function won't work,
     we need to force UTF-8 mode. If the locale is UTF-8, then function
     does nothing, but at least it's transparent usage won't hurt.

     *Returned value:*  a newly allocated string, always in UTF-8 no
     matter what the locale is.

 -- Function: u_int16_t lw6sys_generate_id_16 ()
     Long 16-bit ID generator, calls the random function internally.
     As usual, those are not perfect random numbers, however the
     function implementation emphasizes more on 'real randomness'
     rather than relying on performance. Generating twice the same
     number should be fairly rare.

 -- Function: u_int32_t lw6sys_generate_id_32 ()
     Long 32-bit ID generator, calls the random function internally.
     As usual, those are not perfect random numbers, however the
     function implementation emphasizes more on 'real randomness'
     rather than relying on performance. Generating twice the same
     number should be fairly rare.

 -- Function: u_int64_t lw6sys_generate_id_64 ()
     Long 64-bit ID generator, calls the random function internally.
     As usual, those are not perfect random numbers, however the
     function implementation emphasizes more on 'real randomness'
     rather than relying on performance. Generating twice the same
     number should be fairly rare.

 -- Function: int lw6sys_check_id_16 (u_int16_t ID_16)
     ID_16:  the id to check

     Checks wether the given id is a valid 16-bit id.

     *Return value:*  1 if OK, 0 if not a valid id.

 -- Function: int lw6sys_check_id_32 (u_int32_t ID_32)
     ID_32:  the id to check

     Checks wether the given id is a valid 32-bit id.

     *Return value:*  1 if OK, 0 if not a valid id.

 -- Function: int lw6sys_check_id_64 (u_int64_t ID_64)
     ID_64:  the id to check

     Checks wether the given id is a valid 64-bit id.

     *Return value:*  1 if OK, 0 if not a valid id.

 -- Function: int lw6sys_check_id (u_int64_t ID)
     ID:  the id to check

     Checks wether the given id is a valid id (16, 32 or 64-bit).

     *Return value:*  1 if OK, 0 if not a valid id.

 -- Function: char * lw6sys_id_ltoa (u_int64_t ID)
     id: the id to convert

     Transform an id into its string representation. Error checking is
     done, if the id is invalid, returned value is NULL.  All ids (16,
     32 and 64-bit) are handled.

     *Return value:*  a newly allocated string, might be NULL.

 -- Function: u_int64_t lw6sys_id_atol (char * ID)
     id: the id to convert

     Transform an id into a long integer. Error checking is done, if
     the id is invalid, returned value is 0.  All ids (16, 32 and
     64-bit) are handled.

     *Return value:*  the id as a long integer, 0 if incorrect source
     id.

 -- Function: char * lw6sys_keyword_as_key (const char * KEYWORD)
     KEYWORD:  the keyword to transform

     Transforms a keyword into a "key", that is, removes all heading
     dashes, switches to lowercase, and other stuff. This is used
     internally to match options and config file parameters, for
     instance.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_keyword_as_arg (const char * KEYWORD)
     KEYWORD:  the keyword to transform

     Transforms a keyword into a command-line parameter to be matched.
     Does the same as `lw6sys_keyword_as_key', and adds a "-" prefix.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_keyword_as_env (const char * KEYWORD)
     KEYWORD:  the keyword to transform

     Transforms a keyword into the corresponding environment variable
     name.  It will uppercase the name, replace "-" by "_", and add a
     "LW6_" prefix. "my-param" will become "LW6_MY_PARAM".

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_keyword_as_xml (const char * KEYWORD)
     KEYWORD:  the keyword to transform

     Transforms a keyword into the corresponding config file entry.  In
     practice, just the same as `lw6sys_keyword_as_key'.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: lw6sys_list_t * lw6sys_list_new (lw6sys_free_func_t
          FREE_FUNC)
     FREE_FUNC:  a callback which will be called on data when freeing
     the list

     Creates an empty list. There's a difference between NULL and an
     empty list. The empty list would (in Scheme) be '() whereas NULL
     corresponds to undefined "is not a list and will generate errors
     if you ever call list functions on it".

     *Return value:*  a pointer to the created object, may be NULL.

 -- Function: void lw6sys_list_free (lw6sys_list_t * LIST)
     LIST:  the list to delete.

     Delete a list, this will cascade delete all the following items in
     the list.

     *Return value:*  none.

 -- Function: lw6sys_list_t * lw6sys_list_next (lw6sys_list_t * LIST)
     LIST:  the current position in the list

     It's safer to call this rather than dig right into the internals
     of the list.

     *Return value:*  a new position in the list, may be NULL.

 -- Function: int lw6sys_list_is_empty (lw6sys_list_t * LIST)
     LIST:  the list we want informations about

     Checks wether the list is empty or not. Note that being empty and
     being NULL is not the same. An empty list is a valid pointer on a
     list where there's no item, a NULL pointer is not a list at all.
     Do *NOT* call this function on NULL.

     *Return value:*  1 if empty, 0 if there is at list one item.

 -- Function: int lw6sys_list_length (lw6sys_list_t * LIST)
     LIST:  the list we want informations about

     Calculates the length of the list. This is a performance killer
     for lists are inadapted to this. But it can still be usefull.

     *Return value:*  the number of elements, 0 is none (empty list).

 -- Function: void lw6sys_list_map (lw6sys_list_t * LIST,
          lw6sys_list_callback_func_t FUNC, void * FUNC_DATA)
     LIST:  the list where elements will be taken

     FUNC:  the function which will be executed

     FUNC_DATA:  additionnal data to be passed to `func'

     Executes a function on all list items.  The `func_data' parameter
     allows you to pass extra values to the function, such as a file
     handler or any variable which can not be inferred from list item
     values, and you of course do not want to make global... Not as
     convenient as a real "for each" construct as can be found in any
     modern langage, but does the job. No return value, if you really
     want one, pass a structure in `func_data' and modify something in
     it on success, failure, whatever.

     *Return value:*  none.

 -- Function: void lw6sys_list_filter (lw6sys_list_t ** LIST,
          lw6sys_list_filter_func_t FUNC, void * FUNC_DATA)
     LIST:  the list where elements will be taken

     FUNC:  the function which will be executed

     FUNC_DATA:  additionnal data to be passed to `func'

     Executes a function on all list items and keeps only those for
     which the function returned non zero (true).  The `func_data'
     parameter allows you to pass extra values to the function, such as
     a file handler or any variable which can not be inferred from list
     item values, and you of course do not want to make global...

     *Return value:*  none.

 -- Function: void lw6sys_list_push_front (lw6sys_list_t ** LIST, void
          * DATA)
     LIST:  a pointer to the list (pointer on pointer, read/write value)

     DATA:  the data to be pushed

     Pushes data on the list. The `free_func' function is copied from
     the previous element. The pointer on the list is changed "in
     place" (in/out). Note that if there's a `malloc' problem it might
     end-up being NULL... This should be rare but it *can* happen. You
     cannot push something else than a pointer, pushing an int is a
     very bad idea. Push a pointer on the integer, and ensure it's
     always there, or `malloc' it and pass `lw6sys_free_callback' when
     creating the list.  If you think you can cast an integer into a
     pointer, think 64-bit machines...

     *Return value:*  none.

 -- Function: void * lw6sys_list_pop_front (lw6sys_list_t ** LIST)
     LIST:  a pointer to the list (pointer on pointer, read/write value)

     Pops data from the list, the returned value is what was passed to
     list_push. The pointer on the list is changed "in place" (in/out).
     When data is popped, that needs some freeing (i.e. free_func was
     not NULL when creating the list) then it's the responsibility of
     the caller to free it when popping it. One popped it's not freed,
     but it's out of the list scope. Of course the lw6sys_list_t is
     freed, but not the data.  If you happen to store non-NULL data in
     your list, you can call this function without bothering calling
     `lw6sys_list_is_empty' and assume that when you get NULL, there's
     no data left.  At this stage, the list won't exist anymore BTW,
     you won't even need to free it. The idea is: popping a list which
     has no elements left (empty list) destroys the list and returns
     NULL.

     *Return value:*  a pointer on the popped data, whatever you pushed.

 -- Function: void lw6sys_list_push_back (lw6sys_list_t ** LIST, void *
          DATA)
     LIST:  a pointer to the list (pointer on pointer, read/write value)

     DATA:  the data to be pushed

     Pushes data on the list. The `free_func' function is copied from
     the previous element. The pointer on the list is changed "in
     place" (in/out). Note that if there's a `malloc' problem it might
     end-up being NULL... This should be rare but it *can* happen. You
     cannot push something else than a pointer, pushing an int is a
     very bad idea. Push a pointer on the integer, and ensure it's
     always there, or `malloc' it and pass `lw6sys_free_callback' when
     creating the list.  If you think you can cast an integer into a
     pointer, think 64-bit machines...

     *Return value:*  none.

 -- Function: void * lw6sys_list_pop_back (lw6sys_list_t ** LIST)
     LIST:  a pointer to the list (pointer on pointer, read/write value)

     Pops data from the list, the returned value is what was passed to
     list_push. The pointer on the list is changed "in place" (in/out).
     When data is popped, that needs some freeing (i.e. free_func was
     not NULL when creating the list) then it's the responsibility of
     the caller to free it when popping it. One popped it's not freed,
     but it's out of the list scope. Of course the lw6sys_list_t is
     freed, but not the data.  If you happen to store non-NULL data in
     your list, you can call this function without bothering calling
     `lw6sys_list_is_empty' and assume that when you get NULL, there's
     no data left.  At this stage, the list won't exist anymore BTW,
     you won't even need to free it. The idea is: popping a list which
     has no elements left (empty list) destroys the list and returns
     NULL.

     *Return value:*  a pointer on the popped data, whatever you pushed.

 -- Function: lw6sys_list_t * lw6sys_list_dup (lw6sys_list_t * LIST,
          lw6sys_dup_func_t DUP_FUNC)
     LIST:  the list to duplicate, can be NULL

     DUP_FUNC:  the function which will be called to duplicate data

     Duplicates a list. All data will be copied so that if the first
     list is deleted, the duplicated one is fine. Addtionnally, dup_func
     will be called to filter all data, and possibly allocated new
     pointers if needed, for instance. If dup_func is NULL, then data
     values will simply be copied. This is likely to be usefull when
     data is not dynamically allocated.

     *Returned value:*  a newly allocated list.

 -- Function: void lw6sys_log_set_file (char * FILENAME)
     FILENAME:  the name of the log file.

     Sets up the log file. Until you call this function, messages all
     logged to the default log file, as returned by the
     `lw6sys_get_default_log_file' function.

     *Return value:*  void

 -- Function: void lw6sys_log_clear (char * FILENAME)
     FILENAME:  the name of the log file.

     Clears the log file, this function would typically be called at
     the beginning of the program. If filename is NULL, then the
     default log file is cleared.

     *Return value:*  void

 -- Function: void lw6sys_log (int LEVEL_ID, char * FILE, int LINE,
          char * FMT, ...)
     LEVEL_ID:  the log level to use. Possible values are, by order,
     LW6SYS_LOG_ERROR_ID (0), LW6SYS_LOG_WARNING_ID (1),
     LW6SYS_LOG_NOTICE_ID (2), LW6SYS_LOG_INFO_ID (3),
     LW6SYS_LOG_DEBUG_ID (4) and LW6SYS_LOG_TMP_ID (5).

     FILE:  the name of the source file where the function is called,
     one can use __FILE__

     LINE:  the line in the source file where the function is called,
     one can use __LINE__

     FMT:  a printf-like format string ...: printf-like arguments,
     corresponding to `fmt'.

     This function is usually called with the first three arguments
     packed into a single macro. For instance the `LW6SYS_LOG_WARNING'
     macro expands and fills the first 3 args, so there's no need to
     type __FILE__ and __LINE__ again and again. Note that this
     function will reset errno. The idea is to call it whenever there's
     something to do with errno (if you deal with errno, it's a good
     habit to log it) then errno is cleared so that it won't interfere
     with next log messages.

 -- Function: void lw6sys_log_critical (char * FMT, ...)
     FMT:  a printf-like format string ...: printf-like arguments,
     corresponding to `fmt'.

     This function is a special log function which will dump
     informations on the console only, without opening any log file
     whatsoever. The idea is that it's a "never fail" function.
     Additionnally, it will never return but quit the program. This can
     be used as an ultimate emergency function, use it when the program
     won't run for sure, and displaying an immediate error message is
     the only issue.

 -- Function: int lw6sys_log_get_level ()

 -- Function: void lw6sys_log_set_level (int LEVEL)
     LEVEL:  the log level, integer between 0 & 4. 4 is very verbose
     (debug), 0 displays errors only.


 -- Function: void lw6sys_math_poly_wy1y2s1 (float * Y, float * S,
          float X, float W, float Y1, float Y2, float S1)
     Y:  the return value (position, may be NULL)

     S:  the return value (speed, may be NULL)

     X:  the x parameter, the value to iterate on

     W:  the width, that is, the x value after which output is constant

     Y1:  the initial value, when v is s1 and x=0

     Y2:  the target value, when v=0 and x>=w

     S1:  the initial speed, that is dy/dx at x=0

     A function which can be used to implement smooth moving. It will
     extrapolate, for values of x>=0, an y position with a continuous
     derivate (dy/dx is continuous, function is 2nd order polynom) and
     which ends up at x=w with a constant value, that is dy/dx=v=0.
     Typically an item set with an initial speed of v with this function

 -- Function: float lw6sys_math_angle_360 (int X, int Y)
     X:  x coordinate

     Y:  y coordinate

     This is a wrapper over the standard `atan' function which will
     handle internally the special x == 0 case and the various
     positive/negative values of `x' and `y'.

     *Return value:*  the angle, in degrees

 -- Function: float lw6sys_math_heartbeat (int64_t X, int PERIOD, float
          Y1, float Y2)
     X:  the parameter (typically a timestamp)

     PERIOD:  the period (typically something like 1000 milliseconds)

     Y1:  the low value (heart at rest)

     Y2:  the high value (when bumping)

     A heartbeat function, typically usefull to power up eye-candy, but
     it could do something else.

 -- Function: int lw6sys_math_blink (int64_t X, int PERIOD)
     X:  the parameter (typically a timestamp)

     PERIOD:  the period (typically something like 1000 milliseconds)

     This function will alternatively return 1 or 0, usefull to handle
     blinking for instance.

     *Return value:*  0 or 1

 -- Function: void * lw6sys_malloc (int SIZE, char * FILE, int LINE)
     SIZE:  number of bytes to allocate.

     FILE:  name of the file calling the function, use `__FILE__x_'

     LINE:  line in the file calling the function, use `__LINE__x_'

     This is a wrapper over the standard `malloc' function.
     Additionnally it will keep track of the call with an internal
     program-wide counter, thus enabling memory leak checks. You should
     not use this function directly but use the macro `LW6SYS_MALLOC'
     which has the same syntax, without the last two parameters, which
     are automatically provided by macro expansion.

     *Return value:*  the newly allocated pointer. Data is not
     initialized.

 -- Function: void * lw6sys_calloc (int SIZE, char * FILE, int LINE)
     SIZE:  number of bytes to allocate.

     FILE:  name of the file calling the function, use `__FILE__x_'

     LINE:  line in the file calling the function, use `__LINE__x_'

     This is a wrapper over the standard `calloc' function.
     Additionnally it will keep track of the call with an internal
     program-wide counter, thus enabling memory leak checks. You should
     not use this function directly but use the macro `LW6SYS_CALLOC'
     which has the same syntax, without the last two parameters, which
     are automatically provided by macro expansion.

     *Return value:*  the newly allocated pointer. Data is filled with
     zeros.

 -- Function: void * lw6sys_realloc (void * PTR, int SIZE, char * FILE,
          int LINE)
     PTR:  the pointer to reallocate.

     SIZE:  number of bytes to allocate.

     FILE:  name of the file calling the function, use `__FILE__x_'

     LINE:  line in the file calling the function, use `__LINE__x_'

     This is a wrapper over the standard `realloc' function.  You
     should not use this function directly but use the macro
     `LW6SYS_REALLOC' which has the same syntax, without the last two
     parameters, which are automatically provided by macro expansion.

     *Return value:*  the newly allocated pointer.

 -- Function: void lw6sys_free (void * PTR, char * FILE, int LINE)
     PTR:  the pointer to free.

     FILE:  name of the file calling the function, use `__FILE__x_'

     LINE:  line in the file calling the function, use `__LINE__x_'

     This is a wrapper over the standard `free' function. Additionnally
     it will keep track of the call with an internal program-wide
     counter, thus enabling memory leak checks. You should not use this
     function directly but use the macro `LW6SYS_FREE' which has the
     same syntax, without the last two parameters, which are
     automatically provided by macro expansion.

     *Return value:*  none.

 -- Function: void lw6sys_free_callback (void * PTR)
     PTR:  the pointer to free.

     This is a callback to be used when the `lw6sys_free' does not fit.
     A good example is a list, which, to free its elements, requires
     you to provide a callback that only takes 1 arg, the pointer to
     free. Problem, `lw6sys_free' takes 3 args. And the `LW6SYS_FREE'
     macro is not usable in such a context. And you can't use standard
     `free' either for it would mess up the `malloc' / `free'
     automatical count which is so convenient to track memory leaks. So
     this callback is here, it's only drawback is that in case of an
     error, the error will not be reported with the real file and line
     parameters. It's still better than nothing.

     *Return value:*  none.

 -- Function: int lw6sys_megabytes_available ()
     Gives a raw approximation of available memory, in megabytes.
     Value is to be taken with distance, but it can give good hints
     when system is running short of ressources.

     *Return value:*  number of megabytes (physical memory) available.

 -- Function: int lw6sys_is_big_endian ()
     Checks the endianess of the machine. PPC is big endian, for
     instance.

     *Return value:*  1 if system is big endian, 0 if little endian.

 -- Function: int lw6sys_is_little_endian ()
     Checks the endianess of the machine. x86 is little endian, for
     instance.

     *Return value:*  1 if system is little endian, 0 if big endian.

 -- Function: int lw6sys_check_types_size ()
     Checks of common types and usefull structures, this is a debugging
     function which helps finding compiler strange behaviors and
     programmer's bad intuitions.

     *Return value:*  1 if everything is OK, 0 if error.

 -- Function: lw6sys_mutex_t * lw6sys_mutex_create ()
     Creates a mutex object.

     *Return value:*  newly allocated pointer.

 -- Function: void lw6sys_mutex_destroy (lw6sys_mutex_t * MUTEX)
     MUTEX:  the mutex to destroy.

     Destroys a mutex object.

     *Return value:*  none.

 -- Function: int lw6sys_mutex_lock (lw6sys_mutex_t * MUTEX)
     MUTEX:  the mutex to use

     Locks the mutex. Note that this should never fail unless there's a
     serious initialization problem, instead, function will wait
     forever until mutex is released.

     *Return value:*  1 if success, 0 if failure.

 -- Function: int lw6sys_mutex_trylock (lw6sys_mutex_t * MUTEX)
     MUTEX:  the mutex to use

     Tries to locks the mutex. That is, tells wether mutex can be
     locked immediately or not. Note that this does not mean there's
     100% chance next call to lock will terminated immediately, since
     lock can still be acquired by another thread.

     *Return value:*  1 if mutex unlocked, 0 if locked or error.

 -- Function: int lw6sys_mutex_unlock (lw6sys_mutex_t * MUTEX)
     MUTEX:  the mutex to use

     Unlocks a mutex.

     *Return value:*  1 if sucess, 0 if error.

 -- Function: int lw6sys_get_mutex_lock_count ()
     Returns how many mutexes have been locked since program start.
     Usefull for sanity checking when debugging.

     *Return value:*  number of calls to lock

 -- Function: int lw6sys_get_mutex_unlock_count ()
     Returns how many mutexes have been unlocked since program start.
     Usefull for sanity checking when debugging.

     *Return value:*  number of calls to unlock

 -- Function: int lw6sys_check_mutex_count ()
     Checks wether unlock has been called as many times as lock.
     Usefull for sanity checking when debugging.

     *Return value:*  1 if OK, 0 if inconsistency.

 -- Function: int lw6sys_true ()
     Function which returns always true, that is, something different
     than 0.

 -- Function: int lw6sys_false ()
     Function which returns always false, that is, 0. This can seem
     totally useless but it does have some utility. It's used for
     instance to "fool" the compiler and force it to compile and link
     functions in binaries, so that, afterwards, dynamically loaded .so
     files can find in the main binary some functions which would
     otherwise be stripped during the final link.

 -- Function: int lw6sys_openmp_get_num_procs ()
     Wrapper on `omp_get_num_procs' the advantage of this is that it's
     always defined, wether OpenMP supported is compiled in or not,
     will returned 1 if no OpenMP support.

     *Return value:*  number of procs

 -- Function: char * lw6sys_get_default_user_dir ()
     Returns the default user directory. Note that this value is not
     static, it can depend, for instance, of the environment variable
     `HOME'.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_config_file ()
     Returns the default config file. Note that this value is not
     static, it can depend, for instance, of the environment variable
     `HOME'.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_log_file ()
     Returns the default log file. Note that this value is not static,
     it can depend, for instance, of the environment variable `HOME'.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_prefix ()
     Returns the default prefix, could be /usr/local for instance.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_mod_dir ()
     Returns the default module directory (dynamically loaded
     libraries).

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_data_dir ()
     Returns the default data directory.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_music_dir ()
     Returns the default music directory.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_music_path ()
     Returns the default music path, which can be composed of several
     directories.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_map_dir ()
     Returns the default map directory.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_map_path ()
     Returns the default map path, which can be composed of several
     directories.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_script_file ()
     Returns the default script file.

     *Return value:*  a newly allocated string.

 -- Function: void lw6sys_options_log_defaults ()
     Logs all default values to log file. Usefull for debugging, to
     know where the program is searching for its informations.

 -- Function: char * lw6sys_get_cwd ()
     Returns the current working directory (absolute path).

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_run_dir (int ARGC, const char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the binary directory, that is, the directory the binary is
     stored in. This is calculated dynamically, by interpreting
     command-line arguments.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_user_dir (int ARGC, const char * []
          ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the user dir, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_config_file (int ARGC, const char * []
          ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the config file, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_log_file (int ARGC, const char * []
          ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the log file, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_prefix (int ARGC, const char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the prefix, taking in account command-line and environment
     variables. However config file content has no impact on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_mod_dir (int ARGC, const char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the mod dir (modules, shared .so), taking in account
     command-line and environment variables. However config file
     content has no impact on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_data_dir (int ARGC, const char * []
          ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the data dir, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_music_dir (int ARGC, const char * []
          ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the music dir, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_music_path (int ARGC, const char * []
          ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the music path, taking in account command-line and
     environment variables. However config file content has no impact
     on the result. Music path can contain several directories.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_map_dir (int ARGC, const char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the map dir, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_map_path (int ARGC, const char * []
          ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the map path, taking in account command-line and
     environment variables. However config file content has no impact
     on the result. Map path can contain several directories.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_script_file (int ARGC, const char * []
          ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the script file, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: void lw6sys_options_log (int ARGC, const char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Logs all the main options values which are not config-file
     dependant but depend on built-in defaults, command-line arguments
     and environment variables. Usefull to debug and know where the
     program is searching for things.

 -- Function: int lw6sys_file_exists (const char * FILENAME)
     FILENAME:  the file to test

     Tests the existence of a file on the filesystem. File is considered
     to exists if it's at least readable.

     *Return value:*  1 if OK, 0 if file doesn't exist or can't be read.

 -- Function: int lw6sys_dir_exists (const char * DIRNAME)
     DIRNAME:  the directory to test

     Tests the existence of a directory on the filesystem.

     *Return value:*  1 if OK, 0 if directory doesn't exist.

 -- Function: int lw6sys_create_dir (const char * DIRNAME)
     DIRNAME:  the directory to create

     Creates a directory, performing sanity checks such as verifying
     the directory really exists after being created.

     *Return value:*  1 if OK, 0 if error.

 -- Function: int lw6sys_create_dir_silent (const char * DIRNAME)
     DIRNAME:  the directory to create

     Creates a directory like `lw6sys_create_dir' but this function is
     silent in the sense that it won't log any error. Usefull to create
     the log directory itself, for instance, and avoid infinite loops
     on error.

     *Return value:*  1 if OK, 0 if error.

 -- Function: char * lw6sys_path_add_slash (const char * PATH)
     PATH:  a path

     Adds a slash, or in a general manner, a directory separator, at
     the end of a path, if needed. So /foo/bar will become /foo/bar/
     but /bar/foo/ will remain /bar/foo/.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: char * lw6sys_path_strip_slash (const char * PATH)
     PATH:  a path

     Strips the slash, or in a general manner, the directory separator,
     at the end of a path, if needed. So /foo/bar/ will become /foo/bar
     but /bar/foo will remain /bar/foo.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: char * lw6sys_path_concat (const char * PATH1, const char
          * PATH2)
     PATH1:  left part of the path

     PATH2:  right part of the path

     Concatenates 2 parts of a path. Function will try to avoid stupid
     "double-slash" when concatenating /foo/ with /bar/ and conversely
     insert a directory separator when concatenating /foo with bar/.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: lw6sys_list_t * lw6sys_path_split (const char * PATH)
     PATH:  a path

     Splits a path into all its parts. For instance /boo/bar/foo2/bar2
     returns a 4 elements list. This is more than a plain split, for
     heading and tailing slashes will be ignored, and various path
     separators will be interpreted (depends on platform).

     *Return value:*  a list containing 0-terminated strings.

 -- Function: char * lw6sys_path_file_only (const char * PATH)
     PATH:  a path

     Returns the file name only, without heading directories.

     *Return value:*  file name, must be freed

 -- Function: int lw6sys_path_is_relative (const char * PATH)
     PATH:  a path

     Checks wether a path is relative or absolute.

     *Return value:*  1 if relative, 0 if absolute.

 -- Function: int lw6sys_path_is_cwd (const char * PATH)
     PATH:  a path

     Checks wether a path is "." or not. Will also trap "" and "./".

     *Return value:*  1 if relative, 0 if absolute.

 -- Function: char * lw6sys_path_parent (const char * PATH)
     PATH:  a path

     Returns the parent path. That will return /foo when given /foo/bar
     in input.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: char * lw6sys_path_unparent (const char * PATH)
     PATH:  a path

     Given the ../foo/bar path, will return foo/bar. Usefull to get rid
     of heading ../ when a path is known to start with it.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: char * lw6sys_path_unparent_no_malloc (char * PATH)
     PATH:  a path

     Given the ../foo/bar path, will return foo/bar. Usefull to get rid
     of heading ../ when a path is known to start with it.  This is
     different from `lw6sys_path_unparent' just because the result is
     not dynamically allocated and copied from source.

     *Return value:*  a pointer which points somewhere within the
     string passed as an argument.

 -- Function: lw6sys_list_t * lw6sys_dir_list (const char * DIR,
          lw6sys_dir_list_filter_func_t FILTER_FUNC, void * FUNC_DATA,
          int * N)
     DIR:  the path of the directory to list

     FILTER_FUNC:  a function which will filter entries, can be NULL

     FUNC_DATA:  additionnal data passed to filter_func

     N:  will contain the number of items found

     This list a directory. The filter will be passed the file path as
     an argument. If it returns 1, the file is kept, if it returns 0
     it's suppressed from the list.

     *Return value:*  a list containing strings (file paths).

 -- Function: lw6sys_list_t * lw6sys_path_list (const char * PATH,
          lw6sys_dir_list_filter_func_t FILTER_FUNC, void * FUNC_DATA,
          int * N)
     PATH:  the path of the path to list

     FILTER_FUNC:  a function which will filter entries, can be NULL

     FUNC_DATA:  additionnal data passed to filter_func

     N:  will contain the number of items found

     This list a directory. By path we mean here a list of separated
     directories, separated by : for instance.  The filter will be
     passed the file path as an argument. If it returns 1, the file is
     kept, if it returns 0 it's suppressed from the list. It's like
     performing a call to `lw6sys_dir_list' on each of the path members.

     *Return value:*  a list containing strings (file paths).

 -- Function: char * lw6sys_find_in_dir_and_path (const char * DIR,
          const char * PATH, const char * FILE)
     DIR:  a directory, when to search the file first

     PATH:  the path to search too, a separated list of dirs

     FILE:  the filename to search for

     Tries to find a file in the given paths. The function is typically
     used to find music files. First it tries to find the file in dir,
     then it tries to find it in each dir of path. `file' must be only
     a file name and not contain any directory. The function will use
     the filename only anyway.

     *Return value:*  the full path of the found file.

 -- Function: void lw6sys_print_xml_header (FILE * F, char * COMMENT)
     F:  file to output content to

     Prints a standard Liquid War compliant XML header in the given
     file.

     *Return value:*  none.

 -- Function: void lw6sys_print_xml_footer (FILE * F)
     F:  file to output content to

     Prints a standard Liquid War 6 compliant XML footer in the given
     file.

     *Return value:*  none.

 -- Function: int lw6sys_profiler_check (int VERBOSE)
     VERBOSE:  wether to display informations on the console

     Checks wether Google Profiler support has been built, and if it's
     set, outputs the log file. If CPUPROFILE is defined but binary has
     no support for it, will display a warning message.

     *Return value:*  1 if google profile enabled and activated, 0 if
     not

 -- Function: void lw6sys_progress_default (lw6sys_progress_t *
          PROGRESS, float * VALUE)
     PROGRESS:  the progress struct to initialize

     VALUE:  the value to point to

     Sets a progress struct to default values, that is, ranging from
     0.0f to 1.0f.

     *Return value:*  none.

 -- Function: void lw6sys_progress_update (lw6sys_progress_t *
          PROGRESS, int MIN, int MAX, int VALUE)
     PROGRESS:  the progress struct to update

     MIN:  the min value

     MAX:  the max value

     VALUE:  the current value

     Updates a progress struct. This is typically the function used by a
     callback to show the progress of a process. Note that this is note
     an initializer. Rather, the progress struct was initialized
     before, and this call is done in a loop with min being 0, max
     being the last value in the loop, and value the current index in
     the loop. NULL pointers correctly handled internally, so call this
     with any parameters, it's safe.

     *Return value:*  none.

 -- Function: void lw6sys_progress_split (lw6sys_progress_t *
          PROGRESS1, lw6sys_progress_t * PROGRESS2, lw6sys_progress_t *
          PROGRESS_SRC)
     progress1: the first part of the splitted progress progress2: the
     second part of the splitted progress progress_src: the progress to
     split

     Utility function to split a progress struct, that is, if a
     progress was ranging from a to b, make 2 progress structs, ranging
     from a to c and from c to b, c being between a and b.

     *Return value:*  none

 -- Function: void lw6sys_progress_split_here (lw6sys_progress_t *
          PROGRESS1, lw6sys_progress_t * PROGRESS2, lw6sys_progress_t *
          PROGRESS_SRC, float HERE)
     progress1: the first part of the splitted progress progress2: the
     second part of the splitted progress progress_src: the progress to
     split here: where to split

     Utility function to split a progress struct, that is, if a
     progress was ranging from a to b, make 2 progress structs, ranging
     from a to c and from c to b, c being between a and b. The here
     value controls what c is. If here=0, then c=a. If here=1, then c=b.

     *Return value:*  none

 -- Function: void lw6sys_progress_split3 (lw6sys_progress_t *
          PROGRESS1, lw6sys_progress_t * PROGRESS2, lw6sys_progress_t *
          PROGRESS3, lw6sys_progress_t * PROGRESS_SRC)
     progress1: the first part of the splitted progress progress2: the
     second part of the splitted progress progress3: the third part of
     the splitted progress progress_src: the progress to split

     Utility function to split a progress struct, this one will split it
     into 3 equal parts.

     *Return value:*  none

 -- Function: void lw6sys_progress_split4 (lw6sys_progress_t *
          PROGRESS1, lw6sys_progress_t * PROGRESS2, lw6sys_progress_t *
          PROGRESS3, lw6sys_progress_t * PROGRESS4, lw6sys_progress_t *
          PROGRESS_SRC)
     progress1: the first part of the splitted progress progress2: the
     second part of the splitted progress progress3: the third part of
     the splitted progress progress4: the fourth part of the splitted
     progress progress_src: the progress to split

     Utility function to split a progress struct, this one will split it
     into 4 equal parts.

     *Return value:*  none

 -- Function: void lw6sys_progress_split5 (lw6sys_progress_t *
          PROGRESS1, lw6sys_progress_t * PROGRESS2, lw6sys_progress_t *
          PROGRESS3, lw6sys_progress_t * PROGRESS4, lw6sys_progress_t *
          PROGRESS5, lw6sys_progress_t * PROGRESS_SRC)
     progress1: the first part of the splitted progress progress2: the
     second part of the splitted progress progress3: the third part of
     the splitted progress progress4: the fourth part of the splitted
     progress progress5: the fourth part of the splitted progress
     progress_src: the progress to split

     Utility function to split a progress struct, this one will split it
     into 5 equal parts.

     *Return value:*  none

 -- Function: void lw6sys_progress_begin (lw6sys_progress_t * PROGRESS)
     progress: the progress to update

     Sets the progress to its min value, NULL values correctly handled.

     *Return value:*  none

 -- Function: void lw6sys_progress_half (lw6sys_progress_t * PROGRESS)
     progress: the progress to update

     Sets the progress to the average between min and max, NULL values
     correctly handled.

     *Return value:*  none

 -- Function: void lw6sys_progress_end (lw6sys_progress_t * PROGRESS)
     progress: the progress to update

     Sets the progress to its max value, NULL values correctly handled.

     *Return value:*  none

 -- Function: u_int32_t lw6sys_random (u_int32_t RANGE)
     RANGE:  the high limit for random generated numbers. If you want
     random numbers between 0 and 5, set this to 6.

     Wrapper over standard random function. This one is thread safe.
     This idea is not to provide cryptographic-proof random numbers,
     rather generate sequences which are random enough to generate
     unique server ids and such things. The function is initialized on
     its first call, and results depend on timestamp, host name, user
     name, and memory available.

 -- Function: float lw6sys_random_float (float MIN, float MAX)
     MIN:  the min value, as a float

     MAX:  the max value, as a float

     Returns a random float number between min & max. Can be equal to
     min or max.

 -- Function: int lw6sys_sdl_register ()
     Function used to avoid initializing SDL several times in a program.
     AFAIK Allegro has a `was_init' function, but SDL doesn't. With this
     function - which every LW6 sub-module should use - one can know
     globally, for the whole program, wether SDL has been initialized
     or not.

 -- Function: int lw6sys_sdl_unregister ()
     Call this whenever you are done with SDL and exit it, so that the
     `lw6sys_sdl_register' function works correctly.

     *Return value:*  1 if SDL needs to be unregistered, that is, if it
     has already been initialized, else 0.

 -- Function: void lw6sys_serialize_int64 (unsigned char * DATA,
          int64_t VALUE)
     DATA:  pointer to the data, must contain at least 8 bytes of
     writable space

     VALUE:  the integer to serialize

     Serializes a 64-bit integer in a byte buffer. Result is not
     dependant on machine endianess. Typically used for checksums or
     high-level serializations.

 -- Function: int64_t lw6sys_unserialize_int64 (unsigned char * DATA)
     DATA:  pointer to the data, must contain at least 8 bytes

     Recovers a 64-bit integer from a byte buffer created, for
     instance, with `lw6sys_serialize_int64'.

 -- Function: void lw6sys_serialize_int32 (unsigned char * DATA,
          int32_t VALUE)
     DATA:  pointer to the data, must contain at least 4 bytes of
     writable space

     VALUE:  the integer to serialize

     Serializes a 32-bit integer in a byte buffer. Result is not
     dependant on machine endianess. Typically used for checksums or
     high-level serializations.

 -- Function: int32_t lw6sys_unserialize_int32 (unsigned char * DATA)
     DATA:  pointer to the data, must contain at least 4 bytes

     Recovers a 32-bit integer from a byte buffer created, for
     instance, with `lw6sys_serialize_int32'.

 -- Function: void lw6sys_serialize_int16 (unsigned char * DATA,
          int16_t VALUE)
     DATA:  pointer to the data, must contain at least 2 bytes of
     writable space

     VALUE:  the integer to serialize

     Serializes a 16-bit integer in a byte buffer. Result is not
     dependant on machine endianess. Typically used for checksums or
     high-level serializations.

 -- Function: int16_t lw6sys_unserialize_int16 (unsigned char * DATA)
     DATA:  pointer to the data, must contain at least 2 bytes

     Recovers a 16-bit integer from a byte buffer created, for
     instance, with `lw6sys_serialize_int16'.

 -- Function: int lw6sys_shape_check_min_max_whd (lw6sys_whd_t * SHAPE,
          lw6sys_whd_t * MIN, lw6sys_whd_t * MAX)
     SHAPE:  the dimensions to control

     MIN:  the minimum shape allowed

     MAX:  the maximum shape allowed

     Will check wether the given shape respects some basic constraints,
     being not to small and not too big.

     *Return value:*  1 if OK, 0 if not.

 -- Function: int lw6sys_shape_check_pos (lw6sys_whd_t * SHAPE,
          lw6sys_xyz_t * POS)
     SHAPE:  the boundary box

     POS:  the position

     Checks wether position is within the given boundary box.

     *Return value:*  1 if OK, 0 if not.

 -- Function: int lw6sys_shape_is_same (const lw6sys_whd_t * SHAPE_A,
          const lw6sys_whd_t * SHAPE_B)
     SHAPE_A:  the first shape to compare

     SHAPE_B:  the other shape to compare

     Compares two shapes.

     *Return value:*  1 if same, 0 if not.

 -- Function: int lw6sys_shape_is_same_xy (const lw6sys_whd_t *
          SHAPE_A, const lw6sys_whd_t * SHAPE_B)
     SHAPE_A:  the first shape to compare

     SHAPE_B:  the other shape to compare

     Compares two shapes, but ignores the z (d) parameter.

     *Return value:*  1 if same_xy, 0 if not.

 -- Function: void lw6sys_signal_custom (int TRAP_ERRORS)
     TRAP_ERRORS:  set to 1 if you want to trap SIGSEGV and SIGFPE

     Set up our signal handlers. This will probably be overrided later
     by other libs such as libSDL, but at least in pure server mode it
     gives a way to treat SIGTERM the right way.

     *Return value:*  none.

 -- Function: void lw6sys_signal_default ()
     Restore default signal handlers for those modified by
     `lw6sys_signal_custom'.

     *Return value:*  none.

 -- Function: void lw6sys_signal_term_handler (int SIGNUM)
     SIGNUM:  SIGTERM

     The own TERM signal handler, will basically call the
     `lw6sys_signal_send_quit' function, which will set a flag used
     later by `lw6sys_signal_poll_quit'.

     *Return value:*  none.

 -- Function: void lw6sys_signal_int_handler (int SIGNUM)
     SIGNUM:  SIGINT

     The own INT signal handler, will basically call the
     `lw6sys_signal_send_quit' function, which will set a flag used
     later by `lw6sys_signal_poll_quit'.

     *Return value:*  none.

 -- Function: void lw6sys_signal_hup_handler (int SIGNUM)
     SIGNUM:  SIGTERM

     The own HUP signal handler, will basically do something that shows
     the program is alive, typically display a NOTICE message.

     *Return value:*  none.

 -- Function: void lw6sys_signal_segv_handler (int SIGNUM)
     SIGNUM:  SIGTERM

     The own SEGV signal handler, will display a backtrace and exit.

     *Return value:*  none.

 -- Function: void lw6sys_signal_fpe_handler (int SIGNUM)
     SIGNUM:  SIGTERM

     The own FPE signal handler, will display a backtrace and exit.

     *Return value:*  none.

 -- Function: void lw6sys_signal_send_quit ()
     Sets the quit flag to 1, so that `lw6sys_signal_poll_quit' returns
     true, that is, tells the polling loop to stop.

     *Return value:*  none.

 -- Function: int lw6sys_signal_poll_quit ()
     Tests wether we need to stop right now.

     *Return value:*  1 if we need to stop now, 0 if program can
     continue.

 -- Function: int lw6sys_sort_int_callback (lw6sys_list_t ** LIST_A,
          lw6sys_list_t ** LIST_B)
     LIST_A:  pointer to a list of int item

     LIST_B:  pointer to a list of int item

     A typicall sort callback function, can be passed to `lw6sys_sort'
     to sort a list of integers.

     *Return value:*  -1 if `list_a' < `list_b' , 0 if `list_a' ==
     `list_b', 1 if `list_a' > `list_b'

 -- Function: int lw6sys_sort_int_desc_callback (lw6sys_list_t **
          LIST_A, lw6sys_list_t ** LIST_B)
     LIST_A:  pointer to a list of int item

     LIST_B:  pointer to a list of int item

     A typicall sort callback function, can be passed to `lw6sys_sort'
     to sort a list of integers. This one will sort in reverse mode.

     *Return value:*  1 if `list_a' < `list_b' , 0 if `list_a' ==
     `list_b', -1 if `list_a' > `list_b'

 -- Function: int lw6sys_sort_float_callback (lw6sys_list_t ** LIST_A,
          lw6sys_list_t ** LIST_B)
     LIST_A:  pointer to a list of float item

     LIST_B:  pointer to a list of float item

     A typicall sort callback function, can be passed to `lw6sys_sort'
     to sort a list of floating point numbers.

     *Return value:*  -1 if `list_a' < `list_b' , 0 if `list_a' ==
     `list_b', 1 if `list_a' > `list_b'

 -- Function: int lw6sys_sort_float_desc_callback (lw6sys_list_t **
          LIST_A, lw6sys_list_t ** LIST_B)
     LIST_A:  pointer to a list of float item

     LIST_B:  pointer to a list of float item

     A typicall sort callback function, can be passed to `lw6sys_sort'
     to sort a list of floating point numbers. This one will sort in
     reverse mode.

     *Return value:*  1 if `list_a' < `list_b' , 0 if `list_a' ==
     `list_b', -1 if `list_a' > `list_b'

 -- Function: int lw6sys_sort_str_callback (lw6sys_list_t ** LIST_A,
          lw6sys_list_t ** LIST_B)
     LIST_A:  pointer to a list of string item

     LIST_B:  pointer to a list of string item

     A typicall sort callback function, can be passed to `lw6sys_sort'
     to sort a list of 0-terminated strings.

     *Return value:*  -1 if `list_a' < `list_b' , 0 if `list_a' ==
     `list_b', 1 if `list_a' > `list_b'

 -- Function: int lw6sys_sort_str_desc_callback (lw6sys_list_t **
          LIST_A, lw6sys_list_t ** LIST_B)
     LIST_A:  pointer to a list of string item

     LIST_B:  pointer to a list of string item

     A typicall sort callback function, can be passed to `lw6sys_sort'
     to sort a list of 0-terminated strings. This one will sort in
     reverse mode.

     *Return value:*  1 if `list_a' < `list_b' , 0 if `list_a' ==
     `list_b', -1 if `list_a' > `list_b'

 -- Function: void lw6sys_sort (lw6sys_list_t ** LIST,
          lw6sys_sort_callback_func_t SORT_FUNC)
     LIST:  the list to sort, might be modified by the function

     SORT_FUNC:  the callback function used to sort

     A general sorting function. Internally, will use the glibc `qsort'
     function, but this one is adapted to the LW6 specific data
     structures, more exactly, the `lw6sys_list' structure. Several
     default sort callbacks are defined, but one is free to use any
     callback, provided it has the right prototype.

 -- Function: lw6sys_spinlock_t * lw6sys_spinlock_create ()
     Creates a spinlock object.

     *Return value:*  newly allocated pointer.

 -- Function: void lw6sys_spinlock_destroy (lw6sys_spinlock_t *
          SPINLOCK)
     SPINLOCK:  the spinlock to destroy.

     Destroys a spinlock object.

     *Return value:*  none.

 -- Function: int lw6sys_spinlock_lock (lw6sys_spinlock_t * SPINLOCK)
     SPINLOCK:  the spinlock to use

     Locks the spinlock. Note that this should never fail unless
     there's a serious initialization problem, instead, function will
     wait forever until spinlock is released.

     *Return value:*  1 if success, 0 if failure.

 -- Function: int lw6sys_spinlock_trylock (lw6sys_spinlock_t * SPINLOCK)
     SPINLOCK:  the spinlock to use

     Tries to locks the spinlock. That is, tells wether spinlock can be
     locked immediately or not. Note that this does not mean there's
     100% chance next call to lock will terminated immediately, since
     lock can still be acquired by another thread.

     *Return value:*  1 if spinlock unlocked, 0 if locked or error.

 -- Function: int lw6sys_spinlock_unlock (lw6sys_spinlock_t * SPINLOCK)
     SPINLOCK:  the spinlock to use

     Unlocks a spinlock.

     *Return value:*  1 if sucess, 0 if error.

 -- Function: char * lw6sys_str_copy (const char * SRC)
     SRC:  the string to copy

     Duplicate a string, creating a new pointer on it, which must be
     freed afterwards. The main difference with `strdup' is that here
     we use the LW6SYS_MALLOC macro to track down possible memory leaks.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_str_concat (const char * STR1, const char *
          STR2)
     STR1:  the left part to be concatenated

     STR2:  the right part to be concatenated

     Concatenate 2 strings, and put the result in a newly allocated
     string. Unlike `strcat' which uses the same pointer.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_new_sprintf (const char * FMT, ...)
     FMT:  a format string, like the one you would pass to `printf'
     ...: optional arguments, like the ones you would pass to `printf'

     An sprintf like function, except it allocates a new string
     automatically, with "enough space". This is not a highly optimized
     function, it will allocate plenty of memory, possibly several
     times, and thus consume time and resources. But it has the great
     advantage of freeing the programmer of the dirty work of guessing
     "how log will the sprintf'ed string be?" before even generating
     it. So it's a time saver for the programmer.  Additionnally, helps
     avoiding memory leaks and buffer overflows.

     *Return value:*  a new allocated string, must be freed.

 -- Function: int lw6sys_buf_sprintf (char * BUF, int LEN, const char *
          FMT, ...)
     BUF:  a buffer of len+1 chars

     LEN:  the max length of string

     FMT:  a format string, like the one you would pass to `printf'
     ...: optional arguments, like the ones you would pass to `printf'

     Almost like snprintf except that it will *always* append a char 0
     ('\0') at the end of the string. Therefore buf must be of size
     len+1.

     *Return value:*  1 if success, 0 if failed.

 -- Function: int lw6sys_str_is_blank (const char * STR)
     STR:  the string to test

     Tests wether a string is blank, that is, if it's composed of
     space, tabs, or carriage returns only.

     *Return value:*  1 if blank, 0 if not.

 -- Function: int lw6sys_str_is_null_or_empty (const char * STR)
     STR:  the string to test

     Tests wether a string is NULL or empty (string with 0 chars "").

     *Return value:*  1 if NULL or empty, 0 if contains something.

 -- Function: char * lw6sys_str_empty_if_null (char * STR)
     STR:  the string to test

     Returns always a non-NULL string, if string is NULL, returns ""
     The argument `str' is not passed as const else this function would
     equate to a disguised cast from const to non-const.

     *Return value:*  source string or "" if it was NULL

 -- Function: int lw6sys_str_is_same (const char * STR_A, const char *
          STR_B)
     STR_A:  1st string to compare, can be NULL

     STR_B:  2nd string to compare, can be NULL

     Compares two strings for equality. Difference with strcmp is that
     this one won't check for alphabetical order and return -1 or +1,
     but will check for NULL args.  of space, tabs, or carriage returns
     only.

     *Return value:*  1 if same, 0 if not.

 -- Function: int lw6sys_str_is_same_no_case (const char * STR_A, const
          char * STR_B)
     STR_A:  1st string to compare, can be NULL

     STR_B:  2nd string to compare, can be NULL

     Compares two strings for equality. Difference with strcmp is that
     this one won't check for alphabetical order and return -1 or +1,
     but will check for NULL args.  of space, tabs, or carriage returns
     only. This function is not case sensitive.

     *Return value:*  1 if same, 0 if not.

 -- Function: int lw6sys_str_starts_with (const char * STR, const char
          * BEGINNING)
     STR:  the string to analyse

     BEGINNING:  the pattern to search

     Tells wether string starts with a given beginning.

     *Return value:*  1 if `str' starts with `beginning', 0 if not

 -- Function: int lw6sys_str_starts_with_no_case (const char * STR,
          const char * BEGINNING)
     STR:  the string to analyse

     BEGINNING:  the pattern to search

     Tells wether string starts with a given beginning. This function
     is not case sensitive.

     *Return value:*  1 if `str' starts with `beginning', 0 if not

 -- Function: int lw6sys_skip_blanks (char ** STR_PTR)
     STR_PTR:  a pointer to a string pointer (read/write parameter).

     Skips blanks at the beginning of a string. The passed parameter is
     modifed in place. Usefull for parsing.

     *Return value:*  1 if blanks were found, else 0.

 -- Function: void lw6sys_str_cleanup (char * STR)
     STR:  a pointer to the string, which will be modified in-place.

     Used to clean up some strings, for instance if they come from the
     network, we don't necessarly want system chars to be displayed on
     the console. Basically it removes all characters with an ASCII
     code inferior to 32, that is, all system characters. This way,
     there won't be any tab, linefeed, or any of such characters left.

     *Return value:*  none.

 -- Function: void lw6sys_str_cleanup_ascii7 (char * STR)
     STR:  a pointer to the string, which will be modified in-place.

     Used to clean up some strings, for instance if they come from the
     network, we don't necessarly want system chars to be displayed on
     the console. Basically it removes all characters with an ASCII
     code inferior to 32, that is, all system characters. This way,
     there won't be any tab, linefeed, or any of such characters left.
     This function will even remove any character above ASCII 127.

     *Return value:*  none.

 -- Function: char * lw6sys_str_reformat (const char * STR, const char
          * PREFIX, int NB_COLUMNS)
     STR:  a pointer to the string we want to modify

     PREFIX:  a prefix to put before each line

     Reformats a string, that is, insert newline characters in the
     right places to that it fits in a given number of columns.  A
     prefix is appended at the beginning of each line.  Will not handle
     strings which already contain newline characters perfectly.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: void lw6sys_str_reformat_this (char * STR, int NB_COLUMNS)
     STR:  a pointer to the string we want to modify

     Reformats a string, that is, insert newline characters in the
     right places to that it fits in a given number of columns.  This
     function will modify the buffer so `str' must be writeable.  Will
     not handle strings which already contain newline characters
     perfectly.

     *Return value:*  none

 -- Function: char * lw6sys_eol ()
     Returns the value of EOL, that is, the "end of line" sequence.
     Will simply return "\n" on UNIX and "\r\n" on Microsoft platforms.
     Note that while this is convenient to write config and example
     files, for instance, it's a bad idea to use this to generate
     network messages, because this kind of message needs to be
     platform independant. Thus any network protocol oriented string
     would use chr(10) and char(13) directly.

     *Return value:*  the EOL string, must not be freed.

 -- Function: lw6sys_list_t * lw6sys_str_split (const char * STR, char
          C)
     STR:  a string

     C:  the delimiter to split with

     Splits a string, for instance 'foo,bar' splited with 'o' will
     return 'f', " and ',bar'.

     *Return value:*  a list containing 0-terminated strings.

 -- Function: lw6sys_list_t * lw6sys_str_split_no_0 (const char * STR,
          char C)
     STR:  a string

     C:  the delimiter to split with

     Splits a string, ignoring empty '0-length' members. For instance
     'foo,bar' splited with 'o' will return 'f' and ',bar'.

     *Return value:*  a list containing 0-terminated strings.

 -- Function: lw6sys_list_t * lw6sys_str_split_config_item (const char
          * STR)
     STR:  a string

     Splits a string, ignoring empty '0-length' members, and using the
     comma ',' as a separator. This is typically usefull for config
     elements such as backend lists. Only paths need another separator
     (platform-dependant).

     *Return value:*  a list containing 0-terminated strings.

 -- Function: char * lw6sys_str_join (lw6sys_list_t * LIST, const char
          * GLUE)
     LIST:  list of strings to join

     GLUE:  string to add in-between

     Companion function of `lw6sys_str_split' which will do the
     contrary and join the string. Here we use a string as the
     glue/separator, more flexible than a simple char in this case.

     *Return value:*  dynamically allocated string

 -- Function: void lw6sys_str_toupper (char * STR)
     STR:  the string to modify

     Transforms a string to upper case, the pointer must point to
     modifiable data.

     *Return value:*  none, `str' pointed data modified in-place

 -- Function: void lw6sys_str_tolower (char * STR)
     STR:  the string to modify

     Transforms a string to lower case, the pointer must point to
     modifiable data.

     *Return value:*  none, `str' pointed data modified in-place

 -- Function: void lw6sys_str_truncate (char * STR, int LEN)
     STR:  the string to truncate

     LEN:  the new length

     Truncates a string to the max given length. If truncated to 3,
     "abcdef" becomes "abc".

     *Return value:*  none, `str' pointed data modified in-place

 -- Function: char * lw6sys_str_random (int LEN)
     LEN:  the length of the random string to generate.

     Generates a random string, this is usefull for testing.

     *Return value:*  newly allocated string

 -- Function: char * lw6sys_str_random_words (int LEN)
     LEN:  the length of the random string to generate.

     Generates a random string, this is usefull for testing.  This
     version only generates words with alpha-numerical content (letters
     and digits plus spaces).

     *Return value:*  newly allocated string

 -- Function: int lw6sys_str_is_bin (const char * BUF, int LEN)
     BUF:  the buffer to test

     LEN:  the length of the buffer

     Tests wether a buffer is likely to contain a string. This is not a
     bulletproof function, just a simple heuristic based estimator.

     *Return value:*  1 if probably binary, 0 if probably text

 -- Function: char * lw6sys_stream_file_to_str (FILE * F)
     F:  file to get input from, typically stdin

     Will read file/stream and return it as a string. This is not for
     serious stream operation since it will return only when stream is
     closed, and read all file into memory before doing anything.  It's
     also limited in size since it uses a fixed length buffer, so this
     is just for quick testing, typically used by command line switches
     which are used to test encoding/decoding functions. Do not use it
     to read a filesystem file, `lw6sys_read_file_content' is much
     better.

     *Return value:*  newly allocated string.

 -- Function: void lw6sys_stream_str_to_file (FILE * F, char * STR)
     F:  file to receive the string

     STR:  the string to output

     Here only for API consistency, will just put string to file (just
     a simple fprint).

     *Return value:*  none.

 -- Function: int lw6sys_test_exec (int ARGC, const char * [] ARGV, int
          MODE)
     ARGC:  number of args as passed to main

     ARGV:  array of args as passed to main

     MODE:  0 for check only, 1 for full test

     Runs the `sys' module test suite which is specific to exec
     functions, these ones require `argc' and `argv' to be correctly
     set so the extra argument justifies putting it outside
     `lw6sys_test'.  Additionnally, it's not fool proof...

     *Return value:*  1 if test is successfull, 0 on error.

 -- Function: int lw6sys_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `sys' module test suite, testing most (if not all...)
     functions. Note that some tests perform file system operations and
     might therefore fail on a read-only filesystem, or if user
     permissions are not sufficient.

     *Return value:*  1 if test is successfull, 0 on error.

 -- Function: lw6sys_thread_handler_t * lw6sys_thread_create
          (lw6sys_thread_callback_func_t CALLBACK_FUNC,
          lw6sys_thread_callback_func_t CALLBACK_JOIN, void *
          CALLBACK_DATA)
     CALLBACK_FUNC:  the main callback, the function that will run the
     thread

     CALLBACK_JOIN:  function which will be called when joining, at the
     end

     CALLBACK_DATA:  data which will be passed to the callback

     Creates a thread. All threads must be joined. This is because we
     really do not want the game to leak, and detached threads are
     typically the kind of thing that leaves stuff in the heap. Note
     that callback_func is just something which will be called when
     joining it can be NULL.  The idea is to put in it free & delete
     functions, which you can't call before joining when you want the
     main thread to get the results of the callback_func.

     *Return value:*  an opaque pointer on the thread. Can be NULL if
     failed.

 -- Function: int lw6sys_thread_is_callback_done
          (lw6sys_thread_handler_t * THREAD_HANDLER)
     THREAD_HANDLER:  thread to work on

     Tells wether the callback is done, that is to say, wether the
     results are available, and we can join.

     *Return value:*  1 if done, else 0.

 -- Function: int lw6sys_thread_get_id (lw6sys_thread_handler_t *
          THREAD_HANDLER)
     THREAD_HANDLER:  thread to query

     Returns the id of the thread, this is an internal value, unique
     for each process, which can help identifying the thread.

     *Return value:*  the id, should be >0.

 -- Function: void * lw6sys_thread_get_data (lw6sys_thread_handler_t *
          THREAD_HANDLER)
     THREAD_HANDLER:  thread to query

     Returns the data associated to the thread, that is, the pointer
     which was passed to the callback function.

     *Return value:*  a pointer.

 -- Function: void lw6sys_thread_join (lw6sys_thread_handler_t *
          THREAD_HANDLER)
     THREAD_HANDLER:  thread to end

     Joins the thread, that's to say wait until the thread is over, and
     destroys the ressources associated to it. Note that if the thread
     is looping forever, this function will just wait forever.  This is
     the only way to end a thread.

     *Return value:*  none.

 -- Function: int lw6sys_get_thread_create_count ()
     Utility function used to check how many threads where created and
     joined.

     *Return value:*  how many threads were created.

 -- Function: int lw6sys_get_thread_join_count ()
     Utility function used to check how many threads where created and
     joined.

     *Return value:*  how many threads were joined.

 -- Function: int lw6sys_check_thread_count ()
     Utility function used to check how many threads where created and
     joined.  This one will compare the results of
     `lw6sys_get_thread_create_count' and
     `lw6sys_get_thread_join_count'.

     *Return value:*  1 if both are equals, 0 if not (error...).

 -- Function: int64_t lw6sys_get_timestamp ()
     Returns a 64-bit timestamp, for general purpose. The unit is
     milliseconds, should return the number of milliseconds since
     EPOCH. Don't use this for accurate date handling, but rather to
     technical stamp events.

     *Return value:*  the timestamp.

 -- Function: int64_t lw6sys_get_uptime ()
     Returns the number of milliseconds since program was started.
     Milliseconds are often referred to as 'ticks'.

     *Return value:*  the number of milliseconds (64-bit)

 -- Function: int32_t lw6sys_get_cycle ()
     Returns a 32-bit timestamp, which is likely to "loop" and have
     twice the same value during a single program execution. The idea
     here is just to provide a 32-bit value, not too big, for animation
     purposes.  The idea is that with 64-bit values, numbers are too
     big and if the goal is just to animate a cursor or spin a sphere,
     one does not care if every ten hours there's a display glitch
     because value became zero again. Besides, those values are often
     used for their "rest" in a module operation, to translate textures
     for instance, and having too big numbers causes floating point
     imprecisions. In fact those values or even only 20-bit. The
     function is based on `lw6sys_get_uptime'() so it will return 0 at
     game startup.

     *Return value:*  the cycle value, a 20-bit integer.

 -- Function: void lw6sys_timer_update (int64_t * TIMESTAMP, int64_t *
          UPTIME, int32_t * CYCLE)
     TIMESTAMP:  the timestamp in msec since EPOCH (output), can be NULL

     UPTIME:  the uptime in msec since startup (output), can be NULL

     CYCLE:  a 20-bit value for animation purpose.

     Returns timestamp & uptime with only one system call.

     *Return value:*  none (parameters modified).

 -- Function: void lw6sys_sleep (float SECONDS)
     SECONDS:  the number of seconds to wait, fractions allowed

     Will sleep for the given amount of seconds. Same as `lw6sys_delay'
     only input is provided as a floating number of seconds instead of
     ticks.

 -- Function: void lw6sys_delay (int MSEC)
     MSEC:  the number of milliseconds (ticks) to wait

     Will sleep for the given amount of seconds. Provides accurate
     timing and has "about-millisecond" precision, since it uses
     `select' internally.  Might however be interrupted in some cases,
     so consider function can always return quicker than specified. A
     common usage of this function is polling loops, where you don't
     care if 2 polls are very close, but simply want to avoid polling
     continuously, therefore consumming 100% of the CPU for nothing.

 -- Function: void lw6sys_idle ()
     Will sleep for a minimal amount of time, just giving the OS a
     chance to let other threads/processes execute themselves. This can
     make a big difference in polling loops between a process that eats
     100% CPU and a process that has a very moderate load.  of ticks.

 -- Function: void lw6sys_snooze ()
     Will sleep for some time, like `lw6sys_idle', except it's a
     "longer" time, use this when you don't really care about
     reactivity but are more concerned about saving CPU, not running
     uselessly the same polling code.

 -- Function: void lw6sys_time_init ()
     Global initializations required to handle time properly.

 -- Function: char * lw6sys_date_rfc1123 (int SECONDS_FROM_NOW)
     SECONDS_FROM_NOW:  an offset to add to current time

     Gives the date according to RFC1123, this is typically usefull for
     HTTP protocol.

     *Return value:*  newly allocated string.

 -- Function: char * lw6sys_date_clf ()
     Gives the date in a format which is compatible with Apache CLF
     Common Log Format.

     *Return value:*  newly allocated string.

 -- Function: char * lw6sys_readable_uptime (int64_t TIMESTAMP_DELTA)
     TIMESTAMP_DELTA:  the duration to show, in msec

     Returns a readable form of an uptime, typically 1d 12:34:06 for
     one day, 12 hours, 34 min, 6 sec or 7:03:45 for 7 hours, 3 minutes
     45 sec.

     *Return value:*  newly allocated string

 -- Function: extern char * lw6sys_url_http_from_ip_port (char * IP,
          int PORT)
     IP:  IP address

     PORT:  IP port

     *Returns an http URL pointing to ip:* port that is, adds a heading
     http:// and a trailing /, and treats port 80 as default. This is
     used to create public_url in net modules.

     *Return value:*  a newly allocated string, NULL on error.

 -- Function: lw6sys_url_t * lw6sys_url_parse (char * URL)
     URL:  the URL to parse

     Parses a URL, this is not a complete RFC compliant parser, it's
     only used to transform URLs into their 'canonical' form as well as
     getting basic info such as on which port one should connect.

     *Return value:*  a newly allocated struct, NULL on error

 -- Function: void lw6sys_url_free (lw6sys_url_t * URL)
     URL:  the url struct to free

     Frees a URL struct and all its members.

     *Return value:*  none.

 -- Function: char * lw6sys_url_canonize (char * URL)
     URL:  the url to check & transform

     Checks if a given URL is correct and, if it is, transforms it into
     its canonical form. This is mostly to get rid of typesettings
     error, add a tailing /, transform all domain into lowercase, among
     other things. A canonized url passed into this function should
     come out exactly the same.

     *Return value:*  a newly allocated string.

 -- Function: int lw6sys_url_is_canonized (char * URL)
     URL:  the URL to check

     Checks wether an URL is in its canonized form.

     *Return value:*  1 if OK (canonized form), 0 if not

 -- Function: int lw6sys_vthread_run (lw6sys_thread_callback_func_t
          CALLBACK_FUNC, lw6sys_thread_callback_func_t CALLBACK_JOIN,
          void * CALLBACK_DATA)
     CALLBACK_FUNC:  the main callback, the function that will run the
     thread

     CALLBACK_JOIN:  function which will be called when joining, at the
     end

     CALLBACK_DATA:  data which will be passed to the callback

     This function is similar to `lw6sys_thread_create', but it's
     dedicated to creating a unique (one per process only) thread,
     which, in turn, will be able to run commands in the main thread
     itself. This is a hack to allow apparently spawned child threads
     to be actually handled by main.  This is because some libraries,
     which LW6 uses in threads, need to be actually called in the main
     thread. SDL, for instance. Note that after running this you loose
     control on the main thread, this one will only wait for possible
     commands from the spawned thread, typically sent with the
     `lw6sys_vthread_create' function.

     *Return value:*  1 on success, 0 on failure.

 -- Function: int lw6sys_vthread_is_running ()
     Returns true if `lw6sys_vthread_run' has been called. Note that
     this is not bullet proof, it will return true in a correct manner
     only if you call it from the vthread itself. In practise this
     shouldn't be a problem, the idea is just to write portable code
     for the main control thread and be able to decide on the fly
     wether to create a thread we should prefer the
     `lw6sys_thread_create' or its equivalent the
     `lw6sys_vthread_create' function.

     *Return value:*  1 on success, 0 on failure.

 -- Function: int lw6sys_vthread_create (lw6sys_thread_callback_func_t
          CALLBACK_FUNC, lw6sys_thread_callback_func_t CALLBACK_JOIN,
          void * CALLBACK_DATA)
     CALLBACK_FUNC:  the main callback, the function that will run the
     thread

     CALLBACK_JOIN:  function which will be called when joining, at the
     end

     CALLBACK_DATA:  data which will be passed to the callback

     The equivalent of `lw6sys_thread_create' but for the vthread
     infrastructure.  The idea is to pretend firing a spawned thread,
     but in fact it's the main thread that runs the code. This function
     must imperatively be called within the `lw6sys_vthread_run'
     function, else it will fail or be buggy.

     *Return value:*  1 on success, 0 on failure.

 -- Function: void lw6sys_vthread_join ()
     The equivalent of `lw6sys_thread_join' but for the vthread
     infrastructure.  The idea is to pretend firing a spawned thread,
     but in fact it's the main thread that runs the code. This function
     must imperatively be called within the `lw6sys_vthread_run'
     function, else it will fail or be buggy.

     *Return value:*  none.

 -- Struct: lw6sys_assoc_s
     Assoc is a basic key/pair structure where key is a string. Use it
     for basic associations, it's not fast when there are many keys, in
     that case, prefer a hash.

 -- Member of lw6sys_assoc_s: key
     *Type:* `char *'

     *Definition:* `char* lw6sys_assoc_s::key'

     The key, a 0 terminated standard C string.


 -- Member of lw6sys_assoc_s: value
     *Type:* `void *'

     *Definition:* `void* lw6sys_assoc_s::value'

     The value, pointer to arbitrary data.


 -- Member of lw6sys_assoc_s: free_func
     *Type:* `lw6sys_free_func_t'

     *Definition:* `lw6sys_free_func_t lw6sys_assoc_s::free_func'

     This function will be called whenever the element is deleted. You
     can set it to NULL in that case no callback will be called on
     deletion.

 -- Member of lw6sys_assoc_s: next_item
     *Type:* `lw6sys_assoc_p'

     *Definition:* `lw6sys_assoc_p lw6sys_assoc_s::next_item'

     Pointer on the next item, will be NULL on last element, there's a
     difference between a NULL pointer and a valid assoc with only one
     item being EOL.

 -- Struct: lw6sys_color_8_s
     Used to store colors when representing them in RGBA mode with
     integers ranging from 0 to 255.

 -- Member of lw6sys_color_8_s: r
     *Type:* `u_int8_t'

     *Definition:* `u_int8_t lw6sys_color_8_s::r'

     Red [0 ... 255].


 -- Member of lw6sys_color_8_s: g
     *Type:* `u_int8_t'

     *Definition:* `u_int8_t lw6sys_color_8_s::g'

     Green [0 ... 255].


 -- Member of lw6sys_color_8_s: b
     *Type:* `u_int8_t'

     *Definition:* `u_int8_t lw6sys_color_8_s::b'

     Blue [0 ... 255].


 -- Member of lw6sys_color_8_s: a
     *Type:* `u_int8_t'

     *Definition:* `u_int8_t lw6sys_color_8_s::a'

     Alpha [0 ... 255]. 255 is opaque, 0 is transparent.


 -- Struct: lw6sys_color_f_s
     Used to store colors when representing them in RGBA mode with
     floats ranging from 0.0f to 1.0f.

 -- Member of lw6sys_color_f_s: r
     *Type:* `float'

     *Definition:* `float lw6sys_color_f_s::r'

     Red [0 ... 1.0f].


 -- Member of lw6sys_color_f_s: g
     *Type:* `float'

     *Definition:* `float lw6sys_color_f_s::g'

     Green [0 ... 1.0f].


 -- Member of lw6sys_color_f_s: b
     *Type:* `float'

     *Definition:* `float lw6sys_color_f_s::b'

     Blue [0 ... 1.0f].


 -- Member of lw6sys_color_f_s: a
     *Type:* `float'

     *Definition:* `float lw6sys_color_f_s::a'

     Alpha [0 ... 1.0f]. 1.0f is opaque, 0.0f is transparent.


 -- Struct: lw6sys_color_hsv_s
     Used to store colors when representing them in HSV mode with
     floats ranging from 0.0f to 1.0f. An alpha channel has been added
     so this is more HSVA than HSV.

 -- Member of lw6sys_color_hsv_s: h
     *Type:* `float'

     *Definition:* `float lw6sys_color_hsv_s::h'

     Hue [0 ... 360.0f]. 0.0f is red, 120.0f is green, 240.0f is blue.


 -- Member of lw6sys_color_hsv_s: s
     *Type:* `float'

     *Definition:* `float lw6sys_color_hsv_s::s'

     Saturation [0 ... 1.0f].


 -- Member of lw6sys_color_hsv_s: v
     *Type:* `float'

     *Definition:* `float lw6sys_color_hsv_s::v'

     Value [0 ... 1.0f].


 -- Member of lw6sys_color_hsv_s: a
     *Type:* `float'

     *Definition:* `float lw6sys_color_hsv_s::a'

     Alpha [0 ... 1.0f]. 1.0f is opaque, 0.0f is transparent.


 -- Struct: lw6sys_hash_s
     Hash is a basic hash structure, relying on assoc for
     implementation. Actually, what it does is storing an array of
     assoc, the number of assoc elements is given at construction. Then
     when accessing a member, a quick checksum is made from the key,
     which enables finding out which assoc must be queried. If the hash
     is properly sized, then once one has found the right assoc,
     finding the right key is fast, since there are only a few of them
     in each assoc, and it avoids scanning for for all keys, which is
     the very purpose of the hash.

 -- Member of lw6sys_hash_s: size
     *Type:* `int'

     *Definition:* `int lw6sys_hash_s::size'

     Number of assoc used for this hash, passed at construction.


 -- Member of lw6sys_hash_s: entries
     *Type:* `lw6sys_assoc_t **'

     *Definition:* `lw6sys_assoc_t** lw6sys_hash_s::entries'

     Array of assoc holding the actual data.


 -- Member of lw6sys_hash_s: free_func
     *Type:* `lw6sys_free_func_t'

     *Definition:* `lw6sys_free_func_t lw6sys_hash_s::free_func'

     This function will be called whenever the element is deleted. You
     can set it to NULL in that case no callback will be called on
     deletion.

 -- Struct: lw6sys_hexa_serializer_s
     The hexa (for hexadecimal) serializer is a tool used to simplify
     serialization processes, you can just push/pop basic data types on
     it, it will concatenate the string, allocate memory, do all this
     dirty stuff without requiring you to plan the size of the buffer,
     among other things.

 -- Member of lw6sys_hexa_serializer_s: buf
     *Type:* `char *'

     *Definition:* `char* lw6sys_hexa_serializer_s::buf'

     Data buffer.


 -- Member of lw6sys_hexa_serializer_s: buf_size
     *Type:* `int'

     *Definition:* `int lw6sys_hexa_serializer_s::buf_size'

     Size of data buffer, in bytes.


 -- Member of lw6sys_hexa_serializer_s: pos
     *Type:* `int'

     *Definition:* `int lw6sys_hexa_serializer_s::pos'

     Current position within the buffer, this is, typically, the place
     where data will be appended at the next push call, or where it
     will be fetched from at the next pop call.

 -- Struct: lw6sys_list_s
     List is a basic list system, with a void * pointer to hold
     arbitrary data and a callback function for deletion. Provides
     basic functions to push, pop, walk, any array-like call will of
     course be very slow. As of current implementation, front
     operations are fast, but back operations are slow.

 -- Member of lw6sys_list_s: data
     *Type:* `void *'

     *Definition:* `void* lw6sys_list_s::data'

     Opaque pointer on element data.


 -- Member of lw6sys_list_s: free_func
     *Type:* `lw6sys_free_func_t'

     *Definition:* `lw6sys_free_func_t lw6sys_list_s::free_func'

     This function will be called whenever the element is deleted. You
     can set it to NULL in that case no callback will be called on
     deletion.

 -- Member of lw6sys_list_s: next_item
     *Type:* `lw6sys_list_p'

     *Definition:* `lw6sys_list_p lw6sys_list_s::next_item'

     Pointer on the next item, will be NULL on last element, there's a
     difference between a NULL pointer and a valid list with only one
     item being EOL. Other way to state it: NULL and empty list are two
     different things.

 -- Struct: lw6sys_module_pedigree_s
     Structure used to store informations about a module. This
     describes the module, its author license, this is both a legal
     check and a technical check, to maximize the chances the code
     we're running is the right one, and to trace it.

 -- Member of lw6sys_module_pedigree_s: id
     *Type:* `char *'

     *Definition:* `char* lw6sys_module_pedigree_s::id'

     Module id, for instance, could be "gl".


 -- Member of lw6sys_module_pedigree_s: category
     *Type:* `char *'

     *Definition:* `char* lw6sys_module_pedigree_s::category'

     Module category, for instance, could be "gfx".


 -- Member of lw6sys_module_pedigree_s: name
     *Type:* `char *'

     *Definition:* `char* lw6sys_module_pedigree_s::name'

     Module name, readable (displayable) name.


 -- Member of lw6sys_module_pedigree_s: readme
     *Type:* `char *'

     *Definition:* `char* lw6sys_module_pedigree_s::readme'

     Module readme text.


 -- Member of lw6sys_module_pedigree_s: version
     *Type:* `char *'

     *Definition:* `char* lw6sys_module_pedigree_s::version'

     Module version.


 -- Member of lw6sys_module_pedigree_s: copyright
     *Type:* `char *'

     *Definition:* `char* lw6sys_module_pedigree_s::copyright'

     Module (short) copyright information.


 -- Member of lw6sys_module_pedigree_s: license
     *Type:* `char *'

     *Definition:* `char* lw6sys_module_pedigree_s::license'

     Module (short) license.


 -- Member of lw6sys_module_pedigree_s: date
     *Type:* `char *'

     *Definition:* `char* lw6sys_module_pedigree_s::date'

     Date of module compilation.


 -- Member of lw6sys_module_pedigree_s: time
     *Type:* `char *'

     *Definition:* `char* lw6sys_module_pedigree_s::time'

     Time of module compilation.


 -- Struct: lw6sys_mutex_s
     Mutex is our own wrapper on the pthread mutex object. Why not use
     the pthread mutex directly? For debugging, this allows us to place
     and instrument hooks if needed.

 -- Member of lw6sys_mutex_s: id
     *Type:* `u_int32_t'

     *Definition:* `u_int32_t lw6sys_mutex_s::id'

     The id of the object, this is non-zero and unique within one run
     session, incremented at each object creation.

 -- Struct: lw6sys_progress_s
     Structure used to store progress information. The idea is that is
     that must be usable in polling mode or in multithreaded mode, and
     we must be able to truncate a progress indicator into several
     stages. So this structure contains a range start, a range end, and
     its value between those two, which is meant to be written by the
     code executing the operation and read by the caller/rendering
     thread.

 -- Member of lw6sys_progress_s: min
     *Type:* `float'

     *Definition:* `float lw6sys_progress_s::min'

     Where the progress operation starts.


 -- Member of lw6sys_progress_s: max
     *Type:* `float'

     *Definition:* `float lw6sys_progress_s::max'

     Where the progress operation ends.


 -- Member of lw6sys_progress_s: value
     *Type:* `float *'

     *Definition:* `volatile float* lw6sys_progress_s::value'

     Somewhere between min and max.


 -- Struct: lw6sys_spinlock_s
     Spinlock is our own wrapper on a spinlock based mutex. Why not use
     the pthread spinlock directly? For debugging, this allows us to
     place and instrument hooks if needed. Additionnally, some
     implementations of pthread do not provide spinlock and in that
     case we provide our own alternative.

 -- Member of lw6sys_spinlock_s: id
     *Type:* `u_int32_t'

     *Definition:* `u_int32_t lw6sys_spinlock_s::id'

     The id of the object, this is non-zero and unique within one run
     session, incremented at each object creation.

 -- Struct: lw6sys_thread_handler_s
     Thread handler is our own wrapper on the pthread object. Why not
     use the pthread handler directly? Basically to store basic flags
     and context data (void * pointer on our thread data for instance)
     along with the handler. This is merely for debugging and
     convenience. Internally this will be casted to
     _lw6sys_thread_handler_t.

 -- Member of lw6sys_thread_handler_s: id
     *Type:* `u_int32_t'

     *Definition:* `u_int32_t lw6sys_thread_handler_s::id'

     The id of the object, this is non-zero and unique within one run
     session, incremented at each object creation.

 -- Struct: lw6sys_url_s
     Describes an URL, with its elements splitted, this is just to be
     able to use half-parsed URLs and avoid redoing this parsing
     everytime.

 -- Member of lw6sys_url_s: use_ssl
     *Type:* `int'

     *Definition:* `int lw6sys_url_s::use_ssl'

     1 if in https, 0 if in http.


 -- Member of lw6sys_url_s: host
     *Type:* `char *'

     *Definition:* `char* lw6sys_url_s::host'

     Host name.


 -- Member of lw6sys_url_s: port
     *Type:* `int'

     *Definition:* `int lw6sys_url_s::port'

     IP port.


 -- Member of lw6sys_url_s: uri
     *Type:* `char *'

     *Definition:* `char* lw6sys_url_s::uri'

     URI, that is, everything after the port.


 -- Struct: lw6sys_whd_s
     Contains the shape of a 3D box. There are 3 differences with its
     "XYZ" equivalent. First, sometimes w*h*d reads better than x,y,z.
     Then, xyz is signed, whd is unsigned. Finally, these are real
     int32 values, they are not 14-bit limited. It does not really cost
     any memory for it's usually used as a single "shape" attribute for
     a whole map. At the same time, it's very often used as a test
     value in loops, so it's interesting to have it in a value that's
     easy to optimize for the compiler (exactly one register...)

 -- Member of lw6sys_whd_s: w
     *Type:* `u_int32_t'

     *Definition:* `u_int32_t lw6sys_whd_s::w'

     Width.


 -- Member of lw6sys_whd_s: h
     *Type:* `u_int32_t'

     *Definition:* `u_int32_t lw6sys_whd_s::h'

     Height.


 -- Member of lw6sys_whd_s: d
     *Type:* `u_int32_t'

     *Definition:* `u_int32_t lw6sys_whd_s::d'

     Depth.


 -- Struct: lw6sys_xyz_s
     All-in 32 bit 3D position, to save memory.It's a deliberate choice
     in Liquid War to handle "limited size" levels. In fact 14 bits
     still allows 8000x8000 maps, which are at least 100 times too slow
     to play now (2008). Should we follow Moore's law we'd have at
     least 6 years until those are playable, and well, until then,
     let's wait. The point is that storing this information (x*y) on 4
     bytes might be very important in some cases, since it can reduce
     memory footprint on structs which are stored in numerous
     quantities, and therefore maximize chances that we use level 1
     &amp; 2 caches and other nice things which happen when memory
     consumption is not too high.Point is: why use INT32 and then limit
     it to 14 bits instead of using an INT16 or short in the first
     place? Answer: it's easier to handle INT32 all the time in the
     rest of the code. Compiler and CPU might even handle that better
     than short. Then, and only when data will be read/written in the
     struct will it be truncated. Typical example is: we want to
     multiplicate y by w (which is a width). Result is beyond
     INT16/short scope but we want to handle it! Casting everything to
     INT32/int is a pain. With this int y:14 trick, we use y as a
     "full-featured" INT32/int and well, when it will be read/written
     we'll loose values over 8191, but we simply do not care.

 -- Member of lw6sys_xyz_s: x
     *Type:* `int32_t'

     *Definition:* `int32_t lw6sys_xyz_s::x'

     X position, from -8192 to +8191.


 -- Member of lw6sys_xyz_s: y
     *Type:* `int32_t'

     *Definition:* `int32_t lw6sys_xyz_s::y'

     Y position, from -8192 to +8191.


 -- Member of lw6sys_xyz_s: z
     *Type:* `int32_t'

     *Definition:* `int32_t lw6sys_xyz_s::z'

     Z position, from -8 to +7.



File: liquidwar6.info,  Node: libtsk,  Next: libvox,  Prev: libsys,  Up: C API

5.42 libtsk
===========

5.42.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/tsk/index.html'.

5.42.2 API
----------

 -- Function: void lw6tsk_loader_push (lw6tsk_loader_t * LOADER, char *
          MAP_PATH, char * RELATIVE_PATH, lw6sys_assoc_t *
          DEFAULT_PARAM, lw6sys_assoc_t * FORCED_PARAM, int DISPLAY_W,
          int DISPLAY_H, int BENCH_VALUE, int MAGIC_NUMBER)
     LOADER:  loader object

     MAP_PATH:  map-path config entry

     RELATIVE_PATH:  relative map path

     DEFAULT_PARAM:  default parameters to use for load

     FORCED_PARAM:  parameters to be forced and their values

     DISPLAY_W:  display width

     DISPLAY_H:  display height

     MAGIC_NUMBER:  used to calibrate speed

     Pushes a load request to the loader. Will stop the current load
     and push a new one.

     *Return value:*  none.

 -- Function: int lw6tsk_loader_pop (lw6map_level_t ** LEVEL,
          lw6ker_game_struct_t ** GAME_STRUCT, lw6ker_game_state_t **
          GAME_STATE, lw6tsk_loader_t * LOADER)
     LEVEL:  loaded level (out param)

     GAME_STRUCT:  loaded struct (out param)

     GAME_STATE:  loaded state (out param)

     LOADER:  loader object

     Pops data from the loader, will allocate everything dynamically.
     Function can either return just level or level and game struct and
     game state (3 of them together). It's safe to use the received
     level, display it right away, then wait for the rest. If things
     are loaded fast enough, you just receive everything at once.

     *Return value:*  1 if some data, 0 if none.

 -- Function: lw6tsk_loader_t * lw6tsk_loader_new (float SLEEP, char *
          USER_DIR, volatile float * PROGRESS)
     SLEEP:  how many seconds to wait between every poll

     USER_DIR:  user directory

     PROGRESS:  progress indicator to use

     Creates a new loader. This object is used to do some reputed slow
     calculus in the background, in a separated thread. Typical example
     is map loading. This is a high-level objects which encapsulates
     threads and other wizardry.

     *Return value:*  a pointer to the loader, NULL if failed.

 -- Function: void lw6tsk_loader_free (lw6tsk_loader_t * LOADER)
     LOADER:  the loader to free.

     Deletes a loader. Will automatically stop the child thread, free
     data, and so on.

     *Return value:*  none.

 -- Function: char * lw6tsk_loader_repr (lw6tsk_loader_t * LOADER)
     LOADER:  the loader to represent.

     Creates a string which briefly describes the loader.

     *Return value:*  a dynamically allocated pointer, must be freed.

 -- Function: int lw6tsk_loader_get_stage (lw6tsk_loader_t * LOADER)
     LOADER:  the loader to query.

     Returns the current stage of the loader.

     *Return value:*  0 if idle, 1 if loading the map from disk, 2 if
     build dynamic stuff such as game_state.

 -- Function: int lw6tsk_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `tsk' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.

 -- Struct: lw6tsk_loader_s
     Loader object, allows asynchronous map loading.

 -- Member of lw6tsk_loader_s: id
     *Type:* `u_int32_t'

     *Definition:* `u_int32_t lw6tsk_loader_s::id'

     The id of the object, this is non-zero and unique within one run
     session, incremented at each object creation.

 -- Member of lw6tsk_loader_s: thread
     *Type:* `lw6sys_thread_handler_t *'

     *Definition:* `lw6sys_thread_handler_t* lw6tsk_loader_s::thread'

     Thread used to run the loader.


 -- Member of lw6tsk_loader_s: data
     *Type:* `void *'

     *Definition:* `void* lw6tsk_loader_s::data'

     Data used by the loader.



File: liquidwar6.info,  Node: libvox,  Prev: libtsk,  Up: C API

5.43 libvox
===========

5.43.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/vox/index.html'.

5.43.2 API
----------

 -- Function: lw6vox_renderer_t * lw6vox_renderer_new
          (lw6ker_game_state_t * GAME_STATE)
     GAME_STATE:  the game state to use

     Creates a voxel rendering object (todo, not implemented yet).

     *Return value:*  renderer object

 -- Function: void lw6vox_renderer_free (lw6vox_renderer_t * RENDERER)
     RENDERER:  the renderer object

     Frees a voxel rendering object (todo, not implemented yet).

     *Return value:*  none

 -- Function: int lw6vox_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `vox' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.

 -- Struct: lw6vox_renderer_s
     Voxel renderer object, not implemented yet.

 -- Member of lw6vox_renderer_s: dummy
     *Type:* `int'

     *Definition:* `int lw6vox_renderer_s::dummy'

     Todo...



File: liquidwar6.info,  Node: 2005 .plan,  Next: Fanfic,  Up: Top

Annexe A 2005 .plan
*******************

Here's my .plan file, which describes what I (Christian Mauduit
(mailto:ufoot@ufoot.org)) have planned for Liquid War 6.  There's no
garantee that what's written here is a precise description of the real
future, however it should give a good idea of what I have in mind.

   Note that the information here was written in summer 2005, it might
or not be accurate now, as the main reason for plans to exist is that
people never follow them. I'm no exception.

A.1 Complete rewrite
====================

Liquid War 6 will be an almost complete rewrite. I mean that common
code between branches 5 and 6 might end up in representing 0% of the
total code. I think this is a wise decision, for the current code is
really hard to maintain, and would not survive any serious cleanup. LW5
was first written in 1998, for DOS, when I had much less experience in
programming. In 7 years I - and other people as well - hacked major
enhancements in it such as cross-platform support, network games, and
if you compare release 5.0 with the latest 5.x.x release, you'll see
that a bunch of things have changed. I had never expected I would patch
and fix this game for so long, and it's no surprise that it's bloated
today.

   FYI, here's a list of what makes LW5 unsuitable for major
improvements without a complete rewrite:

   * global variable hell. Lots of things are stored in globals.

   * hard-coded C GUI. Read src/level.c to get an idea of how horrible
     it is.

   * hard-coded 256 colors paletted mode. A clever bet in 1998
     (performance...). Not anymore.

   * generally bloated code. Makes bug-finding very tricky.

A.2 Technologies
================

Liquid War 6 will use a different technical framework than Liquid War 5
(http://www.ufoot.org/liquidwar/v5).

A.2.1 Script + standard C + assembly
------------------------------------

It happens that coding a large project in pure C is a waist of time, if
possible at all.

   If one applies the standard 80/20 rule to a computer game, one might
state that 80% of the code eat up 20% of the CPU and the other 20% of
the code eat up 80% of the CPU, the former being high-level glue code
and the latter being low-level algorithmic code.

   With Liquid War, one could speak of the 99/01 rule. I mean that 99%
of the CPU time concerns only 1% of the code, and vice-versa.
Basically, Liquid War has a very CPU-greedy core algorithm, still
spends a fair amount of CPU displaying stuff (but this is delegated to
the low-level game programming library) and the rest is totally
unsignificant, in terms of CPU. Point is this "rest" represents the
vast majority of the code, and also represents the very same buggy code
I spend nights to patch on Liquid War 5
(http://www.ufoot.org/liquidwar/v5). I'm talking about network code,
GUI, and other high-level glue-code which are currently being written
in C.

   This idea is to write all this in a convenient scripting language.
There won't be any impact on performances. I can't garantee Liquid War
6 will be blazingly fast, but for sure it won't be the scripting
language fault. And of course if, as in Liquid War 3 and 5, I feel the
need to implement some stuff in assembly for performances issues, I
will do it.

   We end up with a multi-language architecture: script + C + assembly.

   My guess is that I'll use Scheme
(http://www.gnu.org/software/guile/) as an extension language. Python
(http://www.python.org) would be a good choice too. Let's say I'll give
Scheme a chance, and if it's really not adapted, I'll switch back to
Python. The point is that today I know Python and don't really know
Scheme, but, well, it's always a pleasure for me to learn new things.
It's fun.

   So what is planned today is that Liquid War 6 will be a Scheme
program, which will call callbacks functions written in C and/or
assembly. These functions will do all the low-level time consuming
algorithmic and graphical stuff. The rest of the code being entirely
scripted.

A.2.2 OpenGL
------------

Liquid War is not a 3D game, so why use OpenGL?

   * it's a very convenient way to access video hardware acceleration
     with XFree86.

   * low-end computers and/or computers without 3D acceleration can
     still run Liquid War 5 (http://www.ufoot.org/liquidwar/v5).

   * I'm interested in learning/using this API 8-)

   This choice implies that I won't use Allegro
(http://alleg.sourceforge.net/) anymore. Allegro stays a very
convenient library and I would recommend it for it's excellent, easy to
learn, powerfull, and stable. But for the needs of Liquid War 6 I'll
use something else (because of OpenGL). I first thought of using GLUT
(http://freeglut.sourceforge.net/) but I might end up simply using SDL
(http://www.libsdl.org/). The idea is just fo have an OpenGL wrapper
which sets up OpenGL in a similar manner on all platforms, and handles
basic things such as mouse or keyboard.

A.2.3 CSound
------------

I've got two excellent books on Csound (http://www.csounds.com/), and
the will to learn how to use this tool.

   I'll probably use Csound for a number of things, ranging from
"bubbling sounds" to full blown music. Stay tuned 8-)

A.3 Functionnalities
====================

A.3.1 Visual enhancements
-------------------------

Of course Liquid War 6 will look nicer than Liquid War 5
(http://www.ufoot.org/liquidwar/v5), blah blah blah. What do you think?

   Maybe I'll try to use some OpenGL features to make it possible to
play on a ball, on a Moebius ring, or other fancy things. I have
zillion of ideas, future will decide which ones will be implemented
first.

   To make it clear, visual enhancements aren't my top-level priority.
However I'll try and make room for these enhancements, and prepare the
terrain correctly. So it's possible that the first releases of Liquid
War 6 won't be that much better than Liquid War 5
(http://www.ufoot.org/liquidwar/v5), but at least Liquid War 6 will
have the possibility to evolve. Something Liquid War 5
(http://www.ufoot.org/liquidwar/v5) doesn't have.

A.3.2 Rules enhancements
------------------------

There are many things that could be done easily:

   * several cursors for one team

   * alliances between teams

   * deep places on a map, where more liquid can reside

   * circular maps which "connect" the left border to the right one

   * ...

   As for graphical improvements, this is not my top-level priority.
Simply, I'll make the game ready-to-improve. Again, all these
enhancements are very hard to code in Liquid War 5
(http://www.ufoot.org/liquidwar/v5), else I would already have coded
them.  Network enhancements

   That's my top-level prioriry.

   Why is that? Well, think of Liquid War in terms of "what makes it a
good game?" and "what makes it a poor game?".

   It's a good game because:

   * the idea is original

   * the gameplay is addictive

   * you can play on a LAN

   * all the family can play

   * it's cross-platform

   * it's Free Software

   It's a poor game because:

   * it's somewhat ugly and has a retro "back in the eighties" look

   * network games are slow on Internet

   * there are not enough active Internet servers

   For the ugliness, well, OpenGL and some artwork should make it. But
for the network, what's the real problem?

   The real problem is that in the current situation, the server needs
to have all "keystrokes" before doing anything, and all players must be
connected before a game starts. Here's what I plan to do to fix this:

   * players will be able to connect on a game "on the fly". This is
     done by most online games, and it's IMHO a required features for a
     network mode to work on Internet (not speaking of local networks,
     but real wide online gaming). How this will fit with Liquid War's
     rules is not totally decided, but I already know of several way to
     achieve this.

   * I'll implement an "anticipation" system "a la" U61
     (http://www.ufoot.org). This means that no matter if a remote
     player has a poor network connection, things will behave as if
     everything was fine. Internally, the system keeps 2 images of the
     game. One which is "anticipated" and displayed to the player, and
     one which is validated but outdated, kept internally. It's a
     little hard to explain, consumes twice as much CPU and memory, but
     it works. It happens that today the lacking ressource for playing
     Liquid War online is more on the network side than on the local
     CPU and memory aspects.

   * I'll take it to the next level and implement a "peer-to-peer-like"
     network model, in which any client can become a server. The idea
     behind is that if a server quits the game, then a client takes its
     role, letting the game continue for hours. This way one could
     virtually have a never ending Liquid War game which would last
     weeks. I believe this could be really cool. I also believe no
     proprietary game will ever implement that, for in this model
     there's no way to force people to access a centralized server,
     this server usually being the major key in the business model of a
     company which sells proprietary software.

   This third point will be the real enhancement of Liquid War with
version 6. It's one of the very points which drives me to rewrite it
completely. First because it's impossible to implement it without some
heavy work. Then because I find it very motivating.

A.3.3 Hey, you forgot my idea!!!
--------------------------------

Many gamers submitted suggestions, either by mail or by posting
messages on the mailing list.

   Don't worry, I keep them. Not reading them here does not mean I
won't implement them. It simply means I won't implement them first. I
first need the game basically function before enhancing it with fancy
stuff.

A.4 Road map
============

As I stated on the mailing list, when thinking about Liquid War 6,
think of years rather than months (unless I get fired, jobless, or
spend several months in a hospital with a laptop).

   Note that this road map takes it for granted that I'll be the lone
coder on the project. It's unlikely that someone is going to help me
for the first stages, until there's at least something real, something
playable. Something that proves that the concept is valid. Besides,
(real) team work implies a significant overhead, especially at project
start. It's hard to figure out how to distribute tasks when the tasks
themselves are not clearly identified. But for the rest (starting in
2007 or 2008), it's possible that external help might greatly...
...help!

   * 2005 : Project framework should be done. This implies that the
     scripting engine is up and running, graphical mode works, config
     and data loading work, basic menus are available. Nothing playable.

   * 2006 : Import the core algorithm from Liquid War 5
     (http://www.ufoot.org/liquidwar/v5), make the game playable in
     "demo mode" ("à la" Liquid War 2), implement the network
     "peer-to-peer-like" mode. At this stage, it will be possible to
     know wether Liquid War 6 is true vaporware or not.

   * 2007 : glue all this together to make something usable by anyone,
     heavy work on the GUI, on the options, on error checking, many bug
     fixes. The goal is to have a game which is equivalent to Liquid
     War 5 (http://www.ufoot.org/liquidwar/v5), with the network
     aspects pushed to the next level.

   * 2008 : tadaaaaaaaaaaa! Release the game "publicly" - inform
     Freecode 8-) - and enhance it with all the feedback from gamers
     (bug reports and suggestions received since 1998). Work on artwork
     (both graphics and musics). Write documentation.

   * 2009 : stabilize the game, patch it for all those things which had
     been forgotten back then in 2005, optimize for speed, bug-fix
     bug-fix bug-fix.

   * 2010 : stop maintaining Liquid War 5
     (http://www.ufoot.org/liquidwar/v5), invite Liquid War fans and
     coders to a hudge party in my garden, sing all night, drink beers
     and wine, teach Liquid War strategies to my 5 and 6 year old
     daughters, remember the old times when Liquid War wasn't so cool
     8-)


File: liquidwar6.info,  Node: Fanfic,  Next: Links,  Prev: 2005 .plan,  Up: Top

Annexe B Fanfic
***************

Quoting Gavin: "I wrote a liquid war fanfic some time ago [...] I wrote
it after a friend claimed that there wasn't any liquid war fanfic
because it wasn't possible."

   So here it is, a Liquid War fanfic. It was initially written for
Liquid War 5, but applies to Liquid War 6 as well. Enjoy!

B.1 The Battle of Emberlificoted
================================


...

   The General presided over his massing army in his seat, or rather
hovering ring, of power. It dipped slightly as he flew low over his
troops marching through the viscous marsh-like terrain. They were like
children: obedient, loyal, and they ate a lot.

   Glancing at the status panel mounted in front of him he grimaced;
the other five armies: Yellow, Green, Orange, Turquoise, and, of
course, Red, were also readying armies of a similar size to his own.
His violet clones would have to fight hard and eat well to win this day.

   Today would not be a battle of luck, the General mused, it would be
a battle of tactics, of alliances, and of betrayal. Every clone was
identical - that was the general idea behind clones - and the terrain
seemed strangely symmetrical; it would not give advantage to any of the
six armies amassed today. Glancing at the hologram of the battlefield
projected in front of him the General noted that he would have to move
quickly, Orange and Yellow were too close for comfort, though
fortunately Baron Red's army of eponymous coloured clones was the
furthest.

   General Violet's fingertips were sweaty even before they touched the
four main control keys in front of him. They were labeled 'W', 'A',
'D', and, of course, the full retreat button - very useful for
misleading foes and ambushing them as they pursued - 'S'. The keys were
arrange in a roughly equilateral triangular pattern; with 'S' forming
the base and being adjacent to both 'A' and 'D', 'W' formed the tip of
the triangle.

   A long breath left his parched lips as at last he made his move.


   ...

   "Dammit!" he screamed moments later. He had misjudged Captain Yellow
and Commander Orange; he had expected one at least to attack
immediately, one he could have handled. They were working together -
foiling his attempt to shoot between them to near the center of the
battlefield to gain a better vantage point. Yellow had shot down
towards him, cutting off his advance, and now Orange had sealed his
escape route. "It's not over yet" muttered the General. He opened a
voice channel with Commander Orange:

   "Very clever. Flawed, but still clever."

   "Flawed?" came the reply.

   "Yes flawed, when the good Captain is finished devouring my army who
do you think he will turn to next?", bluffed the General - his hands
worked quickly as he manoeuvred his hovering control ring, all that his
troops ever saw of him, carefully towards the weakest section of his
attackers. If he could just break out a few units he could soon turn
the tide against both Yellow and Orange.

   "We have an alliance..." Orange's voice was unsure now.

   Time for some sarcasm to through her even more off balance, thought
the General,

   "I gathered", he spoke softly, slowly, and with too much meaning.
Then closing the channel he turned his attention back to his escape.


   ...

   "Yes!" wooped the ecstatic figure of the General. Fifty or so of his
troops had broken free undetected and were even now working their way
cautiously towards the camps of the Yellow army, only the front lines
were still actively fighting; this opening gambit of Yellow and Orange
had turned into a stale siege and Yellow's army had pitched tent.

   General Violet steered his hovering guidance ring to the center of
the Yellow camp. His troops struck, both those who had got behind the
lines and those who were still besieged. Yellow reacted too slowly and
suddenly found that her army, was shrinking back from the onslaught.
There was nowhere to run to, and bye now her only ally - Commander
Orange - had abandoned her to her fate; he was too busy engaging Sir.
Turquoise, who had managed to escape from the slaughter that the Baron
had caused to the Turquoise ranks and was even now valiantly attacking
the flanks of the Orange troops.

   A glance at the status panel showed that Yellow's life force was
fading quickly: 8%, 3%, 1%, Gone.

   The General smiled, he always enjoyed getting the first kill, and by
now his armies life force had grown and his clones had replicated. With
his, now, formidable fighting force it was no problem to engulf both
Sir. Turquoise and Commander Orange's brawling armies and annihilate
them. Once again his army grew in size and power. Now if only the Baron
didn't notice that..., thought the General.


   ...

   "Too late!" yelped the General, now thrown into panic, as he saw the
approaching Baron. His army had also grown in size and power - having
fatally injured the Turquoise army within the opening moments of the
battle, and having finally managed to catch the elusive fleeing form
of, or what remained of, Emperor Green.

   Gripping the controls harder the General thought quickly, his army
doesn't so completely outnumber me that this is already over, however
unless I can cause him to make a mistake that allows me to take the
upper hand then I will inevitably lose. Maybe I can...

   This thought was terminated and replaced by another as the Baron's
angry red troops broke through the undergrowth that had covered their
movements and started to surround the General's army. The thought that
now throbbed through the panic-stricken mind of General Violet was
simply 'Run!'.

   Even as he signaled the retreat and made for what seemed to be the
only possible means of escape the Baron's blood red control ring
appeared at the opening. The General knew it was over, even before the
host of red beings appeared at the opening.

   There was no escape. His life force was almost depleted and he was
surrounded. Then it was that the Baron decided to communicate:

   "Too bad. It was a good game"

   The General blinked, gaped, and was generally gobsmacked. Just
before his life force completely failed and his own weary eyes closed
in defeat he snarled,

   "What!? This is not a game!" were the General's dying words.


File: liquidwar6.info,  Node: Links,  Next: Copying,  Prev: Fanfic,  Up: Top

Annexe C Links
**************

This section lists various Internet Liquid War related links.

C.1 Official links
==================

These are the "official" links, hopefully you'll find everything you
need here:

   * `http://www.gnu.org/software/liquidwar6/': Liquid War 6 homepage

   * `http://www.gnu.org/software/liquidwar6/manual/': Online manual

   * `http://download.savannah.gnu.org/releases/liquidwar6/': Savannah
     downloads

   * `http://www.ufoot.org/download/liquidwar/v6/': ufoot.org downloads
     (mirror)

   * `http://www.ufoot.org/liquidwar/v6/snapshots/': daily snapshots

   * `http://git.savannah.gnu.org/cgit/liquidwar6.git': GIT repository

   * `http://savannah.gnu.org/projects/liquidwar6/': Project on Savannah

   * `http://savannah.gnu.org/bugs/?func=additem&group=liquidwar6':
     Submit a bug report

   * `http://lists.gnu.org/archive/html/help-liquidwar6/': Mailing-list
     archives

   * `http://ufoot.org:8056/': Permanent "seed" server running latest
     snapshot

C.2 Other sites
===============

Note that some of these links might link to and/or promote proprietary
software. It's important to emphasize Liquid War 6 is free software,
free as in speech, and you are encouraged to use software that protects
your freedom. However, for your convenience, those links are provided,
they might give you a hopefully neutral idea of what the game is all
about.

   This list is also by no way extensive, it's provided "as is".

   * `http://en.wikipedia.org/wiki/Liquid_War': Liquid War entry on
     Wikipedia

   * `http://fr.wikipedia.org/wiki/Liquid_War': Liquid War entry on
     Wikipedia (French)

   * `http://freecode.com/projects/liquid-war-6': Liquid War 6 on
     Freecode.

   * `http://www.ohloh.net/p/liquidwar6': Liquid War 6 on ohloh.

C.3 Old stuff
=============

Various links that are deprecated, but still might contain interesting
informations for those who enjoy digging into the past.

   * `http://arch.sv.gnu.org/archives/liquidwar6/': GNU Arch repository
     (replaced by Git as for this project)

   * `http://www.ufoot.org/liquidwar/v5': Liquid War 5, the previous
     version of the game.

   * `http://git.savannah.gnu.org/gitweb/?p=liquidwar6.git': Gitweb
     interface, cgit seems to be Savannah's default now.

