This is /home/ufoot/Home/_/liquidwar6/doc/liquidwar6.info, produced by
makeinfo version 4.13 from
/home/ufoot/Home/_/liquidwar6/doc/liquidwar6.texi.

Liquid War 6, a unique multiplayer wargame.

   Copyright (c)  2005, 2006, 2007, 2008, 2009, 2010, 2011  Christian
Mauduit <ufoot@ufoot.org>

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

START-INFO-DIR-ENTRY
* Liquid War 6: (liquidwar6).   A unique multiplayer wargame.
END-INFO-DIR-ENTRY


File: liquidwar6.info,  Node: libsys,  Next: libtsk,  Prev: mod-udpd,  Up: C API

5.41 libsys
===========

5.41.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/sys/index.html'.

5.41.2 API
----------

 -- Function: int lw6sys_arg_match (char * KEYWORD, char * ARGV_STRING)
     KEYWORD:  the option to match, without the prefix "-" or "-"

     ARGV_STRING:  the argv value, for instance argv[1]

     This is an utility function which allow the program to handle
     options in a uniform manner. Key comparison is insensitive, that
     is, -option and -OPTION are equivalent. Besides, -option and
     -OPTION are equivalent too. Liquid War 6 documentation mentions
     options in lowercase with a double dash (-option) by default, but
     it's a fact, the program supports variants. This is just for
     convenience, the philosophy behind this behavior is "be as
     permissive as possible when interpreting input, and as strict as
     possible when generating output". In fact, it's even said that
     Liquid War 6 will accept the argument without any prefix dash as
     being valid... This is to say running "liquidwar6 -option" is the
     same as running "liquidwar6 option". But, this is a secret 8-)

     *Return value:*  non zero if it matches, 0 if it doesn't.

 -- Function: int lw6sys_arg_exists (int ARGC, char * [] ARGV, char *
          KEYWORD)
     ARGC:  the number of arguments, as passed to `main'

     ARGV:  an array of arguments, as passed to `main'

     KEYWORD:  the keyword to match

     Parses all command-line arguments, searching for one precise
     "-key[=...]" entry.

     *Return value:*  1 if key is present, 0 if not.

 -- Function: char * lw6sys_arg_get_value (int ARGC, char * [] ARGV,
          char * KEYWORD)
     ARGC:  the number of arguments, as passed to `main'

     ARGV:  an array of arguments, as passed to `main'

     KEYWORD:  the keyword to match

     Parses all command-line arguments, searching for one precise
     "-key=value" pair, and returns the value.

     *Return value:*  a pointer to the value. May be NULL. Must be
     freed.

 -- Function: char * lw6sys_arg_get_value_with_env (int ARGC, char * []
          ARGV, char * KEYWORD)
     ARGC:  the number of arguments, as passed to `main'

     ARGV:  an array of arguments, as passed to `main'

     KEYWORD:  the keyword to match

     Parses all command-line arguments, searching for one precise
     "-key=value" pair, and returns the value.  If a corresponding
     environment variable is available, but no command-line parameter
     was passed, the environment variable is intepreted. Such
     environment variables are uppercased, prefixed by "LW6_" and "_"
     replaces "-". The environment variable will be overriden if the
     command-line parameter is present.

     *Return value:*  a pointer to the value. May be NULL. Must be
     freed.

 -- Function: int lw6sys_arg_test_mode (int ARGC, char * [] ARGV)
     ARGC:  argc as passed to main

     ARGV:  argv as passed to main

     Chooses between the two test modes "check" or "test". Check (value
     0) is a lighter test which should never fail even if some special
     hardware or environment is missing. Test (value 1) is a more
     complete test which does things which *can* require some special
     conditions.  Function will log and be verbose is syntax is not
     correct.

     *Return value:*  1 if complete test must be run, 0 is only check

 -- Function: lw6sys_assoc_t * lw6sys_assoc_new (lw6sys_free_func_t
          FREE_FUNC)
     FREE_FUNC:  optional callback used to free memory when stored date
     is a pointer. Can be NULL when one stores non dynamically
     allocated data, such as an integer or a static array.

     Creates an empty assoc. There's a difference between NULL and an
     empty assoc. The empty assoc would (in Scheme) be '() whereas NULL
     corresponds to undefined "is not a assoc and will generate errors
     if you ever call assoc functions on it". Such created assoc are
     not performant hash tables but slowish "strcmp me for each key"
     associative arrays, the key being a "char *" string and the value
     a "void *" pointer.

     *Return value:*  a pointer to the newly allocated associative
     array. Must be freed with `lw6sys_assoc_free'.

 -- Function: void lw6sys_assoc_free (lw6sys_assoc_t * ASSOC)
     ASSOC:  the assoc to be freed.

     The function will cascade  delete all elements, using (if not
     NULL...)  the callback passed when first creating the assoc.

     *Return value:*  void

 -- Function: int lw6sys_assoc_has_key (lw6sys_assoc_t * ASSOC, char *
          KEY)
     ASSOC:  the assoc to test

     KEY:  the key to search

     Not a very fast function, since on a "big" assoc, strcmp will be
     called internally until the key is found.

     *Return value:*  non-zero if there's an entry with the
     corresponding key.

 -- Function: void * lw6sys_assoc_get (lw6sys_assoc_t * ASSOC, char *
          KEY)
     ASSOC:  the assoc to query

     KEY:  the key of which we want the value

     *Return value:*  a void pointer to the data contained in the
     assoc. Note that the pointer on the actual data is returned, that
     is, if it's static data, you must not try to free it... As long as
     memory management is concerned, destroying the assoc will actually
     free the data if needed.

 -- Function: void lw6sys_assoc_set (lw6sys_assoc_t ** ASSOC, char *
          KEY, void * VALUE)
     ASSOC:  the assoc to modify

     KEY:  the key we want to updated

     VALUE:  the new value

     Sets a value in an associative array. The key pointer need not be
     persistent, it can be freed after affectation. In fact a new
     string will be created internally. This is not true for the value,
     it's hard to find way to copy "any object".  So if you want an
     associative array of strings, key can disappear after calling this
     function, but not value. The function passed as free_func when
     creating the assoc will be used to free stuff whenever needed
     (unset or free).

     *Return value:*  void

 -- Function: void lw6sys_assoc_unset (lw6sys_assoc_t * ASSOC, char *
          KEY)
     ASSOC:  the assoc concerned

     KEY:  the key to unset

     Clears an entry in an associative array. The callback passed when
     creating the assoc will be called if needed, to free the data
     automatically.

     *Return value:*  void

 -- Function: lw6sys_list_t * lw6sys_assoc_keys (lw6sys_assoc_t * ASSOC)
     ASSOC:  the assoc to work on

     Returns a list containing all the keys of the assoc. The list must
     be free with lw6sys_list_free by the caller.  This list copies all
     the keys of the assoc, so it is safe to use it once the assoc is
     deleted. However the keys will of course be of little interest in
     this case.  But the program won't segfault.

     *Return value:*  the list of keys.

 -- Function: void lw6sys_assoc_map (lw6sys_assoc_t * ASSOC,
          lw6sys_assoc_callback_func_t FUNC, void * FUNC_DATA)
     ASSOC:  the assoc to work on

     FUNC:  a callback to call on each entry

     FUNC_DATA:  a pointer on some data which will be passed to the
     callback

     Executes a function on all assoc items.  The func_data parameter
     allows you to pass extra values to the function, such as a file
     handler or any variable which can not be inferred from list item
     values, and you of course do not want to make global...

     *Return value:*  void

 -- Function: void lw6sys_assoc_sort_and_map (lw6sys_assoc_t * ASSOC,
          lw6sys_assoc_callback_func_t FUNC, void * FUNC_DATA)
     ASSOC:  the assoc to work on

     FUNC:  a callback to call on each entry, may be NULL

     FUNC_DATA:  a pointer on some data which will be passed to the
     callback

     Executes a function on all assoc items, like
     `lw6sys_assoc_sort_and_map' but befor doing so, sorts all entries
     in alphabetical order.

     *Return value:*  void

 -- Function: lw6sys_assoc_t * lw6sys_assoc_dup (lw6sys_assoc_t *
          ASSOC, lw6sys_dup_func_t DUP_FUNC)
     ASSOC:  the assoc to duplicate, can be NULL

     DUP_FUNC:  the function which will be called to duplicate data

     Duplicates an assoc. All keys will be copied so that if the first
     assoc is deleted, the duplicated one is fine. Additionnaly,
     dup_func will be called with all data fields. If dup_func is NULL,
     then data values will simply be copied. This is likely to be
     usefull when data is not dynamically allocated.

     *Returned value:*  a newly allocated assoc.

 -- Function: char * lw6sys_backtrace (int SKIP)
     SKIP:  number of calls to skip

     Returns the current backtrace as a comma separated list.  This can
     typically be used for debugging purposes. Not available on some
     platforms, including mingw32, it requires backtrace_symbols to be
     defined. Note that this function calls internal string functions
     so it makes usage of the sys module in many ways, therefore should
     be used only in other modules, it can't be used for debugging of
     internal memory functions for instance. To debug those, use
     backtrace_symbols_fd directly (or maybe just gdb...). The skip
     parameter allows you to skip caller's stack, 0 will display
     everything but `lw6sys_backtrace' itself.

     *Return value:*  dynamically allocated string

 -- Function: int lw6sys_default_memory_bazooka ()
     Will set up a default memory bazooka, a slow yet convenient tool
     to track down and hopefully kill memory leaks.  Named bazooka
     after a night wasted to track down an unfoundable leak...
     BAZOOOOOOKA!!!

     *Return value:*  1 if success, 0 if failed.

 -- Function: void lw6sys_clear_memory_bazooka ()
     Clears the memory bazooka.

     *Return value:*  none.

 -- Function: int lw6sys_set_memory_bazooka_size (int SIZE)
     SIZE:  number of items (calls to malloc) to keep

     Resizes, the memory bazooka. What's this? It's an inelegant yet
     efficient tool to track down memory leak. Memory bazooka will keep
     track of every call to malloc, keeping a trace of what has been
     malloced, where it has been called (from which file, which line),
     how much memory was allocated, it will even show you what's at the
     address in a 0-terminated string-friendly fashion. Of course this
     slows down the program, so in production, you might set this to 0,
     but for debugging, a million bazooka is worth the megabytes and
     CPU cycles it wastes.

     *Return value:*  1 if success, 0 if failure.

 -- Function: int lw6sys_get_memory_bazooka_size ()
     The companion of `lw6sys_set_memory_bazooka_size'. This function
     will return how many calls to malloc can be traced. A return value
     of 0 indicates that feature is disabled.

     *Return value:*  size of the bazooka array.

 -- Function: int lw6sys_set_memory_bazooka_eraser (int STATE)
     STATE:  the state of the eraser

     Sets the memory bazooka eraser state. Note that to really work, it
     requires the memory bazooka to be "big enough".

     *Return value:*  1 if activated, 0 if not. Note that the main
     reason for it not to be activated is if the memory bazooka has
     zero size.

 -- Function: int lw6sys_get_memory_bazooka_malloc_count ()
     Provided you have always called the `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC' to allocate memory, this function will tell you
     how many times `malloc' has been called.

     *Return value:*  the number of calls to `lw6sys_malloc' or
     `lw6sys_calloc' since program was started.

 -- Function: int lw6sys_get_memory_bazooka_free_count ()
     Provided you have always called the `LW6SYS_FREE' macro to free
     memory, this function will tell you how many times `free' has been
     called.

     *Return value:*  the number of calls to `lw6sys_free' since
     program was started.

 -- Function: int lw6sys_get_memory_bazooka_malloc_current_count ()
     Provided you have always called the `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC' to allocate memory, this function will tell you
     the current number of pointer returned by `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC', currently alive on the heap.

     *Return value:*  the number of calls to `lw6sys_malloc' or
     `lw6sys_calloc' since program was started.

 -- Function: int lw6sys_get_memory_bazooka_malloc_max_count ()
     Provided you have always called the `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC' to allocate memory, this function will tell you
     the maximum of pointers returned by `malloc' that were present at
     the same time on the heap.

     *Return value:*  the number of calls to `lw6sys_malloc' or
     `lw6sys_calloc' since program was started.

 -- Function: int lw6sys_get_memory_bazooka_malloc_megabytes ()
     Provided you have always called the `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC' to allocate memory, this function will tell you
     how many bytes `malloc' has reserved.

     *Return value:*  the number of calls to `lw6sys_malloc' or
     `lw6sys_calloc' since program was started.

 -- Function: int lw6sys_get_memory_bazooka_free_megabytes ()
     Provided you have always called the `LW6SYS_FREE' macro to free
     memory, this function will tell you how many bytes `free' has
     freed.

     *Return value:*  the number of calls to `lw6sys_free' since
     program was started.

 -- Function: int lw6sys_get_memory_bazooka_malloc_current_bytes ()
     Provided you have always called the `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC' to allocate memory, this function will tell you
     the current number of bytes returned by `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC', currently alive on the heap.

     *Return value:*  the number of calls to `lw6sys_malloc' or
     `lw6sys_calloc' since program was started.

 -- Function: int lw6sys_get_memory_bazooka_malloc_max_bytes ()
     Provided you have always called the `LW6SYS_MALLOC' an
     `LW6SYS_CALLOC' to allocate memory, this function will tell you
     the maximum bytes returned by `malloc' that were present at the
     same time on the heap.

     *Return value:*  the number of calls to `lw6sys_malloc' or
     `lw6sys_calloc' since program was started.

 -- Function: int lw6sys_is_memory_bazooka_trustable ()
     Returns true if memory bazooka data are perfectly trustable, that
     is, it has never been resetted or resized.

     *Return value:*  1 if trustable, 0 if not.

 -- Function: int lw6sys_memory_bazooka_report ()
     Reports memory bazooka diagnostics on the console. Carefull, this
     one is not reentrant, call at the end of your program when all
     threads are joined.

     *Return value:*  1 if no allocated stuff left, 0 if there are
     still malloc'ed stuff

 -- Function: char * lw6sys_build_get_package_tarname ()
     Returns the name of the package. This is the `PACKAGE_TARNAME'
     constant defined by the GNU Autoconf ./configure script. While
     it's always possible to use the defined constant directly, using
     this function will return the value defined when compiling the
     binary, not the one you're using when compiling another program
     relying on Liquid War as a library.

     *Return value:*  a non-NULL string "liquidwar6", must not be freed.

 -- Function: char * lw6sys_build_get_package_name ()
     Returns the name of the package, in a user friendly form, which can
     include spaces, for instance. This is the `PACKAGE_NAME' constant
     defined by the GNU Autoconf ./configure script. While it's always
     possible to use the defined constant directly, using this function
     will return the value defined when compiling the binary, not the
     one you're using when compiling another program relying on Liquid
     War as a library.

     *Return value:*  a non-NULL string "Liquid War 6", must not be
     freed.

 -- Function: char * lw6sys_build_get_package_string ()
     Returns the description of the package. This is the
     `PACKAGE_STRING' constant defined by the GNU Autoconf ./configure
     script. It's the concatenation of `PACKAGE_NAME' and `VERSION'.
     While it's always possible to use the defined constant directly,
     using this function will return the value defined when compiling
     the binary, not the one you're using when compiling another
     program relying on Liquid War as a library.

     *Return value:*  a non-NULL string "Liquid War 6 <version>", must
     not be freed.

 -- Function: char * lw6sys_build_get_version ()
     Returns the version of the program. This is the `VERSION' constant
     defined by the GNU Autoconf ./configure script. Same as
     `PACKAGE_VERSION'.  Note that while using a function to get
     `PACKAGE_TARNAME' might seem useless, having both ways to get the
     version, that is, a function and a constant, is very usefull.
     Think, for instance, that a dynamically loaded shared library
     might need to check its own version against the version of the
     core program.

     *Return value:*  a non-NULL string, which must not be freed.

 -- Function: char * lw6sys_build_get_codename ()
     Returns the the program codename. This is the little name of the
     version. It's been decided that all LW6 releases would take the
     name of a famous general, warrior, whatever. For instance, it could
     be "Napoleon".

     *Return value:*  a non-NULL string, traditionnally the name of a
     famous general, someone which has been involved in war. Must not
     be freed (I mean, the string, not the general).

 -- Function: char * lw6sys_build_get_stamp ()
     Returns the program stamp. This is like a serial number. It's is
     not the same as the version. The version is meant to be set to
     something readable. This is just a cryptic thing, incremented at
     each ./configure or each developper's "I feel like it needs to be
     incremented". The idea is just to keep (one more...) track of
     which source code is build.  Ideally, this would be plugged to the
     source revision control system but this has some drawbacks,
     including that it would require it to modify files before
     commiting them, which is not safe, and almost impossible if you
     sign archives. One more point: this is a string. It's true the
     return value is actually a string containing the representation of
     an integer, but because all other build parameters are strings, and
     because we don't know what the future reserves, it's a string.

     *Return value:*  a non-NULL string like "42", which must not be
     freed.

 -- Function: char * lw6sys_build_get_md5sum ()
     Returns an md5 checkum which is caculated from C (.c and .h) source
     files. This is complementary with the build stamp. By default the
     stamp will be enough to check what has been compiled, but one can
     always imagine a case where Bob compiles something a little
     different than Alice, with the same stamp, incremented by 1 from a
     common source tree. They apply their own patches, for instance.
     This md5sum double-checks that two binaries have been built from
     the same sources. Note that this is not the md5 checksum of the
     generated binary. Nor does it include any information about scheme
     scripts and data.

     *Return value:*  a non-NULL string, which must not be freed.

 -- Function: char * lw6sys_build_get_copyright ()
     Returns a (very) short copyright information about the program.

     *Return value:*  a non-NULL string, single line whithout '\n' at
     the end.  Must not be freed.

 -- Function: char * lw6sys_build_get_license ()
     Returns the license for the program (GNU GPL v3 or later).

     *Return value:*  a non-NULL string, single line whithout '\n' at
     the end.  Must not be freed.

 -- Function: char * lw6sys_build_get_home_url ()
     Returns the URL of the game, its homepage.

     *Return value:*  a non-NULL string, single line whithout '\n' at
     the end.  Must not be freed.

 -- Function: char * lw6sys_build_get_bugs_url ()
     Returns the URL for bugs, the bug reports page.

     *Return value:*  a non-NULL string, single line whithout '\n' at
     the end.  Must not be freed.

 -- Function: char * lw6sys_build_get_configure_args ()
     Returns the arguments passed to the GNU Autoconf ./configure
     script when buildling the game. Very usefull to know how the
     binary was generated, that is, what kind of optimizations are
     peculiar settings it uses.

     *Return value:*  a non-NULL string, which, passed to ./configure
     again, would hopefully generate the same binary. Must not be freed.

 -- Function: char * lw6sys_build_get_gcc_version ()
     Returns __VERSION__ GCC preprocessor value, that is, the human
     readable version of the compiler.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: char * lw6sys_build_get_cflags ()
     Returns the arguments which would allow another program to use
     liquidwar6 as a library. Typically, pass this to gcc when
     compiling your sources. Basically contains "-I" switches which
     tell where the headers are.

     *Return value:*  a non-NULL string, which must not be freed.

 -- Function: char * lw6sys_build_get_ldflags ()
     Returns the arguments which would allow another program to link
     against liquidwar6. Pass this to gcc or libtool when compiling
     your program. Basically contains a "-L" option which says where
     the library is. Note that this will only allow you to link against
     the main libliquidwar6 library, but not the dynamically loaded
     modules.

     *Return value:*  a non-NULL string, which must not be freed.

 -- Function: char * lw6sys_build_get_hostname ()
     Returns the value return by the standard shell `hostname' command
     on the machine where the game has been built. Usefull to track
     binaries and know where do they come from.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: char * lw6sys_build_get_date ()
     Returns the compilation date. While this information can easily be
     obtained with the C `__DATE__' macro, having this function is
     convenient for it returns a value which is the same for the whole
     program, and does not possibly change in every file.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: char * lw6sys_build_get_time ()
     Returns the compilation date. While this information can easily be
     obtained with the C `__TIME__' macro, having this function is
     convenient for it returns a value which is the same for the whole
     program, and does not possibly change in every file.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: char * lw6sys_build_get_host_cpu ()
     Returns the CPU this program is designed for. Convenient on i386
     compatible CPUs to know which flavor (i386, i586...) the binary is
     made for.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: char * lw6sys_build_get_endianness ()
     Returns the endianness of the computer.

     *Return value:*  'little' (x86-like) or 'big' (ppc-like), as a
     string.  Must not be freed.

 -- Function: int lw6sys_build_get_pointer_size ()
     Returns the system pointer size, in bytes.

     *Return value:*  4 for 32-bit, 8 for 64-bit.

 -- Function: int lw6sys_build_is_x86 ()
     Tells wether CPU belongs to x86 family or not.

     *Return value:*  1 if x86, 0 if not

 -- Function: char * lw6sys_build_get_host_os ()
     Returns the OS this program is designed for. Usefull for bug
     reports.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: int lw6sys_build_is_gnu ()
     Tells wether the program was compiled for a GNU system, or not.

     *Return value:*  1 if compiled on windows, 0 if not

 -- Function: int lw6sys_build_is_unix ()
     Tells wether the program was compiled for a UNIX system, or not.

     *Return value:*  1 if compiled on windows, 0 if not

 -- Function: int lw6sys_build_is_ms_windows ()
     Tells wether the program was compiled for Microsoft Windows, or
     not.

     *Return value:*  1 if compiled on windows, 0 if not

 -- Function: int lw6sys_build_is_mac_os_x ()
     Tells wether the program was compiled for Mac OS X, or not.

     *Return value:*  1 if compiled on OS X, 0 if not

 -- Function: int lw6sys_build_is_gp2x ()
     Tells wether the program was compiled for GP2X, or not.

     *Return value:*  1 if compiled on OS X, 0 if not

 -- Function: char * lw6sys_build_get_top_srcdir ()
     Returns the top source directory, when the game was built. This can
     seem useless and non relevant on the end-user's machine, but...
     it's a must-have for developpers and packagers. Without this,
     binaries would never find their associated data, especially when
     building outside the source tree. Or, testing the game would be
     impossible without installing it, given the fact that most of the
     code is in scripts that are stored in /usr/local by default, this
     would be painfull. So this function is here to help finding data
     within the source tree when the game is not installed yet. Note
     that the function is rather clever, since it will automatically
     try to remove useless '../' sequences at the beginning of a
     possibly relative path.

     *Return value:*  a non-NULL string, must not be freed.

 -- Function: char * lw6sys_build_get_prefix ()
     Returns the `prefix' value as given to the GNU Autoconf
     ./configure script.  Used to deduce the path to other directories
     and files.

     *Return value:*  a non-NULL string, "/usr/local" by default.  Must
     not be freed.

 -- Function: char * lw6sys_build_get_datadir ()
     Returns the `datadir' value defined by the GNU Autoconf
     ./configure script.  This is not the value which can be overriden
     by the Liquid War 6 specific.  "-data-dir" option. `datadir' is
     usually something like "/usr/local/share" while the actual Liquid
     War 6 defined data dir is a more profound path which includes the
     name of the package, its version, and so on.

     *Return value:*  a non-NULL string, "/usr/local/share" by default.
     Must not be freed.

 -- Function: char * lw6sys_build_get_libdir ()
     Returns the `libdir' value defined by the GNU Autoconf ./configure
     script.  This is not the value which can be overriden by the
     Liquid War 6 specific.  "-mod-dir" option. `libdir' is usually
     something like "/usr/local/lib" while the actual Liquid War 6
     defined module dir is a more profound path which includes the name
     of the package, its version, and so on.

     *Return value:*  a non-NULL string, "/usr/local/lib" by default.
     Must not be freed.

 -- Function: char * lw6sys_build_get_includedir ()
     Returns the `includedir' value defined by the GNU Autoconf
     ./configure script.  As for other options, it's interesting to
     have this value, this enables the program to inform people who
     want to hack the game of the place headers are supposed to be
     installed.

     *Return value:*  a non-NULL string, "/usr/local/include" by
     default.  Must not be freed.

 -- Function: char * lw6sys_build_get_localedir ()
     Returns the `localedir' value defined by the GNU Autoconf
     ./configure script.  Used as an argument for gettext / libintl
     functions.

     *Return value:*  a non-NULL string, "/usr/local/share/locale" by
     default.  Must not be freed.

 -- Function: char * lw6sys_build_get_docdir ()
     Returns the `docdir' value defined by the GNU Autoconf ./configure
     script.  Used to write consistent XML file headers.

     *Return value:*  a non-NULL string,
     "/usr/local/share/doc/liquidwar6" by default.  Must not be freed.

 -- Function: char * lw6sys_build_get_enable_console ()
     Tells wether console is enabled or not.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_gtk ()
     Tells wether gtk is enabled or not.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_mod_gl ()
     Tells wether the graphical mod-gl backend was compiled.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_mod_csound ()
     Tells wether the audio mod-csound backend was compiled.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_mod_ogg ()
     Tells wether the audio mod-ogg backend was compiled.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_mod_http ()
     Tells wether the network mod-http backend was compiled.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_openmp ()
     Tells wether the game was compiled with openmp support.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_optimize ()
     Tells wether the game was compiled in optimize mode.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_allinone ()
     Tells wether the game was compiled in allinone mode.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_fullstatic ()
     Tells wether the game was compiled in fullstatic mode.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_paranoid ()
     Tells wether the game was compiled with paranoid memory management.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_gprof ()
     Tells wether the game was compiled with suitable informations for
     gprof.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_instrument ()
     Tells wether the game was compiled with the
     '-finstrument-fonctions' GCC flag.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_profiler ()
     Tells wether the game was compiled for later use with Google
     Profiler support.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_gcov ()
     Tells wether the game was compiled with suitable informations for
     gcov.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: char * lw6sys_build_get_enable_valgrind ()
     Tells wether the game was compiled for later use with valgrind.

     *Return value:*  "yes" or "no", must no be freed.

 -- Function: int lw6sys_build_get_bin_id ()
     Returns the internal bin-id value, which does not mean anything
     but changes at each build.

     *Return value:*  an integer

 -- Function: void lw6sys_build_log_all ()
     Dumps in the log file the whole program pedigree, host, modules,
     that is, what are the values of all the build options.  Usefull
     for bug reports.

     *Return value:*  none.

 -- Function: u_int32_t lw6sys_checksum (unsigned char * DATA, int LEN)
     DATA:  the data to process

     LEN:  the length, in bytes, of the data to process

     Creates a checksum from a byte array. This could be mapped on any
     standard CRC-32 and/or MD5 algorithm, but licence issues for those
     are such a headache that for the sake of simplicity, it's wrapped
     here. In LW6 context, we do not really really fear any attack for
     these checksums are used internally to track bugs and check, for
     instance, that two game states are actually the same on two
     distant computers in a network game.  Data encryption and security
     of network links is another debate.  Additionnally, this function
     returns an integer, easier to handle in standard C than any
     malloc'ed stuff.

     *Return value:*  the checksum, as an integer.

 -- Function: u_int32_t lw6sys_checksum_str (char * VALUE)
     VALUE:  the string to process

     Creates a checksum from a string. This is a convenience function
     to save the programmer the hassle of calling strlen before any
     checksum calculation.

     *Return value:*  the checksum, as an integer.

 -- Function: u_int32_t lw6sys_checksum_int32 (u_int32_t VALUE)
     VALUE:  the integer to process

     Creates a checksum from an integer. This is a convenience function
     to save the programmer the hassle of passing a pointer to the
     integer with the size of it each time there's a checksum to do.
     Additionnally, with this one you can pass an int8 or an int16, and
     function will work just the same indenpendantly of endianness.

     *Return value:*  the checksum, as an integer.

 -- Function: u_int32_t lw6sys_checksum_int64 (u_int64_t VALUE)
     VALUE:  the integer to process

     Creates a checksum from an integer. This is a convenience function
     to save the programmer the hassle of passing a pointer to the
     integer with the size of it each time there's a checksum to do.
     This function handles 64-bit long long integers..

     *Return value:*  the checksum, as an integer.

 -- Function: u_int32_t lw6sys_checksum_whd (lw6sys_whd_t * WHD)
     WHD:  a pointer to the wh struct to be processed

     Creates a checksum from the given structure. Convenience function
     to save the hassle of passing a pointer to and the size of the
     `lw6sys_wh_t' struct each time, knowing that there are very often
     checksums calculated on it. Also avoids endianess issues.

     *Return value:*  the checksum, as an integer.

 -- Function: u_int32_t lw6sys_checksum_xyz (lw6sys_xyz_t * XYZ)
     XYZ:  a pointer to the xy struct to be processed

     Creates a checksum from the given structure. Convenience function
     to save the hassle of passing a pointer to and the size of the
     `lw6sys_xy_t' struct each time, knowing that there are very often
     checksums calculated on it. Also avoids endianess issues.

     *Return value:*  the checksum, as an integer.

 -- Function: void lw6sys_checksum_update (u_int32_t * CHECKSUM,
          unsigned char * DATA, int LEN)
     CHECKSUM:  a pointer to the previous checksum

     DATA:  the data to process

     LEN:  the length, in bytes, of the data to process

     Creates a checksum from the given data. The difference with
     `lw6sys_checksum' is that this one updates an existing checksum,
     thus enabling the programmer to call it sequentially and get a
     global checksum on different sources.

     *Return value:*  none.

 -- Function: void lw6sys_checksum_update_str (u_int32_t * CHECKSUM,
          char * VALUE)
     CHECKSUM:  a pointer to the previous checksum

     VALUE:  the string to process

     Creates a checksum from the given string. The difference with
     `lw6sys_checksum_str' is that this one updates an existing
     checksum, thus enabling the programmer to call it sequentially and
     get a global checksum on different sources.

     *Return value:*  none.

 -- Function: void lw6sys_checksum_update_int32 (u_int32_t * CHECKSUM,
          int32_t VALUE)
     CHECKSUM:  a pointer to the previous checksum

     VALUE:  the integer to process

     Creates a checksum from the given integer. The difference with
     `lw6sys_checksum_int32' is that this one updates an existing
     checksum, thus enabling the programmer to call it sequentially and
     get a global checksum on different sources.

     *Return value:*  none.

 -- Function: void lw6sys_checksum_update_int64 (u_int32_t * CHECKSUM,
          int64_t VALUE)
     CHECKSUM:  a pointer to the previous checksum

     VALUE:  the integer to process

     Creates a checksum from the given integer. The difference with
     `lw6sys_checksum_int64' is that this one updates an existing
     checksum, thus enabling the programmer to call it sequentially and
     get a global checksum on different sources.

     *Return value:*  none.

 -- Function: void lw6sys_checksum_update_whd (u_int32_t * CHECKSUM,
          lw6sys_whd_t * WHD)
     CHECKSUM:  a pointer to the previous checksum

     WHD:  a pointer to the wh struct to be processed

     Creates a checksum from the given structure. The difference with
     `lw6sys_checksum_whd' is that this one updates an existing
     checksum, thus enabling the programmer to call it sequentially and
     get a global checksum on different sources.

     *Return value:*  none.

 -- Function: void lw6sys_checksum_update_xyz (u_int32_t * CHECKSUM,
          lw6sys_xyz_t * XYZ)
     CHECKSUM:  a pointer to the previous checksum

     XYZ:  a pointer to the xy struct to be processed

     Creates a checksum from the given structure. The difference with
     `lw6sys_checksum_xyz' is that this one updates an existing
     checksum, thus enabling the programmer to call it sequentially and
     get a global checksum on different sources.

     *Return value:*  none.

 -- Function: u_int8_t lw6sys_color_float2char (float F)
     F:  the value to convert, from 0.0f to 1.0f

     Converts a floating point value between 0.0f and 1.0f to its 8-bit
     equivalent between 0 and 255. Usefull in color conversion.

     *Return value:*  an integer between 0 and 255.

 -- Function: float lw6sys_color_char2float (u_int8_t I)
     I:  the value to convert, from 0 to 255

     Converts an 8-bit value between 0 and 255 to its floating-point
     equivalent between 0.0f and 1.0f. Usefull in color conversion.

     *Return value:*  a float between 0.0f and 1.0f.

 -- Function: lw6sys_color_8_t lw6sys_color_f_to_8 (lw6sys_color_f_t *
          COLOR_F)
     COLOR_F:  the color to convert

     Converts a color from floating point format to the integer "0 to
     255" common format.  All fields (RGBA) are converted.

     *Return value:*  the color in 8-bit format.

 -- Function: void lw6sys_color_8_to_f (lw6sys_color_f_t * COLOR_F,
          lw6sys_color_8_t COLOR_8)
     COLOR_F:  the converted color (pointer must point to writable
     memory)

     COLOR_8:  the color to convert

     Converts a color from the integer "0 to 255" common format to
     floating point format.  All fields (RGBA) are converted.

     *Return value:*  none.

 -- Function: u_int32_t lw6sys_color_f_to_i (lw6sys_color_f_t * COLOR_F)
     COLOR_F:  the color to convert

     Converts a color from floating point format to a single integer,
     where all fields (RGBA) are serialized. This serialization is
     endianess independant. Could be used directly by low-level
     libraries such as SDL.

     *Return value:*  the color serialized in an integer.

 -- Function: u_int32_t lw6sys_color_8_to_i (lw6sys_color_8_t COLOR_8)
     COLOR_8:  the color to convert

     Converts a color from common "0 to 255" structured format to a
     single integer, where all fields (RGBA) are serialized. This
     serialization is endianess independant. Could be used directly by
     low-level libraries such as SDL.

     *Return value:*  the color serialized in an integer.

 -- Function: void lw6sys_color_i_to_f (lw6sys_color_f_t * COLOR_F,
          u_int32_t COLOR_I)
     COLOR_F:  the converted color (point must point to writable memory)

     COLOR_I:  the color to convert

     Converts a color from a serialized integer format to a floating
     point structure.

     *Return value:*  none.

 -- Function: lw6sys_color_8_t lw6sys_color_i_to_8 (u_int32_t COLOR_I)
     COLOR_I:  the color to convert

     Converts a color from a serialized integer format to a "0 to 255"
     based structure.

     *Return value:*  the converted color (structure).

 -- Function: lw6sys_color_8_t lw6sys_color_a_to_8 (char * ASCII)
     ASCII:  the color to convert

     Converts a color from a human readable string to a "0 to 255"
     based structure. The string must be of the form "#RRGGBBAA" or
     "#RGB", in a general manner any HTML-valid value should work.

     *Return value:*  the converted color (structure).

 -- Function: void lw6sys_color_a_to_f (lw6sys_color_f_t * COLOR_F,
          char * ASCII)
     COLOR_F:  the converted color (pointer must point to writable
     memory)

     ASCII:  the color to convert

     Converts a color from a human readable string to a float based
     structure. The string must be of the form "#RRGGBBAA" or "#RGB",
     in a general manner any HTML-valid value should work.

     *Return value:*  none.

 -- Function: char * lw6sys_color_8_to_a (lw6sys_color_8_t COLOR_8)
     COLOR_8:  the color to convert

     Converts a color from a "0 - 255" integer based structure to its
     readable form "#RRGGBBAA". If alpha is 255 (0xFF), that is, if
     it's opaque, then the "AA" part is ommitted.

     *Return value:*  a newly allocated string.

 -- Function: void lw6sys_color_rgb_to_hsv (lw6sys_color_hsv_t *
          COLOR_HSV, lw6sys_color_8_t COLOR_8)
     COLOR_HSV:  the target color, in HSV format

     COLOR_8:  the source color, in RGB 256 format

     Converts from HSV to RGB. Usefull for color manipulation, since
     most colors are stored in RGB but HSV is convenient for
     transformation. Alpha layer is kept as is.

     *Return value:*  none.

 -- Function: lw6sys_color_8_t lw6sys_color_hsv_to_rgb
          (lw6sys_color_hsv_t * COLOR_HSV)
     COLOR_HSV:  the source color, in HSV format

     Converts from RGB to HSV. Usefull to make colors transformed in HSV
     format usable again by all display routines, which consume RGB.
     Alpha layer is kept as is.

     *Return value:*  the RGB color.

 -- Function: void lw6sys_color_hsv_invert (lw6sys_color_hsv_t *
          COLOR_HSV, int INVERT_H, int INVERT_S, int INVERT_V)
     COLOR_HSV:  the source color, in HSV format

     INVERT_H:  wether to invert the hue

     INVERT_S:  wether to invert the saturation

     INVERT_V:  wether to invert the value

     Inverts an HSV color, calling it with 1,0,0 the color will become
     a color with opposite hue but same saturation and same value.

     *Return value:*  none.

 -- Function: lw6sys_color_8_t lw6sys_color_average (int SIZE,
          lw6sys_color_8_t * COLORS)
     SIZE:  number of the color array (number of items)

     COLORS:  the colors to compute

     Tries to find out the "average" color from an array of colors.
     The algorithm is far from perfect, but should output a color which
     reflects the colors passed in.

     *Return value:*  the (inexact) average color.

 -- Function: lw6sys_color_8_t lw6sys_color_ponderate (lw6sys_color_8_t
          COLOR1, lw6sys_color_8_t COLOR2, float COEFF)
     COLOR1:  first color

     COLOR2:  second color

     COEFF:  the ponderation coefficient

     Tries to find a color between the two colors passed as an argument.
     The coefficient can be used, to set the relative weight of each
     color.  Using 0 will return color1, 1 will return color2 and 0.5
     will make an average between the two colors. Any value between 0
     and 1 can be used.

     *Return value:*  the (inexact) ponderated color.

 -- Function: float lw6sys_color_distance (lw6sys_color_8_t COLOR1,
          lw6sys_color_8_t COLOR2)
     COLOR1:  first color

     COLOR2:  second color

     Calculates the distance between two colors. The unit is arbitrary,
     a big value means "colors are different", 0 means they are the
     same. A distance of 1 corresponds to colors which have barely
     anything in common, but the result can still be greater than 1.
     Alpha layer is not taken in account.

     *Return value:*  the distance.

 -- Function: int lw6sys_color_is_same (lw6sys_color_8_t COLOR1,
          lw6sys_color_8_t COLOR2)
     COLOR1:  the first color to compare

     COLOR2:  the second color to compare

     Compares two colors.

     *Return value:*  1 if they are the same, 0 if not.

 -- Function: void lw6sys_color_8_solid (lw6sys_color_8_t * COLOR)
     color: the color to modify

     Make a color "solid" that is make it not transparent at all.

     *Return value:*  none.

 -- Function: void lw6sys_color_f_solid (lw6sys_color_f_t * COLOR)
     color: the color to modify

     Make a color "solid" that is make it not transparent at all.

     *Return value:*  none.

 -- Function: int lw6sys_atoi (char * STR)
     STR:  string to convert

     Just a plain wrapper on `atoi', it's here for API consistency.
     Will check if str is NULL (and in this case return 0).

     *Return value:*  an integer.

 -- Function: int64_t lw6sys_atoll (char * STR)
     STR:  string to convert

     Wrapper on `atoll', it's here for API consistency.  Will check if
     str is NULL (and in this case return 0).

     *Return value:*  a 64-bit integer.

 -- Function: int lw6sys_atob (char * STR)
     STR:  string to convert

     Transform a string into a boolean value. Accepts "0"/"1" in input,
     but also y/n, yes/no, true/false, on/off.  Will check if str is
     NULL (and in this case return 0).

     *Return value:*  an integer, 0 or 1.

 -- Function: float lw6sys_atof (char * STR)
     STR:  string to convert

     A wrapper on `atof', makes sure the locale used is C (default) and
     won't change the decimal separator whatsoever. Usefull for
     serialization for instance.  Will check if str is NULL (and in
     this case return 0).

     *Return value:*  a float.

 -- Function: char * lw6sys_itoa (int VALUE)
     VALUE:  the integer to convert

     Converts an integer to a string, the advantage of this function is
     it allocates memory, and does the dirty job.

     *Return value:*  a newly allocated pointer, must be freed, may be
     NULL.

 -- Function: char * lw6sys_lltoa (int64_t VALUE)
     VALUE:  the integer to convert

     Converts a 64-bit integer to a string, the advantage of this
     function is it allocates memory, and does the dirty job.

     *Return value:*  a newly allocated pointer, must be freed, may be
     NULL.

 -- Function: char * lw6sys_btoa (int VALUE)
     VALUE:  the boolean to convert

     Converts a boolean to a string, the advantage of this function is
     it allocates memory, and does the dirty job.

     *Return value:*  a newly allocated pointer, must be freed, may be
     NULL.

 -- Function: char * lw6sys_ftoa (float VALUE)
     VALUE:  the float to convert

     Converts a float to a string, the advantage of this function is it
     allocates memory, and does the dirty job.

     *Return value:*  a newly allocated pointer, must be freed, may be
     NULL.

 -- Function: char * lw6sys_daemon_pid_file (int ARGC, char * [] ARGV)
     ARGC:  argc as passed to `main'

     ARGV:  argv as passed to `main'

     Get the default pid file, used to lock daemon and avoid 2 daemons
     running at the same time.

     *Return value:*  newly allocated string

 -- Function: int lw6sys_daemon_start (char * PID_FILE)
     PID_FILE:  the pid file used for the daemon

     Calls `fork'() internally to put the process in the program, make
     it a daemon. Note this won't work on all platforms, for instance
     it won't work on MS-Windows but this is rarely an issue as
     MS-Windows users are rarely concerned with detaching a program
     from a tty. Note that this isn't a wrapper on `fork'(), the return
     value is different, 1 on success, 0 if failed.

     *Return value:*  a process ID on success, 0 on failure.

 -- Function: int lw6sys_daemon_stop (char * PID_FILE)
     PID_FILE:  the pid file used for the daemon

     Removes the daemon pid file. Can be called safely even if daemon
     wasn't started.

     *Return value:*  1 on success, 0 on failure

 -- Function: int lw6sys_debug_get ()
     Gets the debug mode.

 -- Function: void lw6sys_debug_set (int MODE)
     MODE:  the debug mode, 1 if set, 0 if not.

     Sets the debug mode.

 -- Function: void lw6sys_dump_clear (char * USER_DIR)
     USER_DIR:  the user directory, where user can write data.

     Clears the dump file. That is, resets it to a "0 byte" file.

     *Return value:*  none.

 -- Function: int lw6sys_dump (char * USER_DIR, char * CONTENT)
     USER_DIR:  the user directory, where user can write data.

     CONTENT:  the content to be written in the dump file.

     Writes the dump file onto the disk. The dump is used for special
     error messages which do not really fit in the standard log, and
     require a special treatment. In pratice, it's used to log fatal
     script (Guile) errors.

     *Return value:*  1 if success, 0 if failure.

 -- Function: char lw6sys_env_separator_char ()
     Gets the ENV separator, that is, for instance, the character used
     to separate paths in environment variables. Typically, this would
     be ":" on GNU and ";" on Microsft platforms.

     *Return value:*  the ascii character code.

 -- Function: char * lw6sys_env_separator_str ()
     Gets the ENV separator, that is, for instance, the character used
     to separate paths in environment variables. Typically, this would
     be ":" on GNU and ";" on Microsft platforms.

     *Return value:*  a pointer to a single 0-terminated character
     string which contains the character. Must not be freed.

 -- Function: char * lw6sys_env_concat (char * VALUE1, char * VALUE2)
     VALUE1:  the left part to be concatenated

     VALUE2:  the right part to be concatenated

     Concatenates two values and puts the ENV separator, as returned by
     `lw6sys_env_separator_char' between them.

     *Return value:*  the concatenated string, must be freed.

 -- Function: int lw6sys_env_exists_prefixed (char * KEYWORD)
     KEYWORD:  the keyword to be searched in the environment variables.

     Searches environment variables for the given keyword. The keyword
     will be fixed so that all dashes "-" characters are replaced by
     underscores "_" characters. Characters will be changed to
     uppercase. Any non alphanumeric character will be replaced by "_".
     Finally, an "LW6_" prefix will be added. That is to say, calling
     this function with "my-param" will search for the "LW6_MY_PARAM"
     environment variable.

     *Return value:*  1 if the environment variable exists, 0 if not.

 -- Function: char * lw6sys_getenv (char * KEY)
     KEY:  the environment variable to get.

     Searches environment variables for the given value.  This is a
     wrapper over the standard C getenv, the difference is it will
     return a dynamically allocated pointer, and on some platforms will
     query specific OS functions.

     *Return value:*  the value for the given keyword. May be NULL.
     Must be freed.

 -- Function: char * lw6sys_getenv_prefixed (char * KEYWORD)
     KEYWORD:  the keyword to be searched in the environment variables.

     Searches environment variables for the given value. The keyword
     will be fixed so that all dashes "-" characters are replaced by
     underscores "_" characters. Characters will be changed to
     uppercase. Any non alphanumeric character will be replaced by "_".
     Finally, an "LW6_" prefix will be added. That is to say, calling
     this function with "my-param" will search for the "LW6_MY_PARAM"
     environment variable.

     *Return value:*  the value for the given keyword. May be NULL.
     Must be freed.

 -- Function: int lw6sys_setenv (char * KEYWORD, char * VALUE)
     KEYWORD:  the environment variable to set

     VALUE:  the value of the environment variable to set

     Sets the environment variable to a given value. If value is NULL,
     variable is unset. Note that unlike lw6sys_getenv_prefixed, this
     function does not transform the keyword into "LW6_..."  before
     setting the value, so it's your responsability to call
     "lw6sys_keyword_as_env" if needed.

     *Return value:*  1 if success, 0 if failed

 -- Function: int lw6sys_setenv_prefixed (char * KEYWORD, char * VALUE)
     KEYWORD:  the keyword to be searched in the environment variables.

     VALUE:  the value of the environment variable to set

     Sets the environment variable to the given value. The keyword will
     be fixed so that all dashes "-" characters are replaced by
     underscores "_" characters. Characters will be changed to
     uppercase. Any non alphanumeric character will be replaced by "_".
     Finally, an "LW6_" prefix will be added. That is to say, calling
     this function with "my-param" will set the "LW6_MY_PARAM"
     environment variable.

     *Return value:*  1 if success, 0 if failure

 -- Function: lw6sys_list_t * lw6sys_env_split (char * VALUE)
     VALUE:  the value, a list of item separated by... the separator

     Splits the environment value into a list of strings containing
     each element. All strings are dynamically allocated, but they will
     be freed automatically when the list is freed.

     *Return value:*  a list of strings.

 -- Function: char * lw6sys_get_home ()
     Gets the home directory of the user. Used internally to calculate
     the `user'-dir value. Note that Liquid War 6, by default, never
     stores files under '$HOME', instead it put things in
     '$HOME/.liquidwar6', that is 'user-dir'. If the environment
     variable 'HOME' is not set, will return '.'.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_get_username ()
     Gets the name of the current user. Difference with the standard
     function `getlogin' is that this function will returned a
     dynamically allocated pointer, and provide a default value if it's
     undefined.  Also, if will look at the content of the 'LOGNAME'
     environment variable if needed, and will even provide a default
     value.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_get_hostname ()
     Gets the name of the current host. The name of the computer.
     Might not work perfectly, this function is just used to provide
     default values for player names and such things.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_escape_http_uri (char * SRC)
     SRC:  the string to escape

     Transforms a string so that it does not contain any non-valid URL
     chars, it will mostly convert chars over 128 into their XY form
     where XY is the hexadecimal code. Note that this function is non
     really standard compliant for it won't encode '%' but keep it the
     same. This is to allow using it several times on the same string
     and avoid double-triple encoding of '%'. In practice it's not
     recommended to have public_url for nodes with '%' in them, and the
     program will never generate such url when guessing urls.

     *Return value:*  newly allocated string.

 -- Function: char * lw6sys_escape_html_attribute (char * SRC)
     SRC:  the string to escape

     Transforms a string so that it can fit in a html field, this is
     typically for alt="" or title="" fields so it will convert " into
     `quot';.

     *Return value:*  newly allocated string.

 -- Function: char * lw6sys_escape_sql_value (char * SRC)
     SRC:  the string to escape

     Transforms a string so that it can fit as an SQL parameter, it
     will get rid URL chars, it will mostly convert chars over 128 into
     their XY form where XY is the hexadecimal code.

     *Return value:*  newly allocated string.

 -- Function: char * lw6sys_exec_find_myself (int ARGC, char * [] ARGV)
     ARGC:  number of args as passed to main

     ARGV:  array of args as passed to main

     Finds the path of the program currently run, this is typically to
     pass it to `lw6sys_exec_again' and run it again.

     *Return value:*  the path (newly allocated string).

 -- Function: int lw6sys_is_executed_again (int ARGC, char * [] ARGV)
     ARGC:  number of args as passed to main

     ARGV:  array of args as passed to main

     Tells wether the program is already executed by itself by
     `lw6sys_exec_again' function. Based on environment and command
     switches.

     *Return value:*  1 if executed again, 0 if not.

 -- Function: int lw6sys_exec_again (int ARGC, char * [] ARGV)
     ARGC:  number of args as passed to main

     ARGV:  array of args as passed to main

     Runs the program from itsef, that is fires a new program (the same
     running) and ends up the current one. This is used to fix some
     environment variable issues. If LW6_EXECUTED_AGAIN (environment
     variable) is set, will not run the program so this is not really
     like `exec' as in the C standard library, this function will
     actually return and be successfull even if no other process was
     started. It's just designed to bootstrap/launch the process once.

     *Return value:*  1 on success, 0 on failure (always fail)

 -- Function: int lw6sys_exec_restart (int ARGC, char * [] ARGV)
     ARGC:  number of args as passed to main

     ARGV:  array of args as passed to main

     Restart the program with exactly the same arguments it was given
     the first time.

     *Return value:*  1 on success, 0 on failure (always fail)

 -- Function: int lw6sys_clear_file (char * FILENAME)
     FILENAME:  absolute or relative filename

     Clears a file, that is, make it a 0 byte file, empty, ready to be
     filled if needed. If this function is called successfully, program
     can reasonnably assume file will be writable during its execution.

     *Return value:*  1 if success, 0 if failure.

 -- Function: char * lw6sys_read_file_content (char * FILENAME)
     FILENAME:  absolute or relative filename

     Reads the content of a file, and returns it as a string.  Note
     that content might or might not be ascii or binary, the function
     will however put a tailing 0 character at the end so that
     low-level standard C functions do not segfault when used with the
     returned value.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: void * lw6sys_read_file_content_bin (int * FILESIZE, char
          * FILENAME)
     FILESIZE:  will contain the file size, in bytes

     FILENAME:  absolute or relative filename

     Reads the content of a file, and returns it as a binary buffer.
     Even if not ascii or binary, the function will however put a
     tailing 0 character at the end so that low-level standard C
     functions do not segfault when used with the returned value. This
     0 character is not included in `filesize' so if there are 4 bytes
     in the file the 5 bytes will be allocated, this is just for string
     functions not to explode if called by accident. The `filesize' can
     be NULL, in that case function is just like the
     `lw6sys_read_file_content' function.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: int lw6sys_write_file_content (char * FILENAME, char *
          CONTENT)
     FILENAME:  absolute or relative filename

     CONTENT:  the content to be written.

     Writes the content into the file. Content is assumed to be a
     string, function will segfault if it's not correctly 0 terminated
     as in C string convention. So this function will not allow you to
     write down arbitrary binary data, however LW6 uses mostly text
     files to store information, and opaque binary data usage is not
     recommended.

 -- Function: lw6sys_hash_t * lw6sys_hash_new (lw6sys_free_func_t
          FREE_FUNC, int SIZE)
     FREE_FUNC:  optional callback used to free memory when stored date
     is a pointer. Can be NULL when one stores non dynamically
     allocated data, such as an integer or a static array.

     SIZE:  the estimated size of the hash table. Note that this is an
     estimation only. You could theorically fit 1000000 objects in a
     3-sized hash. Problem -> this is inefficient, you'd better use an
     assoc or a bigger hash. If you store 3 elements in a 1000000-sized
     hash, you'll waste memory. It might be wise to use a prime number
     as the estimated size. 421 is prime ;)

     Creates an empty hash. There's a difference between NULL and an
     empty hash.

     *Return value:*  a pointer to the newly allocated hash table.
     Must be freed with `lw6sys_hash_free'.

 -- Function: void lw6sys_hash_free (lw6sys_hash_t * HASH)
     HASH:  the hash to be freed.

     The function will cascade  delete all elements, using (if not
     NULL...)  the callback passed when first creating the hash.

     *Return value:*  void

 -- Function: int lw6sys_hash_has_key (lw6sys_hash_t * HASH, char * KEY)
     HASH:  the hash to test

     KEY:  the key to search

     Not a very fast function, since on a "big" hash, strcmp will be
     called internally until the key is found.

     *Return value:*  non-zero if there's an entry with the
     corresponding key.

 -- Function: void * lw6sys_hash_get (lw6sys_hash_t * HASH, char * KEY)
     HASH:  the hash to query

     KEY:  the key of which we want the value

     *Return value:*  a void pointer to the data contained in the hash.
     Note that the pointer on the actual data is returned, that is, if
     it's static data, you must not try to free it... As long as memory
     management is concerned, destroying the hash will actually free
     the data if needed.

 -- Function: void lw6sys_hash_set (lw6sys_hash_t * HASH, char * KEY,
          void * VALUE)
     HASH:  the hash to modify

     KEY:  the key we want to updated

     VALUE:  the new value

     Sets a value in a hash table. The key pointer need not be
     persistent, it can be freed after affectation. In fact a new
     string will be created internally. This is not true for the value,
     it's hard to find way to copy "any object".  So if you want a hash
     table of strings, key can disappear after calling this function,
     but not value. The function passed as free_func when creating the
     hash will be used to free stuff whenever needed (unset or free).

     *Return value:*  void

 -- Function: void lw6sys_hash_unset (lw6sys_hash_t * HASH, char * KEY)
     HASH:  the hash concerned

     KEY:  the key to unset

     Clears an entry in a hash table. The callback passed when creating
     the hash will be called if needed, to free the data automatically.

     *Return value:*  void

 -- Function: lw6sys_list_t * lw6sys_hash_keys (lw6sys_hash_t * HASH)
     HASH:  the hash to work on

     Returns a list containing all the keys of the hash. The list must
     be free with lw6sys_list_free by the caller.  This list copies all
     the keys of the hash, so it is safe to use it once the hash is
     deleted. However the keys will of course be of little interest in
     this case.  But the program won't segfault.

     *Return value:*  the list of keys.

 -- Function: void lw6sys_hash_map (lw6sys_hash_t * HASH,
          lw6sys_assoc_callback_func_t FUNC, void * FUNC_DATA)
     HASH:  the hash to work on

     FUNC:  a callback to call on each entry

     FUNC_DATA:  a pointer on some data which will be passed to the
     callback

     Executes a function on all hash items.  The func_data parameter
     allows you to pass extra values to the function, such as a file
     handler or any variable which can not be inferred from list item
     values, and you of course do not want to make global...

     *Return value:*  void

 -- Function: void lw6sys_hash_sort_and_map (lw6sys_hash_t * HASH,
          lw6sys_assoc_callback_func_t FUNC, void * FUNC_DATA)
     HASH:  the hash to work on

     FUNC:  a callback to call on each entry, may be NULL

     FUNC_DATA:  a pointer on some data which will be passed to the
     callback

     Executes a function on all hash items, like
     `lw6sys_hash_sort_and_map' but befor doing so, sorts all entries
     in alphabetical order.

     *Return value:*  void

 -- Function: lw6sys_hash_t * lw6sys_hash_dup (lw6sys_hash_t * HASH,
          lw6sys_dup_func_t DUP_FUNC)
     HASH:  the hash to duplicate, can be NULL

     DUP_FUNC:  the function which will be called to duplicate data

     Duplicates an hash. All keys will be copied so that if the first
     hash is deleted, the duplicated one is fine. Additionnaly, dup_func
     will be called with all data fields. If dup_func is NULL, then data
     values will simply be copied. This is likely to be usefull when
     data is not dynamically allocated.

     *Returned value:*  a newly allocated hash.

 -- Function: lw6sys_hexa_serializer_t * lw6sys_hexa_serializer_new
          (char * HEXA_STRING)
     HEXA_STRING:  an initialization string, can be NULL.

     Creates an hexa serializer object. It can be initialized or not,
     if an initialization string is provided it must of course be valid
     hexadecimal ascii code, and all serialized content will simply be
     appended to it.

     *Return value:*  a newly allocated object.

 -- Function: void lw6sys_hexa_serializer_free
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER)
     HEXA_SERIALIZER:  an hexa serializer object

     Frees an hexa serializer object.

     *Return value:*  none.

 -- Function: void lw6sys_hexa_serializer_rewind
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER)
     HEXA_SERIALIZER:  an hexa serializer object

     Rewinds the serializer pointer, that is, make it point to start.
     Usefull before calling pop functions, when one wants to be sure to
     get the first object.

     *Return value:*  none.

 -- Function: int lw6sys_hexa_serializer_eof (lw6sys_hexa_serializer_t
          * HEXA_SERIALIZER)
     HEXA_SERIALIZER:  an hexa serializer object

     Tests wether we're at EOF. Usefull when one wants to know if
     there's still some data or if all objects have been correctly
     popped.

     *Return value:*  1 if at end of file, 0 if not.

 -- Function: char * lw6sys_hexa_serializer_as_string
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER)
     HEXA_SERIALIZER:  an hexa serializer object

     Exports the current content of the serializer as a string.  String
     can then safely be sent on the network, for instance.  String is
     copied from internal value, so it's safe to use it after
     serializer has been freed or modified.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: int lw6sys_hexa_serializer_push_int64
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int64_t VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a 64 bit integer in the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_int32
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int32_t VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a 32 bit integer in the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_int16
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int16_t VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a 16 bit integer in the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_int8
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int8_t VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes an 8 bit integer in the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_float
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, float VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a floating point value in the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_str
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, char * VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a string in the serializer object. Note that the string is
     not directly copied in the serializer, instead all its characters
     are converted to their ASCII equivalent, then appended.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_xyz
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, lw6sys_xyz_t
          VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a lw6sys_xyz_t structure in the serializer object.  Calling
     this avoids calling push for 2 integers separately.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_whd
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, lw6sys_whd_t
          VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a lw6sys_whd_t structure in the serializer object.  Calling
     this avoids calling push for 2 integers separately.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_push_color
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, lw6sys_color_8_t
          VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to push

     Pushes a color structure in the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_int64
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int64_t * VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a 64 bit integer from the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_int32
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int32_t * VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a 32 bit integer from the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_int16
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int16_t * VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a 16 bit integer from the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_int8
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, int8_t * VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops an 8 bit integer from the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_float
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, float * VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a floating point value from the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_str
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, char ** VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a string from the serializer object. The returned value is a
     newly allocated pointer, which must be freed, you don't need to
     provide a buffer, just a valid pointer on a NULL pointer.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_xyz
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, lw6sys_xyz_t *
          VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a lw6sys_xyz_t structure from the serializer object.  Avoids
     calling two integer pops.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_whd
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, lw6sys_whd_t *
          VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a lw6sys_whd_t structure from the serializer object.  Avoids
     calling two integer pops.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_serializer_pop_color
          (lw6sys_hexa_serializer_t * HEXA_SERIALIZER, lw6sys_color_8_t
          * VALUE)
     HEXA_SERIALIZER:  an hexa serializer object

     VALUE:  value to pop (returned value)

     Pops a color from the serializer object.

     *Return value:*  1 if success, 0 if failure

 -- Function: int lw6sys_hexa_str_to_buf (void * BUF, int SIZE, char *
          STR)
     BUF:  binary buffer to convert

     SIZE:  binary buffer length

     STR:  the source string

     Converts the stringified hexa representation of a string to its
     source binary buffer. Buffer must be exactly `strlen'(str)/2

     *Return value:*  1 on success

 -- Function: char * lw6sys_hexa_buf_to_str (void * BUF, int SIZE)
     BUF:  the buffer to stringify

     SIZE:  the length of the buffer

     Transforms a binary buffer into its hexa representation.

     *Return value:*  newly allocated string.

 -- Function: void * lw6sys_hexa_str_to_ptr (char * STR)
     STR:  the string containing an hexa representation of pointer

     Transforms a string into a pointer, this is typically used to
     store pointers in temporary agnostic storage such as a database.
     Beware not to use that to exchange data with other computers
     and/or use it for persistent data. This is a high-risk function as
     it lets you do real dirty stuff but it really does save time
     compared to using a key returned by the database engine and then
     search this key in a user-space hash table. Direct pointer access
     is definitely faster.

     *Return value:*  the pointer, or NULL is str is invalid.

 -- Function: char * lw6sys_hexa_ptr_to_str (void * PTR)
     PTR:  pointer to convert into string representation

     Transforms a pointer into a string, this is typically used to
     store pointers in temporary agnostic storage such as a database.
     Beware not to use that to exchange data with other computers
     and/or use it for persistent data. This is a high-risk function as
     it lets you do real dirty stuff but it really does save time
     compared to using a key returned by the database engine and then
     search this key in a user-space hash table. Direct pointer access
     is definitely faster.

     *Return value:*  the string, can be NULL on errror, must be freed.

 -- Function: void lw6sys_history_init ()
     Initializes the history system. Not initializing won't cause any
     segfault, but data will be inconsistent.

     *Return value:*  none.

 -- Function: void lw6sys_history_register (char * MSG)
     MSG:  the message to register.

     Registers a message in the history log, that is, adds it.

     *Return value:*  none.

 -- Function: char_ptr_t * lw6sys_history_get (int64_t TIMEOUT)
     TIMEOUT:  the message age limit.

     Get all the messages that are younger than timeout (in seconds).

     *Return value:*  a pointer on string pointers. May be NULL. Last
     pointer is NULL too, that's how you know the array is over.

 -- Function: void lw6sys_history_free (char ** HISTORY)
     HISTORY:  the data to free

     Frees a pointer returned by `lw6sys_history_get'.

     *Return value:*  none.

 -- Function: char * lw6sys_locale_to_utf8 (char * STRING)
     STRING:  the string to convert

     Used to force strings into UTF-8 mode, this is basically to match
     the TTF font settings used when displaying stuff on OpenGL.
     Indeed, in this case, the standard _ gettext function won't work,
     we need to force UTF-8 mode. If the locale is UTF-8, then function
     does nothing, but at least it's transparent usage won't hurt.

     *Returned value:*  a newly allocated string, always in UTF-8 no
     matter what the locale is.

 -- Function: u_int16_t lw6sys_generate_id_16 ()
     Long 16-bit ID generator, calls the random function internally.
     As usual, those are not perfect random numbers, however the
     function implementation emphasizes more on 'real randomness'
     rather than relying on performance. Generating twice the same
     number should be fairly rare.

 -- Function: u_int32_t lw6sys_generate_id_32 ()
     Long 32-bit ID generator, calls the random function internally.
     As usual, those are not perfect random numbers, however the
     function implementation emphasizes more on 'real randomness'
     rather than relying on performance. Generating twice the same
     number should be fairly rare.

 -- Function: u_int64_t lw6sys_generate_id_64 ()
     Long 64-bit ID generator, calls the random function internally.
     As usual, those are not perfect random numbers, however the
     function implementation emphasizes more on 'real randomness'
     rather than relying on performance. Generating twice the same
     number should be fairly rare.

 -- Function: int lw6sys_check_id_16 (u_int16_t ID_16)
     ID_16:  the id to check

     Checks wether the given id is a valid 16-bit id.

     *Return value:*  1 if OK, 0 if not a valid id.

 -- Function: int lw6sys_check_id_32 (u_int32_t ID_32)
     ID_32:  the id to check

     Checks wether the given id is a valid 32-bit id.

     *Return value:*  1 if OK, 0 if not a valid id.

 -- Function: int lw6sys_check_id_64 (u_int64_t ID_64)
     ID_64:  the id to check

     Checks wether the given id is a valid 64-bit id.

     *Return value:*  1 if OK, 0 if not a valid id.

 -- Function: int lw6sys_check_id (u_int64_t ID)
     ID:  the id to check

     Checks wether the given id is a valid id (16, 32 or 64-bit).

     *Return value:*  1 if OK, 0 if not a valid id.

 -- Function: char * lw6sys_id_ltoa (u_int64_t ID)
     id: the id to convert

     Transform an id into its string representation. Error checking is
     done, if the id is invalid, returned value is NULL.  All ids (16,
     32 and 64-bit) are handled.

     *Return value:*  a newly allocated string, might be NULL.

 -- Function: u_int64_t lw6sys_id_atol (char * ID)
     id: the id to convert

     Transform an id into a long integer. Error checking is done, if
     the id is invalid, returned value is 0.  All ids (16, 32 and
     64-bit) are handled.

     *Return value:*  the id as a long integer, 0 if incorrect source
     id.

 -- Function: char * lw6sys_keyword_as_key (char * KEYWORD)
     KEYWORD:  the keyword to transform

     Transforms a keyword into a "key", that is, removes all heading
     dashes, switches to lowercase, and other stuff. This is used
     internally to match options and config file parameters, for
     instance.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_keyword_as_arg (char * KEYWORD)
     KEYWORD:  the keyword to transform

     Transforms a keyword into a command-line parameter to be matched.
     Does the same as `lw6sys_keyword_as_key', and adds a "-" prefix.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_keyword_as_env (char * KEYWORD)
     KEYWORD:  the keyword to transform

     Transforms a keyword into the corresponding environment variable
     name.  It will uppercase the name, replace "-" by "_", and add a
     "LW6_" prefix. "my-param" will become "LW6_MY_PARAM".

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_keyword_as_xml (char * KEYWORD)
     KEYWORD:  the keyword to transform

     Transforms a keyword into the corresponding config file entry.  In
     practice, just the same as `lw6sys_keyword_as_key'.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: lw6sys_list_t * lw6sys_list_new (lw6sys_free_func_t
          FREE_FUNC)
     FREE_FUNC:  a callback which will be called on data when freeing
     the list

     Creates an empty list. There's a difference between NULL and an
     empty list. The empty list would (in Scheme) be '() whereas NULL
     corresponds to undefined "is not a list and will generate errors
     if you ever call list functions on it".

     *Return value:*  a pointer to the created object, may be NULL.

 -- Function: void lw6sys_list_free (lw6sys_list_t * LIST)
     LIST:  the list to delete.

     Delete a list, this will cascade delete all the following items in
     the list.

     *Return value:*  none.

 -- Function: lw6sys_list_t * lw6sys_list_next (lw6sys_list_t * LIST)
     LIST:  the current position in the list

     It's safer to call this rather than dig right into the internals
     of the list.

     *Return value:*  a new position in the list, may be NULL.

 -- Function: int lw6sys_list_is_empty (lw6sys_list_t * LIST)
     LIST:  the list we want informations about

     Checks wether the list is empty or not. Note that being empty and
     being NULL is not the same. An empty list is a valid pointer on a
     list where there's no item, a NULL pointer is not a list at all.
     Do *NOT* call this function on NULL.

     *Return value:*  1 if empty, 0 if there is at list one item.

 -- Function: int lw6sys_list_length (lw6sys_list_t * LIST)
     LIST:  the list we want informations about

     Calculates the length of the list. This is a performance killer
     for lists are inadapted to this. But it can still be usefull.

     *Return value:*  the number of elements, 0 is none (empty list).

 -- Function: void lw6sys_list_map (lw6sys_list_t * LIST,
          lw6sys_list_callback_func_t FUNC, void * FUNC_DATA)
     LIST:  the list where elements will be taken

     FUNC:  the function which will be executed

     FUNC_DATA:  additionnal data to be passed to `func'

     Executes a function on all list items.  The `func_data' parameter
     allows you to pass extra values to the function, such as a file
     handler or any variable which can not be inferred from list item
     values, and you of course do not want to make global... Not as
     convenient as a real "for each" construct as can be found in any
     modern langage, but does the job. No return value, if you really
     want one, pass a structure in `func_data' and modify something in
     it on success, failure, whatever.

     *Return value:*  none.

 -- Function: void lw6sys_list_filter (lw6sys_list_t ** LIST,
          lw6sys_list_filter_func_t FUNC, void * FUNC_DATA)
     LIST:  the list where elements will be taken

     FUNC:  the function which will be executed

     FUNC_DATA:  additionnal data to be passed to `func'

     Executes a function on all list items and keeps only those for
     which the function returned non zero (true).  The `func_data'
     parameter allows you to pass extra values to the function, such as
     a file handler or any variable which can not be inferred from list
     item values, and you of course do not want to make global...

     *Return value:*  none.

 -- Function: void lw6sys_list_push_front (lw6sys_list_t ** LIST, void
          * DATA)
     LIST:  a pointer to the list (pointer on pointer, read/write value)

     DATA:  the data to be pushed

     Pushes data on the list. The `free_func' function is copied from
     the previous element. The pointer on the list is changed "in
     place" (in/out). Note that if there's a `malloc' problem it might
     end-up being NULL... This should be rare but it *can* happen. You
     cannot push something else than a pointer, pushing an int is a
     very bad idea. Push a pointer on the integer, and ensure it's
     always there, or `malloc' it and pass `lw6sys_free_callback' when
     creating the list.  If you think you can cast an integer into a
     pointer, think 64-bit machines...

     *Return value:*  none.

 -- Function: void * lw6sys_list_pop_front (lw6sys_list_t ** LIST)
     LIST:  a pointer to the list (pointer on pointer, read/write value)

     Pops data from the list, the returned value is what was passed to
     list_push. The pointer on the list is changed "in place" (in/out).
     When data is popped, that needs some freeing (i.e. free_func was
     not NULL when creating the list) then it's the responsibility of
     the caller to free it when popping it. One popped it's not freed,
     but it's out of the list scope. Of course the lw6sys_list_t is
     freed, but not the data.  If you happen to store non-NULL data in
     your list, you can call this function without bothering calling
     `lw6sys_list_is_empty' and assume that when you get NULL, there's
     no data left.  At this stage, the list won't exist anymore BTW,
     you won't even need to free it. The idea is: popping a list which
     has no elements left (empty list) destroys the list and returns
     NULL.

     *Return value:*  a pointer on the popped data, whatever you pushed.

 -- Function: void lw6sys_list_push_back (lw6sys_list_t ** LIST, void *
          DATA)
     LIST:  a pointer to the list (pointer on pointer, read/write value)

     DATA:  the data to be pushed

     Pushes data on the list. The `free_func' function is copied from
     the previous element. The pointer on the list is changed "in
     place" (in/out). Note that if there's a `malloc' problem it might
     end-up being NULL... This should be rare but it *can* happen. You
     cannot push something else than a pointer, pushing an int is a
     very bad idea. Push a pointer on the integer, and ensure it's
     always there, or `malloc' it and pass `lw6sys_free_callback' when
     creating the list.  If you think you can cast an integer into a
     pointer, think 64-bit machines...

     *Return value:*  none.

 -- Function: void * lw6sys_list_pop_back (lw6sys_list_t ** LIST)
     LIST:  a pointer to the list (pointer on pointer, read/write value)

     Pops data from the list, the returned value is what was passed to
     list_push. The pointer on the list is changed "in place" (in/out).
     When data is popped, that needs some freeing (i.e. free_func was
     not NULL when creating the list) then it's the responsibility of
     the caller to free it when popping it. One popped it's not freed,
     but it's out of the list scope. Of course the lw6sys_list_t is
     freed, but not the data.  If you happen to store non-NULL data in
     your list, you can call this function without bothering calling
     `lw6sys_list_is_empty' and assume that when you get NULL, there's
     no data left.  At this stage, the list won't exist anymore BTW,
     you won't even need to free it. The idea is: popping a list which
     has no elements left (empty list) destroys the list and returns
     NULL.

     *Return value:*  a pointer on the popped data, whatever you pushed.

 -- Function: lw6sys_list_t * lw6sys_list_dup (lw6sys_list_t * LIST,
          lw6sys_dup_func_t DUP_FUNC)
     LIST:  the list to duplicate, can be NULL

     DUP_FUNC:  the function which will be called to duplicate data

     Duplicates a list. All data will be copied so that if the first
     list is deleted, the duplicated one is fine. Addtionnally, dup_func
     will be called to filter all data, and possibly allocated new
     pointers if needed, for instance. If dup_func is NULL, then data
     values will simply be copied. This is likely to be usefull when
     data is not dynamically allocated.

     *Returned value:*  a newly allocated list.

 -- Function: void lw6sys_log_set_file (char * FILENAME)
     FILENAME:  the name of the log file.

     Sets up the log file. Until you call this function, messages all
     logged to the default log file, as returned by the
     `lw6sys_get_default_log_file' function.

     *Return value:*  void

 -- Function: void lw6sys_log_clear (char * FILENAME)
     FILENAME:  the name of the log file.

     Clears the log file, this function would typically be called at
     the beginning of the program. If filename is NULL, then the
     default log file is cleared.

     *Return value:*  void

 -- Function: void lw6sys_log (int LEVEL_ID, char * FILE, int LINE,
          char * FMT, ...)
     LEVEL_ID:  the log level to use. Possible values are, by order,
     LW6SYS_LOG_ERROR_ID (0), LW6SYS_LOG_WARNING_ID (1),
     LW6SYS_LOG_NOTICE_ID (2), LW6SYS_LOG_INFO_ID (3),
     LW6SYS_LOG_DEBUG_ID (4) and LW6SYS_LOG_TMP_ID (5).

     FILE:  the name of the source file where the function is called,
     one can use __FILE__

     LINE:  the line in the source file where the function is called,
     one can use __LINE__

     FMT:  a printf-like format string ...: printf-like arguments,
     corresponding to `fmt'.

     This function is usually called with the first three arguments
     packed into a single macro. For instance the `LW6SYS_LOG_WARNING'
     macro expands and fills the first 3 args, so there's no need to
     type __FILE__ and __LINE__ again and again. Note that this
     function will reset errno. The idea is to call it whenever there's
     something to do with errno (if you deal with errno, it's a good
     habit to log it) then errno is cleared so that it won't interfere
     with next log messages.

 -- Function: void lw6sys_log_critical (char * FMT, ...)
     FMT:  a printf-like format string ...: printf-like arguments,
     corresponding to `fmt'.

     This function is a special log function which will dump
     informations on the console only, without opening any log file
     whatsoever. The idea is that it's a "never fail" function.
     Additionnally, it will never return but quit the program. This can
     be used as an ultimate emergency function, use it when the program
     won't run for sure, and displaying an immediate error message is
     the only issue.

 -- Function: int lw6sys_log_get_level ()

 -- Function: void lw6sys_log_set_level (int LEVEL)
     LEVEL:  the log level, integer between 0 & 4. 4 is very verbose
     (debug), 0 displays errors only.


 -- Function: void lw6sys_math_poly_wy1y2s1 (float * Y, float * S,
          float X, float W, float Y1, float Y2, float S1)
     Y:  the return value (position, may be NULL)

     S:  the return value (speed, may be NULL)

     X:  the x parameter, the value to iterate on

     W:  the width, that is, the x value after which output is constant

     Y1:  the initial value, when v is s1 and x=0

     Y2:  the target value, when v=0 and x>=w

     S1:  the initial speed, that is dy/dx at x=0

     A function which can be used to implement smooth moving. It will
     extrapolate, for values of x>=0, an y position with a continuous
     derivate (dy/dx is continuous, function is 2nd order polynom) and
     which ends up at x=w with a constant value, that is dy/dx=v=0.
     Typically an item set with an initial speed of v with this function

 -- Function: float lw6sys_math_angle_360 (int X, int Y)
     X:  x coordinate

     Y:  y coordinate

     This is a wrapper over the standard `atan' function which will
     handle internally the special x == 0 case and the various
     positive/negative values of `x' and `y'.

     *Return value:*  the angle, in degrees

 -- Function: float lw6sys_math_heartbeat (int64_t X, int PERIOD, float
          Y1, float Y2)
     X:  the parameter (typically a timestamp)

     PERIOD:  the period (typically something like 1000 milliseconds)

     Y1:  the low value (heart at rest)

     Y2:  the high value (when bumping)

     A heartbeat function, typically usefull to power up eye-candy, but
     it could do something else.

 -- Function: int lw6sys_math_blink (int64_t X, int PERIOD)
     X:  the parameter (typically a timestamp)

     PERIOD:  the period (typically something like 1000 milliseconds)

     This function will alternatively return 1 or 0, usefull to handle
     blinking for instance.

     *Return value:*  0 or 1

 -- Function: void * lw6sys_malloc (int SIZE, char * FILE, int LINE)
     SIZE:  number of bytes to allocate.

     FILE:  name of the file calling the function, use `__FILE__x_'

     LINE:  line in the file calling the function, use `__LINE__x_'

     This is a wrapper over the standard `malloc' function.
     Additionnally it will keep track of the call with an internal
     program-wide counter, thus enabling memory leak checks. You should
     not use this function directly but use the macro `LW6SYS_MALLOC'
     which has the same syntax, without the last two parameters, which
     are automatically provided by macro expansion.

     *Return value:*  the newly allocated pointer. Data is not
     initialized.

 -- Function: void * lw6sys_calloc (int SIZE, char * FILE, int LINE)
     SIZE:  number of bytes to allocate.

     FILE:  name of the file calling the function, use `__FILE__x_'

     LINE:  line in the file calling the function, use `__LINE__x_'

     This is a wrapper over the standard `calloc' function.
     Additionnally it will keep track of the call with an internal
     program-wide counter, thus enabling memory leak checks. You should
     not use this function directly but use the macro `LW6SYS_CALLOC'
     which has the same syntax, without the last two parameters, which
     are automatically provided by macro expansion.

     *Return value:*  the newly allocated pointer. Data is filled with
     zeros.

 -- Function: void * lw6sys_realloc (void * PTR, int SIZE, char * FILE,
          int LINE)
     PTR:  the pointer to reallocate.

     SIZE:  number of bytes to allocate.

     FILE:  name of the file calling the function, use `__FILE__x_'

     LINE:  line in the file calling the function, use `__LINE__x_'

     This is a wrapper over the standard `realloc' function.  You
     should not use this function directly but use the macro
     `LW6SYS_REALLOC' which has the same syntax, without the last two
     parameters, which are automatically provided by macro expansion.

     *Return value:*  the newly allocated pointer.

 -- Function: void lw6sys_free (void * PTR, char * FILE, int LINE)
     PTR:  the pointer to free.

     FILE:  name of the file calling the function, use `__FILE__x_'

     LINE:  line in the file calling the function, use `__LINE__x_'

     This is a wrapper over the standard `free' function. Additionnally
     it will keep track of the call with an internal program-wide
     counter, thus enabling memory leak checks. You should not use this
     function directly but use the macro `LW6SYS_FREE' which has the
     same syntax, without the last two parameters, which are
     automatically provided by macro expansion.

     *Return value:*  none.

 -- Function: void lw6sys_free_callback (void * PTR)
     PTR:  the pointer to free.

     This is a callback to be used when the `lw6sys_free' does not fit.
     A good example is a list, which, to free its elements, requires
     you to provide a callback that only takes 1 arg, the pointer to
     free. Problem, `lw6sys_free' takes 3 args. And the `LW6SYS_FREE'
     macro is not usable in such a context. And you can't use standard
     `free' either for it would mess up the `malloc' / `free'
     automatical count which is so convenient to track memory leaks. So
     this callback is here, it's only drawback is that in case of an
     error, the error will not be reported with the real file and line
     parameters. It's still better than nothing.

     *Return value:*  none.

 -- Function: int lw6sys_megabytes_available ()
     Gives a raw approximation of available memory, in megabytes.
     Value is to be taken with distance, but it can give good hints
     when system is running short of ressources.

     *Return value:*  number of megabytes (physical memory) available.

 -- Function: int lw6sys_is_big_endian ()
     Checks the endianess of the machine. PPC is big endian, for
     instance.

     *Return value:*  1 if system is big endian, 0 if little endian.

 -- Function: int lw6sys_is_little_endian ()
     Checks the endianess of the machine. x86 is little endian, for
     instance.

     *Return value:*  1 if system is little endian, 0 if big endian.

 -- Function: int lw6sys_check_types_size ()
     Checks of common types and usefull structures, this is a debugging
     function which helps finding compiler strange behaviors and
     programmer's bad intuitions.

     *Return value:*  1 if everything is OK, 0 if error.

 -- Function: void * lw6sys_mutex_create ()
     Creates a mutex object.

     *Return value:*  newly allocated pointer.

 -- Function: void lw6sys_mutex_destroy (void * MUTEX)
     MUTEX:  the mutex to destroy.

     Destroys a mutex object.

     *Return value:*  none.

 -- Function: int lw6sys_mutex_lock (void * MUTEX)
     MUTEX:  the mutex to use

     Locks the mutex. Note that this should never fail unless there's a
     serious initialization problem, instead, function will wait
     forever until mutex is released.

     *Return value:*  1 if success, 0 if failure.

 -- Function: int lw6sys_mutex_trylock (void * MUTEX)
     MUTEX:  the mutex to use

     Tries to locks the mutex. That is, tells wether mutex can be
     locked immediately or not. Note that this does not mean there's
     100% chance next call to lock will terminated immediately, since
     lock can still be acquired by another thread.

     *Return value:*  1 if mutex unlocked, 0 if locked or error.

 -- Function: int lw6sys_mutex_unlock (void * MUTEX)
     MUTEX:  the mutex to use

     Unlocks a mutex.

     *Return value:*  1 if sucess, 0 if error.

 -- Function: int lw6sys_get_mutex_lock_count ()
     Returns how many mutexes have been locked since program start.
     Usefull for sanity checking when debugging.

     *Return value:*  number of calls to lock

 -- Function: int lw6sys_get_mutex_unlock_count ()
     Returns how many mutexes have been unlocked since program start.
     Usefull for sanity checking when debugging.

     *Return value:*  number of calls to unlock

 -- Function: int lw6sys_check_mutex_count ()
     Checks wether unlock has been called as many times as lock.
     Usefull for sanity checking when debugging.

     *Return value:*  1 if OK, 0 if inconsistency.

 -- Function: int lw6sys_true ()
     Function which returns always true, that is, something different
     than 0.

 -- Function: int lw6sys_false ()
     Function which returns always false, that is, 0. This can seem
     totally useless but it does have some utility. It's used for
     instance to "fool" the compiler and force it to compile and link
     functions in binaries, so that, afterwards, dynamically loaded .so
     files can find in the main binary some functions which would
     otherwise be stripped during the final link.

 -- Function: int lw6sys_openmp_get_num_procs ()
     Wrapper on `omp_get_num_procs' the advantage of this is that it's
     always defined, wether OpenMP supported is compiled in or not,
     will returned 1 if no OpenMP support.

     *Return value:*  number of procs

 -- Function: char * lw6sys_get_default_user_dir ()
     Returns the default user directory. Note that this value is not
     static, it can depend, for instance, of the environment variable
     `HOME'.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_config_file ()
     Returns the default config file. Note that this value is not
     static, it can depend, for instance, of the environment variable
     `HOME'.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_log_file ()
     Returns the default log file. Note that this value is not static,
     it can depend, for instance, of the environment variable `HOME'.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_prefix ()
     Returns the default prefix, could be /usr/local for instance.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_mod_dir ()
     Returns the default module directory (dynamically loaded
     libraries).

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_data_dir ()
     Returns the default data directory.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_music_dir ()
     Returns the default music directory.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_music_path ()
     Returns the default music path, which can be composed of several
     directories.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_map_dir ()
     Returns the default map directory.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_map_path ()
     Returns the default map path, which can be composed of several
     directories.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_default_script_file ()
     Returns the default script file.

     *Return value:*  a newly allocated string.

 -- Function: void lw6sys_options_log_defaults ()
     Logs all default values to log file. Usefull for debugging, to
     know where the program is searching for its informations.

 -- Function: char * lw6sys_get_cwd ()
     Returns the current working directory (absolute path).

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_run_dir (int ARGC, char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the binary directory, that is, the directory the binary is
     stored in. This is calculated dynamically, by interpreting
     command-line arguments.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_user_dir (int ARGC, char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the user dir, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_config_file (int ARGC, char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the config file, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_log_file (int ARGC, char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the log file, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_prefix (int ARGC, char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the prefix, taking in account command-line and environment
     variables. However config file content has no impact on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_mod_dir (int ARGC, char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the mod dir (modules, shared .so), taking in account
     command-line and environment variables. However config file
     content has no impact on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_data_dir (int ARGC, char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the data dir, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_music_dir (int ARGC, char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the music dir, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_music_path (int ARGC, char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the music path, taking in account command-line and
     environment variables. However config file content has no impact
     on the result. Music path can contain several directories.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_map_dir (int ARGC, char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the map dir, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_map_path (int ARGC, char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the map path, taking in account command-line and
     environment variables. However config file content has no impact
     on the result. Map path can contain several directories.

     *Return value:*  a newly allocated string.

 -- Function: char * lw6sys_get_script_file (int ARGC, char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Returns the script file, taking in account command-line and
     environment variables. However config file content has no impact
     on the result.

     *Return value:*  a newly allocated string.

 -- Function: void lw6sys_options_log (int ARGC, char * [] ARGV)
     ARGC:  argc, number of arguments, as given to `main'

     ARGV:  argv, pointer to arguments, as given to `main'

     Logs all the main options values which are not config-file
     dependant but depend on built-in defaults, command-line arguments
     and environment variables. Usefull to debug and know where the
     program is searching for things.

 -- Function: int lw6sys_file_exists (char * FILENAME)
     FILENAME:  the file to test

     Tests the existence of a file on the filesystem. File is considered
     to exists if it's at least readable.

     *Return value:*  1 if OK, 0 if file doesn't exist or can't be read.

 -- Function: int lw6sys_dir_exists (char * DIRNAME)
     DIRNAME:  the directory to test

     Tests the existence of a directory on the filesystem.

     *Return value:*  1 if OK, 0 if directory doesn't exist.

 -- Function: int lw6sys_create_dir (char * DIRNAME)
     DIRNAME:  the directory to create

     Creates a directory, performing sanity checks such as verifying
     the directory really exists after being created.

     *Return value:*  1 if OK, 0 if error.

 -- Function: int lw6sys_create_dir_silent (char * DIRNAME)
     DIRNAME:  the directory to create

     Creates a directory like `lw6sys_create_dir' but this function is
     silent in the sense that it won't log any error. Usefull to create
     the log directory itself, for instance, and avoid infinite loops
     on error.

     *Return value:*  1 if OK, 0 if error.

 -- Function: char * lw6sys_path_add_slash (char * PATH)
     PATH:  a path

     Adds a slash, or in a general manner, a directory separator, at
     the end of a path, if needed. So /foo/bar will become /foo/bar/
     but /bar/foo/ will remain /bar/foo/.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: char * lw6sys_path_strip_slash (char * PATH)
     PATH:  a path

     Strips the slash, or in a general manner, the directory separator,
     at the end of a path, if needed. So /foo/bar/ will become /foo/bar
     but /bar/foo will remain /bar/foo.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: char * lw6sys_path_concat (char * PATH1, char * PATH2)
     PATH1:  left part of the path

     PATH2:  right part of the path

     Concatenates 2 parts of a path. Function will try to avoid stupid
     "double-slash" when concatenating /foo/ with /bar/ and conversely
     insert a directory separator when concatenating /foo with bar/.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: lw6sys_list_t * lw6sys_path_split (char * PATH)
     PATH:  a path

     Splits a path into all its parts. For instance /boo/bar/foo2/bar2
     returns a 4 elements list. This is more than a plain split, for
     heading and tailing slashes will be ignored, and various path
     separators will be interpreted (depends on platform).

     *Return value:*  a list containing 0-terminated strings.

 -- Function: char * lw6sys_path_file_only (char * PATH)
     PATH:  a path

     Returns the file name only, without heading directories.

     *Return value:*  file name, must be freed

 -- Function: int lw6sys_path_is_relative (char * PATH)
     PATH:  a path

     Checks wether a path is relative or absolute.

     *Return value:*  1 if relative, 0 if absolute.

 -- Function: int lw6sys_path_is_cwd (char * PATH)
     PATH:  a path

     Checks wether a path is "." or not. Will also trap "" and "./".

     *Return value:*  1 if relative, 0 if absolute.

 -- Function: char * lw6sys_path_parent (char * PATH)
     PATH:  a path

     Returns the parent path. That will return /foo when given /foo/bar
     in input.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: char * lw6sys_path_unparent (char * PATH)
     PATH:  a path

     Given the ../foo/bar path, will return foo/bar. Usefull to get rid
     of heading ../ when a path is known to start with it.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: char * lw6sys_path_unparent_no_malloc (char * PATH)
     PATH:  a path

     Given the ../foo/bar path, will return foo/bar. Usefull to get rid
     of heading ../ when a path is known to start with it.  This is
     different from `lw6sys_path_unparent' just because the result is
     not dynamically allocated and copied from source.

     *Return value:*  a pointer which points somewhere within the
     string passed as an argument.

 -- Function: lw6sys_list_t * lw6sys_dir_list (char * DIR,
          lw6sys_dir_list_filter_func_t FILTER_FUNC, void * FUNC_DATA,
          int * N)
     DIR:  the path of the directory to list

     FILTER_FUNC:  a function which will filter entries, can be NULL

     FUNC_DATA:  additionnal data passed to filter_func

     N:  will contain the number of items found

     This list a directory. The filter will be passed the file path as
     an argument. If it returns 1, the file is kept, if it returns 0
     it's suppressed from the list.

     *Return value:*  a list containing strings (file paths).

 -- Function: lw6sys_list_t * lw6sys_path_list (char * PATH,
          lw6sys_dir_list_filter_func_t FILTER_FUNC, void * FUNC_DATA,
          int * N)
     PATH:  the path of the path to list

     FILTER_FUNC:  a function which will filter entries, can be NULL

     FUNC_DATA:  additionnal data passed to filter_func

     N:  will contain the number of items found

     This list a directory. By path we mean here a list of separated
     directories, separated by : for instance.  The filter will be
     passed the file path as an argument. If it returns 1, the file is
     kept, if it returns 0 it's suppressed from the list. It's like
     performing a call to `lw6sys_dir_list' on each of the path members.

     *Return value:*  a list containing strings (file paths).

 -- Function: char * lw6sys_find_in_dir_and_path (char * DIR, char *
          PATH, char * FILE)
     DIR:  a directory, when to search the file first

     PATH:  the path to search too, a separated list of dirs

     FILE:  the filename to search for

     Tries to find a file in the given paths. The function is typically
     used to find music files. First it tries to find the file in dir,
     then it tries to find it in each dir of path. `file' must be only
     a file name and not contain any directory. The function will use
     the filename only anyway.

     *Return value:*  the full path of the found file.

 -- Function: void lw6sys_print_xml_header (FILE * F, char * COMMENT)
     F:  file to output content to

     Prints a standard Liquid War compliant XML header in the given
     file.

     *Return value:*  none.

 -- Function: void lw6sys_print_xml_footer (FILE * F)
     F:  file to output content to

     Prints a standard Liquid War 6 compliant XML footer in the given
     file.

     *Return value:*  none.

 -- Function: int lw6sys_profiler_check (int VERBOSE)
     VERBOSE:  wether to display informations on the console

     Checks wether Google Profiler support has been built, and if it's
     set, outputs the log file. If CPUPROFILE is defined but binary has
     no support for it, will display a warning message.

     *Return value:*  1 if google profile enabled and activated, 0 if
     not

 -- Function: void lw6sys_progress_default (lw6sys_progress_t *
          PROGRESS, float * VALUE)
     PROGRESS:  the progress struct to initialize

     VALUE:  the value to point to

     Sets a progress struct to default values, that is, ranging from
     0.0f to 1.0f.

     *Return value:*  none.

 -- Function: void lw6sys_progress_update (lw6sys_progress_t *
          PROGRESS, int MIN, int MAX, int VALUE)
     PROGRESS:  the progress struct to update

     MIN:  the min value

     MAX:  the max value

     VALUE:  the current value

     Updates a progress struct. This is typically the function used by a
     callback to show the progress of a process. Note that this is note
     an initializer. Rather, the progress struct was initialized
     before, and this call is done in a loop with min being 0, max
     being the last value in the loop, and value the current index in
     the loop. NULL pointers correctly handled internally, so call this
     with any parameters, it's safe.

     *Return value:*  none.

 -- Function: void lw6sys_progress_split (lw6sys_progress_t *
          PROGRESS1, lw6sys_progress_t * PROGRESS2, lw6sys_progress_t *
          PROGRESS_SRC)
     progress1: the first part of the splitted progress progress2: the
     second part of the splitted progress progress_src: the progress to
     split

     Utility function to split a progress struct, that is, if a
     progress was ranging from a to b, make 2 progress structs, ranging
     from a to c and from c to b, c being between a and b.

     *Return value:*  none

 -- Function: void lw6sys_progress_split_here (lw6sys_progress_t *
          PROGRESS1, lw6sys_progress_t * PROGRESS2, lw6sys_progress_t *
          PROGRESS_SRC, float HERE)
     progress1: the first part of the splitted progress progress2: the
     second part of the splitted progress progress_src: the progress to
     split here: where to split

     Utility function to split a progress struct, that is, if a
     progress was ranging from a to b, make 2 progress structs, ranging
     from a to c and from c to b, c being between a and b. The here
     value controls what c is. If here=0, then c=a. If here=1, then c=b.

     *Return value:*  none

 -- Function: void lw6sys_progress_split3 (lw6sys_progress_t *
          PROGRESS1, lw6sys_progress_t * PROGRESS2, lw6sys_progress_t *
          PROGRESS3, lw6sys_progress_t * PROGRESS_SRC)
     progress1: the first part of the splitted progress progress2: the
     second part of the splitted progress progress3: the third part of
     the splitted progress progress_src: the progress to split

     Utility function to split a progress struct, this one will split it
     into 3 equal parts.

     *Return value:*  none

 -- Function: void lw6sys_progress_split4 (lw6sys_progress_t *
          PROGRESS1, lw6sys_progress_t * PROGRESS2, lw6sys_progress_t *
          PROGRESS3, lw6sys_progress_t * PROGRESS4, lw6sys_progress_t *
          PROGRESS_SRC)
     progress1: the first part of the splitted progress progress2: the
     second part of the splitted progress progress3: the third part of
     the splitted progress progress4: the fourth part of the splitted
     progress progress_src: the progress to split

     Utility function to split a progress struct, this one will split it
     into 4 equal parts.

     *Return value:*  none

 -- Function: void lw6sys_progress_split5 (lw6sys_progress_t *
          PROGRESS1, lw6sys_progress_t * PROGRESS2, lw6sys_progress_t *
          PROGRESS3, lw6sys_progress_t * PROGRESS4, lw6sys_progress_t *
          PROGRESS5, lw6sys_progress_t * PROGRESS_SRC)
     progress1: the first part of the splitted progress progress2: the
     second part of the splitted progress progress3: the third part of
     the splitted progress progress4: the fourth part of the splitted
     progress progress5: the fourth part of the splitted progress
     progress_src: the progress to split

     Utility function to split a progress struct, this one will split it
     into 5 equal parts.

     *Return value:*  none

 -- Function: void lw6sys_progress_begin (lw6sys_progress_t * PROGRESS)
     progress: the progress to update

     Sets the progress to its min value, NULL values correctly handled.

     *Return value:*  none

 -- Function: void lw6sys_progress_half (lw6sys_progress_t * PROGRESS)
     progress: the progress to update

     Sets the progress to the average between min and max, NULL values
     correctly handled.

     *Return value:*  none

 -- Function: void lw6sys_progress_end (lw6sys_progress_t * PROGRESS)
     progress: the progress to update

     Sets the progress to its max value, NULL values correctly handled.

     *Return value:*  none

 -- Function: u_int32_t lw6sys_random (u_int32_t RANGE)
     RANGE:  the high limit for random generated numbers. If you want
     random numbers between 0 and 5, set this to 6.

     Wrapper over standard random function. This one is thread safe.
     This idea is not to provide cryptographic-proof random numbers,
     rather generate sequences which are random enough to generate
     unique server ids and such things. The function is initialized on
     its first call, and results depend on timestamp, host name, user
     name, and memory available.

 -- Function: float lw6sys_random_float (float MIN, float MAX)
     MIN:  the min value, as a float

     MAX:  the max value, as a float

     Returns a random float number between min & max. Can be equal to
     min or max.

 -- Function: int lw6sys_sdl_register ()
     Function used to avoid initializing SDL several times in a program.
     AFAIK Allegro has a `was_init' function, but SDL doesn't. With this
     function - which every LW6 sub-module should use - one can know
     globally, for the whole program, wether SDL has been initialized
     or not.

 -- Function: int lw6sys_sdl_unregister ()
     Call this whenever you are done with SDL and exit it, so that the
     `lw6sys_sdl_register' function works correctly.

     *Return value:*  1 if SDL needs to be unregistered, that is, if it
     has already been initialized, else 0.

 -- Function: void lw6sys_serialize_int64 (unsigned char * DATA,
          int64_t VALUE)
     DATA:  pointer to the data, must contain at least 8 bytes of
     writable space

     VALUE:  the integer to serialize

     Serializes a 64-bit integer in a byte buffer. Result is not
     dependant on machine endianess. Typically used for checksums or
     high-level serializations.

 -- Function: int64_t lw6sys_unserialize_int64 (unsigned char * DATA)
     DATA:  pointer to the data, must contain at least 8 bytes

     Recovers a 64-bit integer from a byte buffer created, for
     instance, with `lw6sys_serialize_int64'.

 -- Function: void lw6sys_serialize_int32 (unsigned char * DATA,
          int32_t VALUE)
     DATA:  pointer to the data, must contain at least 4 bytes of
     writable space

     VALUE:  the integer to serialize

     Serializes a 32-bit integer in a byte buffer. Result is not
     dependant on machine endianess. Typically used for checksums or
     high-level serializations.

 -- Function: int32_t lw6sys_unserialize_int32 (unsigned char * DATA)
     DATA:  pointer to the data, must contain at least 4 bytes

     Recovers a 32-bit integer from a byte buffer created, for
     instance, with `lw6sys_serialize_int32'.

 -- Function: void lw6sys_serialize_int16 (unsigned char * DATA,
          int16_t VALUE)
     DATA:  pointer to the data, must contain at least 2 bytes of
     writable space

     VALUE:  the integer to serialize

     Serializes a 16-bit integer in a byte buffer. Result is not
     dependant on machine endianess. Typically used for checksums or
     high-level serializations.

 -- Function: int16_t lw6sys_unserialize_int16 (unsigned char * DATA)
     DATA:  pointer to the data, must contain at least 2 bytes

     Recovers a 16-bit integer from a byte buffer created, for
     instance, with `lw6sys_serialize_int16'.

 -- Function: int lw6sys_shape_check_min_max_whd (lw6sys_whd_t * SHAPE,
          lw6sys_whd_t * MIN, lw6sys_whd_t * MAX)
     SHAPE:  the dimensions to control

     MIN:  the minimum shape allowed

     MAX:  the maximum shape allowed

     Will check wether the given shape respects some basic constraints,
     being not to small and not too big.

     *Return value:*  1 if OK, 0 if not.

 -- Function: int lw6sys_shape_check_pos (lw6sys_whd_t * SHAPE,
          lw6sys_xyz_t * POS)
     SHAPE:  the boundary box

     POS:  the position

     Checks wether position is within the given boundary box.

     *Return value:*  1 if OK, 0 if not.

 -- Function: int lw6sys_shape_is_same (lw6sys_whd_t * SHAPE_A,
          lw6sys_whd_t * SHAPE_B)
     SHAPE_A:  the first shape to compare

     SHAPE_B:  the other shape to compare

     Compares two shapes.

     *Return value:*  1 if same, 0 if not.

 -- Function: int lw6sys_shape_is_same_xy (lw6sys_whd_t * SHAPE_A,
          lw6sys_whd_t * SHAPE_B)
     SHAPE_A:  the first shape to compare

     SHAPE_B:  the other shape to compare

     Compares two shapes, but ignores the z (d) parameter.

     *Return value:*  1 if same_xy, 0 if not.

 -- Function: void lw6sys_signal_custom (int TRAP_ERRORS)
     TRAP_ERRORS:  set to 1 if you want to trap SIGSEGV and SIGFPE

     Set up our signal handlers. This will probably be overrided later
     by other libs such as libSDL, but at least in pure server mode it
     gives a way to treat SIGTERM the right way.

     *Return value:*  none.

 -- Function: void lw6sys_signal_default ()
     Restore default signal handlers for those modified by
     `lw6sys_signal_custom'.

     *Return value:*  none.

 -- Function: void lw6sys_signal_term_handler (int SIGNUM)
     SIGNUM:  SIGTERM

     The own TERM signal handler, will basically call the
     `lw6sys_signal_send_quit' function, which will set a flag used
     later by `lw6sys_signal_poll_quit'.

     *Return value:*  none.

 -- Function: void lw6sys_signal_int_handler (int SIGNUM)
     SIGNUM:  SIGINT

     The own INT signal handler, will basically call the
     `lw6sys_signal_send_quit' function, which will set a flag used
     later by `lw6sys_signal_poll_quit'.

     *Return value:*  none.

 -- Function: void lw6sys_signal_hup_handler (int SIGNUM)
     SIGNUM:  SIGTERM

     The own HUP signal handler, will basically do something that shows
     the program is alive, typically display a NOTICE message.

     *Return value:*  none.

 -- Function: void lw6sys_signal_segv_handler (int SIGNUM)
     SIGNUM:  SIGTERM

     The own SEGV signal handler, will display a backtrace and exit.

     *Return value:*  none.

 -- Function: void lw6sys_signal_fpe_handler (int SIGNUM)
     SIGNUM:  SIGTERM

     The own FPE signal handler, will display a backtrace and exit.

     *Return value:*  none.

 -- Function: void lw6sys_signal_send_quit ()
     Sets the quit flag to 1, so that `lw6sys_signal_poll_quit' returns
     true, that is, tells the polling loop to stop.

     *Return value:*  none.

 -- Function: int lw6sys_signal_poll_quit ()
     Tests wether we need to stop right now.

     *Return value:*  1 if we need to stop now, 0 if program can
     continue.

 -- Function: int lw6sys_sort_int_callback (lw6sys_list_t ** LIST_A,
          lw6sys_list_t ** LIST_B)
     LIST_A:  pointer to a list of int item

     LIST_B:  pointer to a list of int item

     A typicall sort callback function, can be passed to `lw6sys_sort'
     to sort a list of integers.

     *Return value:*  -1 if `list_a' < `list_b' , 0 if `list_a' ==
     `list_b', 1 if `list_a' > `list_b'

 -- Function: int lw6sys_sort_int_desc_callback (lw6sys_list_t **
          LIST_A, lw6sys_list_t ** LIST_B)
     LIST_A:  pointer to a list of int item

     LIST_B:  pointer to a list of int item

     A typicall sort callback function, can be passed to `lw6sys_sort'
     to sort a list of integers. This one will sort in reverse mode.

     *Return value:*  1 if `list_a' < `list_b' , 0 if `list_a' ==
     `list_b', -1 if `list_a' > `list_b'

 -- Function: int lw6sys_sort_float_callback (lw6sys_list_t ** LIST_A,
          lw6sys_list_t ** LIST_B)
     LIST_A:  pointer to a list of float item

     LIST_B:  pointer to a list of float item

     A typicall sort callback function, can be passed to `lw6sys_sort'
     to sort a list of floating point numbers.

     *Return value:*  -1 if `list_a' < `list_b' , 0 if `list_a' ==
     `list_b', 1 if `list_a' > `list_b'

 -- Function: int lw6sys_sort_float_desc_callback (lw6sys_list_t **
          LIST_A, lw6sys_list_t ** LIST_B)
     LIST_A:  pointer to a list of float item

     LIST_B:  pointer to a list of float item

     A typicall sort callback function, can be passed to `lw6sys_sort'
     to sort a list of floating point numbers. This one will sort in
     reverse mode.

     *Return value:*  1 if `list_a' < `list_b' , 0 if `list_a' ==
     `list_b', -1 if `list_a' > `list_b'

 -- Function: int lw6sys_sort_str_callback (lw6sys_list_t ** LIST_A,
          lw6sys_list_t ** LIST_B)
     LIST_A:  pointer to a list of string item

     LIST_B:  pointer to a list of string item

     A typicall sort callback function, can be passed to `lw6sys_sort'
     to sort a list of 0-terminated strings.

     *Return value:*  -1 if `list_a' < `list_b' , 0 if `list_a' ==
     `list_b', 1 if `list_a' > `list_b'

 -- Function: int lw6sys_sort_str_desc_callback (lw6sys_list_t **
          LIST_A, lw6sys_list_t ** LIST_B)
     LIST_A:  pointer to a list of string item

     LIST_B:  pointer to a list of string item

     A typicall sort callback function, can be passed to `lw6sys_sort'
     to sort a list of 0-terminated strings. This one will sort in
     reverse mode.

     *Return value:*  1 if `list_a' < `list_b' , 0 if `list_a' ==
     `list_b', -1 if `list_a' > `list_b'

 -- Function: void lw6sys_sort (lw6sys_list_t ** LIST,
          lw6sys_sort_callback_func_t SORT_FUNC)
     LIST:  the list to sort, might be modified by the function

     SORT_FUNC:  the callback function used to sort

     A general sorting function. Internally, will use the glibc `qsort'
     function, but this one is adapted to the LW6 specific data
     structures, more exactly, the `lw6sys_list' structure. Several
     default sort callbacks are defined, but one is free to use any
     callback, provided it has the right prototype.

 -- Function: void * lw6sys_spinlock_create ()
     Creates a spinlock object.

     *Return value:*  newly allocated pointer.

 -- Function: void lw6sys_spinlock_destroy (void * SPINLOCK)
     SPINLOCK:  the spinlock to destroy.

     Destroys a spinlock object.

     *Return value:*  none.

 -- Function: int lw6sys_spinlock_lock (void * SPINLOCK)
     SPINLOCK:  the spinlock to use

     Locks the spinlock. Note that this should never fail unless
     there's a serious initialization problem, instead, function will
     wait forever until spinlock is released.

     *Return value:*  1 if success, 0 if failure.

 -- Function: int lw6sys_spinlock_trylock (void * SPINLOCK)
     SPINLOCK:  the spinlock to use

     Tries to locks the spinlock. That is, tells wether spinlock can be
     locked immediately or not. Note that this does not mean there's
     100% chance next call to lock will terminated immediately, since
     lock can still be acquired by another thread.

     *Return value:*  1 if spinlock unlocked, 0 if locked or error.

 -- Function: int lw6sys_spinlock_unlock (void * SPINLOCK)
     SPINLOCK:  the spinlock to use

     Unlocks a spinlock.

     *Return value:*  1 if sucess, 0 if error.

 -- Function: char * lw6sys_str_copy (const char * SRC)
     SRC:  the string to copy

     Duplicate a string, creating a new pointer on it, which must be
     freed afterwards. The main difference with `strdup' is that here
     we use the LW6SYS_MALLOC macro to track down possible memory leaks.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_str_concat (const char * STR1, const char *
          STR2)
     STR1:  the left part to be concatenated

     STR2:  the right part to be concatenated

     Concatenate 2 strings, and put the result in a newly allocated
     string. Unlike `strcat' which uses the same pointer.

     *Return value:*  a newly allocated pointer, must be freed.

 -- Function: char * lw6sys_new_sprintf (const char * FMT, ...)
     FMT:  a format string, like the one you would pass to `printf'
     ...: optional arguments, like the ones you would pass to `printf'

     An sprintf like function, except it allocates a new string
     automatically, with "enough space". This is not a highly optimized
     function, it will allocate plenty of memory, possibly several
     times, and thus consume time and resources. But it has the great
     advantage of freeing the programmer of the dirty work of guessing
     "how log will the sprintf'ed string be?" before even generating
     it. So it's a time saver for the programmer.  Additionnally, helps
     avoiding memory leaks and buffer overflows.

     *Return value:*  a new allocated string, must be freed.

 -- Function: int lw6sys_buf_sprintf (char * BUF, int LEN, const char *
          FMT, ...)
     BUF:  a buffer of len+1 chars

     LEN:  the max length of string

     FMT:  a format string, like the one you would pass to `printf'
     ...: optional arguments, like the ones you would pass to `printf'

     Almost like snprintf except that it will *always* append a char 0
     ('\0') at the end of the string. Therefore buf must be of size
     len+1.

     *Return value:*  1 if success, 0 if failed.

 -- Function: int lw6sys_str_is_blank (const char * STR)
     STR:  the string to test

     Tests wether a string is blank, that is, if it's composed of
     space, tabs, or carriage returns only.

     *Return value:*  1 if blank, 0 if not.

 -- Function: int lw6sys_str_is_null_or_empty (const char * STR)
     STR:  the string to test

     Tests wether a string is NULL or empty (string with 0 chars "").

     *Return value:*  1 if NULL or empty, 0 if contains something.

 -- Function: char * lw6sys_str_empty_if_null (char * STR)
     STR:  the string to test

     Returns always a non-NULL string, if string is NULL, returns ""
     The argument `str' is not passed as const else this function would
     equate to a disguised cast from const to non-const.

     *Return value:*  source string or "" if it was NULL

 -- Function: int lw6sys_str_is_same (const char * STR_A, const char *
          STR_B)
     STR_A:  1st string to compare, can be NULL

     STR_B:  2nd string to compare, can be NULL

     Compares two strings for equality. Difference with strcmp is that
     this one won't check for alphabetical order and return -1 or +1,
     but will check for NULL args.  of space, tabs, or carriage returns
     only.

     *Return value:*  1 if same, 0 if not.

 -- Function: int lw6sys_str_is_same_no_case (const char * STR_A, const
          char * STR_B)
     STR_A:  1st string to compare, can be NULL

     STR_B:  2nd string to compare, can be NULL

     Compares two strings for equality. Difference with strcmp is that
     this one won't check for alphabetical order and return -1 or +1,
     but will check for NULL args.  of space, tabs, or carriage returns
     only. This function is not case sensitive.

     *Return value:*  1 if same, 0 if not.

 -- Function: int lw6sys_str_starts_with (const char * STR, const char
          * BEGINNING)
     STR:  the string to analyse

     BEGINNING:  the pattern to search

     Tells wether string starts with a given beginning.

     *Return value:*  1 if `str' starts with `beginning', 0 if not

 -- Function: int lw6sys_str_starts_with_no_case (const char * STR,
          const char * BEGINNING)
     STR:  the string to analyse

     BEGINNING:  the pattern to search

     Tells wether string starts with a given beginning. This function
     is not case sensitive.

     *Return value:*  1 if `str' starts with `beginning', 0 if not

 -- Function: int lw6sys_skip_blanks (char ** STR_PTR)
     STR_PTR:  a pointer to a string pointer (read/write parameter).

     Skips blanks at the beginning of a string. The passed parameter is
     modifed in place. Usefull for parsing.

     *Return value:*  1 if blanks were found, else 0.

 -- Function: void lw6sys_str_cleanup (char * STR)
     STR:  a pointer to the string, which will be modified in-place.

     Used to clean up some strings, for instance if they come from the
     network, we don't necessarly want system chars to be displayed on
     the console. Basically it removes all characters with an ASCII
     code inferior to 32, that is, all system characters. This way,
     there won't be any tab, linefeed, or any of such characters left.

     *Return value:*  none.

 -- Function: void lw6sys_str_cleanup_ascii7 (char * STR)
     STR:  a pointer to the string, which will be modified in-place.

     Used to clean up some strings, for instance if they come from the
     network, we don't necessarly want system chars to be displayed on
     the console. Basically it removes all characters with an ASCII
     code inferior to 32, that is, all system characters. This way,
     there won't be any tab, linefeed, or any of such characters left.
     This function will even remove any character above ASCII 127.

     *Return value:*  none.

 -- Function: char * lw6sys_str_reformat (const char * STR, const char
          * PREFIX, int NB_COLUMNS)
     STR:  a pointer to the string we want to modify

     PREFIX:  a prefix to put before each line

     Reformats a string, that is, insert newline characters in the
     right places to that it fits in a given number of columns.  A
     prefix is appended at the beginning of each line.  Will not handle
     strings which already contain newline characters perfectly.

     *Return value:*  a newly allocated string, must be freed.

 -- Function: void lw6sys_str_reformat_this (char * STR, int NB_COLUMNS)
     STR:  a pointer to the string we want to modify

     Reformats a string, that is, insert newline characters in the
     right places to that it fits in a given number of columns.  This
     function will modify the buffer so `str' must be writeable.  Will
     not handle strings which already contain newline characters
     perfectly.

     *Return value:*  none

 -- Function: char * lw6sys_eol ()
     Returns the value of EOL, that is, the "end of line" sequence.
     Will simply return "\n" on UNIX and "\r\n" on Microsoft platforms.
     Note that while this is convenient to write config and example
     files, for instance, it's a bad idea to use this to generate
     network messages, because this kind of message needs to be
     platform independant. Thus any network protocol oriented string
     would use chr(10) and char(13) directly.

     *Return value:*  the EOL string, must not be freed.

 -- Function: lw6sys_list_t * lw6sys_str_split (const char * STR, char
          C)
     STR:  a string

     C:  the delimiter to split with

     Splits a string, for instance 'foo,bar' splited with 'o' will
     return 'f', " and ',bar'.

     *Return value:*  a list containing 0-terminated strings.

 -- Function: lw6sys_list_t * lw6sys_str_split_no_0 (const char * STR,
          char C)
     STR:  a string

     C:  the delimiter to split with

     Splits a string, ignoring empty '0-length' members. For instance
     'foo,bar' splited with 'o' will return 'f' and ',bar'.

     *Return value:*  a list containing 0-terminated strings.

 -- Function: lw6sys_list_t * lw6sys_str_split_config_item (const char
          * STR)
     STR:  a string

     Splits a string, ignoring empty '0-length' members, and using the
     comma ',' as a separator. This is typically usefull for config
     elements such as backend lists. Only paths need another separator
     (platform-dependant).

     *Return value:*  a list containing 0-terminated strings.

 -- Function: char * lw6sys_str_join (lw6sys_list_t * LIST, const char
          * GLUE)
     LIST:  list of strings to join

     GLUE:  string to add in-between

     Companion function of `lw6sys_str_split' which will do the
     contrary and join the string. Here we use a string as the
     glue/separator, more flexible than a simple char in this case.

     *Return value:*  dynamically allocated string

 -- Function: void lw6sys_str_toupper (char * STR)
     STR:  the string to modify

     Transforms a string to upper case, the pointer must point to
     modifiable data.

     *Return value:*  none, `str' pointed data modified in-place

 -- Function: void lw6sys_str_tolower (char * STR)
     STR:  the string to modify

     Transforms a string to lower case, the pointer must point to
     modifiable data.

     *Return value:*  none, `str' pointed data modified in-place

 -- Function: void lw6sys_str_truncate (char * STR, int LEN)
     STR:  the string to truncate

     LEN:  the new length

     Truncates a string to the max given length. If truncated to 3,
     "abcdef" becomes "abc".

     *Return value:*  none, `str' pointed data modified in-place

 -- Function: char * lw6sys_str_random (int LEN)
     LEN:  the length of the random string to generate.

     Generates a random string, this is usefull for testing.

     *Return value:*  newly allocated string

 -- Function: char * lw6sys_str_random_words (int LEN)
     LEN:  the length of the random string to generate.

     Generates a random string, this is usefull for testing.  This
     version only generates words with alpha-numerical content (letters
     and digits plus spaces).

     *Return value:*  newly allocated string

 -- Function: int lw6sys_str_is_bin (const char * BUF, int LEN)
     BUF:  the buffer to test

     LEN:  the length of the buffer

     Tests wether a buffer is likely to contain a string. This is not a
     bulletproof function, just a simple heuristic based estimator.

     *Return value:*  1 if probably binary, 0 if probably text

 -- Function: char * lw6sys_stream_file_to_str (FILE * F)
     F:  file to get input from, typically stdin

     Will read file/stream and return it as a string. This is not for
     serious stream operation since it will return only when stream is
     closed, and read all file into memory before doing anything.  It's
     also limited in size since it uses a fixed length buffer, so this
     is just for quick testing, typically used by command line switches
     which are used to test encoding/decoding functions. Do not use it
     to read a filesystem file, `lw6sys_read_file_content' is much
     better.

     *Return value:*  newly allocated string.

 -- Function: void lw6sys_stream_str_to_file (FILE * F, char * STR)
     F:  file to receive the string

     STR:  the string to output

     Here only for API consistency, will just put string to file (just
     a simple fprint).

     *Return value:*  none.

 -- Function: int lw6sys_test_exec (int ARGC, char * [] ARGV, int MODE)
     ARGC:  number of args as passed to main

     ARGV:  array of args as passed to main

     MODE:  0 for check only, 1 for full test

     Runs the `sys' module test suite which is specific to exec
     functions, these ones require `argc' and `argv' to be correctly
     set so the extra argument justifies putting it outside
     `lw6sys_test'.  Additionnally, it's not fool proof...

     *Return value:*  1 if test is successfull, 0 on error.

 -- Function: int lw6sys_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `sys' module test suite, testing most (if not all...)
     functions. Note that some tests perform file system operations and
     might therefore fail on a read-only filesystem, or if user
     permissions are not sufficient.

     *Return value:*  1 if test is successfull, 0 on error.

 -- Function: void * lw6sys_thread_create
          (lw6sys_thread_callback_func_t CALLBACK_FUNC,
          lw6sys_thread_callback_func_t CALLBACK_JOIN, void *
          CALLBACK_DATA)
     CALLBACK_FUNC:  the main callback, the function that will run the
     thread

     CALLBACK_JOIN:  function which will be called when joining, at the
     end

     CALLBACK_DATA:  data which will be passed to the callback

     Creates a thread. All threads must be joined. This is because we
     really do not want the game to leak, and detached threads are
     typically the kind of thing that leaves stuff in the heap. Note
     that callback_func is just something which will be called when
     joining it can be NULL.  The idea is to put in it free & delete
     functions, which you can't call before joining when you want the
     main thread to get the results of the callback_func.

     *Return value:*  an opaque pointer on the thread. Can be NULL if
     failed.

 -- Function: int lw6sys_thread_is_callback_done (void * THREAD_HANDLER)
     THREAD_HANDLER:  thread to work on

     Tells wether the callback is done, that is to say, wether the
     results are available, and we can join.

     *Return value:*  1 if done, else 0.

 -- Function: int lw6sys_thread_get_id (void * THREAD_HANDLER)
     THREAD_HANDLER:  thread to query

     Returns the id of the thread, this is an internal value, unique
     for each process, which can help identifying the thread.

     *Return value:*  the id, should be >0.

 -- Function: void * lw6sys_thread_get_data (void * THREAD_HANDLER)
     THREAD_HANDLER:  thread to query

     Returns the data associated to the thread, that is, the pointer
     which was passed to the callback function.

     *Return value:*  a pointer.

 -- Function: void lw6sys_thread_join (void * THREAD_HANDLER)
     THREAD_HANDLER:  thread to end

     Joins the thread, that's to say wait until the thread is over, and
     destroys the ressources associated to it. Note that if the thread
     is looping forever, this function will just wait forever.  This is
     the only way to end a thread.

     *Return value:*  none.

 -- Function: int lw6sys_get_thread_create_count ()
     Utility function used to check how many threads where created and
     joined.

     *Return value:*  how many threads were created.

 -- Function: int lw6sys_get_thread_join_count ()
     Utility function used to check how many threads where created and
     joined.

     *Return value:*  how many threads were joined.

 -- Function: int lw6sys_check_thread_count ()
     Utility function used to check how many threads where created and
     joined.  This one will compare the results of
     `lw6sys_get_thread_create_count' and
     `lw6sys_get_thread_join_count'.

     *Return value:*  1 if both are equals, 0 if not (error...).

 -- Function: int64_t lw6sys_get_timestamp ()
     Returns a 64-bit timestamp, for general purpose. The unit is
     milliseconds, should return the number of milliseconds since
     EPOCH. Don't use this for accurate date handling, but rather to
     technical stamp events.

     *Return value:*  the timestamp.

 -- Function: int64_t lw6sys_get_uptime ()
     Returns the number of milliseconds since program was started.
     Milliseconds are often referred to as 'ticks'.

     *Return value:*  the number of milliseconds (64-bit)

 -- Function: int32_t lw6sys_get_cycle ()
     Returns a 32-bit timestamp, which is likely to "loop" and have
     twice the same value during a single program execution. The idea
     here is just to provide a 32-bit value, not too big, for animation
     purposes.  The idea is that with 64-bit values, numbers are too
     big and if the goal is just to animate a cursor or spin a sphere,
     one does not care if every ten hours there's a display glitch
     because value became zero again. Besides, those values are often
     used for their "rest" in a module operation, to translate textures
     for instance, and having too big numbers causes floating point
     imprecisions. In fact those values or even only 20-bit. The
     function is based on `lw6sys_get_uptime'() so it will return 0 at
     game startup.

     *Return value:*  the cycle value, a 20-bit integer.

 -- Function: void lw6sys_timer_update (int64_t * TIMESTAMP, int64_t *
          UPTIME, int32_t * CYCLE)
     TIMESTAMP:  the timestamp in msec since EPOCH (output), can be NULL

     UPTIME:  the uptime in msec since startup (output), can be NULL

     CYCLE:  a 20-bit value for animation purpose.

     Returns timestamp & uptime with only one system call.

     *Return value:*  none (parameters modified).

 -- Function: void lw6sys_sleep (float SECONDS)
     SECONDS:  the number of seconds to wait, fractions allowed

     Will sleep for the given amount of seconds. Same as `lw6sys_delay'
     only input is provided as a floating number of seconds instead of
     ticks.

 -- Function: void lw6sys_delay (int MSEC)
     MSEC:  the number of milliseconds (ticks) to wait

     Will sleep for the given amount of seconds. Provides accurate
     timing and has "about-millisecond" precision, since it uses
     `select' internally.  Might however be interrupted in some cases,
     so consider function can always return quicker than specified. A
     common usage of this function is polling loops, where you don't
     care if 2 polls are very close, but simply want to avoid polling
     continuously, therefore consumming 100% of the CPU for nothing.

 -- Function: void lw6sys_idle ()
     Will sleep for a minimal amount of time, just giving the OS a
     chance to let other threads/processes execute themselves. This can
     make a big difference in polling loops between a process that eats
     100% CPU and a process that has a very moderate load.  of ticks.

 -- Function: void lw6sys_snooze ()
     Will sleep for some time, like `lw6sys_idle', except it's a
     "longer" time, use this when you don't really care about
     reactivity but are more concerned about saving CPU, not running
     uselessly the same polling code.

 -- Function: void lw6sys_time_init ()
     Global initializations required to handle time properly.

 -- Function: char * lw6sys_date_rfc1123 (int SECONDS_FROM_NOW)
     SECONDS_FROM_NOW:  an offset to add to current time

     Gives the date according to RFC1123, this is typically usefull for
     HTTP protocol.

     *Return value:*  newly allocated string.

 -- Function: char * lw6sys_date_clf ()
     Gives the date in a format which is compatible with Apache CLF
     Common Log Format.

     *Return value:*  newly allocated string.

 -- Function: char * lw6sys_readable_uptime (int64_t TIMESTAMP_DELTA)
     TIMESTAMP_DELTA:  the duration to show, in msec

     Returns a readable form of an uptime, typically 1d 12:34:06 for
     one day, 12 hours, 34 min, 6 sec or 7:03:45 for 7 hours, 3 minutes
     45 sec.

     *Return value:*  newly allocated string

 -- Function: extern char * lw6sys_url_http_from_ip_port (char * IP,
          int PORT)
     IP:  IP address

     PORT:  IP port

     *Returns an http URL pointing to ip:* port that is, adds a heading
     http:// and a trailing /, and treats port 80 as default. This is
     used to create public_url in net modules.

     *Return value:*  a newly allocated string, NULL on error.

 -- Function: lw6sys_url_t * lw6sys_url_parse (char * URL)
     URL:  the URL to parse

     Parses a URL, this is not a complete RFC compliant parser, it's
     only used to transform URLs into their 'canonical' form as well as
     getting basic info such as on which port one should connect.

     *Return value:*  a newly allocated struct, NULL on error

 -- Function: void lw6sys_url_free (lw6sys_url_t * URL)
     URL:  the url struct to free

     Frees a URL struct and all its members.

     *Return value:*  none.

 -- Function: char * lw6sys_url_canonize (char * URL)
     URL:  the url to check & transform

     Checks if a given URL is correct and, if it is, transforms it into
     its canonical form. This is mostly to get rid of typesettings
     error, add a tailing /, transform all domain into lowercase, among
     other things. A canonized url passed into this function should
     come out exactly the same.

     *Return value:*  a newly allocated string.

 -- Function: int lw6sys_url_is_canonized (char * URL)
     URL:  the URL to check

     Checks wether an URL is in its canonized form.

     *Return value:*  1 if OK (canonized form), 0 if not

 -- Function: int lw6sys_vthread_run (lw6sys_thread_callback_func_t
          CALLBACK_FUNC, lw6sys_thread_callback_func_t CALLBACK_JOIN,
          void * CALLBACK_DATA)
     CALLBACK_FUNC:  the main callback, the function that will run the
     thread

     CALLBACK_JOIN:  function which will be called when joining, at the
     end

     CALLBACK_DATA:  data which will be passed to the callback

     This function is similar to `lw6sys_thread_create', but it's
     dedicated to creating a unique (one per process only) thread,
     which, in turn, will be able to run commands in the main thread
     itself. This is a hack to allow apparently spawned child threads
     to be actually handled by main.  This is because some libraries,
     which LW6 uses in threads, need to be actually called in the main
     thread. SDL, for instance. Note that after running this you loose
     control on the main thread, this one will only wait for possible
     commands from the spawned thread, typically sent with the
     `lw6sys_vthread_create' function.

     *Return value:*  1 on success, 0 on failure.

 -- Function: int lw6sys_vthread_is_running ()
     Returns true if `lw6sys_vthread_run' has been called. Note that
     this is not bullet proof, it will return true in a correct manner
     only if you call it from the vthread itself. In practise this
     shouldn't be a problem, the idea is just to write portable code
     for the main control thread and be able to decide on the fly
     wether to create a thread we should prefer the
     `lw6sys_thread_create' or its equivalent the
     `lw6sys_vthread_create' function.

     *Return value:*  1 on success, 0 on failure.

 -- Function: int lw6sys_vthread_create (lw6sys_thread_callback_func_t
          CALLBACK_FUNC, lw6sys_thread_callback_func_t CALLBACK_JOIN,
          void * CALLBACK_DATA)
     CALLBACK_FUNC:  the main callback, the function that will run the
     thread

     CALLBACK_JOIN:  function which will be called when joining, at the
     end

     CALLBACK_DATA:  data which will be passed to the callback

     The equivalent of `lw6sys_thread_create' but for the vthread
     infrastructure.  The idea is to pretend firing a spawned thread,
     but in fact it's the main thread that runs the code. This function
     must imperatively be called within the `lw6sys_vthread_run'
     function, else it will fail or be buggy.

     *Return value:*  1 on success, 0 on failure.

 -- Function: void lw6sys_vthread_join ()
     The equivalent of `lw6sys_thread_join' but for the vthread
     infrastructure.  The idea is to pretend firing a spawned thread,
     but in fact it's the main thread that runs the code. This function
     must imperatively be called within the `lw6sys_vthread_run'
     function, else it will fail or be buggy.

     *Return value:*  none.


File: liquidwar6.info,  Node: libtsk,  Next: libvox,  Prev: libsys,  Up: C API

5.42 libtsk
===========

5.42.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/tsk/index.html'.

5.42.2 API
----------

 -- Function: void lw6tsk_loader_push (lw6tsk_loader_t * LOADER, char *
          MAP_PATH, char * RELATIVE_PATH, lw6sys_assoc_t *
          DEFAULT_PARAM, lw6sys_assoc_t * FORCED_PARAM, int DISPLAY_W,
          int DISPLAY_H, int BENCH_VALUE, int MAGIC_NUMBER)
     LOADER:  loader object

     MAP_PATH:  map-path config entry

     RELATIVE_PATH:  relative map path

     DEFAULT_PARAM:  default parameters to use for load

     FORCED_PARAM:  parameters to be forced and their values

     DISPLAY_W:  display width

     DISPLAY_H:  display height

     MAGIC_NUMBER:  used to calibrate speed

     Pushes a load request to the loader. Will stop the current load
     and push a new one.

     *Return value:*  none.

 -- Function: int lw6tsk_loader_pop (lw6map_level_t ** LEVEL,
          lw6ker_game_struct_t ** GAME_STRUCT, lw6ker_game_state_t **
          GAME_STATE, lw6tsk_loader_t * LOADER)
     LEVEL:  loaded level (out param)

     GAME_STRUCT:  loaded struct (out param)

     GAME_STATE:  loaded state (out param)

     LOADER:  loader object

     Pops data from the loader, will allocate everything dynamically.
     Function can either return just level or level and game struct and
     game state (3 of them together). It's safe to use the received
     level, display it right away, then wait for the rest. If things
     are loaded fast enough, you just receive everything at once.

     *Return value:*  1 if some data, 0 if none.

 -- Function: lw6tsk_loader_t * lw6tsk_loader_new (float SLEEP, char *
          USER_DIR, volatile float * PROGRESS)
     SLEEP:  how many seconds to wait between every poll

     USER_DIR:  user directory

     PROGRESS:  progress indicator to use

     Creates a new loader. This object is used to do some reputed slow
     calculus in the background, in a separated thread. Typical example
     is map loading. This is a high-level objects which encapsulates
     threads and other wizardry.

     *Return value:*  a pointer to the loader, NULL if failed.

 -- Function: void lw6tsk_loader_free (lw6tsk_loader_t * LOADER)
     LOADER:  the loader to free.

     Deletes a loader. Will automatically stop the child thread, free
     data, and so on.

     *Return value:*  none.

 -- Function: char * lw6tsk_loader_repr (lw6tsk_loader_t * LOADER)
     LOADER:  the loader to represent.

     Creates a string which briefly describes the loader.

     *Return value:*  a dynamically allocated pointer, must be freed.

 -- Function: int lw6tsk_loader_get_stage (lw6tsk_loader_t * LOADER)
     LOADER:  the loader to query.

     Returns the current stage of the loader.

     *Return value:*  0 if idle, 1 if loading the map from disk, 2 if
     build dynamic stuff such as game_state.

 -- Function: int lw6tsk_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `tsk' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.


File: liquidwar6.info,  Node: libvox,  Prev: libtsk,  Up: C API

5.43 libvox
===========

5.43.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
`http://www.gnu.org/software/liquidwar6/coverage/src/lib/vox/index.html'.

5.43.2 API
----------

 -- Function: lw6vox_renderer_t * lw6vox_renderer_new
          (lw6ker_game_state_t * GAME_STATE)
     GAME_STATE:  the game state to use

     Creates a voxel rendering object (todo, not implemented yet).

     *Return value:*  renderer object

 -- Function: void lw6vox_renderer_free (lw6vox_renderer_t * RENDERER)
     RENDERER:  the renderer object

     Frees a voxel rendering object (todo, not implemented yet).

     *Return value:*  none

 -- Function: int lw6vox_test (int MODE)
     MODE:  0 for check only, 1 for full test

     Runs the `vox' module test suite.

     *Return value:*  1 if test is successfull, 0 on error.


File: liquidwar6.info,  Node: 2005 .plan,  Next: Fanfic,  Up: Top

Appendix A 2005 .plan
*********************

Here's my .plan file, which describes what I (Christian Mauduit
(mailto:ufoot@ufoot.org)) have planned for Liquid War 6.  There's no
garantee that what's written here is a precise description of the real
future, however it should give a good idea of what I have in mind.

   Note that the information here was written in summer 2005, it might
or not be accurate now, as the main reason for plans to exist is that
people never follow them. I'm no exception.

A.1 Complete rewrite
====================

Liquid War 6 will be an almost complete rewrite. I mean that common
code between branches 5 and 6 might end up in representing 0% of the
total code. I think this is a wise decision, for the current code is
really hard to maintain, and would not survive any serious cleanup. LW5
was first written in 1998, for DOS, when I had much less experience in
programming. In 7 years I - and other people as well - hacked major
enhancements in it such as cross-platform support, network games, and
if you compare release 5.0 with the latest 5.x.x release, you'll see
that a bunch of things have changed. I had never expected I would patch
and fix this game for so long, and it's no surprise that it's bloated
today.

   FYI, here's a list of what makes LW5 unsuitable for major
improvements without a complete rewrite:

   * global variable hell. Lots of things are stored in globals.

   * hard-coded C GUI. Read src/level.c to get an idea of how horrible
     it is.

   * hard-coded 256 colors paletted mode. A clever bet in 1998
     (performance...). Not anymore.

   * generally bloated code. Makes bug-finding very tricky.

A.2 Technologies
================

Liquid War 6 will use a different technical framework than Liquid War 5
(http://www.ufoot.org/liquidwar/v5).

A.2.1 Script + standard C + assembly
------------------------------------

It happens that coding a large project in pure C is a waist of time, if
possible at all.

   If one applies the standard 80/20 rule to a computer game, one might
state that 80% of the code eat up 20% of the CPU and the other 20% of
the code eat up 80% of the CPU, the former being high-level glue code
and the latter being low-level algorithmic code.

   With Liquid War, one could speak of the 99/01 rule. I mean that 99%
of the CPU time concerns only 1% of the code, and vice-versa.
Basically, Liquid War has a very CPU-greedy core algorithm, still
spends a fair amount of CPU displaying stuff (but this is delegated to
the low-level game programming library) and the rest is totally
unsignificant, in terms of CPU. Point is this "rest" represents the
vast majority of the code, and also represents the very same buggy code
I spend nights to patch on Liquid War 5
(http://www.ufoot.org/liquidwar/v5). I'm talking about network code,
GUI, and other high-level glue-code which are currently being written
in C.

   This idea is to write all this in a convenient scripting language.
There won't be any impact on performances. I can't garantee Liquid War
6 will be blazingly fast, but for sure it won't be the scripting
language fault. And of course if, as in Liquid War 3 and 5, I feel the
need to implement some stuff in assembly for performances issues, I
will do it.

   We end up with a multi-language architecture: script + C + assembly.

   My guess is that I'll use Scheme
(http://www.gnu.org/software/guile/) as an extension language. Python
(http://www.python.org) would be a good choice too. Let's say I'll give
Scheme a chance, and if it's really not adapted, I'll switch back to
Python. The point is that today I know Python and don't really know
Scheme, but, well, it's always a pleasure for me to learn new things.
It's fun.

   So what is planned today is that Liquid War 6 will be a Scheme
program, which will call callbacks functions written in C and/or
assembly. These functions will do all the low-level time consuming
algorithmic and graphical stuff. The rest of the code being entirely
scripted.

A.2.2 OpenGL
------------

Liquid War is not a 3D game, so why use OpenGL?

   * it's a very convenient way to access video hardware acceleration
     with XFree86.

   * low-end computers and/or computers without 3D acceleration can
     still run Liquid War 5 (http://www.ufoot.org/liquidwar/v5).

   * I'm interested in learning/using this API 8-)

   This choice implies that I won't use Allegro
(http://alleg.sourceforge.net/) anymore. Allegro stays a very
convenient library and I would recommend it for it's excellent, easy to
learn, powerfull, and stable. But for the needs of Liquid War 6 I'll
use something else (because of OpenGL). I first thought of using GLUT
(http://freeglut.sourceforge.net/) but I might end up simply using SDL
(http://www.libsdl.org/). The idea is just fo have an OpenGL wrapper
which sets up OpenGL in a similar manner on all platforms, and handles
basic things such as mouse or keyboard.

A.2.3 CSound
------------

I've got two excellent books on Csound (http://www.csounds.com/), and
the will to learn how to use this tool.

   I'll probably use Csound for a number of things, ranging from
"bubbling sounds" to full blown music. Stay tuned 8-)

A.3 Functionnalities
====================

A.3.1 Visual enhancements
-------------------------

Of course Liquid War 6 will look nicer than Liquid War 5
(http://www.ufoot.org/liquidwar/v5), blah blah blah. What do you think?

   Maybe I'll try to use some OpenGL features to make it possible to
play on a ball, on a Moebius ring, or other fancy things. I have
zillion of ideas, future will decide which ones will be implemented
first.

   To make it clear, visual enhancements aren't my top-level priority.
However I'll try and make room for these enhancements, and prepare the
terrain correctly. So it's possible that the first releases of Liquid
War 6 won't be that much better than Liquid War 5
(http://www.ufoot.org/liquidwar/v5), but at least Liquid War 6 will
have the possibility to evolve. Something Liquid War 5
(http://www.ufoot.org/liquidwar/v5) doesn't have.

A.3.2 Rules enhancements
------------------------

There are many things that could be done easily:

   * several cursors for one team

   * alliances between teams

   * deep places on a map, where more liquid can reside

   * circular maps which "connect" the left border to the right one

   * ...

   As for graphical improvements, this is not my top-level priority.
Simply, I'll make the game ready-to-improve. Again, all these
enhancements are very hard to code in Liquid War 5
(http://www.ufoot.org/liquidwar/v5), else I would already have coded
them.  Network enhancements

   That's my top-level prioriry.

   Why is that? Well, think of Liquid War in terms of "what makes it a
good game?" and "what makes it a poor game?".

   It's a good game because:

   * the idea is original

   * the gameplay is addictive

   * you can play on a LAN

   * all the family can play

   * it's cross-platform

   * it's Free Software

   It's a poor game because:

   * it's somewhat ugly and has a retro "back in the eighties" look

   * network games are slow on Internet

   * there are not enough active Internet servers

   For the ugliness, well, OpenGL and some artwork should make it. But
for the network, what's the real problem?

   The real problem is that in the current situation, the server needs
to have all "keystrokes" before doing anything, and all players must be
connected before a game starts. Here's what I plan to do to fix this:

   * players will be able to connect on a game "on the fly". This is
     done by most online games, and it's IMHO a required features for a
     network mode to work on Internet (not speaking of local networks,
     but real wide online gaming). How this will fit with Liquid War's
     rules is not totally decided, but I already know of several way to
     achieve this.

   * I'll implement an "anticipation" system "a la" U61
     (http://www.ufoot.org). This means that no matter if a remote
     player has a poor network connection, things will behave as if
     everything was fine. Internally, the system keeps 2 images of the
     game. One which is "anticipated" and displayed to the player, and
     one which is validated but outdated, kept internally. It's a
     little hard to explain, consumes twice as much CPU and memory, but
     it works. It happens that today the lacking ressource for playing
     Liquid War online is more on the network side than on the local
     CPU and memory aspects.

   * I'll take it to the next level and implement a "peer-to-peer-like"
     network model, in which any client can become a server. The idea
     behind is that if a server quits the game, then a client takes its
     role, letting the game continue for hours. This way one could
     virtually have a never ending Liquid War game which would last
     weeks. I believe this could be really cool. I also believe no
     proprietary game will ever implement that, for in this model
     there's no way to force people to access a centralized server,
     this server usually being the major key in the business model of a
     company which sells proprietary software.

   This third point will be the real enhancement of Liquid War with
version 6. It's one of the very points which drives me to rewrite it
completely. First because it's impossible to implement it without some
heavy work. Then because I find it very motivating.

A.3.3 Hey, you forgot my idea!!!
--------------------------------

Many gamers submitted suggestions, either by mail or by posting
messages on the mailing list.

   Don't worry, I keep them. Not reading them here does not mean I
won't implement them. It simply means I won't implement them first. I
first need the game basically function before enhancing it with fancy
stuff.

A.4 Road map
============

As I stated on the mailing list, when thinking about Liquid War 6,
think of years rather than months (unless I get fired, jobless, or
spend several months in a hospital with a laptop).

   Note that this road map takes it for granted that I'll be the lone
coder on the project. It's unlikely that someone is going to help me
for the first stages, until there's at least something real, something
playable. Something that proves that the concept is valid. Besides,
(real) team work implies a significant overhead, especially at project
start. It's hard to figure out how to distribute tasks when the tasks
themselves are not clearly identified. But for the rest (starting in
2007 or 2008), it's possible that external help might greatly...
...help!

   * 2005 : Project framework should be done. This implies that the
     scripting engine is up and running, graphical mode works, config
     and data loading work, basic menus are available. Nothing playable.

   * 2006 : Import the core algorithm from Liquid War 5
     (http://www.ufoot.org/liquidwar/v5), make the game playable in
     "demo mode" ("à la" Liquid War 2), implement the network
     "peer-to-peer-like" mode. At this stage, it will be possible to
     know wether Liquid War 6 is true vaporware or not.

   * 2007 : glue all this together to make something usable by anyone,
     heavy work on the GUI, on the options, on error checking, many bug
     fixes. The goal is to have a game which is equivalent to Liquid
     War 5 (http://www.ufoot.org/liquidwar/v5), with the network
     aspects pushed to the next level.

   * 2008 : tadaaaaaaaaaaa! Release the game "publicly" - inform
     Freecode 8-) - and enhance it with all the feedback from gamers
     (bug reports and suggestions received since 1998). Work on artwork
     (both graphics and musics). Write documentation.

   * 2009 : stabilize the game, patch it for all those things which had
     been forgotten back then in 2005, optimize for speed, bug-fix
     bug-fix bug-fix.

   * 2010 : stop maintaining Liquid War 5
     (http://www.ufoot.org/liquidwar/v5), invite Liquid War fans and
     coders to a hudge party in my garden, sing all night, drink beers
     and wine, teach Liquid War strategies to my 5 and 6 year old
     daughters, remember the old times when Liquid War wasn't so cool
     8-)


File: liquidwar6.info,  Node: Fanfic,  Next: Links,  Prev: 2005 .plan,  Up: Top

Appendix B Fanfic
*****************

Quoting Gavin: "I wrote a liquid war fanfic some time ago [...] I wrote
it after a friend claimed that there wasn't any liquid war fanfic
because it wasn't possible."

   So here it is, a Liquid War fanfic. It was initially written for
Liquid War 5, but applies to Liquid War 6 as well. Enjoy!

B.1 The Battle of Emberlificoted
================================


...

   The General presided over his massing army in his seat, or rather
hovering ring, of power. It dipped slightly as he flew low over his
troops marching through the viscous marsh-like terrain. They were like
children: obedient, loyal, and they ate a lot.

   Glancing at the status panel mounted in front of him he grimaced;
the other five armies: Yellow, Green, Orange, Turquoise, and, of
course, Red, were also readying armies of a similar size to his own.
His violet clones would have to fight hard and eat well to win this day.

   Today would not be a battle of luck, the General mused, it would be
a battle of tactics, of alliances, and of betrayal. Every clone was
identical - that was the general idea behind clones - and the terrain
seemed strangely symmetrical; it would not give advantage to any of the
six armies amassed today. Glancing at the hologram of the battlefield
projected in front of him the General noted that he would have to move
quickly, Orange and Yellow were too close for comfort, though
fortunately Baron Red's army of eponymous coloured clones was the
furthest.

   General Violet's fingertips were sweaty even before they touched the
four main control keys in front of him. They were labeled 'W', 'A',
'D', and, of course, the full retreat button - very useful for
misleading foes and ambushing them as they pursued - 'S'. The keys were
arrange in a roughly equilateral triangular pattern; with 'S' forming
the base and being adjacent to both 'A' and 'D', 'W' formed the tip of
the triangle.

   A long breath left his parched lips as at last he made his move.


   ...

   "Dammit!" he screamed moments later. He had misjudged Captain Yellow
and Commander Orange; he had expected one at least to attack
immediately, one he could have handled. They were working together -
foiling his attempt to shoot between them to near the center of the
battlefield to gain a better vantage point. Yellow had shot down
towards him, cutting off his advance, and now Orange had sealed his
escape route. "It's not over yet" muttered the General. He opened a
voice channel with Commander Orange:

   "Very clever. Flawed, but still clever."

   "Flawed?" came the reply.

   "Yes flawed, when the good Captain is finished devouring my army who
do you think he will turn to next?", bluffed the General - his hands
worked quickly as he manoeuvred his hovering control ring, all that his
troops ever saw of him, carefully towards the weakest section of his
attackers. If he could just break out a few units he could soon turn
the tide against both Yellow and Orange.

   "We have an alliance..." Orange's voice was unsure now.

   Time for some sarcasm to through her even more off balance, thought
the General,

   "I gathered", he spoke softly, slowly, and with too much meaning.
Then closing the channel he turned his attention back to his escape.


   ...

   "Yes!" wooped the ecstatic figure of the General. Fifty or so of his
troops had broken free undetected and were even now working their way
cautiously towards the camps of the Yellow army, only the front lines
were still actively fighting; this opening gambit of Yellow and Orange
had turned into a stale siege and Yellow's army had pitched tent.

   General Violet steered his hovering guidance ring to the center of
the Yellow camp. His troops struck, both those who had got behind the
lines and those who were still besieged. Yellow reacted too slowly and
suddenly found that her army, was shrinking back from the onslaught.
There was nowhere to run to, and bye now her only ally - Commander
Orange - had abandoned her to her fate; he was too busy engaging Sir.
Turquoise, who had managed to escape from the slaughter that the Baron
had caused to the Turquoise ranks and was even now valiantly attacking
the flanks of the Orange troops.

   A glance at the status panel showed that Yellow's life force was
fading quickly: 8%, 3%, 1%, Gone.

   The General smiled, he always enjoyed getting the first kill, and by
now his armies life force had grown and his clones had replicated. With
his, now, formidable fighting force it was no problem to engulf both
Sir. Turquoise and Commander Orange's brawling armies and annihilate
them. Once again his army grew in size and power. Now if only the Baron
didn't notice that..., thought the General.


   ...

   "Too late!" yelped the General, now thrown into panic, as he saw the
approaching Baron. His army had also grown in size and power - having
fatally injured the Turquoise army within the opening moments of the
battle, and having finally managed to catch the elusive fleeing form
of, or what remained of, Emperor Green.

   Gripping the controls harder the General thought quickly, his army
doesn't so completely outnumber me that this is already over, however
unless I can cause him to make a mistake that allows me to take the
upper hand then I will inevitably lose. Maybe I can...

   This thought was terminated and replaced by another as the Baron's
angry red troops broke through the undergrowth that had covered their
movements and started to surround the General's army. The thought that
now throbbed through the panic-stricken mind of General Violet was
simply 'Run!'.

   Even as he signaled the retreat and made for what seemed to be the
only possible means of escape the Baron's blood red control ring
appeared at the opening. The General knew it was over, even before the
host of red beings appeared at the opening.

   There was no escape. His life force was almost depleted and he was
surrounded. Then it was that the Baron decided to communicate:

   "Too bad. It was a good game"

   The General blinked, gaped, and was generally gobsmacked. Just
before his life force completely failed and his own weary eyes closed
in defeat he snarled,

   "What!? This is not a game!" were the General's dying words.


File: liquidwar6.info,  Node: Links,  Next: Copying,  Prev: Fanfic,  Up: Top

Appendix C Links
****************

This section lists various Internet Liquid War related links.

C.1 Official links
==================

These are the "official" links, hopefully you'll find everything you
need here:

   * `http://www.gnu.org/software/liquidwar6/': Liquid War 6 homepage

   * `http://www.gnu.org/software/liquidwar6/manual/': Online manual

   * `http://download.savannah.gnu.org/releases/liquidwar6/': Savannah
     downloads

   * `http://www.ufoot.org/download/liquidwar/v6/': ufoot.org downloads
     (mirror)

   * `http://www.ufoot.org/liquidwar/v6/snapshots/': daily snapshots

   * `http://git.savannah.gnu.org/cgit/liquidwar6.git': GIT repository

   * `http://savannah.gnu.org/projects/liquidwar6/': Project on Savannah

   * `http://savannah.gnu.org/bugs/?func=additem&group=liquidwar6':
     Submit a bug report

   * `http://lists.gnu.org/archive/html/help-liquidwar6/': Mailing-list
     archives

   * `http://ufoot.org:8056/': Permanent "seed" server running latest
     snapshot

C.2 Other sites
===============

Note that some of these links might link to and/or promote proprietary
software. It's important to emphasize Liquid War 6 is free software,
free as in speech, and you are encouraged to use software that protects
your freedom. However, for your convenience, those links are provided,
they might give you a hopefully neutral idea of what the game is all
about.

   This list is also by no way extensive, it's provided "as is".

   * `http://en.wikipedia.org/wiki/Liquid_War': Liquid War entry on
     Wikipedia

   * `http://fr.wikipedia.org/wiki/Liquid_War': Liquid War entry on
     Wikipedia (French)

   * `http://freecode.com/projects/liquid-war-6': Liquid War 6 on
     Freecode.

   * `http://www.ohloh.net/p/liquidwar6': Liquid War 6 on ohloh.

C.3 Old stuff
=============

Various links that are deprecated, but still might contain interesting
informations for those who enjoy digging into the past.

   * `http://arch.sv.gnu.org/archives/liquidwar6/': GNU Arch repository
     (replaced by Git as for this project)

   * `http://www.ufoot.org/liquidwar/v5': Liquid War 5, the previous
     version of the game.

   * `http://git.savannah.gnu.org/gitweb/?p=liquidwar6.git': Gitweb
     interface, cgit seems to be Savannah's default now.


File: liquidwar6.info,  Node: Copying,  Next: GNU Free Documentation License,  Prev: Links,  Up: Top

Appendix D GNU GENERAL PUBLIC LICENSE
*************************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains
free software for all its users.  We, the Free Software Foundation, use
the GNU General Public License for most of our software; it applies
also to any other work released this way by its authors.  You can apply
it to your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you
have certain responsibilities if you distribute copies of the software,
or if you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the
manufacturer can do so.  This is fundamentally incompatible with the
aim of protecting users' freedom to change the software.  The
systematic pattern of such abuse occurs in the area of products for
individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the
practice for those products.  If such problems arise substantially in
other domains, we stand ready to extend this provision to those domains
in future versions of the GPL, as needed to protect the freedom of
users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it
     on a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may
     convey the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any
     non-source form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work
     with that Major Component, or to implement a Standard Interface
     for which an implementation is available to the public in source
     code form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including
     scripts to control those activities.  However, it does not include
     the work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files
     associated with source files for the work, and the source code for
     shared libraries and dynamically linked subprograms that the work
     is specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output,
     given its content, constitutes a covered work.  This License
     acknowledges your rights of fair use or other equivalent, as
     provided by copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for
     you, or provide you with facilities for running those works,
     provided that you comply with the terms of this License in
     conveying all material for which you do not control copyright.
     Those thus making or running the covered works for you must do so
     exclusively on your behalf, under your direction and control, on
     terms that prohibit them from making any copies of your
     copyrighted material outside their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention
     to limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for
          as long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of
          the written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access
          to the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated
          by you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to
          the object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long
          as needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.


     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product
     is a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or
     installed by the recipient, or for the User Product in which it
     has been modified or installed.  Access to a network may be denied
     when the modification itself materially and adversely affects the
     operation of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License
     with terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be
          marked in reasonable ways as different from the original
          version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or
     conveying under this License, you may add to a covered work
     material governed by the terms of that license document, provided
     that the further restriction does not survive such relicensing or
     conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under
     the third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, you do not qualify to receive new
     licenses for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

 10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to
     possession of the Corresponding Source of the work from the
     predecessor in interest, if the predecessor has it or can get it
     with reasonable efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for
     exercise of rights granted under this License, and you may not
     initiate litigation (including a cross-claim or counterclaim in a
     lawsuit) alleging that any patent claim is infringed by making,
     using, selling, offering for sale, or importing the Program or any
     portion of it.

 11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its
     contributor version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To
     "grant" such a patent license to a party means to make such an
     agreement or commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under
     which you make payment to the third party based on the extent of
     your activity of conveying the work, and under which the third
     party grants, to any of the parties who would receive the covered
     work from you, a discriminatory patent license (a) in connection
     with copies of the covered work conveyed by you (or copies made
     from those copies), or (b) primarily for and in connection with
     specific products or compilations that contain the covered work,
     unless you entered into that arrangement, or that patent license
     was granted, prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

 12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot convey a covered work so as to satisfy
     simultaneously your obligations under this License and any other
     pertinent obligations, then as a consequence you may not convey it
     at all.  For example, if you agree to terms that obligate you to
     collect a royalty for further conveying from those to whom you
     convey the Program, the only way you could satisfy both those
     terms and this License would be to refrain entirely from conveying
     the Program.

 13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

 14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.
     Such new versions will be similar in spirit to the present
     version, but may differ in detail to address new problems or
     concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the
     Free Software Foundation.  If the Program does not specify a
     version number of the GNU General Public License, you may choose
     any version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

 15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

 16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU
     FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

 17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.


END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see `http://www.gnu.org/licenses/'.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type `show c' for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see `http://www.gnu.org/licenses/'.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read `http://www.gnu.org/philosophy/why-not-lgpl.html'.


File: liquidwar6.info,  Node: GNU Free Documentation License,  Next: Indexes,  Prev: Copying,  Up: Top

Appendix E GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, receipt of a copy of some or all of
     the same material does not give you any rights to use it.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.  If the Document specifies that a proxy
     can decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

 11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.

