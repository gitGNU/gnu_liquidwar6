@deftypefun {int} {lw6cfg_parse_command_line} (void * @var{context})
@var{context}:  opaque pointer on a context

Overwrites any existing option with command line args

@strong{Return value:}  1 if success, 0 if error
@end deftypefun

@deftypefun {int} {lw6cfg_defaults} (void * @var{context})
@var{context}:  opaque pointer on a context

Sets all values to their defaults.

@strong{Return value:}  1 if success, 0 if error
@end deftypefun

@deftypefun {int} {lw6cfg_merge_env} (void * @var{cfg_context})
@var{cfg_context}:  a context returned by @code{lw6cfg_init}

Overwrites any existing vale in the config with environment
variables prefixed by LW6_.

@strong{Return value:}  1 if successfull, 0 if error.
@end deftypefun

@deftypefun {int} {lw6cfg_load_exp} (const char * @var{user_dir}, int * @var{exp})
@var{user_dir}:  the user directory

@var{exp}:  the exp (out param)

Gets exp from file.

@strong{Return value:}  1 on success, 0 on failure
@end deftypefun

@deftypefun {int} {lw6cfg_save_exp} (const char * @var{user_dir}, int @var{exp})
@var{user_dir}:  the user directory

@var{exp}:  the exp

Saves exp to file.

@strong{Return value:}  1 on success, 0 on failure
@end deftypefun

@deftypefun {char *} {lw6cfg_format} (const char * @var{key}, const char * @var{value}, lw6hlp_type_t @var{type})
@var{key}:  the key of the value to format

@var{value}:  the value to format

@var{type}:  the type of the value to format

Formats, converts, a given value to its cannonical representation.
Booleans will be converted to true/false, strings containing integers
will be stripped from junk, and so on. This is a performance killer
but will ensure everything is correct.

@strong{Return value:}  a newly allocated string, containing the same as the
input, but reformatted the pedantic way.
@end deftypefun

@deftypefun {char *} {lw6cfg_format_guess_type} (const char * @var{key}, const char * @var{value})
@var{key}:  the key of the value to format

@var{value}:  the value to format

Formats, converts, a given value to its cannonical representation.
Booleans will be converted to true/false, strings containing integers
will be stripped from junk, and so on. This is a performance killer
but will ensure everything is correct. This function will automatically
guess the type of the value from its description in the help system.

@strong{Return value:}  a newly allocated string, containing the same as the
input, but reformatted the pedantic way.
@end deftypefun

@deftypefun {int} {lw6cfg_load} (void * @var{cfg_context}, const char * @var{filename})
@var{cfg_context}:  a context returned by @code{lw6cfg_init}

@var{filename}:  a file path, absolute or relative

Loads the given config file, and stores its values into the current 
context. Parameters which are both in the config file and given
as command line parameters, will be taken from the command-line.

@strong{Return value:}  1 if successfull, 0 if error.
@end deftypefun

@deftypefun {int} {lw6cfg_option_exists} (void * @var{context}, const char * @var{key})
@var{context}:  context to query

@var{key}:  key to search

Returns wether a key exists within context or not.

@strong{Return value:}  1 if exists, 0 if not
@end deftypefun

@deftypefun {char *} {lw6cfg_get_option} (void * @var{context}, const char * @var{key})
@var{context}:  context to query

@var{key}:  key to search

Returns the current value for a given query, the returned value is always
a string, typically the string one would pass on the command line or
set in a config file

@strong{Return value:}  pointer to string, must be freed.
@end deftypefun

@deftypefun {void} {lw6cfg_set_option} (void * @var{context}, const char * @var{key}, const char * @var{value})
@var{context}:  context to modify

@var{key}:  key to search and change

@var{value}:  new value

Sets a given key to the specified value, this is a string only
function, pass the value you would pass on the command line or
set in a config file.

@strong{Return value:}  none
@end deftypefun

@deftypefun {int} {lw6cfg_get_option_int} (void * @var{context}, const char * @var{key})
@var{context}:  context to query

@var{key}:  key to search

Returns an option as an integer. Note that this function does
not know wether the parameter should really be an integer or not,
so you can call it even on non-integer values, but of course
results will have no real meaning.

@strong{Return value:}  option value converted to int
@end deftypefun

@deftypefun {void} {lw6cfg_set_option_int} (void * @var{context}, const char * @var{key}, int @var{value})
@var{context}:  context to modify

@var{key}:  key to search and change

@var{value}:  new value

Set a config option to an integer value. Note that this function
does not know wether the parameter should really be an integer or not,
so you can call it even on non-integer values, at your own risk.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6cfg_get_option_bool} (void * @var{context}, const char * @var{key})
@var{context}:  context to query

@var{key}:  key to search

Returns an option as a boolean. Note that this function does
not know wether the parameter should really be a boolean or not,
so you can call it even on non-boolean values, but of course
results will have no real meaning.

@strong{Return value:}  option value converted to boolean
@end deftypefun

@deftypefun {void} {lw6cfg_set_option_bool} (void * @var{context}, const char * @var{key}, int @var{value})
@var{context}:  context to modify

@var{key}:  key to search and change

@var{value}:  new value

Set a config option to a boolean value. Note that this function
does not know wether the parameter should really be a boolean or not,
so you can call it even on non-boolean values, at your own risk.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6cfg_must_be_saved} (const char * @var{key})
@var{key}:  key to test

Tells wether a key should be saved in the config file.
Typically, some options you don't want to savem such as
the location of the config file itself. Most of those
non-savable parameters are path-related. This does not
mean no paths are saved in the config file.

@strong{Return value:}  1 if must be saved, 0 if not
@end deftypefun

@deftypefun {int} {lw6cfg_save} (void * @var{cfg_context}, const char * @var{filename})
@var{cfg_context}:  a context returned by @code{lw6cfg_init}

@var{filename}:  a file path, absolute or relative

Save current options into the given config file. Before saving
the file, all command line arguments will be read and will
override current values. This means the saved file will contain
values given as command line arguments.

@strong{Return value:}  1 if successfull, 0 if error.
@end deftypefun

@deftypefun {void *} {lw6cfg_init} (int @var{argc}, const char * [] @var{argv})
@var{argc}:  number of command line arguments, as given to @code{main}

@var{argv}:  a list of command line arguments, as given to @code{main}

Initializes a config context object. This object is hidden
behind an opaque void * pointer to avoid direct access to
its elements.

@strong{Return value:}  an opaque pointer, must be freed with @code{lw6cfg_quit}.
@end deftypefun

@deftypefun {void} {lw6cfg_quit} (void * @var{cfg_context})
@var{cfg_context}:  a context returned by @code{lw6cfg_init}

Frees a config cfg_context object. You must call this
once you're done with the context.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6cfg_reset} (int @var{argc}, const char * [] @var{argv})
@var{argc}:  number of command line arguments, as given to @code{main}

@var{argv}:  a list of command line arguments, as given to @code{main}

Overwrites the config file with defaults.
Use this to get rid of old configurations.
@end deftypefun

@deftypefun {int} {lw6cfg_test_register} (int @var{mode})
@var{mode}:  test mode (bitmask)

Registers all tests for the libcfg module.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

@deftypefun {int} {lw6cfg_test_run} (int @var{mode})
@var{mode}:  test mode (bitmask)

Runs the @code{cfg} module test suite, testing most (if not all...)
functions.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

@deftypefun {char *} {lw6cfg_unified_get_value} (int @var{argc}, const char * [] @var{argv}, char * @var{key})
@var{argc}:  number of command-line args, as passed to @code{main}

@var{argv}:  arry of command-line args, as passed to @code{main}

@var{key}:  the key to query

Unified "value" getter, which gets informations from environment
variables, command line, and config file. The rules is that the command-line
argument always has the last word. It will override any other value.
Follows environment variables, which will be used if no command-line
argument is supplied. Note that these are "LW6_" prefixed and uppercased
environment variables as opposed to lowercased and "dash-separated"
keys. Finally, if there's no environment variable, nor any config-file
corresponding entry, the value will be searched in the config file.
If there's no information in the config file, NULL is returned.

@strong{Return value:}  a string with the value. Can be NULL. Must be freed.
@end deftypefun

@deftypefun {char *} {lw6cfg_unified_get_user_dir} (int @var{argc}, const char * [] @var{argv})
@var{argc}:  number of command-line args, as passed to @code{main}

@var{argv}:  arry of command-line args, as passed to @code{main}

Gets the user dir, taking all parameters in account, that's to
say the "LW6_USER_DIR" env value, the "--user-dir" command-line
paramater and the LW6DEF_USER_DIR config file entry.

@strong{Return value:}  the directory path, might be NULL, must be freed.
@end deftypefun

@deftypefun {char *} {lw6cfg_unified_get_log_file} (int @var{argc}, const char * [] @var{argv})
@var{argc}:  number of command-line args, as passed to @code{main}

@var{argv}:  arry of command-line args, as passed to @code{main}

Gets the log file, taking all parameters in account, that's to
say the "LW6_LOG_FILE" env value, the "--log-file" command-line
paramater and the LW6DEF_LOG_FILE config file entry.

@strong{Return value:}  the directory path, might be NULL, must be freed.
@end deftypefun

@deftypefun {char *} {lw6cfg_unified_get_music_path} (int @var{argc}, const char * [] @var{argv})
@var{argc}:  number of command-line args, as passed to @code{main}

@var{argv}:  arry of command-line args, as passed to @code{main}

Gets the user dir, taking all parameters in account, that's to
say the "LW6_MUSIC_PATH" env value, the "--music-path" command-line
paramater and the LW6DEF_MUSIC_PATH config file entry.

@strong{Return value:}  the directory path, might be NULL, must be freed.
@end deftypefun

@deftypefun {char *} {lw6cfg_unified_get_map_path} (int @var{argc}, const char * [] @var{argv})
@var{argc}:  number of command-line args, as passed to @code{main}

@var{argv}:  arry of command-line args, as passed to @code{main}

Gets the user dir, taking all parameters in account, that's to
say the "LW6_MAP_PATH" env value, the "--map-path" command-line
paramater and the LW6DEF_MAP_PATH config file entry.

@strong{Return value:}  the directory path, might be NULL, must be freed.
@end deftypefun

@deftypefun {char *} {lw6cfg_xml_element} (lw6hlp_type_t @var{type})
@var{type}:  type as an enum

Returns the string corresponding to a given type, suitable for
use in XML files. For instance if you pass @code{LW6HLP_TYPE_INT} then
you will obtain the string int (string of 3 chars containing i, n 
and t.

@strong{Return value:}  string, must not be freed.
@end deftypefun

@deftypefun {void} {lw6cfg_read_xml_int} (const char * @var{xml_key}, const char * @var{xml_value}, const char * @var{target_key}, int * @var{value})
@var{xml_key}:  key found in XML file

@var{xml_value}:  value found in XML file

@var{target_key}:  key we're searching for

@var{value}:  the value if found (out param)

Tries to find a value in a key/value pair. If @code{xml_key} and @code{target_key}
match, then will put the corresponding value (converted to int) in
the @code{value} param. Typically, you would call this in a loop on every
single entry found in an XML file, in an expat callback.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6cfg_read_xml_bool} (const char * @var{xml_key}, const char * @var{xml_value}, const char * @var{target_key}, int * @var{value})
@var{xml_key}:  key found in XML file

@var{xml_value}:  value found in XML file

@var{target_key}:  key we're searching for

@var{value}:  the value if found (out param)

Tries to find a value in a key/value pair. If @code{xml_key} and @code{target_key}
match, then will put the corresponding value (converted to boolean) in
the @code{value} param. Typically, you would call this in a loop on every
single entry found in an XML file, in an expat callback.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6cfg_read_xml_float} (const char * @var{xml_key}, const char * @var{xml_value}, const char * @var{target_key}, float * @var{value})
@var{xml_key}:  key found in XML file

@var{xml_value}:  value found in XML file

@var{target_key}:  key we're searching for

@var{value}:  the value if found (out param)

Tries to find a value in a key/value pair. If @code{xml_key} and @code{target_key}
match, then will put the corresponding value (converted to float) in
the @code{value} param. Typically, you would call this in a loop on every
single entry found in an XML file, in an expat callback.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6cfg_read_xml_string} (const char * @var{xml_key}, const char * @var{xml_value}, const char * @var{target_key}, char ** @var{value})
@var{xml_key}:  key found in XML file

@var{xml_value}:  value found in XML file

@var{target_key}:  key we're searching for

@var{value}:  the value if found (out param)

Tries to find a value in a key/value pair. If @code{xml_key} and @code{target_key}
match, then will put the corresponding value (as a string) in
the @code{value} param. Typically, you would call this in a loop on every
single entry found in an XML file, in an expat callback.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6cfg_read_xml_color} (const char * @var{xml_key}, const char * @var{xml_value}, const char * @var{target_key}, lw6sys_color_8_t * @var{value})
@var{xml_key}:  key found in XML file

@var{xml_value}:  value found in XML file

@var{target_key}:  key we're searching for

@var{value}:  the value if found (out param)

Tries to find a value in a key/value pair. If @code{xml_key} and @code{target_key}
match, then will put the corresponding value (converted to a color) in
the @code{value} param. Typically, you would call this in a loop on every
single entry found in an XML file, in an expat callback.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6cfg_read_key_value_xml_file} (const char * @var{filename}, lw6cfg_read_xml_callback_func_t @var{callback_func}, void * @var{callback_data})
@var{filename}:  full path of file to read

@var{callback_func}:  callback function to be called on each element

@var{callback_data}:  additionnal pointer passed to callback function

Will parse a file and call the given callback on each element.
This is an over-simplified way to read XML file, in fact we just
explain plain non-nested simple elements but this is exactly what
LW config files are made of.

@strong{Return value:}  1 on success, 0 on failure.
@end deftypefun

@deftypefun {void} {lw6cfg_write_xml_int} (FILE * @var{f}, const char * @var{key}, int @var{value})
@var{f}:  file to write data to (append mode)

@var{key}:  key to write

@var{value}:  value to write

Writes an int entry into an opened XML file.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6cfg_write_xml_bool} (FILE * @var{f}, const char * @var{key}, int @var{value})
@var{f}:  file to write data to (append mode)

@var{key}:  key to write

@var{value}:  value to write

Writes a boolean entry into an opened XML file.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6cfg_write_xml_float} (FILE * @var{f}, const char * @var{key}, float @var{value})
@var{f}:  file to write data to (append mode)

@var{key}:  key to write

@var{value}:  value to write

Writes a float entry into an opened XML file.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6cfg_write_xml_string} (FILE * @var{f}, const char * @var{key}, const char * @var{value})
@var{f}:  file to write data to (append mode)

@var{key}:  key to write

@var{value}:  value to write

Writes a string entry into an opened XML file.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6cfg_write_xml_color} (FILE * @var{f}, const char * @var{key}, lw6sys_color_8_t @var{value})
@var{f}:  file to write data to (append mode)

@var{key}:  key to write

@var{value}:  value to write

Writes a color entry into an opened XML file.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6cfg_write_xml_guess_type} (FILE * @var{f}, const char * @var{key}, const char * @var{value})
@var{f}:  file to write data to (append mode)

@var{key}:  key to write

@var{value}:  value to write

Writes an entry into an opened XML file, will try and guess
type from the internal help system, typically, if this is a
standard config file entry (the one documented by the about
command line function) it will pick up the right type. The
reason not to use this all the times is that sometimes, one
might to to store non-standard options, and additionnally,
guessing the type does consume some CPU.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6cfg_write_xml_guess_type_skip_same} (FILE * @var{f}, const char * @var{key}, const char * @var{value})
@var{f}:  file to write data to (append mode)

@var{key}:  key to write

@var{value}:  value to write

Writes an entry into an opened XML file, will try and guess
type from the internal help system, typically, if this is a
standard config file entry (the one documented by the about
command line function) it will pick up the right type. The
reason not to use this all the times is that sometimes, one
might to to store non-standard options, and additionnally,
guessing the type does consume some CPU. Also, this function
will write only values that are different from the default.

@strong{Return value:}  none.
@end deftypefun

