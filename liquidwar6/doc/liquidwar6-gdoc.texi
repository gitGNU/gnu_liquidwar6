@deftypefun {void} {lw6_release} ()

Functions which will call @code{quit}(), @code{free}(), @code{destroy}() on whatever
smob object that has threads and/or requires hardware ressources.
This is to be called before the Guile interpreter ends. This is because
when it garbage collects objects at the end of the program, it has
no idea of what order to use when freeing objects. So if an object
which uses another one in a thread is freed after the other is freed,
you get a (rather unexplainabled if not warned) segfault.

@strong{Return value:}  none
@end deftypefun

@deftypefun {void} {lw6_exit} ()

Will exit the program. If there are some display objects alive,
that is if there's a display activated, it will find them and
send a quit event, giving a chance to the to exit cleanly.
If not, it will just call @code{exit}() directly.

@strong{Return value:}  none
@end deftypefun

@deftypefun {int} {lw6_main} (int @var{argc}, char * [] @var{argv})
@var{argc}:  the argc parameter of the @code{main}() function, that is, the number
of command-line args.

@var{argv}:  the argv parameter of the @code{main}() function, that is, an array
containing pointers on command-line args.

This function is directly called by @code{main}(). This means by linking
against libliquidwar6 and calling it, you would have a program
that is almost exactly the "official" upstream liquidwar6 binary,
except you can tweak it and have all the power to call whatever
other functions you like, embed it. In short, everything the binary
does, you can do it in your own binarn, by linking against the
library and calling this function.

@strong{Return value:}  1 if success, zero if failure. Note that this
is the "standard" C / liquidwar6 way to proceed, but your @code{main}()
function should return 0 if success, else an error code. Typical
use is "return !lw6_main(argc, argv);".
@end deftypefun

@deftypefun {int} {lw6_process_non_run_options} (int @var{argc}, char * [] @var{argv}, int * @var{run_game})
@var{argc}:  the number of command-line args, as passed to @code{main()}

@var{argv}:  an array of strings containing command-line args, as passed to @code{main()}

@var{run_game}:  a pointer to a boolean which will contain true (1) if the
game must be launched, or false (0) if the option is such that game 
must be skipped. Example: --copyright, --help, ...


@strong{Return value:}  non-zero if success, 0 if error. The error can be, for
instance, the test suite returning "no, tests were not OK".
@end deftypefun

@deftypefun {int} {lw6_test} (int @var{mode})
@var{mode}:  0 for check only, 1 for full test

Runs the liquidwar6 core module test suite, this will mostly
test how Guile script integration works, loading a sample
script and running it. It does not launch all the other sub
modules tests.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

