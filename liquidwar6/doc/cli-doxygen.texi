
  
@deftp {Struct} {lw6cli_backend_s}

    
    
@end deftp

@defcv {Member} {lw6cli_backend_s} {dl_handle}
@strong{Type:} @code{lw6dyn_dl_handle_t *}

@strong{Definition:} @code{lw6dyn_dl_handle_t* lw6cli_backend_s::dl_handle}


        
        
@end defcv

@defcv {Member} {lw6cli_backend_s} {cli_context}
@strong{Type:} @code{void *}

@strong{Definition:} @code{void* lw6cli_backend_s::cli_context}


        
        
@end defcv

@defcv {Member} {lw6cli_backend_s} {argc}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6cli_backend_s::argc}


        
        
@end defcv

@defcv {Member} {lw6cli_backend_s} {argv}
@strong{Type:} @code{const char **}

@strong{Definition:} @code{const char** lw6cli_backend_s::argv}


        
        
@end defcv

@defcv {Member} {lw6cli_backend_s} {id}
@strong{Type:} @code{u_int32_t}

@strong{Definition:} @code{u_int32_t lw6cli_backend_s::id}


        
        
@end defcv

@defcv {Member} {lw6cli_backend_s} {name}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6cli_backend_s::name}


        
        
@end defcv

@defcv {Member} {lw6cli_backend_s} {init}
@strong{Type:} @code{void *(*}

@strong{Definition:} @code{void*(* lw6cli_backend_s::init)(int argc, const char *argv[])}


        
        
@end defcv

@defcv {Member} {lw6cli_backend_s} {quit}
@strong{Type:} @code{void(*}

@strong{Definition:} @code{void(* lw6cli_backend_s::quit)(void *cli_context)}


        
        
@end defcv

@defcv {Member} {lw6cli_backend_s} {process_oob}
@strong{Type:} @code{int(*}

@strong{Definition:} @code{int(* lw6cli_backend_s::process_oob)(void *cli_context, lw6nod_info_t *node_info, lw6cli_oob_data_t *oob_data)}


        
        
@end defcv

@defcv {Member} {lw6cli_backend_s} {open}
@strong{Type:} @code{lw6cnx_connection_t *(*}

@strong{Definition:} @code{lw6cnx_connection_t*(* lw6cli_backend_s::open)(void *cli_context, char *local_url, char *remote_url, char *remote_ip, int remote_port, char *password, u_int64_t local_id, u_int64_t remote_id, int dns_ok, int network_reliability, lw6cnx_recv_callback_t recv_callback_func, void *recv_callback_data)}


        
        
@end defcv

@defcv {Member} {lw6cli_backend_s} {close}
@strong{Type:} @code{void(*}

@strong{Definition:} @code{void(* lw6cli_backend_s::close)(void *cli_context, lw6cnx_connection_t *connection)}


        
        
@end defcv

@defcv {Member} {lw6cli_backend_s} {send}
@strong{Type:} @code{int(*}

@strong{Definition:} @code{int(* lw6cli_backend_s::send)(void *cli_context, lw6cnx_connection_t *connection, u_int32_t physical_ticket_sig, u_int32_t logical_ticket_sig, u_int64_t logical_from_id, u_int64_t logical_to_id, char *message)}


        
        
@end defcv

@defcv {Member} {lw6cli_backend_s} {poll}
@strong{Type:} @code{void(*}

@strong{Definition:} @code{void(* lw6cli_backend_s::poll)(void *cli_context, lw6cnx_connection_t *connection)}


        
        
@end defcv

@defcv {Member} {lw6cli_backend_s} {repr}
@strong{Type:} @code{char *(*}

@strong{Definition:} @code{char*(* lw6cli_backend_s::repr)(void *cli_context, lw6cnx_connection_t *connection)}


        
        
@end defcv



  
@deftp {Struct} {lw6cli_oob_data_s}

    
Holds the data for the process_oob function, this is merely a utility struct to simplify headers/     
@end deftp

@defcv {Member} {lw6cli_oob_data_s} {creation_timestamp}
@strong{Type:} @code{int64_t}

@strong{Definition:} @code{int64_t lw6cli_oob_data_s::creation_timestamp}


        
Creation timestamp of the OOB request, this is used to know wether we have already timed out or not. This is not the node creation timestamp.         
@end defcv

@defcv {Member} {lw6cli_oob_data_s} {do_not_finish}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6cli_oob_data_s::do_not_finish}


        
Flag used to force finish, for instance when we want to delete the object quickly and do not want to wait until a long polling-based network operation finishes completely.         
@end defcv

@defcv {Member} {lw6cli_oob_data_s} {public_url}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6cli_oob_data_s::public_url}


        
Public URL of the node, we need this at hand to serve it quickly to peers, and be able to perform basic checks.         
@end defcv

@defcv {Member} {lw6cli_oob_data_s} {verify_callback_func}
@strong{Type:} @code{lw6cli_verify_callback_func_t}

@strong{Definition:} @code{lw6cli_verify_callback_func_t lw6cli_oob_data_s::verify_callback_func}


        
Pointer on a function which will verify if peer is OK, and act accordinlgy if it's OK or not. Note that the callback function might be called pretty much anytime in the heavily multithreaded context of LW6 so it must be reentrant and have mutexes if needed. Indeed, it's very likely to update some shared list of available nodes.         
@end defcv

@defcv {Member} {lw6cli_oob_data_s} {verify_callback_data}
@strong{Type:} @code{void *}

@strong{Definition:} @code{void* lw6cli_oob_data_s::verify_callback_data}


Data passed to the verify_callback function.         
        
@end defcv



  
@deftp {Struct} {lw6cli_oob_s}

    
Structure containing both the thread running an OOB request and its data. It was advantagious to separate thoses two and not make the thread a permanent member of the OOB data struct, since it allows the actual OOB code to be totally unaware of the thread running it, which is, to some extent, safer.     
@end deftp

@defcv {Member} {lw6cli_oob_s} {thread}
@strong{Type:} @code{void *}

@strong{Definition:} @code{void* lw6cli_oob_s::thread}


Pointer on thread running the OOB request.         
        
@end defcv

@defcv {Member} {lw6cli_oob_s} {data}
@strong{Type:} @code{lw6cli_oob_data_t}

@strong{Definition:} @code{lw6cli_oob_data_t lw6cli_oob_s::data}


Data used by the OOB request.         
        
@end defcv


