This is /home/ufoot/Home/_/liquidwar6/doc/liquidwar6.info, produced by
makeinfo version 4.13 from
/home/ufoot/Home/_/liquidwar6/doc/liquidwar6.texi.

Liquid War 6, a unique multiplayer wargame.

   Copyright (c)  2005, 2006, 2007, 2008, 2009, 2010, 2011  Christian
Mauduit <ufoot@ufoot.org>

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

START-INFO-DIR-ENTRY
* Liquid War 6: (liquidwar6).   A unique multiplayer wargame.
END-INFO-DIR-ENTRY


File: liquidwar6.info,  Node: Top,  Up: (dir)

   Liquid War 6, a unique multiplayer wargame.

* Menu:

* Introduction::        What's all this about.
* User's manual::       README!
* Hacker's guide::      How to hack the game and make it better.
* Reference::  Command line options, configuration file entries.
* C API::               Internal C functions documentation.

* Menu:

Introduction

* In a nutshell::       Quick introduction to Liquid War 6.
* Project status::      Where we are, where we are heading.
* How you can help::    How you can help Liquid War 6 and the GNU Project.

User's manual

* Mailing lists::       Mailing lists related to Liquid War 6.
* Getting the game::    Get the latest version.
* Installation::        How to install Liquid War 6.
* Extra maps::          More and more maps.
* Troubleshooting::     Problems running the game?
* Quick start::         Ready, set, go!
* Strategy tips::       Keep this under your pillow.
* User interface::      How to control the game.
* Network games::       Set up and run network games.
* Graphics::            3D-acceleration issues.
* Sound & music::       Let's get noisy.
* Config file::         How to use the config file.
* Logs::                Log file contains valuable information.
* Report bugs::         How to report bugs.

Hacker's guide

* Designing levels::    How to draw new maps.
* Translating::         Translation HOWTO.
* Architecture::        C, Scheme, modules and the rest.
* About mod-gl::        The definitive graphics backend.
* Compilation tips::    Advice for developpers and packagers.
* Coding guidelines::   Ensure code remains maintainable.
* Using the console::   How to interact with the game.
* Advanced tweaking::   Do this at your own risk.
* Writing modules::     How to develop your own extensions.
* Use as a library::    Liquid War 6 can be embedded in your own programs.
* Network protocol::    How the game communicates with others.
* Technical HOWTOs::    Recipes for the maintainer(s).
* Using GNU Arch::      A quick tla survival guide.
* Using GIT::           GIT is used to handle source code.

Reference

* Basic options::       Basic command-line parameters.
* Doc options::         Liquid War 6 is self-documented.
* Show options::        Show informations about the program.
* Path options::        Change default paths.
* Graphics options::    Change display settings.
* Sound options::       Change audio settings.
* Network options::     Tweak network parameters.
* Map parameters::      Global map parameters.
* Map rules.xml::       Change game rules.
* Map hints.xml::       Tune map loader.
* Map style.xml::       Modify map appearance.
* Advanced settings::   You probably don't want to change these.
* C to Guile::          C functions exported to Guile.
* Script hooks::        Available script hooks.

C API

* libliquidwar6::       Top-level functions.
* libbot::              Bot algorithms.
* mod-idiot::           Basic idiot bot.
* mod-random::          Totally random bot.
* libcfg::              Loading and saving config files.
* libcli::              Network clients.
* mod-http::            Web client.
* mod-tcp::             Tcp client using native protocol.
* mod-udp::             Udp client using native protocol.
* libcns::              Console handling.
* libcnx::              Connection common code.
* libdat::              Storing network data.
* libdef::              Keywords definitions.
* libdsp::              Threaded display.
* libdyn::              Dynamic module loading.
* libgfx::              Graphics.
* mod-gl::              Main 3D graphics backend.
* libglb::              Gnulib embedded routines.
* libgui::              GUI utilities.
* libhlp::              Built-in help system.
* libimg::              Generating screenshots.
* libker::              Main kernel module (core algorithm).
* libldr::              Loading maps.
* libmap::              Map, AKA levels.
* libmsg::              Network messages.
* libnet::              Low-level network routines.
* libnod::              Manipulating node data.
* libp2p::              A la peer to peer network system.
* libpil::              Dealing with game lag.
* libsnd::              Sound.
* mod-csound::          Csound sound backend (vaporware).
* mod-ogg::             Ogg/libSDL default sound backend.
* libsrv::              Network servers.
* mod-httpd::           Embedded web server.
* mod-tcpd::            Tcp server using native protocol.
* mod-udpd::            Udp server using native protocol.
* libsys::              Low-level system utilities.
* libtsk::              Asynchronous loading.

Appendices

* 2005 .plan::          This is how it started.
* Fanfic::              A historical Liquid War fanfic.
* Links::               Liquid War on the web
* Copying::             GNU General Public License version 3.
* GNU Free Documentation License:: The license for this documentation.
* Indexes::             Concept, function and keyword indexes.


File: liquidwar6.info,  Node: Introduction,  Next: User's manual,  Up: Top

1 Introduction
**************

Read this chapter to discover Liquid War 6.

* Menu:

* In a nutshell::       Quick introduction to Liquid War 6.
* Project status::      Where we are, where we are heading.
* How you can help::    How you can help Liquid War 6 and the GNU Project.


File: liquidwar6.info,  Node: In a nutshell,  Next: Project status,  Up: Introduction

1.1 In a nutshell
=================

Liquid War 6 is a unique multiplayer wargame. Your army is a blob of
liquid and you have to try and eat your opponents. Rules are very
simple yet original, they have been invented by Thomas Colcombet. It is
possible to play alone against the computer but the game is really
designed to be played with friends, on a single computer, on a LAN, or
on Internet.

   An older version, Liquid War 5 (http://www.ufoot.org/liquidwar/v5),
is available, but is not part of the GNU Project.  Only Liquid War 6 is
part of the GNU Project (http://www.gnu.org/), it is a complete rewrite.

   The official page of Liquid War 6 is
`http://www.gnu.org/software/liquidwar6/'.  For more information, you
can read the Wikipedia article
(http://en.wikipedia.org/wiki/Liquid_War) about Liquid War.


File: liquidwar6.info,  Node: Project status,  Next: How you can help,  Prev: In a nutshell,  Up: Introduction

1.2 Project status
==================

1.2.1 What works, and what does not (yet)
-----------------------------------------

As of today, the game is in beta state. It can be installed, and you
can toy arround with. You can even play with. It is still far from
being complete as some key features are still missing.

   What works:

   * The whole framework is here, some functions are not implemented
     yet, but the bases are set up, and they are believed solid. The
     game is very modular, and is fully threaded.  It is designed so
     that graphics, sound, network and bot backends can be hacked at
     will. It has a complete self-test suite, many debugging built-in
     tools, and is regularly checked with automated tools. For
     instance, you can check reports concerning global references
     (http://www.gnu.org/software/liquidwar6/global/), code coverage
     (http://www.gnu.org/software/liquidwar6/coverage/) and cyclomatic
     complexity (http://www.gnu.org/software/liquidwar6/cyclo/).  This
     is not a quick hack.

   * Documentation. Yes, you're reading it.

   * Version 0.0.7beta is playable. Local game between humans (up to 4
     players) is possible. Two bots are implemented, named random and
     stupid. No great players but well, they move the cursor. A new
     "deatchmatch" mode, different from LW5, is in place.

   * Liquid War 6 already has some features which are nowhere to be
     found in Liquid War 5, such as multiple layers. It can be worth
     the upgrade.

   * Maps. A number of interesting maps have already been designed
     (thanks to Kasper Hviid).

   * The game runs natively on GNU/Linux and has been ported to
     Microsoft Windows and Mac OS X.  Binaries are available for all
     those platforms. Use at your own risk.  If in doubt, get the
     source and compile.

   In the near future:
   * Network play. Top-level priority. Yes, network has been promised
     for months (years?) and is still not there. I said "when it's
     done".

   * Fix bugs ;) The current engine is somewhat buggy, fighters might
     loose the cursor, it clearly needs polishing.

   In the long run:
   * Write new graphical backends so that the game does not require
     Mesa or any OpenGL-like subsystem. The idea is to get rid of the
     3D-accelerator dependency.

   * Implement all the fancy 3D features, make it possible to play
     Liquid War 6 on a Moebius ring.

   * Use the cool features of CSound to provide dynamic, contextualized
     sounds & musics.

   * Optimize the bot algorithm, which is probably a complex AI problem.

   You might be interested in checking the following URLs, which give a
view on opened tasks and bugs:

   * bug list: `http://savannah.gnu.org/bugs/?group=liquidwar6'

   * task list: `http://savannah.gnu.org/task/?group=liquidwar6'

1.2.2 What has changed since Liquid War 5.x?
--------------------------------------------

Liquid War 6 is a complete rewrite of Liquid War 5
(http://www.ufoot.org/liquidwar/v5).  The rewrite started in 2005. So a
good question is "was the rewrite worth it?"...

   Here's a list of key improvements:
   * appearance, global rendering quality. Call it the way you want,
     Liquid War 6 simply looks nicer than any previous release. Period.

   * level features, including multi-layer (allowing the map designer
     to create bridges and tunnels), wrapping (fighters disappearing on
     the left can reappear on the right). Those really change the
     gameplay.

   * deathmatch mode. Give it a try, it does change the deal ;)

   * modularity, overall code quality. While this is not a user-visible
     change, the game is far less monolithic, therefore hacking to
     revamp the graphics engine, the algorithm, whatever, is easier.
     The situation has changed from "this is impossible to hack" to
     "OK, how much time can this take?".  So while one can't promise
     every idea will be implemented some day, at least many more things
     become possible with the new codebase.

   The most interesting change is still to come, and concerns network
games.

   Stay tuned.

1.2.3 Revision history
----------------------

Liquid War 6 releases are "codenamed" after famous, historical, real or
mythical characters. Here is a short revision history.  For details,
see the `ChangeLog' and `NEWS' files distributed with the game.
Additionnally, there's an ever-increasing "stamp" number which is
incremented each time a build is done with a different source.

   * 2006-12-18 : 0.0.1beta
     (http://download.savannah.gnu.org/releases/liquidwar6/0.0.1beta/)

   * 2007-09-07 : 0.0.2beta
     (http://download.savannah.gnu.org/releases/liquidwar6/0.0.2beta/)

   * 2008-01-30 : 0.0.3beta
     (http://download.savannah.gnu.org/releases/liquidwar6/0.0.3beta/),
     codename "Napoleon", stamp 549

   * 2008-09-19 : 0.0.4beta
     (http://download.savannah.gnu.org/releases/liquidwar6/0.0.4beta/),
     codename "Clovis", stamp 756

   * 2008-12-20 : 0.0.5beta
     (http://download.savannah.gnu.org/releases/liquidwar6/0.0.5beta/),
     codename "Henri IV", stamp 1082

   * 2009-01-10 : 0.0.6beta
     (http://download.savannah.gnu.org/releases/liquidwar6/0.0.6beta/),
     codename "Cesar", stamp 1124

   * 2009-10-03 : 0.0.7beta
     (http://download.savannah.gnu.org/releases/liquidwar6/0.0.7beta/),
     codename "Geronimo", stamp 1465

   * 2010-07-05 : 0.0.8beta
     (http://download.savannah.gnu.org/releases/liquidwar6/0.0.8beta/),
     codename "Attila", stamp 1658

   * 2010-08-23 : 0.0.9beta
     (http://download.savannah.gnu.org/releases/liquidwar6/0.0.9beta/),
     codename "Chuck", stamp 2096

1.2.4 Road map
--------------

The game will probably be labelled "6.0.0" when network mode is up and
running. Until then there will probably be other improvements
concerning gameplay and appearance ("eye candy"). There's a balance to
keep between the major goals such as "make that network thingy work"
and the very real fact that "hacking must be fun".


File: liquidwar6.info,  Node: How you can help,  Prev: Project status,  Up: Introduction

1.3 How you can help
====================

1.3.1 Help GNU
--------------

Please remember that development of Liquid War 6 is a volunteer effort,
and you can also contribute to its development. For information about
contributing to the GNU Project, please read How to help GNU
(http://www.gnu.org/help/help.html).

1.3.2 Todo list
---------------

Here's a short list of todo items. It is probably too early to start
hacking the core engine itself, for it is still under heavy development,
might undergo major rewrites, and it's hard for documentation to keep
up with the reality of the code. However, there are still many things to
do.

   * Try the game. Play. Test. Send bug reports.  Without bug reports,
     bugs don't get fixed.

   * Write maps. Obviously, this is something which can perfectly be
     delegated.  Experience shows user-contributed maps are, on
     average, better than maps conceived by the author...

   * Translate texts. Liquid War 6 uses GNU gettext, so all messages can
     be translated.

   * ...any help is welcome.

   Feel free to join the mailing-lists, this is clearly the best place
to start with.

   There's also a list of opened tasks on Savannah at
`http://savannah.gnu.org/task/?group=liquidwar6' which you can browse
online. Maybe there's some task for you!

   Alternatively, you can contact Christian Mauduit
(mailto:ufoot@ufoot.org).


File: liquidwar6.info,  Node: User's manual,  Next: Hacker's guide,  Prev: Introduction,  Up: Top

2 User's manual
***************

The Liquid War 6 user's manual hopefully contains any usefull
information to install the program and play the game.  If you just want
to enjoy Liquid War 6 without diving into map creation and programming,
this is just for you.

* Menu:

* Mailing lists::       Mailing lists related to Liquid War 6.
* Getting the game::    Get the latest version.
* Installation::        How to install Liquid War 6.
* Extra maps::          More and more maps.
* Troubleshooting::     Problems running the game?
* Quick start::         Ready, set, go!
* Strategy tips::       Keep this under your pillow.
* User interface::      How to control the game.
* Network games::       Set up and run network games.
* Graphics::            3D-acceleration issues.
* Sound & music::       Let's get noisy.
* Config file::         How to use the config file.
* Logs::                Log file contains valuable information.
* Report bugs::         How to report bugs.


File: liquidwar6.info,  Node: Mailing lists,  Next: Getting the game,  Up: User's manual

2.1 Mailing lists
=================

2.1.1 General discussion
------------------------

The main discussion list is <help-liquidwar6@gnu.org>
(mailto:help-liquidwar6@gnu.org), and is used to discuss all aspects of
Liquid War 6, including installation, development, game strategies, and
whatever subject players and hackers might want to talk about, provided
it is Liquid War 6 related. If you don't know on which list to
subscribe, this is the one.

   To subscribe to it, please send an empty mail with a Subject: header
line of just "subscribe" to the `-request' list, that is
<help-liquidwar6-request@gnu.org>
(mailto:help-liquidwar6-request@gnu.org).

   You can also subscribe to the list using the Mailman web interface
for help-liquidwar6
(http://lists.gnu.org/mailman/listinfo/help-liquidwar6) and consult
help-liquidwar6 archives
(http://lists.gnu.org/archive/html/help-liquidwar6/).

2.1.2 Announcements
-------------------

Announcements about LiquidWar 6 are made on <info-liquidwar6@gnu.org>
(mailto:info-liquidwar6@gnu.org).  Subscribe to it to be informed of
major releases, and other significant news.

   To subscribe to it, please send an empty mail with a Subject: header
line of just "subscribe" to the `-request' list, that is
<info-liquidwar6-request@gnu.org>
(mailto:info-liquidwar6-request@gnu.org).

   You can also subscribe to the list using the Mailman web interface
for info-liquidwar6
(http://lists.gnu.org/mailman/listinfo/info-liquidwar6) and consult
info-liquidwar6 archives
(http://lists.gnu.org/archive/html/info-liquidwar6/).

   Please also consider reading the latest news on Savannah
(http://savannah.gnu.org/news/?group=liquidwar6).

2.1.3 Bugs
----------

There is also a special list used for reporting bugs,
<bug-liquidwar6@gnu.org> (mailto:bug-liquidwar6@gnu.org).  Please try
and describe the bug as precisely as possible. The more accurate the
description, the more chances it will get to be fixed.

   While this is the standard GNU way of reporting bugs, modern SPAM
standards make it very hard to filter real bug reports from junk on
this list.  It is more convenient to use a web interface, the URL is:
`http://savannah.gnu.org/bugs/?func=additem&group=liquidwar6' and
you're really encouraged to use it instead of sending emails.

   Please take a look at the bug list
(http://savannah.gnu.org/bugs/?group=liquidwar6) before submitting new
bugs.


File: liquidwar6.info,  Node: Getting the game,  Next: Installation,  Prev: Mailing lists,  Up: User's manual

2.2 Getting the game
====================

2.2.1 Download source
---------------------

Liquid War 6 can be found on
`http://download.savannah.gnu.org/releases/liquidwar6/' and
`http://www.ufoot.org/download/liquidwar/v6/'.

   Downloading the latest file from this place, and compile it yourself
on your computer with a classical `./configure && make && make install'
is the recommended way to install Liquid War 6.

2.2.2 Download binaries
-----------------------

Some binary packages might be available. Your mileage may vary.

   GNU/Linux based systems are supported, through Debian
(http://www.debian.org/) `.deb' and Red Hat (http://www.redhat.com/)
`RPM' packages.  There is also a Microsoft Windows installer.

   However these binaries are not necessarly available for every single
version of the game.

2.2.3 GIT repository
--------------------

Latest work in progress versions can be obtained with GIT
(http://git-scm.com/).  Here's the typicall command which will fetch
the latest version:

     git clone git://git.sv.gnu.org/liquidwar6.git

   If you are behing a firewall and can't use the native GIT protocol,
you can rely on the (slower) http protocol:

     git clone http://git.sv.gnu.org/r/liquidwar6.git

   You can browse the code online, consult log summary, and in a
general manner "follow" the project on
`http://git.savannah.gnu.org/gitweb/?p=liquidwar6.git' and
`http://git.savannah.gnu.org/cgit/liquidwar6.git'.

2.2.4 Daily snapshots
---------------------

Alternatively, you can download daily snapshots on
`http://www.ufoot.org/liquidwar/v6/snapshots/' These files should be
built every day, but a `make distcheck' is done before creating them.
So if the source code is, for some reason, broken, then they won't be
generated. It is a good source if you want the most up-to-date code
which is not completely unstable. This is typically the place to go if
you want to know a reported bug is correctly fixed. Please do not rely
on snapshots generated on the fly by the source content manager, daily
snapshots mentionned above are better since a `make dist' has been run
on them.  Using a checkout is really for developpers.


File: liquidwar6.info,  Node: Installation,  Next: Extra maps,  Prev: Getting the game,  Up: User's manual

2.3 Installation
================

This section covers installation from source. Other ways of installing
the program are not described here.

2.3.1 Requirements
------------------

All these libraries are mandatory to compile the game.  Liquid War 6
won't compile, let alone run, without them.  Some of them could
probably be replaced by equivalent tools, but this would certainly
require a programming effort and some changes in Liquid War 6 source
code.

   * GNU Make (http://www.gnu.org/software/make/).  Liquid War 6 might
     and certainly does use GNU Make extensions.

   * GNU C library (http://www.gnu.org/software/libc/).  Sounds
     obvious, but you need a standard C library. It happens that glibc
     has some rather usefull extensions (yes, as of 2006, some vendors
     continue to offer C libraries without `snprintf'...)  and Liquid
     War 6 might use them. In a general manner, Liquid War 6 is part of
     and designed for GNU. You might however manage to compile it with
     limited libc support, this is the case with mingw32 for instance
     but, do it at your own risk.

   * Perl (http://www.perl.com/).  Some Makefile commands require Perl.
     You don't need any Perl devel packages, and you can probably use
     any Perl 5.x version, since no fancy recent feature of Perl is
     used. Just plain Perl.

   * Guile (http://www.gnu.org/software/guile/).  Possibly the most
     required library, since Liquid War 6 is a scheme program which
     uses a set of functions coded in standard C. You need at least
     Guile 1.8.

   * GNU MP (http://gmplib.org/).  GMP is a free library for arbitrary
     precision arithmetic, required by Guile.

   * ltdl (http://www.gnu.org/software/libtool/).  This library, which
     comes with libtool, provides a portable alternative to `dlopen'
     and `dlclose'. Check that you have a `/usr/include/ltdl.h' file,
     or install the corresponding package.

   * zlib (http://www.zlib.net/). Required by other libraries, but can
     also be used directly by Liquid War 6 to compress network messages
     for instance.

   * expat (http://www.libexpat.org/).  Used to read and write XML
     files, which contain constants and configuration data.

   * libpng (http://www.libpng.org/pub/png/libpng.html).  Liquid War 6
     uses libpng to read levels (maps), not to speak of other optional
     libraries (SDL and the rest) who need it themselves.

   * libjpeg (http://www.ijg.org/).  Maps can also be provided as jpeg
     files, so libjpeg is required as well.

   * SQLite 3 (http://www.sqlite.org).  Used to handle the list of
     available servers.


2.3.2 Optional libraries
------------------------

While all these libraries are theorically optional (the game will
successfully compile without them), you'll obviously need, for instance,
one graphics backend. Otherwise, you'll simply have no display. This is
not acceptable. As of today, one can reasonnably consider all
SDL-related libraries are required. The rest is truely optional.

   * ncurses (http://www.gnu.org/software/ncurses/).  Required by
     readline, needs to be there otherwise readline might not be
     detected properly on some systems.

   * GNU readline
     (http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html).  Used
     to handle input on the console. Console is not absolutely
     mandatory, but it's a must-have if you want to hack the game.
     Console unavailable does not mean you won't get anything on stdout
     but, the interactive script shell just won't work.

   * GTK+ (http://www.gtk.org/).  Used to display error/critical
     messages, so that users who launch the game by clicking on a icon
     (that is, not from the console) are still visually informed of
     important messages.

   * Mesa (http://www.mesa3d.org/). This library provides an API
     similar to OpenGL and enables 2-D and 3-D drawing.

   * SDL (http://www.libsdl.org/).  SDL is used to set up a working
     OpenGL environnement, and handle input (mouse and keyboard).

   * SDL_image (http://www.libsdl.org/projects/SDL_image/).  This SDL
     extension is used to read textures and other graphics from disk.

   * FreeType 2 (http://freetype.sourceforge.net/).  This library is
     required by SDL_ttf, to draw fonts.

   * SDL_ttf (http://www.libsdl.org/projects/SDL_ttf/).  This SDL
     extension is used to draw fonts. It is UTF-8 enabled.

   * libcsound (http://www.csounds.com/).  While this tool is not used
     yet, it is meant to be the final sound backend, as CSounds offers
     great power to the composer, enabling truely dynamically generated
     sound & music.  For now Liquid War 6 tries to detect csound 4 but
     as the mainstream stable release is now 5 an update is needed. It
     will probably be updated/fixed (Liquid War 6 using csounds 5) some
     day, for now you can safely *not* install csound on your system
     and enjoy all the possibilities of the game.

   * SDL_mixer (http://www.libsdl.org/projects/SDL_mixer/).  This SDL
     extension is used to allow dynamic mixing of sounds, and it also
     provides a builtin `OGG/Vorbis' file renderer.

   * libcURL (http://curl.haxx.se/libcurl/).  Used to handle HTTP
     requests, the idea being not to re-invent the wheel but use a
     robust standards-compliant generic library.

2.3.3 Installing requirements using RPM/DEB packages
----------------------------------------------------

You might find it convenient not to install all the requirements from
source, but use your favorite GNU/Linux distribution packages.

   On an RPM based GNU/Linux system, a typical command (tested with
Fedora (http://www.fedoraproject.org/) 11) could be:

     yum install \
     make gcc glibc glibc-devel binutils \
     guile guile-devel gmp gmp-devel \
     libtool libtool-ltdl libtool-ltdl-devel \
     zlib zlib-devel expat expat-devel \
     libpng libpng-devel libjpeg libjpeg-devel \
     sqlite sqlite-devel \
     ncurses ncurses-devel readline readline-devel \
     libGL libGL-devel libGLU libGLU-devel \
     SDL SDL-devel SDL_image SDL_image-devel \
     SDL_mixer SDL_mixer-devel \
     freetype freetype-devel SDL_ttf SDL_ttf-devel \
     libcurl libcurl-devel \
     perl lcov global valgrind graphviz gv texinfo-tex

   On a DEB package based GNU/Linux system this command (tested with
Debian (http://www.debian.org/) lenny) would be:

     apt-get install \
     make gcc libc6 libc6-dev binutils \
     guile-1.8 guile-1.8-dev guile-1.8-libs libgmp3c2 libgmp3-dev \
     libtool libltdl3 libltdl3-dev \
     zlib1g zlib1g-dev libexpat1 libexpat1-dev \
     libpng12-0 libpng12-dev libjpeg62 libjpeg62-dev \
     libsqlite3-0 libsqlite3-dev \
     libncurses5 libncurses5-dev libreadline5 libreadline5-dev \
     libgl1-mesa-glx libgl1-mesa-dri libgl1-mesa-dev libglu1-mesa libglu1-mesa-dev \
     libsdl1.2debian-alsa libsdl1.2-dev libsdl-image1.2 libsdl-image1.2-dev \
     libsdl-mixer1.2 libsdl-mixer1.2-dev \
     libfreetype6 libfreetype6-dev libsdl-ttf2.0-0 libsdl-ttf2.0-dev \
     libcurl4-gnutls-dev \
     perl lcov global valgrind graphviz gv texinfo texlive-full

   Note that those requirements really depend on the exact distribution
you have, package names may vary from one to another.

2.3.4 Compiling
---------------

Liquid War 6 uses GNU Automake (http://www.gnu.org/software/automake/),
Autoconf (http://www.gnu.org/software/autoconf/) and GNU Libtool
(http://www.gnu.org/software/libtool/).

   Once all the requirements are installed, run:

     ./configure
     make
     make install

   Liquid War 6 supports the standard `./configure --prefix=/my/path'
option (in fact, it supports much more than that) so you can install
the game in any directory. You do not need to be `root' to install
Liquid War 6.


File: liquidwar6.info,  Node: Extra maps,  Next: Troubleshooting,  Prev: Installation,  Up: User's manual

2.4 Extra maps
==============

2.4.1 The extra maps package
----------------------------

The main package contains some maps so that you can try out the game.
Still, an additionnal package, called `extra-maps' or
`liquidwar6-extra-maps' is available, containing more maps.  It really
does contain many of them, including most Liquid War 3 and Liquid War 5
legacy maps, plus new Liquid War 6 maps.

2.4.2 Install extra maps on GNU/Linux and POSIX systems
-------------------------------------------------------

On GNU/Linux systems (and possibly any POSIX unixish system) running:

     ./configure
     make
     make install

   will install the extra maps on your system automatically, they will
then be available in the `extra/' sub-directory when browsing maps.

   The `./configure' script has a `--enable-liquidwar6' switch which
will try and find automatically if there's an existing `liquidwar6'
binary in the path. If there's such a binary, it will run it and ask
for its `map-path' and use this value automatically.

2.4.3 Raw install of extra maps (all-platforms)
-----------------------------------------------

Another solution, which works on all platforms including Microsoft
Windows and Mac OS X but also works on GNU/Linux, is to simply unpack
the `extra-maps' package (unzip or untar) in your custom map directory,
or in the system map directory. There's nothing else to do to install
these maps but simply put them on your hard drive in the right
directory.

   Typically on an Microsoft Windows system, you would unpack the extra
maps in `C:\Program Files\Liquid War 6\map\' (system directory) and on
a Mac OS X system you would unpack the extra maps in `Liquid War
6.app/Contents/Resources/map/' (system directory) or
`$HOME/Library/Application Support/Liquid War 6/map' (user directory).
On a GNU/Linux or POSIX system you would unpack them in
`$HOME/.liquidwar6/map/' (user directory).

   Next time you run the game, the maps should be browsable.

   If you can't see them, run `liquidwar6 --audit' and check that the
place where you unpacked the files is actually searched by the binary.


File: liquidwar6.info,  Node: Troubleshooting,  Next: Quick start,  Prev: Extra maps,  Up: User's manual

2.5 Troubleshooting
===================

2.5.1 Compilation problems
--------------------------

A quick survival guide:

   * Check that you have all dependencies installed.  Also check their
     version number. Double-check that you have devel packages
     installed, not only run-time binaries.

   * Read carefully the output of `./configure'. Running `./configure >
     configure.log 2> configure.err' does help.

   * Editing `/etc/ld.so.conf' and running `ldconfig' as `root' can
     help if some dependencies are installed in exotic places.

   * Check the values of the environment variables `CFLAGS', `LDFLAGS'
     and `LD_LIBRARY_PATH'.

   * Try `./configure --enable-allinone', this will disable some fancy
     but somewhat complicated dynamic `.so' file support, it can help
     if shared libraries are handled differently on your system than on
     a plain GNU/Linux box.

   If none of these help, consider reporting a bug, or search the
mailing-lists for help.

2.5.2 Check installation
------------------------

Here's a check-list to ensure that your installation is correct:
   * What was the output of `make install'? `make check'?

   * Is the `liquidwar6' binary in your `PATH' environment variable?
     It might be in `/usr/games'.

   * Run `liquidwar6 --pedigree'. Look at the output. Check the
     compilation date & time, the version number.

   * Run `liquidwar6 --audit'. What do these paths look like?  Are they
     absolute paths? Do they exist? What's there?  Normally, once the
     game is installed, all of them should exist, and be populated with
     sub-directories and files.

   * Run `liquidwar6 --modules', to know which modules where compiled.
     You need at least one graphical module, for instance `mod-gl',
     else the game won't run.

   * Run `liquidwar6 --host', this displays informations about the host
     system the binary has been built for.

2.5.3 Problems running the game
-------------------------------

Now, game looks correctly installed, but you have problems running it.

   * Run the game from a terminal, not from a Gnome or KDE launcher, you
     need to see the console output.

   * In the `$HOME/.liquidwar6/' directory, you'll find two files,
     `log.csv' and `dump.txt'. They might contain valuable information,
     read them.  Note that byt default on Microsoft Windows this
     directory is `C:\Documents and Settings\<username>\Liquid War 6'
     and on Mac OS X it is in `/Users/<username>/Library/Application
     Support/Liquid War 6/'.

   * Run `liquidwar6 --defaults'. This will reset all options to
     defaults.  You might need to run this when upgrading from a
     version to another, since some options might appear, disappear, or
     defaults values can change.

   * Run `liquidwar6 --test'. This should run a complete test suite,
     many functions in the game will be tested automatically, and
     errors reported.

   * Run `liquidwar6 --show-script-file'. Are you really running the
     right code?

   * Game segfaults: try `make uninstall && make clean && make && make
     install'.  Many problems can come from using a wrong shared module,
     especially with beta versions.

   * Game (still) segfaults: try `gdb liquidwar6'. Type `run' and watch
     output.

   * The dynamic library loader can sometimes have problemes, and does
     not always report explicit messages on `stdout' or `stderr'.  You
     can change this by modifying some environment variables: `export
     LD_DEBUG=all'.  This is very verbose but does help finding bugs.

   * Consider compiling the game using `./configure --enable-valgrind'
     and then run it using Valgrind (http://valgrind.org/).

   * Try `find / -type d -a -name "liquidwar6*" 2> /dev/null' to ensure
     you don't have an old version of Liquid War 6 somewhere else...


File: liquidwar6.info,  Node: Quick start,  Next: Strategy tips,  Prev: Troubleshooting,  Up: User's manual

2.6 Quick start
===============

2.6.1 Quick start
-----------------

Once the game is installed, run it, click on `Quick start' with the
mouse, and control the red `'a'' cursor with the mouse, or keyboard,
both work.  Try and surround the green team, it's a stupid bot, you
should win ;)

   You army is formed by all the red pixels on the screen, they should
try and rejoin the cursor (the blinking `'a'' letter) using the
shortest path. When red and green meet, they fight. Try it, toy arround.

   The `Quick start' button will always make you play red against a
green stupid bot, whatever other options you have set up.

   Todo...


File: liquidwar6.info,  Node: Strategy tips,  Next: User interface,  Prev: Quick start,  Up: User's manual

2.7 Strategy tips
=================


File: liquidwar6.info,  Node: User interface,  Next: Network games,  Prev: Strategy tips,  Up: User's manual

2.8 User interface
==================

2.8.1 A reduced set of keys
---------------------------

Liquid War 6 can be controlled using a reduced set of keys. This is to
make the game more portable and allow possible ports to platforms where
a full keyboard is not available. Depending on the graphics backend,
exact mapping might change, they should be obvious and intuitive.

   Those keys are:
   * `up' : the arrow up key

   * `down' : the down arrow key

   * `left' : the left arrow key

   * `right' : the right arrow key

   * `enter' : the enter / return key

   * `esc' : the escape key

   * `pgup' : the page up key

   * `pgdown' : the page down key

2.8.2 Combining mouse, keyboard and joysticks
---------------------------------------------

It's also possible to control the game with the mouse only, or with a
joystick.  By default the interface will trap all events and respond on
any of these possible devices.

   The mouse follows these rules:
   * mouse left-click is equivalent to the keyboard `enter', it
     validates an item

   * mouse right-click is equivalent to the keyboard `esc', it goes
     back, cancels, ...

   * mouse wheel-up is equivalent to the keyboard `pgup'

   * mouse wheel-down is equivalent to the keyboard `pgdown'

   The joytick bindings is done as follows:
   * button `A' is equivalent to the keyboard `enter', it validates an
     item

   * button `B' is equivalent to the keyboard `esc', it goes back,
     cancels, ...

   * button `C' is equivalent to the keyboard `pgup'

   * button `D' is equivalent to the keyboard `pgdown'

   What these buttons are exactly on your joystick depends on your
hardware and driver. Note that Liquid War 6 converts any analog
joystick input to a digital pad-like information.

2.8.3 Quit with F10
-------------------

There's also an (almost) hardcoded shortcut which will quit the game
immediately, or at least as quickly as possible, without any prompt or
warning.

   It is the `F10' key.

   Think of this feature as the procastinator's "whoops, here comes my
boss!!!"  emergency function.


File: liquidwar6.info,  Node: Network games,  Next: Graphics,  Prev: User interface,  Up: User's manual

2.9 Network games
=================

2.9.1 Choose your "public url"
------------------------------

Liquid War 6 needs to name your "node" (you can think as your server
instance of the game) and have a unique URL (address) to publish and
give to other nodes.

   If only one network adapter is attached to your computer and your
address IP is `A.B.C.D' then by default the game will pick
automatically the address `http://A.B.C.D:8056/' and it should work
flawlessly.

   Problems can arise if you have a peculiar network configuration, if
you have multiple non-loopback network interfaces, if you use NAT to
protect yourself from intruders and/or if your context forces you to do
so.  In that case, Liquid War won't be able to guess a correct URL
automatically. So you need to set it up manually either by editing the
`public-url' entry in the config file, changing environment variable
`LW6_PUBLIC_URL' or passing the `--public-url=http://<host>:<port>/'
argument when running the game. Typically, if you are behind a firewall
which does NAT, use the firewall address. The right address is the
address which, given to remote hosts, will allow them to connect on
your game instance.

2.9.2 Starting a node
---------------------

A node is started automatically when you run the game. Even if you
don't start to play, node starts in the background and exchanges data
with other nodes, mostly to discover them and maintain its internal map
of existing nodes and games.

   So even without starting a network game, you should be able to point
a web browser on your node and see a web page describing it. Your node
address is displayed on `stdout' (console) when starting the game. If
in doubt, try `http://localhost:8056/' which should work unless you
modified defaults settings.

   When you start a network game, the program simply changes your node
state from "idle" to "accepting connections".

2.9.3 Connecting to a node
--------------------------

The interface should show you the list of available nodes, just pick
one and try and connect to it.

   Note that once you're connected on a remote node, you're still
acting as an independant node, and other nodes might connect to your
node as well as to the other nodes. In short, there's no real server or
client, everyone is a client for someone, and can act as a server.

   Nodes connected together form a "community", which can disband,
accept new nodes, and in a general manner has its own immaterial life,
the first node which created the game might disappear, game can
continue without it.

   This is why the main network module is called `libp2p', this is a
reference to the term "peer to peer".

2.9.4 Communities
-----------------

Once a node is connected to another one, they've started a "community".
Formally, a stand-alone node accepting for connection is already a
community, even if it has only one member, but the only really
interesting communities are those formed with several nodes.

   A community can't be reached through a given server, to connect to
one you just need to connect on one of its member nodes. All nodes are
equivalent, there's no master, no root node, nodes collaborate to share
the same real-time information and maintaine an up-to-date game state.

   Of course, conflicts can arise, and in that case nodes need to agree
on an acceptable solution. Normally, the program takes decisions
automatically (for instance, it could decide to "kick" a node out of
the community) so the player does not have to care about this, but this
is expected to be one of the most tricky (and passionating) part of
Liquid War 6 hacking.

2.9.5 Firewall settings
-----------------------

By default, Liquid War 6 will communicate on port 8056, in both TCP and
UDP, and in both ways too (in/out). It's possible to play with partial
connectivity, in extreme case, you can even play without direct
internet access, using only a mere web proxy.

   However, things will go faster and be much easier if the program can
use its default native protocol.

   Here's an example of a typicall iptables (http://www.netfilter.org/)
configuration which allows you to play the game full-featured. It's
assumed that by default all packets are dropped, this configuration
will just open the necessary ports.

     # outgoing TCP on port 8056 (liquidwar6)
     iptables -A OUTPUT -p tcp --dport 8056 -m state --state NEW,ESTABLISHED -j ACCEPT
     iptables -A INPUT -p tcp --sport 8056 -m state --state ESTABLISHED -j ACCEPT
     # incoming TCP on port 8056 (liquidwar6)
     iptables -A INPUT -p tcp --dport 8056 -m state --state NEW,ESTABLISHED -j ACCEPT
     iptables -A OUTPUT -p tcp --sport 8056 -m state --state ESTABLISHED -j ACCEPT
     # outgoing UDP on port 8056 (liquidwar6)
     iptables -A OUTPUT -p udp --dport 8056 --sport 1024:65535 -j ACCEPT
     iptables -A INPUT -p udp --sport 8056 --dport 1024:65535 -j ACCEPT
     # incoming UDP on port 8056 (liquidwar6)
     iptables -A INPUT -p udp --dport 8056 --sport 1024:65535 -j ACCEPT
     iptables -A OUTPUT -p udp --sport 8056 --dport 1024:65535 -j ACCEPT

   If you can't change firewall settings and only have access to the web
through a web proxy, it can still be possible to play (with some
restrictions such as your node not being seen by others) if `mod-http'
is available.  This in turn depends on wether libcurl
(http://curl.haxx.se/) support was activated when compiling the game.
To use the proxy, you can set the `http_proxy' environment variable.
For detailed informations, please refer to libcurl doccumentation
(http://curl.haxx.se/docs/).

2.9.6 Is the game secure?
-------------------------

As stated in the license, the program comes with NO WARRANTY. Period.

   However, an important effort has been made so that it can
reasonnably be used online, exposed to various "common" attacks.

   As far as security is concerned, there are two different issues:
   * vulnerability to general security attacks, people typically trying
     to gain prililedged access on your computer, relying on a security
     flaw in the program. A good firewall is a must-have, as you can
     never know for sure a program has no bugs. Running Liquid War 6 as
     an unpriviledged user (certainly not "root") is also a good
     practice.

   * vulnerability to players "cheating" and sending malicious
     informations to fake their moves, scores, and/or modify
     informations concerning other players. This is a very important
     point in Liquid War 6 since it has a multi-channel way of
     exchanging data (think of the web interface, you have no garantee
     of who the client is).

   Here's a list of various steps which have been taken to make the
program more secure:

   * a `--skip-network' option is here if you really do not want to be
     bothered by networking risks;

   * program has basic password support so that you can deny access to
     unknown players;

   * passwords are never sent in clear text over the network, only a
     hash (checksum) is sent;

   * no use of well-known buffer overflow friendly functions like
     `strcpy', equivalents such as `strncpy' are used;

   * program never trusts what comes from network peers, when it wants
     to know something, it checks it out by itself, for instance, the
     node list is systematically verified by the local node before
     being used and/or published;

   * the built-in web server is not a general purpose web server which
     will end up revealing some of your private files, it can only
     serve game-related pages;

   * the very fact that the game has no central server makes it hard to
     attack it, because if someone wants to play "Oscar" annoying
     "Alice" and "Bob" he well need to fool all the nodes participating
     in a game, sending wrong informations to a single node won't have
     much effect.

   This being said, Liquid War 6 does not use any strong encryption
library to protect the data it sends. All the checksum machinery might
be vulnerable to a brute-force and/or strong cryptographic attack, so
in theory it's possible to fool the program.

   In practise, if you want real privacy, play over a VPN (Virtual
Private Network).


File: liquidwar6.info,  Node: Graphics,  Next: Sound & music,  Prev: Network games,  Up: User's manual

2.10 Graphics
=============

2.10.1 Standard, high and low resolution
----------------------------------------

Liquid War 6 will try and pick up a default resolution when the game is
launched the first time. It won't use your maximum screen resolution
but will instead list all available fullscreen modes, and pick up one
which is usually something like two thirds of the highest mode. This is
to allow switching back and forth between fullscreen and windowed mode
using the same settings. This automatically picked-up resolution really
depends on your hardware and driver. It is called "standard" in the
graphics options menu.

   Then it is possible to automatically select the minimum and maximum
resolution your hardware allows in fullscreen mode. These are called
"low" and "high" in the graphics options menu. Just click on the button
that display the resolution, it will change and use the next setting.
In windowed mode, the game won't accept the highest available mode but
will instead use a percentage of it, defined by the
`--windowed-mode-limit' parameter.

   You might still be in a case where this is not enough. For instance
your maximum resolution is 1600x1200, Liquid War 6 picks a default mode
of 1280x960 for you but for some reason you want to play in 800x600,
fullscreen. In this case, simply switch to windowed mode, resize the
window with the mouse (the resolution button will show you the current
resolution) and just choose a resolution near 800x600. It does not even
need to be exactly 800x600, 798x603 would probably fit. Then when
switching back to fullscreen, you'll be in 800x600, the game will
automatically pick up the fullscreen mode which is closest to the
current windowed mode resolution.

2.10.2 Display rate
-------------------

By default the game will try and run at 60 frames per second. Given the
nature of Liquid War 6, this is probably enough. Higher values will
maybe give a slightly smoother display, but barely noticeable.

   You can activate the display of frames per seconds (aka "fps")
through the menu ("options -> system") or with the command line
("-display-fps").

   On a single processor system, reducing the number of frames per
second might allow the rest of the game run faster. So if you notice
the game is really slow, in terms of "fighters move slowly" then you
might be happy reducing the display rate and therefore giving power
back to the other parts of the program. On a dual-core (or more) or on
a multi-processor system, this is probably useless since the game is
threaded and has a dedicated thread for display purposes. The command
line option to reduce the number of frames per second is `--target-fps'.

   Additionnally, the parameter `--gfx-cpu-usage' allows you to force
the display thread to "take a rest" and go idle for some time. This is
advanced settings, most users won't touch this.


File: liquidwar6.info,  Node: Sound & music,  Next: Config file,  Prev: Graphics,  Up: User's manual

2.11 Sound & music
==================

2.11.1 Current status
---------------------

As of today, the game is capable of playing Ogg Vorbis
(http://www.vorbis.com/) audio files. That's it.

2.11.2 The future
-----------------

In the long run, what is planned is to support Csound
(http://www.csounds.com/) which would allow very cool effects, such as
dynamically changing the music while the game is running, typically
following the action. If there's a lot of fight, the music could
reflect this.

   For now this is only vaporware, just a nice idea among others,
nothing implmented yet.


File: liquidwar6.info,  Node: Config file,  Next: Logs,  Prev: Sound & music,  Up: User's manual

2.12 Config file
================

The config file is a simple XML file. It uses XML only to benefit
standard parsing tools, but it's not a structured XML file, in the
sense that the tree is so simple that all items are at the same level.
It is just a simple key-value binding.

   This file is in `$HOME/.liquidwar6/config.xml' on GNU/Linux and POSIX
systems, in `C:\Documents and Settings\<username>\Liquid War
6\config.xml' on Microsoft Windows and in
`/Users/<username>/Library/Application Support/Liquid War 6/config.xml'
on Mac OS X.

   You're free to edit it manually, but all parameters are changeable
with command line options. The program will overwrite this file each
time it exits, so if you put comments in it, they will disappear. The
advantage of this is that if you mispell something, or if for some
reason the game does not understand a value, then when rewriting the
file, it will show you it just did not get it.

   The file embeds the documentation for all its entries, it is
therefore rather verbose. The documentation is the same you will find
online or by quering the game with the `--about' option, also the same
you would get reading this manual.


File: liquidwar6.info,  Node: Logs,  Next: Report bugs,  Prev: Config file,  Up: User's manual

2.13 Logs
=========

Liquid War 6 uses `stdout' to output important messages, and `stderr'
to log warnings and errors.  It will also use syslog
(http://en.wikipedia.org/wiki/Syslog) if available.

   Additionnally, a verbose log is available in
`$HOME/.liquidwar6/log.csv'  on GNU/Linux and POSIX systems, in
`C:\Documents and Settings\<username>\Liquid War 6\log.csv' on
Microsoft Windows and in `/Users/<username>/Library/Application
Support/Liquid War 6/log.csv' on Mac OS X.

   You can read this using any spreadsheet software capable of reading
csv file. It uses the tab (`\t') character as a separator.  It contains
valuable informations including version and most default values for the
game, and for each line logged, it says where in the code the log
function was called. A must-have for debugging.


File: liquidwar6.info,  Node: Report bugs,  Prev: Logs,  Up: User's manual

2.14 Report bugs
================

There are two ways to report bugs:

   * send a mail to <bug-liquidwar6@gnu.org>
     (mailto:bug-liquidwar6@gnu.org);

   * use the web-based Savannah bug tracker:
     `http://savannah.gnu.org/bugs/?func=additem&group=liquidwar6'.

   The latter (Savannah (http://savannah.gnu.org)) is much preferred,
because the mailing-list is bloated with spam...  It also offers a list
of bugs (http://savannah.gnu.org/bugs/?group=liquidwar6) which you
should read before submitting a new one.


File: liquidwar6.info,  Node: Hacker's guide,  Next: Reference,  Prev: User's manual,  Up: Top

3 Hacker's guide
****************

This hacker's guide is for anyone who is curious about the game, and
wants to know how it works. It covers many aspects from simple map
creation to technical program internals.  A great effort has been done
in Liquid War 6 so that it should be much more hackable than previous
versions. Any feedback is welcome.

* Menu:

* Designing levels::    How to draw new maps.
* Translating::         Translation HOWTO.
* Architecture::        C, Scheme, modules and the rest.
* About mod-gl::        The definitive graphics backend.
* Compilation tips::    Advice for developpers and packagers.
* Coding guidelines::   Ensure code remains maintainable.
* Using the console::   How to interact with the game.
* Advanced tweaking::   Do this at your own risk.
* Writing modules::     How to develop your own extensions.
* Use as a library::    Liquid War 6 can be embedded in your own programs.
* Network protocol::    How the game communicates with others.
* Technical HOWTOs::    Recipes for the maintainer(s).
* Using GNU Arch::      A quick tla survival guide.
* Using GIT::           GIT is used to handle source code.


File: liquidwar6.info,  Node: Designing levels,  Next: Translating,  Up: Hacker's guide

3.1 Designing levels
====================

3.1.1 Why is level design so important?
---------------------------------------

As of Liquid War 5 (http://www.ufoot.org/liquidwar/v5), most levels
have been contributed by players.  While the maintainer of Liquid War 6
has technical knowledge to develop the game, artistic talent and taste
might not be his domain of excellence 8-)

   Therefore contribution are truely welcomed when they take the form
of a new, original, fun and good looking level.  It's believed the
levels often make the game much more than its engine. This is true for
any type of game, and Liquid War is no exception.

   So this section is here to help players understand how to hack
existing levels, and create new ones, in the hope that 1) they can
enjoy their own creations and 2) possibly share their work with others.

   Note that this manual might refer to levels and maps: they are just
two different names to describe the very same thing.  It's an alias.

3.1.2 Format overview
---------------------

Liquid War 6 stores level information in a plain directory.

   There is no such thing as an opaque `.dat' binary file.  The name of
the level is the name of the directory itself, and its elements are the
files contained in it.

   Files must follow a precise naming scheme. For instance Liquid War 6
expects a `map.png' file to be present in each map directory.

   All image files in a level use the Portable Network Graphics
(http://www.w3.org/Graphics/PNG/) or JPEG (http://www.jpeg.org/) format.
It is possible that in the long term, Liquid War 6 will be able to
handle levels as `.tar.gz' or `.zip' files. In that case these files
will only be a compressed image of the actual level directory.

   See the `./map/' directory of the source Liquid War 6 distribution
to see example of maps.

3.1.3 map.png
-------------

This is the only required file in a level.

   In fact, the existence of `map.png' makes a directory a level. When
checking wether a directory is a correct level, Liquid War 6 simply
tests the existence and validity of `map.png'.

   This image is a simple black & white area, where white zones are the
background, the sea, the places where fighters can move, and black
zones are the foreground, the walls, the places where fighters can't go.

   This informations can be stored in a 2-color indexed file, or in a
grayscaled or even truecolor RGB file, but color information won't be
used. Internally, Liquid War 6 will read the color of every point. If
it is over 127 on a 0 to 255 scale, it will be considered as
background, if it is below 127, it will be considered as foreground.

3.1.4 layer2.png ... layer7.png
-------------------------------

Liquid War 6 can handle mutiple layer maps. Think of a pile of maps,
one being on top of the other. This allows you to create a volume, the
game considers every layer has two axis x and y, and the z axis is to
travel through layers. First layer corresponds to z=0, second layer to
z=1, and so on.

   Here are the files you can use to define layers:
   * `map.png' this one is on top, it's always defined (z=0)

   * `layer2.png' (z=1)

   * `layer3.png' (z=2)

   * `layer4.png' (z=3)

   * `layer5.png' (z=4)

   * `layer6.png' (z=5)

   * `layer7.png' (z=6)

   A `layerX.png' file should be designed exactly like `map.png'.  In
fact, `map.png' could simply have been called `layer1.png'.

   Up to 6 extra layers can be defined (from `layer2.png' to
`layer7.png').  This is a hardcoded limit.  It allows you to define 7
different layers, including the top `map.png' layer.  Keep in mind this
layer system is not real 3D, it's more a "2D and a half" model. Adding
layers can considerably slow down the game, so it's wise to try and use
as few layers as possible. Technically, 3 layers will allow you to
build bridges and tunnels, which is probably the most usefull
construction using layers. Fighters can also have difficulties
navigating through layers so piling up layers in narrow "vertical"
z-axis based tunnels is probably not a great idea.

   The `ufoot/concept/pass' map of the `liquidwar6-extra-maps'
demonstrates basic layer usage.

3.1.5 texture.png, texture.jpeg and texture-alpha.jpeg
------------------------------------------------------

It is possible to define a texture for the map by putting a
`texture.png' or `texture.jpeg' file.  It does not need to have the
same dimensions as the map itself. Indeed, textures can be much more
precise than the actual logical map.

   There's no theorical limit on how big a texture can be, more
precisely, it can be much bigger than any hardware/driver maximum
texture size. In practice, a too big texture will waste your video card
RAM, and slow everything down.  Sizes ranging from 640x480 to 1600x1200
are reasonable texture sizes.

   If you don't define this, the `map.png' file will be used as the
texture, and also import colors from `style.xml' if defined.

   Note that the shape of the texture defines the shape of the map,
that is, the ratio with which it will appear on the screen.

   The PNG alpha layer will be used for transparency.  But to save disk
space, it can be convienient to prefer the JPEG format, use
`texture.jpeg' instead of `texture.png'  and store the alpha layer in a
separated file, called `texture-alpha.jpeg'. This avoids handling heavy
PNG files, PNG compression not being performant on most textures.

   In `texture-alpha.jpeg', black is considered opaque, and white is
transparent. Different levels of gray correspond to different levels of
opacity. Previous versions of the game used the other way of doing
things (black is transparent) because this is technically, the most
obvious way to do things. Black is 0 and transparent is 0. But for a
human "reader" of the map this does not make sense. One generally
expects white to be the equivalent of "undrawn" or "blank", well, if
it's undecided, void, transparent, whatever, it's white. When the Gimp
(http://www.gimp.org/) flattens an image, it becomes white, not black.

   So white is transparent. Period.

3.1.6 glue.png and boost.png
----------------------------

If there's a `glue.png' or `boost.png' file in the map directory (you
can use one of them or both) then they will be interpreted as follow:

   * on areas where `glue.png' and `boost.png' are white, nothing
     special happens, fighters follow their default behavior

   * on areas where `glue.png' is black, fighters will be slowed down.
     How slowish they will be depends on the 'glue-power' parameter. If
     'glue-power' is 3 then fighters will move three times slower.

   * on areas where `boost.png' is black, fighters will behave faster.
     How fast they will be depends on the 'boost-power' parameter. If
     'boost-power' is 2 then fighters will move two times faster.

   * on areas where `glue.png' or `boost.png' are gray, they will be
     slowed down less or speeded up less depending on how dark the grey
     is.

   There can be, at the same place, some gray or black in both
`boost.png' and `glue.png'. How this will behave exactly is not really
clear at this stage, the recommendation is not to do this (it does not
really make sense anyway) but if you do it, game won't complain.

   It's also wise not to abuse of `boost.png' for obviously, a map
filled with "boosted" zones at a X10 pace will require much more CPU
than the same map with no such setting. This might fool the automatic
resampling algorithm and lead to maps that are unplayable. The spirit of
`boost.png' is just to make a few spots go faster.

   It's also important to note that behaving faster or slower means
moving faster or slower but also attacking faster or slower, and, in a
general manner  doing any action with a different pace.

3.1.7 danger.png and medicine.png
---------------------------------

If there's a `danger.png' or `medicine.png' file in the map directory
(you can use one of them or both) then they will be interpreted as
follow:

   * on areas where `danger.png' and `medicine.png' are white, nothing
     special happens, fighters follow their default behavior

   * on areas where `danger.png' is black, fighters die automatically,
     that is, they become black and loose health. How dangerous these
     zones are depends on the 'danger-power' parameter.

   * on areas where `medicine.png' is black, fighters regenerate
     faster, they become bright and shiny as if auto-healing. How
     efficient this medicine is depends on the 'medicine-power'
     parameter.

   * on areas where `danger.png' or `medicine.png' are gray, well, it's
     in between, the "danger" and "medicine" effect will be proportional
     to the level of gray.

   There can be, at the same place, some gray or black in both
`medicine.png' and `danger.png'. How this will behave exactly is not
really clear at this stage, the recommendation is not to do this (it
does not really make sense anyway) but if you do it, game won't
complain.

3.1.8 one-way-<direction>.png
-----------------------------

The four files:

   * `one-way-north.png' (AKA "up")

   * `one-way-east.png' (AKA "right")

   * `one-way-south.png' (AKA "down")

   * `one-way-west.png' (AKA "left")

   can be used to force the fighters to go in one given direction, on
some parts of the map. If an area is black on one of this meta-layers,
then fighters will go in the given direction. For instance, a black
zone in `one-way-north' will make fighters go to the north (AKA "up"
direction) regardless of the cursor position. The fact that this is a
one-way path is understood by fighters and they will take this in
account when choosing the shortest path to go somewhere.  You can
combine vertical and horizontal one-way informations, making diagonal
one-way paths.

3.1.9 cursor.png and cursor-color.png
-------------------------------------

By default, a simple cursor will be displayed, but you can use a custom
per-map cursor. Cursors are defined by two 64x64 bitmaps:

   * `cursor.png' is a PNG file, very likely to use transparency, which
     will be default be colorized according to the map colors. You can
     draw it any color, only greyscale informations will be used. You
     can keep the original colors if you really want to by setting
     `colorize-cursor' to false, but the default is to ignore the hue.

   * `cursor-color.png' is another PNG file, very likely to use
     transparency too, which will always be colorized, replacing white
     by the team color, and black by the "dead" color, which by default
     is black and is usually a dark color. This colorization is a way
     to recognize your cursor and know which team it belongs to.

   You can define only one of those bitmaps, if doing so, then the
other layer will be empty, and won't be filled with the default cursor
data. Note that additionnally, a little letter (single character) will
be displayed using the team color, so that's yet another way to
identify which teams the cursor belongs too. The PNG files really need
to be PNG (JPEG won't work) and need to be 64x64, any other size will
be ignored.

3.1.10 rules.xml
----------------

Whereas `style.xml' is only about the appearance of the map,
`rules.xml' allows the map designer to change pretty much any parameter.

   Ultimately, the player can still ignore these settings and overide
them with its own values, but the idea is: most game options are only
pertinent in a given context.  For instance, on some maps it's
interesting to move slowly, on some other it's interesting to move
fast. Some maps might be playable packed with fighters everywhere, some
other might be much more fun with almost nobody on them.

   The approach in Liquid War 5 (http://www.ufoot.org/liquidwar/v5) was
to make the options available, but let the player himself find the
right settings for the right map. The consequence is that no one ever
used all those cryptic options in the advanced options menu, and
probably 99% of the players ended up playing with default settings.
This is not that bad, but given the fact that changing a few parameters
one can totally transform the gameplay, it has decided been that in
Liquid War 6, the map designer suggests the right options that matches
his map.

   This does not prevent the player from toying with options himself,
he can still do it.

   There's also one important point to note: all these options are
technically implemented as integer parameters. We certainly do not want
any float here, since, and it is a Liquid War specific behavior, the
game must be 100,00% predictable and behave the same on every platform.
As there is nothing like exactness when speaking of floats, those are
forbidden here. As for strings, we are dealing here with low-level
internals, and this section is not about telling a story. They are
technical options only. Booleans are implemented with the usual `false
= 0' and `true = 1' convention. Note that other config files in Liquid
War 6 might rely on floats, strings, and booleans with conventionnal
`true' and `false' values, but not this one. `rules.xml' is special.

   This `rules.xml' file is a direct image of the internal "rules"
structure, so it contains technical, sometimes not very user-friendly
parameters. While hacking `rules.xml' directly is a good way to test
things, most of the time, the other file `hints.xml' contains more
high-level informations that do the job the right way. A typicall
example is speed.

   *Note rules.xml reference: Map rules.xml.

3.1.11 hints.xml
----------------

This parameter is only used by the map loader. The map itself contains
none of these parameters, they are only clues (hints, in fact..)  on
"how to load the map" which are passed to the loader.

   Let's take an example : speed. This `rules.xml' file has a (rather)
easy to use "speed" parameter, which will do all the job of finding the
right resolution for your map, the right "rounds-per-sec" and
"moves-per-round" parameters, in short, it will set many other
parameters to fit your needs.

   As far as the map designer is concerned, `rules.xml' and `hints.xml'
could have been merged (but so would have `style.xml') but internally
they are very different: `rules.xml' contains the real parameters, the
one used by the algorithm whereas `hints.xml' contains only instructions
which are used once when loading the map and then disappear. The core
algorithm has no idea of what was in `hints.xml', once it's loaded.

   *Note hints.xml reference: Map hints.xml.

3.1.12 style.xml
----------------

This is a simple XML file defining various appearance parameters.  It
has absolutely no effect on gameplay. These settings can ultimately be
overriden by the player, but the idea is that if the map designer
thinks this level looks better with this or that option, let him say it
in this file.

   *Note style.xml reference: Map style.xml.

3.1.13 Resampling
-----------------

This is a very important point. Liquid War almost *always* resamples
maps, unless you ask it not to do it. This is not recommended, it is
believed in the general case, letting the internal algorithm make its
own decisions is better than trying to figure out oneself "which is the
best resolution".

   The reason is, the right resolution (we're talking here of the
logical resolution, how many fighters wide is the battlefield) often
depends on the speed and general ressources the of the computer the
program is running on. The map designer does not have this information.
The program does. It runs a bench at startup. So this way it can
choose, at runtime, the resolution which fits best.

   The recommended way of doing things is not to try to be too picky
about `rules.xml' parameters related to speed and also let the default
map size limits in `hints.xml' to their defaults. Do not use them
unless debugging stuff.  Then the program will resample the map so that
the player can play on it at a reasonnable speed.  If map is too big,
and it's often the case, then it will downsize it until there are
sufficiently few fighters so that the CPU can handle the job.  This, of
course, is not rocket science. The bench calculation is a somewhat
brute-force approach of doing things. Formally, we would have to run
the map for good to figure out what is the right speed. Still, this
bench gives good approximations.

   Previous versions of the game relied heavily on 'fighter-scale' to
resample maps, but this is not the case anymore. The 'fighter-scale' is
now a minor parameter which is used to upsize maps if they are too
small.  In 99.9% of the cases, the map is first upsized by
'fighter-scale' for this parameter is by default set low (1.0) then
downsized by 'bench-value' for real-life personnal computers can't
handle 1600x1200 maps in real-time.  Not yet.

   There are a bazillion options to control map size, including
'min-map-surface'. They are here because it's important that,
ultimately, people can do whatever they want with the game. But for map
design, this is another story. Don't use them. Rely on 'bench-value'
and just care about game speed. This is achieved by changing the
"speed" parameter.

3.1.14 Music
------------

It is possible to store your own custom music file within the map
directory.  You can call it whatever you want (you can keep its
original name, which is something music authors usually appreciate,
even if there's no strong "attribution" clause on the license, it can
be considered fair use not to fiddle to much with the name) you just
have to place it in the same directory than the other files like
`map.png' or `texture.jpeg'.

   The following formats are known to work with the default SDL_mixer
(http://www.libsdl.org/projects/SDL_mixer/) based `mod_ogg' backend:
   * `ogg' (Ogg Vorbis (http://www.vorbis.com/) files)

   * `wav'

   * `midi' (extensions `.mid' and `.midi' should both work)

   * `mod', `s3m' and `xm' files, AKA "modules".

   To be more precise, here's how things work:
   * step 1: the game tries to find the file `music-file' (parameter
     taken from `style.xml' or defined/overriden by player) in the
     current map directory; step 2: if not found, it will try every
     path in `music-path' to find this file. This includes the "system"
     music directory with musics that ship with the game, but also the
     `./music' subfolder in the user directory; step 3: if still not
     found, it will try to play a random file, relying on
     `music-filter' to ignore some files.


File: liquidwar6.info,  Node: Translating,  Next: Architecture,  Prev: Designing levels,  Up: Hacker's guide

3.2 Translating
===============

3.2.1 Using gettext
-------------------

Liquid War 6 uses GNU gettext (http://www.gnu.org/software/gettext/)
for all its messages. There's an online manual
(http://www.gnu.org/software/gettext/manual/gettext.html) about this
tool. In practice, what you have to do as a translator is to edit the
`po/xx.po' file with `xx' being your language / country code.  For
instance, to translate the game in French, one needs to edit `po/fr.po'.

3.2.2 Formatted strings
-----------------------

This is very important, you might already be aware of it if you are
familiar with gettext, but still it's worth mentionning : when a string
contains special characters such as `%d' or `%s' (in a general manner,
anything with a `%' it's important that all translations contain
exactly the same number of `%d's and `%s's than the original.

   For instance:

     "foo has %d bars (%s)"

   can be translated to:

     "ziblug zdonc %d zuc - %s - tac"

   The number, order and type of `%' entries is preserved. To learn more
about these formats, use `info printf' or `man 3 printf'. In a general
manner, get informations about printf
(http://en.wikipedia.org/wiki/Printf).

   Additionnally, some strings are used by Scheme (Guile) code and not
by C code. Thus, they don't use the standard C/printf convention.  In
these strings, what you must preserve and be aware of is the tilde
character `~'. Very often you'll see `~a' in a string. As with the
printf `%', you must preserve the number, order and type of those.
There is a complete online reference
(http://www.gnu.org/software/guile/manual/html_node/Formatted-Output.html)
about this way of formatting strings.

3.2.3 Partial translation
-------------------------

Liquid War 6 has thousands and thousands of messages which could
theorically be translated. In practise it's counter-productive to spend
time to translate those, as the game is still evolving constantly, and
as most of these messages are technical messages which inform about
rare bugs and strange conditions. All sort of informations which, while
valuable, are not intented for end-users and are more destinated to be
reported in bug reports. To select only the interesting messages to
translate, the current gettext configuration only uses a reduced set of
files.

   * `src/scriptpo.c' : the most important file. It contains the
     definitions used by all the Guile code, this is where you'll find
     all the menu labels.

   * `src/lib/sys/sys-log.c' : log messages and keywords. These are not
     the log messages themselves, it only concerns the log engine. One
     can for instance replace `WARNING' by `ATTENTION'.

   * `src/lib/hlp/hlp-credits.c' : the credits, which are displayed at
     game startup in the splash screen.

   * `src/lib/lw6-print.c' : contains some messages printed on the
     console.

   As a side note, the file `src/lib/hlp/hlp-reference.c' contains all
the entries for the various configuration options, anything that can be
queried by `liquidwar6 --about=<keyword>'. This is several hundred
messages. It might be interesting to translate them some day, but it's
obviously not a priority today.


File: liquidwar6.info,  Node: Architecture,  Next: About mod-gl,  Prev: Translating,  Up: Hacker's guide

3.3 Architecture
================

3.3.1 C + Guile
---------------

Technically, Liquid War 6 is a collection of C functions which are
exported to Guile. The main binary embeds a Guile interpreter, which
will run a Guile script. This script calls the exported C functions,
and glues them together.

   It should be possible to implement the game without using Guile at
all, using C code to make the various modules communicate together.
This might seem an easier way to go, not involving several languages.
However, using this script level is a good way to achieve several
important goals:

   * it's possible, at any time, to query the game about its internal
     state, dump objects, take actions. That's what the console is
     about. It's a bit like having an embedded debugger, it's really a
     very convenient tool to develop, make experiments and track
     problems.

   * many hacks can be done without recompiling anything at all. Simply
     edit a few files with an editor, and your patch is running. Once
     the binary base is set up, hacking scripts on top of it is
     (almost) a piece of cake.

   * forcing the program to use scripts to transfer informations from a
     module to another is a good way to avoid "spaghetti" code, when
     modules cross-use each other in an uncontrollable way. Of course
     in some cases, modules communicate directly, especially when
     performance is important. But for many tasks, it's just very
     comfortable and safe to have module A send orders to module B
     through a high-level script API.

   Having Guile to implement high-level stuff also decreases, to some
extent, the need for object-oriented features of C++. The big picture
is : low level code that require speed, optimized data processing, is
written in C. Code which is more high level and requires abstraction is
written in scheme.

3.3.2 Threading and SMP
-----------------------

Liquid War 6 makes a heavy usage of threads. Early versions of the game
did not have this feature but starting with 0.0.7beta, one can really
consider the game is heavily threaded.

   There's basically:
   * a thread to handle the main control flow. This thread runs scheme
     code which Guile. It's not the most CPU-greedy thread, but when
     it's stalled, there's no more interaction between the user and the
     program.

   * a thread to handle the display. Depending on rendering options,
     this thread can consume lots of CPU cycle. On a single
     processor/core system, it can be interesting to lower rendering
     options in order to gain speed on other aspects of the game. On a
     quad-core system, it's probably useless, just play with all bells
     and whistles activated.

   * two threads to run the core algorithm. One maintains the so-called
     reference state, the other being dedicated to the draft sate. In a
     local game there's no draft state so only one of those two threads
     is used. There's even a technical optimization which can be turned
     on and can theorically use even more threads and be efficient on
     very big maps but well, it's rather untested and still has to
     prove its real efficiency.

   * a thread to handle map loading. This one is not active all the
     time, it's just here to keep a preemptive interface while loading
     complex maps.

   * network code can also fire threads, especially when connecting on
     remote systems.

   So globally, if you have an SMP system, the game will be happy with
it.  It will also run on a single processor, as the program uses POSIX
pthreads it's capable to run on any computer which has pthreads
implemented for it.

   But, and this is a strong limitation, without pthreads, the game
won't run.  At all. Or at least, not unless it's almost completely
rewritten.

3.3.3 Internal libraries
------------------------

The C code is splitted into several internal libraries. This allow
independant testing of various game modules.

   The main module, the most important one, is `libker', (stands for
"kernel").  This is were the core algorithm is. To some extent, the
rest of the code is just about how to provide this module with the
right data and environment.  Logically, if you profle the game, you
should find out that a great part of the CPU time is spent here. Code
here is about spreading gradients, moving fighters and cursors.

   The `libmap' module is here to handle maps, it contains the code to
manipulate maps in memory. But it does not know how to load them from
disk. This is the responsability of another module, `libldr', which is
linked against libraries such as libpng
(http://www.libpng.org/pub/png/libpng.html) or libjpeg
(http://www.ijg.org/) and does the job of transforming those standard
formats into a usable in-memory structure. There's still a third
moduled involved in map handling, it's `libtsk', whose job is to load a
level in the background. It has a 2-steps asynchronous loading system
which allows the game to load maps while the user interface is still
responsive, and give a preview of the map as soon as possible, when
loading continues in the background, building optimizing structures
which are usefull when playing but not mandatory just to show the map.

   At the other end of the algorithm-chain, the `libpil' module will
"pilot" things. It's this module which will translate text readable
orders (typically adapted for network usage) into function calls. It
has event lists, keeps them in the right order, and will also
permanently maintain three different states of the game. A backup state
which can be used any time to go back in time and get the game in a
stable 100% sure state. A reference state which is correct but ever
changing. Basically backup plus all the orders received between backup
and reference gives reference. And finally a draft state which is as up
to date as possible but might be wrong. This is typically interesting
in network game, where we want to show something moving, something
fast, even if there's lag on the network and other computers fail to
send information in time.  In this case we display draft while still
keeping reference and updating it when we finally receive valid
informations. Backup would be used to send bootstrap information when
people are joining a new game, or to check up if things are going right.

   A special `libbot' module is here to handle bot algorithms. A bot is
just a simple `move' function which takes a game state as an input, and
returns an `x,y' position, just the way a mouse handler would. How
complex a bot is "under the hood" depends on the type of bot. Current
bots are really basic.

   The `libgfx' module handles all the graphics stuff. It is itself
splitted in several sub-modules, that is, it does not do anything but
load a module such as `mod-gl' which will actually contain the
implementation. In an object-oriented language, it would be an abstract
class, an inteface. The implementation does not need to be thread-safe.
It's better if it is, for theorically it could be possible to fire
Liquid War 6 with two display backends running at the same time on the
same game instance, but this code has yet to be written, and it's a
rare dual headed configuration which probably has no real-life usage.
If only one graphics backend is activated at a time, the rest of the
implementation garantees there will never be two concurrent calls to a
function is this module. It is the `libdsp' ("display") which handles
this. It fires a thread for rendering purposes, and sends information
to this thread, detecting automatically if it's necessary to acquire a
mutex and update rendering informations. For the caller, this is
transparent, one just has to call an update function from time to time.
The module will even perform "dirty-reads" on a game state being
calculated, to render things in real time, as soon as possible.

   To ease up the implementation of different graphics backends, a
`libgui' module contains code which is meant to be used by any graphics
backend.  It's just a factorisation module, containing common code and
interfaces, related to displaying things. This is where, for instance,
one can find a high level menu object.

   The `libsnd' module handles sound. It's also an abstract class, an
interface, which uses dynamic backends as implementations.

   The `libnet' module is a wrapper over different network APIs, it
handles Winsock and POSIX sockets in a uniform manner.  The `libcli'
and `libsrv' contain network client and server code, implementing the
various protocols in dynamically loadable sub-modules.  It's the role
of `libp2p' to glue this together, handle the list of available
servers, the message queue, verifying nobody is cheating, and so on.
All this modules share information about current game state using code
& structures defined in `libnod',use message utilities (format, parse)
defined in `libmsg' and share code concerning connections in `libcnx'.
Additionnally, `libdat' provides facilities to store old network
messages and sort them.

   The `libsys' module contains most system and convenience functions,
it handles logs, type conversions, timer, memory allocation, it's the
fundamental module every other module depends on. It has a compation
`libglb' module with all the Gnulib
(http://www.gnu.org/software/gnulib/) shared code.

   The `libhlp' is used to handle keywords and internal
self-documentation (this is what is used by `--list' and `--about'),
`libcfg' knows how to read and save config files,  `libcns' handles the
console, and `libdyn' can load `.so' shared files dynamically.

   Finally there are small modules like `libimg' (to make screenshots
of the game) which have been separated because they required special
libraries to link with and/or did not really fit in existing modules
for dependencies reasons.

   So well, this is a lot of modules. The list might move a bit, but the
big picture is here. Each module is testable separately.

3.4 Memory structures
=====================

The most important memory structures in Liquid War 6 are:

   * map (`lw6map_level_t') : this contain the map immutable
     informations.  This is what resides in memory after a map has been
     loaded from the disk.  It contains all the various `.png' and
     `.jpeg' files stored as pixel arrays, resampled if need, and also
     contains the various map attributes. Once this structure is ready,
     the game is capable of displaying the map on the screen, but it
     can not do anything with it yet.

   * game_struct (`lw6ker_game_struct_t') : this one contains the same
     informations as the previous structure, only the information has
     been post-treated so that it's ready for use by the core
     algorithm. It will, for instance, contain the famous mesh
     structure, which groups squares by packets of 1, 4, 16, 64 or
     more. The reason it's been separated from the level is that
     operations such as creating the mesh might require a lot of time.
     So to allow players to see the level while black magic is still
     running in the background, it was required to make a difference
     between what is required to view the map ("level") and what is
     required to play on it ("game_struct").

   * game_state (`lw6ker_game_state_t') : contains all the variable,
     ever changing game data. This is where the position of fighters is
     stored, their health, and such things. It is designed to be
     synchronizable by using mostly simple calls to `memcpy'. It
     heavily relies on the previous structures, the idea is that one
     can have several "game_state" plugged on a single "game_struct".

   All these structures are defined in the `ker/ker.h' header.

3.5 100% predictable algorithm
==============================

The core Liquid War 6 algorithm is 100% predictable, that is to say,
given the same input, it will produce the same results, on any
computer. Previous versions of the game also had this property. This is
very important for network games, since in a network only informations
such as "cursor A is at position x,y" are transmitted. Every node
maintains its own internal game state, so it's very important that
every node comes with the same output given the same input.

   For this reason Liquid War 6 never uses floating point numbers for
its core algorithm, it uses fixed point numbers instead. It also never
relies on a real "random" function but fakes random behavior by using
predictable pseudo-random sources, implementation independant, such as
checksums, or modulos.

   There are also some optimizations which are not possible because of
the predictability requirement, for instance one can not spread a
gradient and move the fighters in concurrent threads, or move fighters
from different teams in different threads.

   If you read the code, you'll find lots of checksums here and there,
a global checksum not being enough for you never know where the problem
happened.  The test suite uses those facilities to garantee that the
game will run the same on any platform.

   Not being able to rely on a predictable algorithm would require to
send whole game states on the network, and this is certainly way too
much data to transmit. A moderate 200x200 map has a memory footprint of
possibly several megabytes, so serializing this and sending it to
multiple computers at a fast-paced rate is very hard, if possible at
all, even with a high bandwidth. We're talking about Internet play here.


File: liquidwar6.info,  Node: About mod-gl,  Next: Compilation tips,  Prev: Architecture,  Up: Hacker's guide

3.6 About mod-gl
================

3.6.1 The main renderer
-----------------------

Liquid War 6 has a modular architecture which allows the programmer
(and the player) to plug pretty much any rendering/graphics backend,
provided this one is... developped.

   As of 2009 the only available backend is still `mod-gl', it will
display the game using 3D acceleration, if available, through the SDL
(http://www.libsdl.org/) library, using its GL bindings.

   Additionnally, versions available for Microsoft Windows and Mac OS X
will probably never any other backends available. For technical
reasons, those platforms do not have the flexibility of GNU/Linux and
do not allow graphical libraries to be loaded dynamically. In practice,
both of them require hacks that override the standard `main' function.
Microsoft Windows has its `WinMain' instead, and Mac OS X is even more
pedantic, requiring graphical functions to be executed in the main
thread.  So `mod-gl' is just linked statically in those versions, and
the modularity of the game is purely theorical on these platforms.

   This `mod-gl' module is really one of the key stones of Liquid War
6, and if you want to change graphical things, it's definitely the
place to hack on. The source is in `src/lib/gfx/mod-gl'.

3.6.2 Hardware requirements
---------------------------

The `mod-gl' backend requires "moderate" hardware, but it still does
require hardware acceleration. Pure software rendering through mesa
(http://www.mesa3d.org/) for instance, won't be enough.

   So if you're running Xorg on GNU/Linux and there's a DRI driver for
your card, the game should run fine.

   On the programmer side, the counterpart is that one should not rely
on fancy OpenGL features. Textures have a maximum size of 512x512 for
instance. Of course some maps are bigger than this but this means that
internally, `mod-gl' splits them into smaller tiles, and displays those
tiles one by one.

3.6.3 The gl-utils toolbox
--------------------------

Inside the `mod-gl' backend, the `src/lib/gfx/mod-gl/gl-utils'
directory contains lots of common structures, factorized functions which
can (and should, if appliable) be used.


File: liquidwar6.info,  Node: Compilation tips,  Next: Coding guidelines,  Prev: About mod-gl,  Up: Hacker's guide

3.7 Compilation tips
====================

3.7.1 Advanced ./configure options
----------------------------------

In addition to all the common Autoconf
(http://www.gnu.org/software/autoconf/) switches such as `--prefix',
Liquid War 6 has some custom switches:

   * `--enable-console': allows you to turn on/off console support.
     Normally this is detected automatically but in case you really want
     to disable it on platforms which support it, you can. This will
     cause the program no to link against `libreadline', among other
     things.

   * `--enable-gtk': allows you to turn on/off gtk support.  Normally
     this is detected automatically but in case you really want to
     disable it on platforms which support it, you can. This will cause
     the program no to link against GTK libs.

   * `--enable-optimize': will turn on optimizations. This will turn on
     compiler options such as `-fomit-frame-pointer' but also disable
     some code in the program. Indeed, most of the advanced memory
     checking in the game - which ensures it does not leak - will be
     turned of. This will certainly speed up things, however, it's not
     recommended to turn this on until program is not stable enough so
     that memory leaks and other problems can be declared 'impossible'.
     Turn this on if you really have some speed problem, otherwise it's
     safer to use the full-featured 'slow' version of the game.

   * `--enable-paranoid': will turn on very picky and pedantic checks
     in the code, try this when you suspect a serious memory bug, a
     race condition whatsoever, and want to track it down.  Useless for
     players.

   * `--enable-headless': will allow compilation without any graphics
     backend. The game is unplayable in that state but one can can
     still wish to compile what is compilable, for testing purposes.

   * `--enable-allinone': will stuff all the internal libraries into
     one big executable.  Very convenient for profiling. The major
     drawback is that you need to have all the optional libraries
     installed to compile all the optional modules. Another side effect
     is that with this option there's no more dynamic loading of binary
     modules, so if your platform has a strange or buggy support for
     `.so' files, this option can help.

   * `--enable-fullstatic': will build a totally static binary, that is
     using the `--static' option for `gcc' and the `-all-static' option
     for `libtool'. Currently broken, this option could in the future
     allow for building binaries that run pretty much everywhere,
     without requiring any dependency but a Kernel.

   * `--enable-gprof': will enable profiling informations.  This will
     activate `--enable-allinone', else you would only track the time
     spent in functions in the main `liquidwar6' executable, and
     exclude lots of interesting code contained in dynamic libraries.

   * `--enable-instrument': will instrument functions for profiling.
     This will turn on the `-finstrument-functions' switch when
     compiling, so that the hooks `__cyg_profile_func_enter' and
     `__cyg_profile_func_exit' are called automatically. Then you can
     link against tools like cprof (http://cprof.sourceforge.net/) or
     FunctionCheck (http://sourceforge.net/projects/fnccheck/).

   * `--enable-profiler': will enable Google Performance Tools
     (http://code.google.com/p/google-perftools/) support. Basically,
     this means linking against `libtcmalloc' and `libprofiler'. You
     could activate those by using `LD_PRELOAD' or by using your own
     `LDFLAGS' but using this option will also make the game tell you if
     `CPUPROFILE' or `HEAPPROFILE' are set when it starts. The `pprof
     -gv' output is very handy.  Note that on some systems `pprof' is
     renamed `google-pprof'.

   * `--enable-gcov': will enable coverage informations, to use with
     gcov (http://gcc.gnu.org/onlinedocs/gcc/Gcov.html) and lcov
     (http://ltp.sourceforge.net/coverage/lcov.php).  This is for
     developpers only. It will activate `--enable-allinone', else there
     would be some link errors when opening dynamic libraries.  The
     obtained information is available online: coverage
     (http://www.gnu.org/software/liquidwar6/coverage/).  and GNU
     global (http://www.gnu.org/software/liquidwar6/global/).

   * `--enable-valgrind': will enable some `CFLAGS' options which are
     suitable for the use of Valgrind (http://www.valgrind.org/), to
     track down memory leaks and other common programming errors.  Use
     for debugging only, usually together with `--enable-allinone'.

3.7.2 Microsoft Windows msys/mingw32 port
-----------------------------------------

This section describes how to compile the game from source under
Microsoft Windows. Note that players are encouraged to use a free
system such as GNU/Linux, which is the platform Liquid War 6 is being
hacked on by default. If you encounter problems with this port, you'll
probably save time by installing a double-boot with GNU/Linux
coexisting with your previous Microsoft Windows install.

   Basically, Liquid War 6 requires MinGW (http://www.mingw.org/).
More precisely, it requires MSYS (http://www.mingw.org/msys.shtml).  A
standard Cygwin (http://www.cygwin.com/) installation won't work,
because it is too UNIXish to allow third party libraries like SDL
(http://www.libsdl.org/) to compile natively.  You might argue that SDL
is available for Cygwin, but in reality, the Cygwin port of SDL is a
MinGW port. Indeed, Cygwin brings all standard POSIX functions
including the use of `main' instead of `WinMain' and I suspect this is
a problem for graphical libraries like SDL which do require some sort
of direct access to the OS low-level functions. Therefore, MinGW is more
adapted for it does not define all these functions, and allows any
library to hook on Microsoft Windows internals directly.  Point is
then, you also loose the cool effect of Cygwin which is to have a
complete glibc (http://www.gnu.org/software/libc) available, including
network functions like `select' defined the POSIX way, and not the
WinSock way. If you ever ported code from POSIX sockets to WinSock 2,
you know what I mean. Using MinGW is also embarassing for some
libraries won't compile easily, and for instance programs which heavily
rely on a real `TTY' interface to work are usually hard to port. This
includes ncurses (http://www.gnu.org/software/ncurses/) and GNU
readline (http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html).
Liquid War 6 tries to have workarrounds for all this, and in some cases
the workarround is simply that embarassing code is not compiled on
Microsoft Windows. For this reason, some features are not available on
this platform. Period.

   Now the reason you need MSYS and not only MinGW is that MSYS will
allow `./configure' scripts to run, and this eases up the porting
process a lot. MinGW and MSYS packages are downloadable on the
SourceForge MinGW download page
(http://sourceforge.net/project/showfiles.php?group_id=2435).
Alternatively, there is a mirror on ufoot.org
(http://www.ufoot.org/download/liquidwar/v6/mingw32/pkg/), but files
might be outdated.

   To compile Liquid War 6, first download and unzip all the following
files in the same directory, for instance `C:\MSYS'.  If you do not
have any tool to handle `.tar.gz' and `.tar.bz2' files under Microsoft
Windows, which is likely to be the case when MSYS is not installed yet,
you can untar these on any GNU/Linux box, then upload the whole
directory to the target Windows host.

   * autoconf2.5-2.61-1-bin.tar.bz2

   * autoconf-4-1-bin.tar.bz2

   * autogen-5.9.2-MSYS-1.0.11-1-bin.tar.gz

   * autogen-5.9.2-MSYS-1.0.11-1-dev.tar.gz

   * autogen-5.9.2-MSYS-1.0.11-1-dll25.tar.gz

   * automake1.10-1.10-1-bin.tar.bz2

   * automake-3-1-bin.tar.bz2

   * bash-3.1-MSYS-1.0.11-1.tar.bz2

   * binutils-2.18.50-20080109-2.tar.gz

   * bison-2.3-MSYS-1.0.11-1.tar.bz2

   * coreutils-5.97-MSYS-1.0.11-snapshot.tar.bz2

   * crypt-1.1-1-MSYS-1.0.11-1.tar.bz2

   * csmake-3.81-MSYS-1.0.11-2.tar.bz2

   * cvs-1.11.22-MSYS-1.0.11-1-bin.tar.gz

   * diffutils-2.8.7-MSYS-1.0.11-1.tar.bz2

   * findutils-4.3-MSYS-1.0.11-1.tar.bz2

   * flex-2.5.33-MSYS-1.0.11-1.tar.bz2

   * gawk-3.1.5-MSYS-1.0.11-1.tar.bz2

   * gcc-core-3.4.5-20060117-3.tar.gz

   * gcc-g++-3.4.5-20060117-3.tar.gz

   * gcc-g77-3.4.5-20060117-3.tar.gz

   * gcc-objc-3.4.5-20060117-3.tar.gz

   * gdb-6.8-mingw-3.tar.bz2

   * gdbm-1.8.3-MSYS-1.0.11-1.tar.bz2

   * gettext-0.16.1-1-bin.tar.bz2

   * gettext-0.16.1-1-dll.tar.bz2

   * gettext-0.16.1-MSYS-1.0.11-1.tar.bz2

   * gettext-devel-0.16.1-MSYS-1.0.11-1.tar.bz2

   * inetutils-1.3.2-40-MSYS-1.0.11-2-bin.tar.gz

   * libiconv-1.11-1-bin.tar.bz2

   * libiconv-1.11-1-dll.tar.bz2

   * libiconv-1.11-MSYS-1.0.11-1.tar.bz2

   * libtool1.5-1.5.25a-1-bin.tar.bz2

   * libtool1.5-1.5.25a-1-dll.tar.bz2

   * libtool1.5-1.5.25a-20070701-MSYS-1.0.11-1.tar.bz2

   * lndir-6.8.1.0-MSYS-1.0.11-1.tar.bz2

   * lpr-1.0.1-MSYS.tar.gz

   * lzma-4.43-MSYS-1.0.11-1-bin.tar.gz

   * make-3.81-MSYS-1.0.11-2.tar.bz2

   * mingw-runtime-3.14.tar.gz

   * mingw-utils-0.3.tar.gz

   * minires-1.01-1-MSYS-1.0.11-1.tar.bz2

   * MSYS-1.0.11-20071204.tar.bz2

   * msysCORE-1.0.11-2007.01.19-1.tar.bz2

   * openssh-4.7p1-MSYS-1.0.11-1-bin.tar.gz

   * openssl-0.9.8g-1-MSYS-1.0.11-2-bin.tar.gz

   * openssl-0.9.8g-1-MSYS-1.0.11-2-dev.tar.gz

   * openssl-0.9.8g-1-MSYS-1.0.11-2-dll098.tar.gz

   * perl-5.6.1-MSYS-1.0.11-1.tar.bz2

   * perl-man-5.6.1-MSYS-1.0.11-1.tar.bz2

   * regex-0.12-MSYS-1.0.11-1.tar.bz2

   * tar-1.19.90-MSYS-1.0.11-1-bin.tar.gz

   * texinfo-4.11-MSYS-1.0.11-1.tar.bz2

   * vim-7.1-MSYS-1.0.11-1-bin.tar.gz

   * w32api-3.11.tar.gz

   * zlib-1.2.3-MSYS-1.0.11-1.tar.bz2

   This file list might contain file which are not absolutely mandatory
for Liquid War 6, for instance the Fortran 77 compiler is absolutely
useless, but installing it won't harm either. Some packages might unzip
things the right way, but some do it in a subfolder. You might need to
run commands like:

     cp -r coreutils*/* .
     rm -rf coreutils*

   Get rid of useless files:
     rm ._.DS_Store .DS_Store

   It's also mandatory to move everything that has been installed in
`/usr' or `/usr/local' to `/' since MSYS has some builtin wizardry
which maps `/usr' on `/'.  You need to do this if you don't unzip files
from a MinGW shell, which is obviously the case when you first install
it. Usefull command can be:

     mv usr/* .
     rmdir usr

   Next, `libintl' is not correctly handled/detected by LW6, and can
raise an error like `"gcc.exe: C:/msys/local/lib/.libs/libintl.dll.a:
No such file or directory"' so one needs to copy some libraries in
`/usr/local/lib/.libs/':

     mkdir local/lib/.libs
     cp local/lib/libintl.* local/lib/.libs/

   Another step is to edit `/etc/profile' and add lines like:

     export CFLAGS="-g -I/usr/local/include"
     export LDFLAGS="-L/usr/local/lib"
     export GUILE_LOAD_PATH="C:\\MSYS\\local\\share\\guile\\1.8\\"

   Close and re-launch your msys shell (rxvt) so that these changes
take effect.  Check that those values are correctly set:

     env | grep FLAGS
     env | grep GUILE

   Finally, your MSYS environment is (hopefully...) working.

   Now you need to compile the following programs, from source.  Files
are mirrored on ufoot.org
(http://www.ufoot.org/download/liquidwar/v6/mingw32/src/) for your
convenience, however these might be outdated.  Still, there are known
to work.  Proceed like if you were under a POSIX system.  Some packages
use the `--disable-rpath' swith, there are various reasons for which
rpath is an issue (http://wiki.debian.org/RpathIssue).  In the same
manner, `--disable-nls' when linking against `libintl' or `libiconv'
was painful.

   * pthreads-win32 (http://sourceware.org/pthreads-win32/), untar
     pthreads-w32-2-8-0-release.tar.gz then `make clean GC; cp
     pthread.h sched.h /usr/local/include/; cp pthreadGC2.dll
     /usr/local/bin/; cp libpthreadGC2.a /usr/local/lib/'

   * GNU MP (http://gmplib.org/), untar `gmp-4.2.2.tar.gz' then
     `./configure && make && make install'

   * Guile (http://www.gnu.org/software/guile/), untar
     `guile-1.8.5.tar.gz'.  Edit `libguile/guile.c' and insert  `#undef
     SCM_IMPORT' just before `#include <libguile.h>'.  Edit
     `./libguile/threads.c' and place `struct timespec { long tv_sec;
     long tv_nsec; };' just before `#include "libguile/_scm.h"'.  Then
     `./configure --disable-nls --disable-rpath
     --disable-error-on-warning --without-threads && make && make
     install'. The `GUILE_LOAD_PATH' value must be correctly set for
     `guile-config' to work. For unknown reasons, running `guile' can
     throw a stack overflow error. Don't panic.  See bug 2007506 on
     SourceForge.net
     (https://sourceforge.net/tracker/?func=detail&atid=102435&aid=2007506&group_id=2435)
     for an explanation on why the Guile binary shipped with MSYS is
     not suitable for Liquid War 6.

   * expat (http://www.libexpat.org/), untar `expat-2.0.1.tar.gz' then
     `./configure && make && make install'

   * SQLite (http://www.sqlite.org/), untar
     `sqlite-amalgamation-3.5.9.tar.gz' then `./configure && make &&
     make install'

   * libpng (http://www.libpng.org/pub/png/libpng.html), untar
     `libpng-1.2.29.tar.gz' then `./configure && make && make install'

   * libjpeg (http://www.ijg.org/), untar `jpegsrc.v6b.tar.gz' then
     `./configure && make && make install && make install-lib'

   * libcURL (http://curl.haxx.se/libcurl/), untar `curl-7.18.1.tar.gz'
     then `./configure --without-ssl && make && make install'

   * FreeType 2 (http://freetype.sourceforge.net/), untar
     `freetype-2.3.5.tar.gz' then `./configure && make && make install'

   * libogg (http://www.xiph.org/), untar `libogg-1.1.3.tar.gz' then
     `./configure && make && make install'

   * libvorbis (http://www.xiph.org/), untar `libvorbis-1.2.0.tar.gz'
     then `LDFLAGS="$LDFLAGS -logg" && ./configure && make && make
     install'

   * SDL (http://www.libsdl.org/), untar `SDL-1.2.13.tar.gz' then
     `./configure && make && make install'

   * SDL_image (http://www.libsdl.org/projects/SDL_image/), untar
     `SDL_image-1.2.6.tar.gz' then `./configure && make && make install'

   * SDL_mixer (http://www.libsdl.org/projects/SDL_mixer/), untar
     `SDL_mixer-1.2.8.tar.gz' then `./configure && make && make install'

   * SDL_ttf (http://www.libsdl.org/projects/SDL_ttf/), untar
     `SDL_ttf-2.0.9.tar.gz' then `./configure && make && make install'

   For your convenience, a zip file containing a complete MSYS "Liquid
War 6 ready" environment is available. It is simply the result of all
the operations described above.  Simply unzip
msys-for-liquidwar6-20080819.zip
(http://www.ufoot.org/download/liquidwar/v6/mingw32/msys-for-liquidwar6-20080819.zip)
(about 240 megs) in `C:\MSYS\'.  All dependencies compiled in `/local'
have been generated using the command:
     cd /usr/local/src
     ./msys-for-liquidwar6-build.sh > ./msys-for-liquidwar6-build.log 2>&1
   Note that this script does't do everything, you'll still need to
edit Guile source code and patch it manually.

   It might even be possible to use this MSYS environment under Wine
(http://www.winehq.com/).  Simply unzip it under `$HOME/.wine/drive_c',
and run `wine "$HOME/.wine/drive_c/windows/system32/cmd.exe" /c
"c:\\msys\\msys.bat"' and with luck, you'll get a working shell. Note
that this might allow you to compile the game, but running it is
another story. Consider this MSYS over Wine trick as a hack enabling
the use of free software only when compiling for Microsoft proprietary
platform. It is not a reasonnable way to run the game.  If running
under a UNIXish platform, or better, GNU, simply run native code.  Use
the Windows 32-bit port only if you are jailed on a Microsoft system.

   Now, let's come to the real meat, untar the Liquid War 6 source
tarball, launch your MSYS shell, and:

     ./configure
     make
     make install

   Now the binary is in `src/.libs/liquidwar6.exe' (beware,
`src/liquidwar6.exe' is only a wrapper).  This binary is an MSYS/MinGW
binary, so it read paths "à la" Microsoft, that is, it has no knowledge
of what `/usr' is, for instance. It requires paths starting by `C:\'.

3.7.3 Mac OS X port
-------------------

This is still experimental. Basically, install MacPorts, and most
dependencies with, except for SDL which you compile from source. The
idea is to compile SDL using the native OS X bindings (and not some
other GL files you could have in `/opt/local' installed by MacPorts),
then compile the game and other SDL dependencies against this SDL.

   The SDL_mixer library might need to be told to compile itself
without dynamic ogg support.  By default it seems that it tries to load
`libvorbisfile.dylib' at runtime, and it can fail.  To disable this
dynamic loading, use for instance :

/configure --prefix=/opt/extra --enable-music-ogg --disable-music-ogg-shared

   Also, it might seem obvious for Mac OS X users, but there are some
important issues related to compiling options and handling dynamic
libraries at runtime.
   * The command `ldd' does not exist, run `otool -L' instead.

   * The equivalent of `LD_LIBRARY_PATH' is `DYLD_LIBRARY_PATH'.

   * The extension for shared binaries is `.dylib' and not `.so'.

   * You might need to set the `OBJCFLAGS' environment variable along
     with `CFLAGS' because the Mac OS X port uses some Objective-C code.

   It is very important to have the right SDL flags when linking the
Liquid War 6 binaries.  For instance it could be:

-I/opt/extra/include -I/opt/local/include -Wl,-framework -Wl,CoreFoundation -I/opt/local/include -D_THREAD_SAFE -Wl,-framework -Wl,Cocoa -Wl,-framework -Wl,OpenGL -Wl,-framework -Wl,Cocoa

   The point is to have Cocoa and OpenGL support. Depending on the way
you installed SDL, you might also need to include an SDL framework
support, this is mostly if you installed SDL from .dmg binary images,
and not from source with the command line. A typical output of
`sdl-config --libs' is:

-L/opt/extra/lib -lSDLmain -lSDL -Wl,-framework,Cocoa

   Another important issue is to include `SDL.h', which in turn
includes `SDLmain.h', in all the .c source files defining the standard
`main' function. This is done in liquidwar6 but should you try to link
yourself on liquidwar6 libraries and/or hack code, you must do this or
you'll get errors when running the game. Such errors look like:

*** _NSAutoreleaseNoPool(): Object 0x420c90 of class NSCFNumber autoreleased with no pool in place - just leaking

   The reason is that SDL replaces your `main' with its own version of
it. One strong implication is that all the dynamic loading of SDL,
which works on sandard GNU/Linux boxes, won't work under Mac OS X,
since SDL hard codes itself by patching `main' with `#define'
C-preprocessor commands.

   A `.dmg' file (disk image) containing a `Liquid War 6.app' folder
(OS X application) is available for your convenience. It might work or
not. In doubt, compile from source. The complicated part about this
package (a "bundle" is OS X language) is that it needs to embed various
libraries which are typically installed in `/opt' by MacPorts on a
developper's machine. So to build this package a heavy use of the
utilility `install_name_tool' is required, normally all libraries
needed ship with the binary, remaining depedencies concern frameworks
which should be present on any working Mac OS X install. Still, this is
only theory.  Needs to be widely tested.

   The layout of the bundle follows:
   * `./Contents/Info.plist': metadata, bundle description file

   * `./Contents/MacOS': contains the main binary `liquidwar6' as well
     as all specific low-level libraries

   * `./Contents/Resources/data': general game data, does not contain
     maps.

   * `./Contents/Resources/music': music for the game.

   * `./Contents/Resources/map': system maps, you can put your own maps
     (or "extra" maps) here if you want all users to share them.

   * `./Contents/Resources/script': Liquid War 6 specific scripts, the
     scheme scripted part of the program.

   * `./Contents/Resources/guile': common shared Guile scripts, part of
     Guile distribution.

   * `./Contents/Resources/doc': documentation in HTML and PDF formats.

   Additionnally, the Mac OS X port uses
`/Users/<username>/Library/Application Support/Liquid War 6/' to store
configuration file, logs, etc. It does not use `$HOME/.liquidwar6' like
the default UNIX port.

   The Mac OS X port also has a special behavior, in order to load some
libraries with dlopen (SDL_image does this with libpng and libjpeg) it
needs to set `DYLD_FALLBACK_LIBARY_PATH' to a value that contains these
libraries. This is typically in the bundle distributed on the disk
image.  On a developper's computer this problem does not appear for
those libs are often in places like:
   * `/usr/local/lib'

   * `/usr/X11/lib'

   * `/opt/local/lib'
   So the program sets `DYLD_FALLBACK_LIBARY_PATH' (but not
`DYLD_LIBRARY_PATH' else it breaks internal OS X stuff which relies,
for instance, on libjpeg library that has the same name but different
contents) but it needs to do it before it is even run, else the various
`dyld' functions do not acknowledge the change. That is, calling the C
function `setenv()', even before `dlopen()', has no effect. So the
program calls `exec()' to re-run itself with the right environment
variable. This is why, on Mac OS X, there are two lines (exactly the
same ones) displaying the program description when it is started in a
terminal.

3.7.4 GP2X port
---------------

This is not working yet, but there are good hopes that some day, Liquid
War 6 can run on a GP2X console (http://www.gp2xwiz.co.kr/).  This
handled gaming device uses a Linux kernel (http://kernel.org) on an ARM
processor, does support most GNU (http://www.gnu.org/) packages through
cross-compilation, and has basic SDL (http://www.libsdl.org/) support.

   To compile Liquid War 6 for GP2X, you first need to set up a working
"toolchain". It's suggested you do this on a working GNU/Linux box.
There are several solutions, the recommended one being Open2x
(http://www.open2x.org/). Read the online documentation on how to
install Open2x
(http://wiki.gp2x.org/wiki/Installing_the_Open2x_toolchain).

   Basically, the following should work:

mkdir /opt/open2x # check that you can write here
svn co https://open2x.svn.sourceforge.net/svnroot/open2x/trunk/toolchain-new open2x-toolchain
./open2x-gp2x-apps.sh
cd open2x-toolchain

   Then, for your environment to be complete, you need to set up some
environment variables. For instance:

export OPEN2X_SYSTEM_PREFIX=/opt/open2x/gcc-4.1.1-glibc-2.3.6/arm-open2x-linux
export GP2X_USER_PREFIX=$HOME/gp2x

export CC=${OPEN2X_SYSTEM_PREFIX}/bin/arm-open2x-linux-gcc
export CPP=${OPEN2X_SYSTEM_PREFIX}/bin/arm-open2x-linux-cpp
export CXX=${OPEN2X_SYSTEM_PREFIX}/bin/arm-open2x-linux-g++
export AS=${OPEN2X_SYSTEM_PREFIX}/bin/arm-open2x-linux-as

export CFLAGS=''-I${OPEN2X_PREFIX}/include -I${GP2X_USER_PREFIX}/include''
export CPPFLAGS=''-I${OPEN2X_PREFIX}/include -I${GP2X_USER_PREFIX}/include''
export CXXFLAGS=''-I${OPEN2X_PREFIX}/include -I${GP2X_USER_PREFIX}/include''
export LDFLAGS=''-L${OPEN2X_PREFIX}/lib -L${GP2X_USER_PREFIX}/lib''

export PATH=''${GP2X_USER_PREFIX}/bin:${OPEN2X_SYSTEM_PREFIX}/bin:$PATH''

   In this setting, there's a user `$HOME/gp2x' directory which will
contain all the Liquid War 6 related libraries while the `/opt/open2x'
remains untouched.

   Then you need to install the requirements. All these packages need to
be cross-compiled. To make things clear and non-ambiguous, even if you
have `CC' set up in your environment variables, pass `--build' and
`--host' arguments to the `./configure' script of all these packages. A
typical command is:

./configure --build=i686-pc-linux-gnu --host=arm-open2x-linux --prefix=${GP2X_USER_PREFIX}

   Here's the list of the requirements:

   * SDL (http://www.libsdl.org/). 1.2.14 works zith the following
     settings: `./configure --prefix=$GP2X_USER_PREFIX
     --build=x86_64-pc-linux-gnu --host=arm-open2x-linux
     --disable-pulseaudio --disable-video-directfb'

   * libtool (http://www.gnu.org/software/libtool/). Install a 1.5.x
     version, and not 2.2.x. For some reasons, 2.2.x is unusable, it
     keeps on complaining that lt_libltdl_LTX_preloaded_symbols is not
     defined
     (http://lists.cistron.nl/pipermail/freeradius-users/2009-September/msg00149.html).
     Apparently the bug has already been reported
     (http://www.archivum.info/bug-libtool@gnu.org/2009-01/00014/undefined_lt_ptr).
     For Liquid War 6 needs, 1.5.x is very fine, use 1.5.26 for
     instance, it works well.

   * GNU MP (http://gmplib.org/) (version 4.3.1 reported to work)

   * Guile (http://www.gnu.org/software/guile/) (version 1.8.7 reported
     to work).  You need to pass the `--witout-threads' switch to the
     `./configure' script else it will try (and fail!) to run a test
     program. Liquid War 6 does not use Guile threads, it does use
     threads but uses them "directly" outside the Guile layer.

   * zlib (http://www.zlib.net/) (version 1.2.3 reported to work).  Do
     not use `--build' and `--host' for this one, they are unsupported.
     Package compiles fine anyway.

   * expat (http://www.libexpat.org/) (version 2.0.1 reported to work).

   * libpng (http://www.libpng.org/pub/png/libpng.html) (version 1.2.3
     reported to work).

   * libjpeg (http://www.ijg.org/) (version 7 reported to work).

   * SQLite 3 (http://www.sqlite.org) (version 3.6.18 reported to work).

   * libcURL (http://curl.haxx.se/libcurl/) (version 7.19.6 reported to
     work).

   Next, one needs to install a special version of SDL, which targets
the GP2X specifically. This is not a generic SDL, and it does have
limitations, which are related to the GP2X peculiar hardware.  There
are installation instructions
(http://wiki.gp2x.org/wiki/How_to_install_the_SDL_libraries) about how
to do this. The following should work:

cvs -d :pserver:anonymous@cvs.sourceforge.net:/cvsroot/open2x login # blank password
cvs -d :pserver:anonymous@cvs.sourceforge.net:/cvsroot/open2x co libs-gp2x


File: liquidwar6.info,  Node: Coding guidelines,  Next: Using the console,  Prev: Compilation tips,  Up: Hacker's guide

3.8 Coding guidelines
=====================

3.8.1 Project goals reminder
----------------------------

One of the purposes of Liquid War 6 is to make a cleaner implementation
of Liquid War than the previous one, namely Liquid War 5
(http://www.ufoot.org/liquidwar/v5).  While the latter has achieved the
practical goal of providing a playable implementation of the game, it
failed at providing an evolutive platform. Network capabilities where
finally added to Liquid War 5 (http://www.ufoot.org/liquidwar/v5), but
anyone who played on Internet with someone a few hundreds of
milliseconds away would agree that it's far from being perfect. The
main reason for this is that it is really had to hack on Liquid War 5
(http://www.ufoot.org/liquidwar/v5), especially when you are not the
core developper. The core developper himself, even knowing all the
various hacks in the game, is very quickly lost when trying to
implement major changes.

   To put it short, Liquid War 5 (http://www.ufoot.org/liquidwar/v5) is
a global variable hell, a pile of hacks on top of a quick and dirty
implementation.  Still, it works.

   With Liquid War 6, the idea is to take the time to make something
stable, something nice which will enable developpers to implement the
cool features, and have fun along the way.  Of course, this is only a
dream, and in the (hopefully "very") long run, Liquid War 6 will also
end up as a big unmaintainable mess, like any real-life program, until
then, it should remain hackable.

3.8.2 Common sense
------------------

Here are a few guidelines which I think are common sense advice, but
they are still worth mentionning:

   * try and respect the GNU coding standards
     (http://www.gnu.org/prep/standards/);

   * absolutely no `strcpy' or `sprintf' anywhere in the code.
     Nowhere. Use their equivalent `strncpy' and `snprintf'
     systematically, as they are part of the glibc and are an order of
     magnitude safer.  Moreover, Liquid War 6 provides wrappers, such
     as `lw6sys_new_sprintf' which handles all the nasty dirty memory
     allocation stuff for you;

   * keep global variables for when there is something truely global,
     and even in that case try to fit them in clearly identified
     structures.

3.8.3 Unitary tests
-------------------

Each of the internal libraries in Liquid War has a "test" program
associated with it. For instance `liquidwar6sys-test' is associated to
`libliquidwar6sys', and its purpose is to test the features of this
library.

   While it is fairly easy to test out unitary functions which require
no peculiar context, testing high-level functions which requires files,
graphical and possibly network contexts to exist is obviously harder to
achieve. There's no easy way to draw the line, but the idea is to put
in these test executables as many features as possible, to be sure that
what is tested in them is rock solid, bullet proof, and that one can
safely rely on it and trust that code when running it in a more complex
environnement.

   These test executables are also very good places to see a library
API in action, find code fragments, and make experiments.

3.8.4 Memory allocation
-----------------------

Liquid War 6 provides macros to allocate and free memory. One should
use them systematically, except when trying to free something allocated
by another library, and in very special cases, mostly concerning
low-low level operations which are seldom hacked on.

   Usage of macros `LW6SYS_MALLOC', `LW6SYS_CALLOC' and `LW6SYS_FREE'
is straightforward, read any random chunk of code, for instance
`./src/lib/sys/sys-test.c' to see them in action. They are defined in
`sys/sys.h'.

   Once used, these macros will track every single call to  `malloc'
and `free', and if there's a difference, it will report it. It will
also help you by showing what's in the non-freed memory area, at which
line of code it has been allocated, and when. This is very usefull to
track down memory leaks.  Of course a debugger could tell you some of
these informations, but experience shows than when you encounter a
memory bug, it's very often impossible to reproduce it. So you one
wastes time trying to reproduce the bug, whereas with this tool you
have the information reported just when the problem happens.

3.8.5 Private and public interfaces
-----------------------------------

Each library exports a public interface and hides its internal.  Since
Liquid War 6 uses standard C and no C++, there's no real standard way
to handle public/private features. The convention used in Liquid War 6
is to show internal structures as opaque pointers (`void *') whenever
some function needs to operate on a structure which has possibly
private fields.  This way the caller function has no way to access the
internals, and we are sure that no reference to any internal
implementation specific feature will appear.

   Here's a code excerpt from `src/gfx/setup.c':
     void _lw6gfx_quit(_LW6GFX_CONTEXT *context) {
       /*
        * Implementation here.
        */
     [...]
     }

     void lw6gfx_quit(void *context) {
       _lw6gfx_quit((_LW6GFX_CONTEXT *) context);
     }

   The function `_lw6gfx_quit' (note the "_") is internal, declared in
`internal.h' whereas the function `lw6gfx_quit' is public, and is
therefore exported in `gfx.h'.

   This way, functions in the program using `lw6gfx_quit' do not know
what is in the `_LW6GFX_CONTEXT' structure, and they need not know it.

   This does not mean it is not possible to have public structures,
only these structures must reflect some truely public, accessible and
safe to access structures.

3.8.6 Audit the code
--------------------

Liquid War 6 is regularly audited with automated tools. You might need
to pass `--enable-gcov' to `--configure' if you want to use thes tools
yourself. More precisely:

   * lcov (http://ltp.sourceforge.net/coverage/lcov.php) is run,
     ideally with each release - but it's not garanteed, check the
     output date and time - and the output is available online on
     `http://www.gnu.org/software/liquidwar6/coverage/'.

   * GNU global (http://www.gnu.org/software/global/) is run too,
     ideally with each release - again, check the output date and time -
     and the output is available online on
     `http://www.gnu.org/software/liquidwar6/global/'.

   * pmccabe (http://parisc-linux.org/~bame/pmccabe/) reports cyclomatic
     complexity. It shows where the code is too complex and should
     probably be rewritten. Output is post-processed using pmccabe2html
     (http://www.gnu.org/software/gnulib/MODULES.html#module=pmccabe2html)
     from gnulib (http://www.gnu.org/software/gnulib/). The output is
     available online on
     `http://www.gnu.org/software/liquidwar6/cyclo/'.

   * Valgrind (http://valgrind.org/) is run as well, it should report
     absolutely no leak on all the core sub-libraries, eg running
     `liquidwar6ker-test' or `liquidwar6ker-pil'.  Bits of code which
     depend on other libraries are a different story, for some projects
     on which Liquid War 6 depends might, for some reason, raise
     warnings. But as far as Liquid War 6 is concerned, the goal is
     simple: zero leak.

   Those tools certainly don't garantee the code is perfect, but they
do help improving the quality of the program. If you hack, it's
recommended you give them a try.


File: liquidwar6.info,  Node: Using the console,  Next: Advanced tweaking,  Prev: Coding guidelines,  Up: Hacker's guide

3.9 Using the console
=====================

The console can be activated by passing `--display-console' when
starting the game or by using the system options menu.

   When the console is activated, a `lw6>' prompt should appear in the
terminal which launched the program. If you started Liquid War 6 by
clicking on an icon, console probably won't work at all since `stdout'
and `stdin' won't be attached to anything.

   The console allows you to type arbitray Scheme/Guile code.

   Try, for instance:
     (+ 1 2)
     (display "foo\n")

   You can really break things with this console, it gives you a direct
access to all the program internals. At least, all the values which are
accessible through the script interface, that is, many of them.

   You can call any internal C function which has been exported to
Guile, here are some examples:

     (c-lw6sys-timestamp)
     (c-lw6bot-get-backends)
     (c-lw6sys-sleep 2.0)
     (lw6-config-get-number "zoom")
     (lw6-config-set-number! "zoom" 0.9)
     (lw6-config-get-number "zoom")

   While syntax (and possibly other) errors will be trapped by the
interpreter, note that if you break things inside the game by, say,
changing some global value, or in a general manner cause an error
elsewhere in the code, the game will really raise a fatal error and
stop. That's how you can "break things".

   Still, this console is a very powerfull tool, very usefull for
debugging but also for tweaking the game without restarting it and/or
navigating through the menu interface.


File: liquidwar6.info,  Node: Advanced tweaking,  Next: Writing modules,  Prev: Using the console,  Up: Hacker's guide

3.10 Advanced tweaking
======================

3.10.1 Hacking ressources
-------------------------

Liquid War 6 tries to have as few hardcoded data as possible. So many
constants, and pretty much all the image files, are accessible in the
data directory. You can know where it is by launching `liquidwar6
--show-data-dir'. If you look in this directory you'll find different
files, among them XML files.

   Let's take an example. Try and find the file
`gfx/gl/hud/floating/gl-floating-const.xml'.  Edit the line with the
`clock-y1' entry. Change the number after `"value"'.  Re-run the
program. Play a game. What happens? Logically you should see that
"something" is not displayed at the same place than before.

   You could also modify the textures (JPEG and PNG files). In a
general manner it's more cautious to keep them the same size but it
depends, sometimes other sizes will work as well.

   Many of these parameters are really too technical and obscure to
have their place in the main config file (which is already rather big).
Use at your own risks, you can really break things touching this, but
you can also find out lots of things can be tuned.

3.10.2 Optimize for speed
-------------------------

Todo...


File: liquidwar6.info,  Node: Writing modules,  Next: Use as a library,  Prev: Advanced tweaking,  Up: Hacker's guide

3.11 Writing modules
====================

Todo...


File: liquidwar6.info,  Node: Use as a library,  Next: Network protocol,  Prev: Writing modules,  Up: Hacker's guide

3.12 Use as a library
=====================

Todo...


File: liquidwar6.info,  Node: Network protocol,  Next: Technical HOWTOs,  Prev: Use as a library,  Up: Hacker's guide

3.13 Network protocol
=====================

This section describes how Liquid War 6 handles network messages.  Note
that for now this is purely theorical, more of a draft, a plan, it
might change before being implemented.

3.13.1 No server, no client, only nodes
---------------------------------------

Liquid War 6 does not really have the notion of server or client, any
instance of the program can act as both server and client, therefore we
use the term node.

   A node listens on a given port, in both TCP and UDP, and can connect
to other nodes on the same port. The main identifier of a node is its
public url, which is typically of the form
`http://<ip-address>:<port>/'. This url is very important for it is (or
at least should be) a unique identifier of the node over the network.

   Liquid War has 3 ways to communicate:
   * raw TCP, this is the LW6 protocol, the easiest to implement and
     debug, probably the most reliable one, but not always the fastest.
     This involves the two modules `mod-tcp' and `mod-tcpd'.

   * HTTP over TCP, this is a hack which allows the game to communicate
     through HTTP proxies for instance. Additionnally, the fact any
     node is a web server enables peering with a simple web browser.
     Web server facility requires `mod-httpd' and client part requires
     `mod-http' which might or not be available, depending on how the
     game was compiled.

   * raw UDP, this is another version of the LW6 protocol, this is in
     theory the fastest way to communicate, it requires `mod-udp' and
     `mod-udpd' to work. Using UDP only was not an option when
     conceiving Liquid War since it's interesting to have other
     solutions if, for instance, a firewall does not allow you to use
     UDP the way you want.

   On each of these channels, messages can be exchanged in two modes,
an "out of band" mode (AKA "oob"), and a regular message oriented, here
we speak of "connection".

3.13.2 Out of band messages
---------------------------

There are only 3 out of band messages:

   * `PING': requests for a simple `PONG http://server:port/' answer,
     this is just to check if a server is a valid server, and if the
     URL we used to connect on it is the correct one.

   * `INFO': requests for a list of key/attributes pairs, which
     describe the node, telling for instance its version, its uptime,
     and so on.

   * `LIST': requests for a list of other nodess this node is aware of.

   You can test out of band messages by simply connecting on your
server with a command like:
telnet localhost 8056

   At the telnet prompt, simply type:
INFO
 and press return, and you should have a description of your node.

   The complete syntax of OOB messages is:
<COMMAND> [password] [url]

   The `password' and `url' parameters are optionnal. `password' can
contain either the plain text password or a checksum calculated from
the password which is, for security reasons, seeded with the public url
of the node we're connecting to, so that this password can't be re-used
on another node. `url' is simply a clue we give to the other node to
help find us, the other node will automatically try to detect our IP
address and use standard LW6 port 8056, but if for some reason we use a
different setting, this is a good way to pass the hint.

   As far as OOB is concerned, TCP and UDP work almost the same, HTTP
is a bit different, the OOB commands are accessed through the following
URLs:
   * `/ping.txt'

   * `/info.txt'

   * `/list.txt'

3.13.3 Other raw technical stuff (WIP)
--------------------------------------

TCP messages:

LW6 [<passwd>] <version> <client-id>
<from-id> <to-id> <serial> <i> <n> <sig> MSG1
<from-id> <to-id> <serial> <i> <n> <sig> MSG2

   TCP oobs:

<return> # only works anonymous, same as INFO
INFO [<passwd>] [<public-url>]
LIST [<passwd>] [<public-url>]
PING [<passwd>] [<public-url>]

   UDP messages:

LW6 [<passwd>] <version> <client-id> <from-id> <to-id> <serial> <i> <n> <sig> MSG1
LW6 [<passwd>] <version> <client-id> <from-id> <to-id> <serial> <i> <n> <sig> MSG2

   UDP oobs:

INFO [<passwd>] [<public-url>]
LIST [<passwd>] [<public-url>]
PING [<passwd>] [<public-url>]

   HTTP messages:

   client id & password passed in HTTP headers

/lw6/version/<from-id>/<to-id>/<serial>/<i>/<n>/sig/MSG1
/lw6/version/<from-id>/<to-id>/<serial>/<i>/<n>/sig/MSG2

   HTTP public URLs:

/ -> index.html
/index.html
/favicon.ico
/screenshot.jpeg
/robots.txt
/gpl.txt
/info.txt
/list.txt
/ping.txt

   MSG syntax:

<round> <server-id> <command> <arg1> ... <argN>

   COMMAND examples:
2 1234abcd1234abcd REGISTER
3 1234abcd1234abcd ADD 5678 YELLOW
4 1234abcd1234abcd SET 5678 20 5
10 1234abcd1234abcd NOP
400 1234abcd1234abcd REMOVE 5678
1000 1234abcd1234abcd UNREGISTER

   Sig is a checksum on string:
<from-id> <to-id> <serial> <i> <n> MSG


File: liquidwar6.info,  Node: Technical HOWTOs,  Next: Using GNU Arch,  Prev: Network protocol,  Up: Hacker's guide

3.14 Technical HOWTOs
=====================

3.14.1 Release check-list
-------------------------

Summary off all operations required for a release:

   * in `./src', run `./indent.sh'.

   * in `./doc', run `./gdoc-update.sh'.

   * edit `NEWS' file, in both `liquidwar6' and
     `liquidwar6-extra-maps'. Check `ChangeLog' is OK.

   * update the version history in `doc/liquidwar6.texi'.

   * run `make distcheck'... (at least!)

   * build `RPM' package (`make -C pkg rpm'), check `yum install'
     produces a working installation, also check the `rpm -e' command
     to verify uninstalling is OK too.

   * build `.exe' main binary on Microsoft Windows then go back to
     GNU/Linux and build `.exe' installer (`make -C pkg installer'), go
     back to Microsoft Windows and test the installer (there are often
     problems at this stage because of missing libraries or other
     files...).

   * build `.dmd' Mac OS X disk image, check it works even when `/opt'
     and `/usr/local' or (re)moved, this is important, else execution
     might rely on binaries which are only on the development machine
     and do not ship with game.

   * upload files (doc on
     `http://savannah.gnu.org/maintenance/DownloadArea'), with a
     command like `rsync --rsh=ssh ./version/
     login@dl.sv.nongnu.org:/releases/liquidwar6/version/'. Each file
     must have its `.sig' corresponding file.

   * update online docs with `gendocs.sh', carefull, `liquidwar6.html'
     is suppressed by this, need to re-create it from previous version
     and/or `index.html' which is the same.

   * update `index.html', `liquidwar6.html' and `liquidwar6.fr.html' so
     that they reflect the latest release. Check download links are OK.

   * run `./configure --enable-gcov ; make clean ; make'. Then run
     `src/liquidwar6 --test', stay here and get ready to respond
     interactively to various questions. Then cd to `./doc/coverage'
     and run `make opt'. Copy files to web CVS, sync them.

   * cd to `./doc/global' and run `make opt'. Copy files to web CVS,
     sync them.

   * cd to `./doc/cyclo' and run `make opt'. Copy files to web CVS,
     sync them.

   * post news on `https://savannah.gnu.org/news/?group=liquidwar6',
     `http://lists.gnu.org/mailman/listinfo/help-liquidwar6' and
     `http://lists.gnu.org/mailman/listinfo/info-liquidwar6'.

3.14.2 Add a new option
-----------------------

This describes how to add a new option to the game.

   * edit `src/lib/def/def-list.txt'

   * in `src/lib/def/def-update.py' run `./def-update.py'. This will
     automatically fill `src/lib/def/def.h' and `script/def.scm'. In
     the code, you should always use `LW6DEF_<OPTION>' in C and
     `lw6def-<option>' in scheme to refer to the option. This does help
     avoiding typesetting errors.

   * add the entry to `src/lib/hlp/hlp-list.c', choose a category for it

   * add the entry to `src/lib/hlp/hlp-reference.c', give it a type,
     documentation string and default values if needed

   * to sort `src/lib/def/def-list.txt' a common practice is to fill it
     with the output of `liquidwar6 --list' once the program has been
     compiled and is aware of the new option.

   Unless this is done, program won't accept the option.

3.14.3 Add a new internal library
---------------------------------

This describes how to add a new `libxyz' internal library:

   * create a new `src/lib/xyz' directory. The convention is to use 3
     letters names and prefix every global identifier with `lw6xyz'.

   * copy `Makefile.am', `xyz.h', `xyz-test.c' and `xyz-testmain.c'
     from an existing internal library (`libnod' is a good source, it
     does not have complex dependencies).

   * edit `Makefile.am' to fill requirements, make necessary
     adjustments to other files (many string replaces to make, both
     lowercase and uppercase).

   * add the entry in the `SUBDIRS' and `LW6_LIBS' sections of
     `src/lib/Makefile.am'

   * add the entry in the `AC_CONFIG_FILES' of `./configure.ac'.

   * run `automake' and `autoconf'.

   * edit `src/lib/lw6-options.c' and add a call to `lw6xyz_test()' for
     both "check" and "test" cases.

   * edit `src/lib/lw6-test.c' and add a reference to the
     `lw6xzy_test()' function.

   * in every internal `abc' library that depends on `xyz', edit the
     `lw6abc_test' function so that it contains a reference to
     `lw6xzy_test'.

   * in every internal `abc' library that depends on `abc/abc.h', edit
     the `abc/abc.h' header so that it includes `xzy/xyz.h'. Also edit
     `src/lib/liquidwar6.h.in'.

   * in every internal `abc' library that depends on `abc/abc.h', add a
     reference to `../xyz/libxyz.la' inf the `_LDADD' section.

   * edit `doc/gdoc-update.sh' and add the entry for `xyz'.

   * edit `doc/Makefile.am' and add `xyz-gdoc.texi' in `gdoc_TEXINFOS'.

   * in `./doc', run `./gdoc-update.sh'.

   * edit `doc/liquidwar6.texi' to and a new node/section for this
     internal library.

   * run `./configure && make', fix code if needed.


File: liquidwar6.info,  Node: Using GNU Arch,  Next: Using GIT,  Prev: Technical HOWTOs,  Up: Hacker's guide

3.15 Using GNU Arch
===================

3.15.1 About GNU Arch
---------------------

Since March, 4th 2010, Liquid War 6 uses GIT (http://git-scm.com/) to
handle source code, track changes, branches, and the rest. It replaces
the GNU Arch (http://www.gnu.org/software/gnu-arch/) repository. This
old repository contains all sources up to version 0.0.7beta, following
versions, including 0.0.8beta, must be retrieved from GIT.

   So the following informations only concern those who are interested
in previous versions of the game. Anybody else - probably you - should
use GIT instead.

   *Note Using GIT::.

   Still, this quick Arch survival guide is kept in the documentation.

   Read the GNU Arch tutorial
(http://www.gnu.org/software/gnu-arch/tutorial/arch.html) to learn how
Arch works. Note that there are many other source control managers
available, some of which provide functionnalities similar to GNU Arch /
tla. GNU Arch has been chosen for Liquid War 6 because:
   * it is Free Software,

   * it is not limited to per-file commits like CVS, and supports
     atomic commits involving several files,

   * it is distributed,

   * it enables developpers to sign each of their contributions,

   * it was already available back in 2005.

3.15.2 Getting the latest version from the repository
-----------------------------------------------------

The repository for Liquid War 6 is accessible on
`http://arch.savannah.gnu.org/archives/liquidwar6'.  This is a
read-only access, but with the distributed nature of GNU Arch, it still
allows you to keep track of your own changes, and submit patches.
Accessing it in read/write mode with sftp requires a Savannah account
and special rights on the Liquid War 6 project.

   Here are typicall commands one can use to get Liquid War 6 source
from the GNU Arch repository:

     tla register-archive http://arch.savannah.gnu.org/archives/liquidwar6
     tla get -A liquidwar6@sv.gnu.org liquidwar6--beta

   All the patches in the archive are signed with GnuPG
(http://www.gnupg.org/), so you can check their authenticity with my
public key (http://www.ufoot.org/ufoot.pub).

   You might need to edit your
`$HOME/.arch-params/signing/=default.check' file and put the following
text in it:
     tla-gpg-check gpg_command="gpg --verify-files -"

3.15.3 Setting up your own arch repository
------------------------------------------

This section is for those who want to hack the game and set up their
own repositories. This will enable you to keep track of your patches,
package them, and help the core maintainer merging them in the main
repository.

   You can introduce yourself and create a repository by issuing
commands like:

   You can introduce yourself and create a repository by issuing
commands like:

     tla my-id me@home.net
     tla register-archive me@home.net--2008 /home/me/tla-archives

   Then, you can get create your own repository, with a command like:

     tla tag -S liquidwar6@sv.gnu.org/liquidwar6--beta--0.1 me@home.net--2008/liquidwar6--beta--0.4

   The idea is that you create, locally, a depot which has a name that
matches the name on savannah (http://arch.savannah.gnu.org) (this is
for convenience, you could technically give it any name...)  and
indicate that they represent, today, the same thing.

   You can get a working copy of your depot with the command:

     tla get me@home.net--2008/liquidwar6--beta--0.4

   This will create a complete source tree, which you are free to
modify, this is where you should hack.

3.15.4 Synchronizing your repository with upstream releases
-----------------------------------------------------------

To synchronize yourself with upstream developments, go into your copy
(the directory created by `tla get') and type:

     tla star-merge liquidwar6@sv.gnu.org/liquidwar6--beta--0.1

   This will apply locally all the changes that happened since the last
synchronization. Of course this is one way to work, you can decide to
cherry pick patches and such stuff, but for most dayly uses, a good'ol
`star-merge' is fine.

   Not that `star-merge' will only apply patches on your working copy,
not on your repository. The only way to actually commit the
modifications on the repository is to use the `commit' command.

3.15.5 Submitting patches
-------------------------

When using Arch, you can of course still send patches created with
`diff', or even send updated files directly, the way you would without
revision control.

   But it can be more convenient to either
   * Send the patches stored in the depot (`/home/me/tla-archives' in
     our example).

   * Make patches using `tla mkpatch'.

   Here's an example of an `mkpatch' command, and which will compute
the differences between a previous `liquidwar6--beta--0.4--patch-2'
snapshot and a not yet commited latest version:

     tla mkpatch {arch}/++pristine-trees/unlocked/liquidwar6/liquidwar6--beta/liquidwar6--beta--0.4/me@home.net--2006/liquidwar6--beta--0.4--patch-2 . my-patch

   This will create a `my-patch' directory, which can be gzipped and
sent by mail.

3.15.6 Recover from broken lock
-------------------------------

Sometimes, when signing a patch, you might enter the wrong passphrase
several times, or you might press CTRL+D inadvertantly. In that case,
tla will be in a half-broken state, telling you it can't acquire
revision lock... A quick workarround for this is to go to the depot,
find the latest patch, and in this repository, create the following
folders:
     ++revision-lock/+contents
   Both are directories, note the two ++ and the single +. the
`+contents' directory can be empty. Once you've done this, try to
re-commit.


File: liquidwar6.info,  Node: Using GIT,  Prev: Using GNU Arch,  Up: Hacker's guide

3.16 Using GIT
==============

3.16.1 About GIT
----------------

There's no CVS or Subversion (AKA "SVN") source depot for Liquid War 6.
Instead, a GIT (http://git-scm.com/) depot is used. GIT has many
advantages over other source control managers (SCM), among them, it's
distributed, like GNU Arch (http://www.gnu.org/software/gnu-arch).

   You can find interesting informations on GIT here:
   * `http://git-scm.com/documentation'

   * `http://savannah.gnu.org/maintenance/UsingGit'

   * `http://savannah.gnu.org/git/?group=liquidwar6'

3.16.2 Getting the latest source
--------------------------------

Simply install git and run the following command:

     git clone git://git.sv.gnu.org/liquidwar6.git

   If you are behing a firewall and can't have direct TCP/IP access:

     git clone http://git.sv.gnu.org/r/liquidwar6.git

   Additionnally, source can be browsed online here:
`http://git.savannah.gnu.org/cgit/liquidwar6.git'

3.16.3 Developper access
------------------------

You need an ssh access on Savannah (http://savannah.gnu.org/) and
appropriate rights on the project, then you can type:

     git clone login@git.sv.gnu.org:/srv/git/liquidwar6.git

3.16.4 Submitting patches
-------------------------

If you have developper access to the project, then a simply `git push'
will commit your changes.

   If not (that is, if you checked out anonymously using `git clone
git://git.sv.gnu.org/liquidwar6.git' for instance, you can still submit
patches. Follow these steps:
   * edit the code, make your patches, commit to your local GIT tree

   * run `git format-patch -p origin' this command will generate
     `.patch' files, one for each of you commits, which you can send by
     email. They can be easily integrated in the main source tree by
     using `git apply <file.patch>'.

   Note that you can need to run `git format-patch -p master' (with
`master' instead of `origin') it not using a fresh checkout. Also
consider adding the `--stdout' switch, eg `git format-patch -p master
--stdout > my-changes.patch' if you're not using a fresh checkout.


File: liquidwar6.info,  Node: Reference,  Next: C API,  Prev: Hacker's guide,  Up: Top

4 Reference
***********

This chapter is a technical reference. Most of its content is
self-generated by the program itself. That is to say, most if its
content is already available to you if you have the game installed.
Running `liquidwar6 --list' and `liquidwar6 --about=<keyword>' is very
likely to give you the very same informations, the advantage being that
you'll be sure the information is up-to-date and corresponds to the
exact version of the program you have. However, publishing this in a
reader-friendly way is convenient, plus it enables web search engines
to harvest the content.

* Menu:

* Basic options::       Basic command-line parameters.
* Doc options::         Liquid War 6 is self-documented.
* Show options::        Show informations about the program.
* Path options::        Change default paths.
* Graphics options::    Change display settings.
* Sound options::       Change audio settings.
* Network options::     Tweak network parameters.
* Map parameters::      Global map parameters.
* Map rules.xml::       Change game rules.
* Map hints.xml::       Tune map loader.
* Map style.xml::       Modify map appearance.
* Advanced settings::   You probably don't want to change these.
* C to Guile::          C functions exported to Guile.
* Script hooks::        Available script hooks.


File: liquidwar6.info,  Node: Basic options,  Next: Doc options,  Up: Reference

4.1 Basic options
=================

4.1.1 about
-----------

 -- Command-line option: `--about=<value>'
     Type: string

     Will allow you to get informations about a given keyword. Let's
     say that, for instance, you want informations about the keyword
     'map-path'. Simply run 'liquidwar6 -about=map-path'. Note that
     this internal self-documentation system can describe command line
     switches as well as XML config file parameters or environment
     variables, and even some Guile script functions. The '-list'
     command line switch will give you the list of all available
     keywords.

4.1.2 audit
-----------

 -- Command-line option: `--audit'
     Display all path values, defaults and current settings. This
     output is very usefull to track down problems such as missing
     directories, broken installations. If you get an error message
     that suggests some file is missing, then give this option a try.

4.1.3 copyright
---------------

 -- Command-line option: `--copyright'
     Returns the copyright notice for the program.

4.1.4 debug
-----------

 -- Command-line option: `--debug'
     Enables debug mode. This will turn on maximum log information, and
     display everything on stderr, even messages which are normally
     only stored in the log file.

4.1.5 defaults
--------------

 -- Command-line option: `--defaults'
     Clears the config file and run the game with default settings. Use
     this if you suspect you have broken something by tweaking user
     settings, or when upgrading the game to a new version.

4.1.6 help
----------

 -- Command-line option: `--help'
     Returns a short help for the program.

4.1.7 host
----------

 -- Command-line option: `--host'
     Display all known system host properties, including os and cpu
     informations.

4.1.8 list
----------

 -- Command-line option: `--list'
     Returns the list of all keywords which can be queried for
     information. This includes command-line options, environment
     variables, and so on. This is the companion option of '-about'.
     Results obtained with '-list' can be passed to '-about'.

4.1.9 modules
-------------

 -- Command-line option: `--modules'
     Tells which modules have been enabled when the game was compiled.
     It's still possible to add or remove modules afterwards, but this
     option allows you to know how things were at first.

4.1.10 pedigree
---------------

 -- Command-line option: `--pedigree'
     Display all build values, these are general constants which can
     help debugging, tracing what binary you are running, and so on.
     It's a good idea to take a look at the output of 'pedigree' if you
     have problems running the game.

4.1.11 test
-----------

 -- Command-line option: `--test'
     Runs a (hopefully) complete test suite which will call most
     internal Liquid War 6 functions and check out wether they work, in
     a simple context, without any game interference. Usefull for
     troubleshooting.

4.1.12 version
--------------

 -- Command-line option: `--version'
     Returns the version of the program, as defined by the GNU Coding
     Standards.


File: liquidwar6.info,  Node: Doc options,  Next: Show options,  Prev: Basic options,  Up: Reference

4.2 Doc options
===============

4.2.1 example-hints-xml
-----------------------

 -- Command-line option: `--example-hints-xml'
     Dumps on stdout an example hints.xml file. Such a file is normally
     shipped with the game. It is indeed generated using this command.

4.2.2 example-rules-xml
-----------------------

 -- Command-line option: `--example-rules-xml'
     Dumps on stdout an example options.xml file. Such a file is
     normally shipped with the game. It is indeed generated using this
     command.

4.2.3 example-style-xml
-----------------------

 -- Command-line option: `--example-style-xml'
     Dumps on stdout an example style.xml file. Such a file is normally
     shipped with the game. It is indeed generated using this command.

4.2.4 list-advanced
-------------------

 -- Command-line option: `--list-advanced'
     List advanced options which can be used for fine-tuning the game.

4.2.5 list-aliases
------------------

 -- Command-line option: `--list-aliases'
     List the keyword aliases. These are here for convenience.

4.2.6 list-doc
--------------

 -- Command-line option: `--list-doc'
     List documentation-related command line options. These commands
     allow you to list all the keywords related to a given domain.

4.2.7 list-funcs
----------------

 -- Command-line option: `--list-funcs'
     List the C-functions which are exported to Guile, thus usable in
     scripts.

4.2.8 list-graphics
-------------------

 -- Command-line option: `--list-graphics'
     List graphics options (resolution, fullscreen...).

4.2.9 list-hooks
----------------

 -- Command-line option: `--list-hooks'
     List user-modifiable hooks.

4.2.10 list-input
-----------------

 -- Command-line option: `--list-input'
     List input (AKA controls) related options. Use these to change
     keyboard, joystick and mouse settingds.

4.2.11 list-map
---------------

 -- Command-line option: `--list-map'
     List map-related entries, excluding rules.xml, hints.xml and
     style.xml entries.

4.2.12 list-map-hints
---------------------

 -- Command-line option: `--list-map-hints'
     List 'hints.xml' entries. These parameters enable you to modify
     the behavior of the map loader.

4.2.13 list-map-rules
---------------------

 -- Command-line option: `--list-map-rules'
     List 'options.xml' entries. These parameters enable you to modify
     the gameplay.

4.2.14 list-map-style
---------------------

 -- Command-line option: `--list-map-style'
     List 'style.xml' entries. These parameters enable you to modify
     the aspect of the game.

4.2.15 list-network
-------------------

 -- Command-line option: `--list-network'
     List network options.

4.2.16 list-path
----------------

 -- Command-line option: `--list-path'
     List parameters which allow you to override the defaults of the
     game, and force the game your own file paths and directories.

4.2.17 list-players
-------------------

 -- Command-line option: `--list-players'
     List player-related entries, that is to say 'who plays'.

4.2.18 list-quick
-----------------

 -- Command-line option: `--list-quick'
     List quick help entries, this includes the GNU standard options
     and a few troubleshooting tools.

4.2.19 list-show
----------------

 -- Command-line option: `--list-show'
     List command-line options which begin with '-show-...'. These will
     display on the console many internal parameters. Usefull when
     debugging.

4.2.20 list-sound
-----------------

 -- Command-line option: `--list-sound'
     List sound options (volume...).


File: liquidwar6.info,  Node: Show options,  Next: Path options,  Prev: Doc options,  Up: Reference

4.3 Show options
================

4.3.1 show-build-bin-id
-----------------------

 -- Command-line option: `--show-build-bin-id'
     Shows the internal 'bin-id' value. This value does not mean
     anything in itself but it's supposed to change each time you
     compile the game.

4.3.2 show-build-cflags
-----------------------

 -- Command-line option: `--show-build-cflags'
     Shows what value you should put in 'CFLAGS' (environment variable)
     if you want to compile programs that use Liquid War 6 as a
     library, and include 'liquidwar6.h'.

4.3.3 show-build-codename
-------------------------

 -- Command-line option: `--show-build-codename'
     Shows the codename associated with this version, generally the
     name of someone famous who is war-related (a general, an
     emperor...).

4.3.4 show-build-configure-args
-------------------------------

 -- Command-line option: `--show-build-configure-args'
     Shows the arguments that have been passed to the GNU Autoconf
     './configure' script when building the program. This can be very
     usefull if you want to know how the program has been built.

4.3.5 show-build-copyright
--------------------------

 -- Command-line option: `--show-build-copyright'
     Shows a very short copyright notice.

4.3.6 show-build-datadir
------------------------

 -- Command-line option: `--show-build-datadir'
     Shows the 'datadir' value as passed to the GNU Autoconf
     './configure' script when compiling the program. Default is
     '/usr/local/share'. This is the generic, non Liquid War 6 specific
     data directory. Liquid War 6 related data is stored elsewhere
     (usually in a sub-directory) see the 'data-dir' switch for more
     information. 'datadir' is not 'data-dir'. That's the point.

4.3.7 show-build-date
---------------------

 -- Command-line option: `--show-build-date'
     Shows the date when the binary was compiled.

4.3.8 show-build-docdir
-----------------------

 -- Command-line option: `--show-build-docdir'
     Shows the 'docdir' value as passed to the GNU Autoconf
     './configure' script when compiling the program. Default is
     '/usr/local/share/doc/liquidwar6'.

4.3.9 show-build-enable-allinone
--------------------------------

 -- Command-line option: `--show-build-enable-allinone'
     Shows wether the 'allinone' option has been chosen when building
     the game.  This depends on parameters passed to './configure'.

4.3.10 show-build-enable-console
--------------------------------

 -- Command-line option: `--show-build-enable-console'
     Shows wether the console has been enabled when building the game.
     This depends on parameters passed to './configure' and also on the
     presence of ncurses and readline.

4.3.11 show-build-enable-fullstatic
-----------------------------------

 -- Command-line option: `--show-build-enable-fullstatic'
     Shows wether the 'fullstatic' option has been chosen when building
     the game.  This depends on parameters passed to './configure'.

4.3.12 show-build-enable-gcov
-----------------------------

 -- Command-line option: `--show-build-enable-gcov'
     Shows wether the game was build with suitable informations for
     gcov. This depends on parameters passed to './configure'.

4.3.13 show-build-enable-gprof
------------------------------

 -- Command-line option: `--show-build-enable-gprof'
     Shows wether the game was build with suitable informations for
     gprof. This depends on parameters passed to './configure'.

4.3.14 show-build-enable-gtk
----------------------------

 -- Command-line option: `--show-build-enable-gtk'
     Shows wether GTK+ support has been enabled when building the game.
     This depends on parameters passed to './configure' and also on the
     presence of GTK+ headers and libs. It uses pkg-config to detect it.

4.3.15 show-build-enable-instrument
-----------------------------------

 -- Command-line option: `--show-build-enable-instrument'
     Shows wether the game was build with the '-finstrument-functions'
     GCC switch.  This depends on parameters passed to './configure'.

4.3.16 show-build-enable-mod-csound
-----------------------------------

 -- Command-line option: `--show-build-enable-mod-csound'
     Shows wether the mod-csound audio backend has been enabled when
     building the game. This depends on parameters passed to
     './configure' and also on the presence of the csound library.

4.3.17 show-build-enable-mod-gl
-------------------------------

 -- Command-line option: `--show-build-enable-mod-gl'
     Shows wether the mod-gl graphical backend has been enabled when
     building the game. This depends on parameters passed to
     './configure' and also on the presence of SDL and related
     libraries.

4.3.18 show-build-enable-mod-http
---------------------------------

 -- Command-line option: `--show-build-enable-mod-http'
     Shows wether the mod-http network backend has been enabled when
     building the game. This depends on parameters passed to
     './configure' and also on the presence of libCurl.

4.3.19 show-build-enable-mod-ogg
--------------------------------

 -- Command-line option: `--show-build-enable-mod-ogg'
     Shows wether the mod-ogg audio backend has been enabled when
     building the game. This depends on parameters passed to
     './configure' and also on the presence of SDL and related
     libraries.

4.3.20 show-build-enable-optimize
---------------------------------

 -- Command-line option: `--show-build-enable-optimize'
     Shows wether the 'optimize' option has been chosen when building
     the game.  This depends on parameters passed to './configure'.

4.3.21 show-build-enable-paranoid
---------------------------------

 -- Command-line option: `--show-build-enable-paranoid'
     Shows wether the game was build with paranoid memory management.
     This is for debugging purposes, the default already includes some
     controls, with turned it's really... paranoid.

4.3.22 show-build-enable-profiler
---------------------------------

 -- Command-line option: `--show-build-enable-profiler'
     Shows wether the game was build with Google Profiler support. This
     depends on parameters passed to './configure'.

4.3.23 show-build-enable-valgrind
---------------------------------

 -- Command-line option: `--show-build-enable-valgrind'
     Shows wether the game was build with valgrind later use in mind.
     This depends on parameters passed to './configure'.

4.3.24 show-build-endianness
----------------------------

 -- Command-line option: `--show-build-endianness'
     Returns the endianness. 'little' corresponds to x86-like systems,
     'big' to ppc-like systems.

4.3.25 show-build-gcc-version
-----------------------------

 -- Command-line option: `--show-build-gcc-version'
     Returns the version of the GNU C compiler which was used to
     compile the program.

4.3.26 show-build-gp2x
----------------------

 -- Command-line option: `--show-build-gp2x'
     Returns 1 (true) if host is a GP2X, 0 (false) if not.

4.3.27 show-build-host-cpu
--------------------------

 -- Command-line option: `--show-build-host-cpu'
     Shows the host CPU, as defined by 'host_cpu' in GNU Autoconf.

4.3.28 show-build-host-os
-------------------------

 -- Command-line option: `--show-build-host-os'
     Shows the host OS, as defined by 'host_os' in GNU Autoconf.

4.3.29 show-build-hostname
--------------------------

 -- Command-line option: `--show-build-hostname'
     Shows the name of the host where the binary was compiled.

4.3.30 show-build-includedir
----------------------------

 -- Command-line option: `--show-build-includedir'
     Shows the 'includedir' value as passed to the GNU Autoconf
     './configure' script when compiling the program. Default is
     '/usr/local/include'.

4.3.31 show-build-ldflags
-------------------------

 -- Command-line option: `--show-build-ldflags'
     Shows what value you should put in 'LDFLAGS' (environment
     variable) if you want to link programs against libliquidwar6.

4.3.32 show-build-libdir
------------------------

 -- Command-line option: `--show-build-libdir'
     Shows the 'libdir' value as passed to the GNU Autoconf
     './configure' script when compiling the program. Default is
     '/usr/local/lib'. This is the generic, non Liquid War 6 specific
     library directory. Dedicated Liquid War 6 modules are stored
     elsewhere (usually in a sub-directory) see the 'mod-dir' switch for
     more information.

4.3.33 show-build-license
-------------------------

 -- Command-line option: `--show-build-license'
     Shows the license of the program (GNU GPL v3 or later).

4.3.34 show-build-localedir
---------------------------

 -- Command-line option: `--show-build-localedir'
     Shows the 'localedir' value as passed to the GNU Autoconf
     './configure' script when compiling the program. Default is
     '/usr/local/share/locale'.

4.3.35 show-build-mac-os-x
--------------------------

 -- Command-line option: `--show-build-mac-os-x'
     Returns 1 (true) if host OS is Mac OS X, 0 (false) if not.

4.3.36 show-build-md5sum
------------------------

 -- Command-line option: `--show-build-md5sum'
     Shows the MD5 checksum, which has been calculated from the C
     source files.  Complementary with 'show-build-stamp'.

4.3.37 show-build-ms-windows
----------------------------

 -- Command-line option: `--show-build-ms-windows'
     Returns 1 (true) if host OS is Microsoft Windows 32-bit platform,
     0 (false) if not.

4.3.38 show-build-package-name
------------------------------

 -- Command-line option: `--show-build-package-name'
     Shows the package name, that is, 'Liquid War 6'.

4.3.39 show-build-package-string
--------------------------------

 -- Command-line option: `--show-build-package-string'
     Shows the package string, that is, 'Liquid War 6 <version>

4.3.40 show-build-package-tarname
---------------------------------

 -- Command-line option: `--show-build-package-tarname'
     Shows the package tarname, that is, liquidwar6.

4.3.41 show-build-pointer-size
------------------------------

 -- Command-line option: `--show-build-pointer-size'
     Returns the pointer size, in bytes. Should be 4 on 32-bit systems
     and 8 on 64-bit systems.

4.3.42 show-build-prefix
------------------------

 -- Command-line option: `--show-build-prefix'
     Shows the 'prefix' value as passed to the GNU Autoconf
     './configure' script when compiling the program. Default is
     '/usr/local'.

4.3.43 show-build-stamp
-----------------------

 -- Command-line option: `--show-build-stamp'
     Shows the build stamp. A very usefull value, more precise than the
     version to track down binaries. It is incremented each time the
     core C code is updated.  It won't reflect all the programs for it
     does not take scripts in account, but if you are running a
     work-in-progress version, it might be very convenient to use this
     to know what your are running exactly.

4.3.44 show-build-time
----------------------

 -- Command-line option: `--show-build-time'
     Shows the time when the binary was compiled.

4.3.45 show-build-top-srcdir
----------------------------

 -- Command-line option: `--show-build-top-srcdir'
     Shows the top source directory on the machine where the binary was
     compiled.

4.3.46 show-build-url
---------------------

 -- Command-line option: `--show-build-url'
     Shows the URL of the program, its homepage.

4.3.47 show-build-version
-------------------------

 -- Command-line option: `--show-build-version'
     Shows the version. Note that this is different from the standard
     GNU 'version' command line option which shows a complete message
     with a short copyright notice. This one will just return the
     version, without the package tarname or anything else.

4.3.48 show-build-x86
---------------------

 -- Command-line option: `--show-build-x86'
     Tells wether the CPU belongs to x86 family.

4.3.49 show-config-file
-----------------------

 -- Command-line option: `--show-config-file'
     Shows the config file path. Default is
     '$HOME/.liquidwar6/config.xml'.

4.3.50 show-cwd
---------------

 -- Command-line option: `--show-cwd'
     Shows the current working directory, the value that the pwd
     command would return.

4.3.51 show-data-dir
--------------------

 -- Command-line option: `--show-data-dir'
     Shows the data directory path. This is where the games searches
     for most of its data,the most important exception being maps,
     which are stored elsewhere.  Default is
     '/usr/local/share/liquidwar6-<version>/data'.

4.3.52 show-default-config-file
-------------------------------

 -- Command-line option: `--show-default-config-file'
     Shows the default config file path. Default is
     '$HOME/.liquidwar6/config.xml'.

4.3.53 show-default-data-dir
----------------------------

 -- Command-line option: `--show-default-data-dir'
     Shows the default data directory path. This is where the games
     searches for most of its data,the most important exception being
     maps, which are stored elsewhere. Default is
     '/usr/local/share/liquidwar6-<version>/data'.

4.3.54 show-default-log-file
----------------------------

 -- Command-line option: `--show-default-log-file'
     Shows the default log file path. Default is
     '$HOME/.liquidwar6/log.csv'.

4.3.55 show-default-map-dir
---------------------------

 -- Command-line option: `--show-default-map-dir'
     Shows the default map directory. This is where builtin maps are
     stored.  Default is '/usr/local/share/liquidwar6-<version>/map'.

4.3.56 show-default-map-path
----------------------------

 -- Command-line option: `--show-default-map-path'
     Shows the default map search path. This is where the game searches
     for maps.  It's the combination of command-line arguments and
     builtin paths. Might return more directories than the one
     specified in a single 'map-path=dir1:dir2' argument.

4.3.57 show-default-mod-dir
---------------------------

 -- Command-line option: `--show-default-mod-dir'
     Shows the default module directory path. This is where all
     dynamically loaded modules are stored. Default is
     '/usr/local/lib/liquidwar6-<version>'.

4.3.58 show-default-music-dir
-----------------------------

 -- Command-line option: `--show-default-music-dir'
     Shows the default music directory. This is where builtin musics
     are stored.  Default is
     '/usr/local/share/liquidwar6-<version>/music'.

4.3.59 show-default-music-path
------------------------------

 -- Command-line option: `--show-default-music-path'
     Shows the default music search path. This is where the game
     searches for musics. It's the combination of command-line
     arguments and builtin paths.  Might return more directories than
     the one specified in a single 'music-path=dir1:dir2' argument.

4.3.60 show-default-prefix
--------------------------

 -- Command-line option: `--show-default-prefix'
     Shows the default prefix used. This should logically be the value
     passed to the GNU Autoconf ./configure script when building the
     game. Most other path are deduced from this one. Default is
     '/usr/local'.

4.3.61 show-default-script-file
-------------------------------

 -- Command-line option: `--show-default-script-file'
     Shows the default main script file path. This file is very
     important, since the program is more or less a hudge scheme
     interpreter, and this file is the file loaded by Guile. In short,
     it is the main program. Default is
     '/usr/local/share/liquidwar6-<version>/script/liquidwar6.scm'.

4.3.62 show-default-user-dir
----------------------------

 -- Command-line option: `--show-default-user-dir'
     Shows the default user directory path. This is where run-time
     data, config files, log files, are stored. Default is
     '$HOME/.liquidwar6/'.

4.3.63 show-log-file
--------------------

 -- Command-line option: `--show-log-file'
     Shows the log file path. Default is '$HOME/.liquidwar6/log.csv'.

4.3.64 show-map-dir
-------------------

 -- Command-line option: `--show-map-dir'
     Shows the map directory. This is where builtin maps are stored.
     Default is '/usr/local/share/liquidwar6-<version>/map'.

4.3.65 show-map-path
--------------------

 -- Command-line option: `--show-map-path'
     Shows the map search path. This is where the game searches for
     maps. It's the combination of command-line arguments and builtin
     paths. Might return more directories than the one specified in a
     single 'map-path=dir1:dir2' argument.

4.3.66 show-mod-dir
-------------------

 -- Command-line option: `--show-mod-dir'
     Shows the module directory path. This is where all dynamically
     loaded modules are stored. Default is
     '/usr/local/lib/liquidwar6-<version>'.

4.3.67 show-music-dir
---------------------

 -- Command-line option: `--show-music-dir'
     Shows the music directory. This is where builtin maps are stored.
     Default is '/usr/local/share/liquidwar6-<version>/music'.

4.3.68 show-music-path
----------------------

 -- Command-line option: `--show-music-path'
     Shows the music search path. This is where the game searches for
     musics. It's the combination of command-line arguments and builtin
     paths. Might return more directories than the one specified in a
     single 'music-path=dir1:dir2' argument.

4.3.69 show-prefix
------------------

 -- Command-line option: `--show-prefix'
     Shows the prefix used. This should logically be the value passed
     to the GNU Autoconf ./configure script when building the game.
     Most other path are deduced from this one. Default is '/usr/local'.

4.3.70 show-run-dir
-------------------

 -- Command-line option: `--show-run-dir'
     Shows the run directory, usually the path where the binary is. It
     depends on how and where the program is launched. It is guessed
     from the argc/argv values at runtime.

4.3.71 show-script-file
-----------------------

 -- Command-line option: `--show-script-file'
     Shows the main script file path. This file is very important,
     since the program is more or less a hudge scheme interpreter, and
     this file is the file loaded by Guile. In short, it is the main
     program. Default is
     '/usr/local/share/liquidwar6-<version>/script/liquidwar6.scm'.

4.3.72 show-user-dir
--------------------

 -- Command-line option: `--show-user-dir'
     Shows the user directory path. This is where run-time data, config
     files, log files, are stored. Default is '$HOME/.liquidwar6/'.


File: liquidwar6.info,  Node: Path options,  Next: Graphics options,  Prev: Show options,  Up: Reference

4.4 Path options
================

4.4.1 config-file
-----------------

 -- Command-line option: `--config-file'
     Type: string

     Default value: $HOME/.liquidwar6/config.xml

     Set the config file path. This enables you to use whatever config
     file you like, keeping all other informations in the same place.

4.4.2 data-dir
--------------

 -- Command-line option: `--data-dir'
     Type: string

     Default value: /usr/local/share/liquidwar6-<version>/data

     Set the data directory. By changing ths value you'll be able to
     use an alternative data directory.

4.4.3 log-file
--------------

 -- Command-line option: `--log-file=<value>'
 -- Environment variable: `LW6_LOG_FILE'
 -- XML key: `log-file'
     Type: string

     Default value: $HOME/.liquidwar6/log.csv

     Set the log file path. This enables you to use whatever log file
     you like, keeping all other informations in the same place.

4.4.4 map-dir
-------------

 -- Command-line option: `--map-dir'
     Type: string

     Default value: /usr/local/share/liquidwar6-<version>/map

     Set the map directory path. By changing this value you'll be able
     to play with your own maps in your own directory. Note that there
     are other ways to achieve that, but using this option will work.
     However, a side effect is that you might not see builtin maps
     anymore.

4.4.5 map-path
--------------

 -- Command-line option: `--map-path=<value>'
 -- Environment variable: `LW6_MAP_PATH'
 -- XML key: `map-path'
     Type: string

     Default value:
     $HOME/.liquidwar6/map:/usr/local/share/liquidwar6-<version>/map

     Set the map search path. By changing this value you'll be able to
     play with your own maps in your own directory. This is different
     from 'map-dir', since it includes 'map-dir', plus it adds a number
     of other search paths. Unlike most other parameters, the values
     given from the command-line, from the environment variables, or
     from the config file, are not overwritten, but appended. That is
     to say if you specify a 'map-path' with the command-line argument
     'map-path=path', but also define the 'LW6_MAP_PATH' value and
     finally edit 'config.xml' to change the 'map-path' entry in it,
     you'll end up with the game searching for maps in all these
     directories. Additionnally, 'map-dir' and '<user-dir>/map' will
     always be in the list. Any given value can itself include several
     pathes, separated by the path separator. This separator is ':' on
     GNU/Linux, and ';' on Microsoft Windows. For instance, on a
     GNU/Linux box, you could use the command-line argument
     'map-path=/foo/bar/map:/home/user/map/:/map'.

4.4.6 mod-dir
-------------

 -- Command-line option: `--mod-dir'
     Type: string

     Default value: /usr/local/lib/liquidwar6-<version>

     Set the module directory path. By changing this you will load
     dynamic shared libraries (game specific modules such as the
     graphical backend) from an alternative place. Use this at your own
     risks, for there can always be a binary incompatibility. You've
     been warned.

4.4.7 music-dir
---------------

 -- Command-line option: `--music-dir=<value>'
 -- Environment variable: `LW6_MUSIC_DIR'
 -- XML key: `music-dir'
     Type: string

     Default value: /usr/local/share/liquidwar6-<version>/music

     Set the music directory path. By changing this value you'll be
     able to use your own musics in your own directory. Note that there
     are other ways to achieve that, but using this option will work.
     The major side effect is that using this option, you really
     replace the existing builtin musics by your own.  If you simply
     want to add musics you can store them in $HOME/.liquidwar6/music
     or in the map directory itself.

4.4.8 music-path
----------------

 -- Command-line option: `--music-path=<value>'
 -- Environment variable: `LW6_MUSIC_PATH'
 -- XML key: `music-path'
     Type: string

     Default value:
     $HOME/.liquidwar6/music:/usr/local/share/liquidwar6-<version>/music

     Set the music search path. By changing this value you'll be able
     to play with your own musics in your own directory. This is
     different from 'music-dir', since it includes 'music-dir', plus it
     adds a number of other search paths.  Unlike most other
     parameters, the values given from the command-line, from the
     environment variables, or from the config file, are not
     overwritten, but appended. That is to say if you specify a
     'music-path' with the command-line argument 'music-path=path', but
     also define the 'LW6_MUSIC_PATH' value and finally edit
     'config.xml' to change the 'music-path' entry in it, you'll end up
     with the game searching for musics in all these directories.
     Additionnally, 'music-dir' and '<user-dir>/music' will always be
     in the list. Any given value can itself include several pathes,
     separated by the path separator. This separator is ':' on
     GNU/Linux, and ';' on Microsoft Windows. For instance, on a
     GNU/Linux box, you could use the command-line argument
     'music-path=/foo/bar/music:/home/user/music/:/music'.

4.4.9 prefix
------------

 -- Command-line option: `--prefix'
     Type: string

     Default value: /usr/local

     Override the prefix value given to the GNU Autoconf ./configure
     script when building the game. Not all path will be changed, some
     of them might remain the same, for instance message translations
     (localedir). But most game-specific data including maps, graphics,
     sounds, will be searched according to the new given parameter.

4.4.10 script-file
------------------

 -- Command-line option: `--script-file'
     Type: string

     Default value:
     /usr/local/share/liquidwar6-<version>/script/liquidwar6.scm

     Set the main script file path. This file is very important, since
     the program is more or less a hudge scheme interpreter, and this
     file is the file loaded by Guile. In short, it is the main program.

4.4.11 user-dir
---------------

 -- Command-line option: `--user-dir=<value>'
 -- Environment variable: `LW6_USER_DIR'
 -- XML key: `user-dir'
     Type: string

     Default value: $HOME/.liquidwar6

     Set the user directory path. This is where run-time data, config
     files, log files, are stored. If you override this value, other
     parameters such as where the config and log files reside, will
     change.


File: liquidwar6.info,  Node: Graphics options,  Next: Sound options,  Prev: Path options,  Up: Reference

4.5 Graphics options
====================

4.5.1 capture
-------------

 -- Command-line option: `--capture=<value>'
 -- Environment variable: `LW6_CAPTURE'
 -- XML key: `capture'
     Type: boolean

     Default value: false

     Enables capture mode, in which a BMP file is dumped on the disk
     (in your user directory, search for a 'capture' sub-directory).

4.5.2 fullscreen
----------------

 -- Command-line option: `--fullscreen=<value>'
 -- Environment variable: `LW6_FULLSCREEN'
 -- XML key: `fullscreen'
     Type: boolean

     Default value: false

     Force the game to fun fullscreen. Note that the graphics backend
     might ignore this hint.

4.5.3 gfx-backend
-----------------

 -- Command-line option: `--gfx-backend=<value>'
 -- Environment variable: `LW6_GFX_BACKEND'
 -- XML key: `gfx-backend'
     Type: string

     Default value: gl

     Sets the graphics backend AKA 'gfx' to use. For now the only
     choice is 'gl' and will use an OpenGL/SDL 3D-accelerated driver.

4.5.4 gfx-quality
-----------------

 -- Command-line option: `--gfx-quality=<value>'
 -- Environment variable: `LW6_GFX_QUALITY'
 -- XML key: `gfx-quality'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     Sets the overall quality of the graphics backend. Depending on the
     backend, this can mean different things. For instance for the 'gl'
     backend, this can change texture filtering (nearest, linear,
     bilinear...). This is not the same as 'pixelize' which is a
     per-map option and emulates an old school appearance.

4.5.5 height
------------

 -- Command-line option: `--height=<value>'
 -- Environment variable: `LW6_HEIGHT'
 -- XML key: `height'
     Type: integer

     Default value: -1

     Run the game with the given screen height.Note that the graphics
     backend might ignore this hint. Use with its companion option
     'width'. A negative value will force the use of a default value.

4.5.6 width
-----------

 -- Command-line option: `--width=<value>'
 -- Environment variable: `LW6_WIDTH'
 -- XML key: `width'
     Type: integer

     Default value: -1

     Run the game with the given screen width. Note that the graphics
     backend might ignore this hint. Use with its companion option
     'height'.A negative value will force the use of a default value.

4.5.7 windowed-mode-limit
-------------------------

 -- Command-line option: `--windowed-mode-limit=<value>'
 -- Environment variable: `LW6_WINDOWED_MODE_LIMIT'
 -- XML key: `windowed-mode-limit'
     Type: float

     Default value: 0.95

     When switching back from fullscreen mode to windowed mode, if
     we're in maximum resolution, then this coefficient will be applied
     before resizing the window.  The idea is that (obviously) a
     windowed mode is prefered when a little smaller that totally
     fullscreen. So set this to a value just below 1.0.


File: liquidwar6.info,  Node: Sound options,  Next: Network options,  Prev: Graphics options,  Up: Reference

4.6 Sound options
=================

4.6.1 ambiance-exclude
----------------------

 -- Command-line option: `--ambiance-exclude=<value>'
 -- Environment variable: `LW6_AMBIANCE_EXCLUDE'
 -- XML key: `ambiance-exclude'
     Type: string

     Default value:

     If this string is present in a music file name, this file won't be
     played during the menus, it will be excluded from the list.

4.6.2 ambiance-file
-------------------

 -- Command-line option: `--ambiance-file=<value>'
 -- Environment variable: `LW6_AMBIANCE_FILE'
 -- XML key: `ambiance-file'
     Type: string

     Default value:

     A music file which will be used to be played during the menus. If
     not found, game will fallback on random files.

4.6.3 ambiance-filter
---------------------

 -- Command-line option: `--ambiance-filter=<value>'
 -- Environment variable: `LW6_AMBIANCE_FILTER'
 -- XML key: `ambiance-filter'
     Type: string

     Default value: Chadburn

     A music filter, used to select the files which are played while
     navigating in the menus. It works like 'music-filter' except this
     one is not related to a peculiar map. This is not a complex
     regex-enabled filter, just a plain string search. Even the '*'
     wildcard won't work.

4.6.4 fx-volume
---------------

 -- Command-line option: `--fx-volume=<value>'
 -- Environment variable: `LW6_FX_VOLUME'
 -- XML key: `fx-volume'
     Type: float

     Default value: 0.3 Min value: 0 Max value: 1

     Set the sound effects volume. This is a floating point value. 0 is
     mute.  Maximum value is 1.

4.6.5 music-volume
------------------

 -- Command-line option: `--music-volume=<value>'
 -- Environment variable: `LW6_MUSIC_VOLUME'
 -- XML key: `music-volume'
     Type: float

     Default value: 0.6 Min value: 0 Max value: 1

     Set the music volume.This is a floating point value. 0 is mute.
     Maximum value is 1.

4.6.6 snd-backend
-----------------

 -- Command-line option: `--snd-backend=<value>'
 -- Environment variable: `LW6_SND_BACKEND'
 -- XML key: `snd-backend'
     Type: string

     Default value: ogg

     Sets the sound backend AKA 'snd' to use. Can be 'ogg' or 'csound'
     but only 'ogg' will produce sound in the current release.

4.6.7 water-volume
------------------

 -- Command-line option: `--water-volume=<value>'
 -- Environment variable: `LW6_WATER_VOLUME'
 -- XML key: `water-volume'
     Type: float

     Default value: 0.2 Min value: 0 Max value: 1

     Set the volume for water sounds. This is a floating point value. 0
     is mute.  Maximum value is 1.


File: liquidwar6.info,  Node: Network options,  Next: Map parameters,  Prev: Sound options,  Up: Reference

4.7 Network options
===================

4.7.1 bind-ip
-------------

 -- Command-line option: `--bind-ip=<value>'
 -- Environment variable: `LW6_BIND_IP'
 -- XML key: `bind-ip'
     Type: string

     Default value: 0.0.0.0

     The IP address to bind on when listening to network messages. You
     can use this to specifically use a given network interface, the
     default will listen on any available interface.

4.7.2 bind-port
---------------

 -- Command-line option: `--bind-port=<value>'
 -- Environment variable: `LW6_BIND_PORT'
 -- XML key: `bind-port'
     Type: integer

     Default value: 8056 Min value: 1 Max value: 65535

     The IP port to bind on when listening to network messages. The
     default should work out of the box, and will ease up the discovery
     process. That is, if you use your own settings, automatic
     detection of your server by other servers might not work so well.

4.7.3 broadcast
---------------

 -- Command-line option: `--broadcast=<value>'
 -- Environment variable: `LW6_BROADCAST'
 -- XML key: `broadcast'
     Type: boolean

     Default value: true

     Allows the program to send broadcast messages on the network. It
     can be usefull to disable those if you don't use UDP node
     discovery and/or if there's a sysadmin arround who does not enjoy
     permanent broadcasts on his LAN.

4.7.4 cli-backends
------------------

 -- Command-line option: `--cli-backends=<value>'
 -- Environment variable: `LW6_CLI_BACKENDS'
 -- XML key: `cli-backends'
     Type: string

     Default value: tcp,udp,http

     The client backends to use. Most of the time the default is fine,
     change it only if you specifically want to disactivate some
     protocol, or if you want to activate a custom-made client backend.
     It's a comma separated list.

4.7.5 known-nodes
-----------------

 -- Command-line option: `--known-nodes=<value>'
 -- Environment variable: `LW6_KNOWN_NODES'
 -- XML key: `known-nodes'
     Type: string

     Default value: http://ufoot.org:8056/,http://ufoot.hd.free.fr:8056/

     List of known nodes, nodes which the program will try to contact
     first to get the list of other nodes. This is mostly usefull when
     program is launched for the first time, after this it should keep
     an up-to-date list of known servers in its internal database and
     automatically reconnect to them next time it starts. You might
     want to change this if you really want to connect to a given
     server which is not publically listed. The list is comma separated.

4.7.6 node-description
----------------------

 -- Command-line option: `--node-description=<value>'
 -- Environment variable: `LW6_NODE_DESCRIPTION'
 -- XML key: `node-description'
     Type: string

     Default value: No description.

     The description of your node, that is a text that describes your
     server. This will typically appear when pointing a web client on
     the public server URL, it is for general information, so if
     there's something special about your server, say it here.

4.7.7 node-title
----------------

 -- Command-line option: `--node-title=<value>'
 -- Environment variable: `LW6_NODE_TITLE'
 -- XML key: `node-title'
     Type: string

     Default value:

     The title of your node, that is the name which will be displayed
     when listing servers. This is different from player name, for
     there can be several players on a single computer. By default this
     will be set to hostname.

4.7.8 password
--------------

 -- Command-line option: `--password=<value>'
 -- Environment variable: `LW6_PASSWORD'
 -- XML key: `password'
     Type: string

     Default value:

     The password to use for network games. Do not use a valuable
     password, as this is stored as clear text on your hard drive.
     Still, the game will only send a hash/checksum of the password on
     the network so eavesdropper won't be able to read it. They can see
     the hash/checksum and use it if clever, but they can't guess the
     real password. A blank password means anyone can join your games
     when you act like a server.

4.7.9 public-url
----------------

 -- Command-line option: `--public-url=<value>'
 -- Environment variable: `LW6_PUBLIC_URL'
 -- XML key: `public-url'
     Type: string

     Default value:

     The public URL of your server. By default the game will pick up
     one for you.  In fact, the clients discovering your server should
     guess the public URL, probably http://<your-ip>:<your-port>/ but
     you might need to use your own settings if you are using NAT or an
     Apache reverse-proxy to rewrite HTTP requests.

4.7.10 skip-network
-------------------

 -- Command-line option: `--skip-network=<value>'
 -- Environment variable: `LW6_SKIP_NETWORK'
 -- XML key: `skip-network'
     Type: boolean

     Default value: true

     If set, then game won't do anything network related. No listen, no
     connect, no nothing. You are playing locally.

4.7.11 srv-backends
-------------------

 -- Command-line option: `--srv-backends=<value>'
 -- Environment variable: `LW6_SRV_BACKENDS'
 -- XML key: `srv-backends'
     Type: string

     Default value: tcpd,udpd,httpd

     The server backends to use. Most of the time the default is fine,
     change it only if you specifically want to disactivate some
     protocol, or if you want to activate a custom-made server backend.
     It's a comma separated list.


File: liquidwar6.info,  Node: Map parameters,  Next: Map rules.xml,  Prev: Network options,  Up: Reference

4.8 Map parameters
==================

4.8.1 chosen-map
----------------

 -- Command-line option: `--chosen-map=<value>'
 -- Environment variable: `LW6_CHOSEN_MAP'
 -- XML key: `chosen-map'
     Type: string

     Default value: subflower

     The last map chosen by the player, locally. This is the map which
     will be used for a quick-start game, a local game, or a game
     started as a server.

4.8.2 force
-----------

 -- Command-line option: `--force=<value>'
 -- Environment variable: `LW6_FORCE'
 -- XML key: `force'
     Type: string

     Default value: respawn-team,color-conflict-mode

     A comma separated list of options which should be ignored when
     reading map XML files. For instance, if this contains
     'rounds-per-sec,moves-per-round' then whatever values were defined
     for this in 'rules.xml', then game will ignore them and use the
     user's values, stored in 'config.xml', running the game at the
     requested speed. This ultimately allows the player to control
     everything despite the values set by the map designer.

4.8.3 use-cursor-texture
------------------------

 -- Command-line option: `--use-cursor-texture=<value>'
 -- Environment variable: `LW6_USE_CURSOR_TEXTURE'
 -- XML key: `use-cursor-texture'
     Type: boolean

     Default value: true

     Defines wether the cursor textures should be used. If unset, then
     the default builtin cursor texture will be used instead of the map
     specific one.

4.8.4 use-hints-xml
-------------------

 -- Command-line option: `--use-hints-xml=<value>'
 -- Environment variable: `LW6_USE_HINTS_XML'
 -- XML key: `use-hints-xml'
     Type: boolean

     Default value: true

     If set, then hints will be picked up from the map defined
     hints.xml, if it exists. This is the default.

4.8.5 use-music-file
--------------------

 -- Command-line option: `--use-music-file=<value>'
 -- Environment variable: `LW6_USE_MUSIC_FILE'
 -- XML key: `use-music-file'
     Type: boolean

     Default value: true

     If set, then the program will use the 'music-file' attribute to
     choose the music to play. If unset, then a random builtin music
     will be picked up, regardless of what is specified in 'music-file'.

4.8.6 use-rules-xml
-------------------

 -- Command-line option: `--use-rules-xml=<value>'
 -- Environment variable: `LW6_USE_RULES_XML'
 -- XML key: `use-rules-xml'
     Type: boolean

     Default value: true

     If set, then rules will be picked up from the map defined
     rules.xml, if it exists. This is the default. Use force-time and
     force-size to override this and use user-defined values anyway.

4.8.7 use-style-xml
-------------------

 -- Command-line option: `--use-style-xml=<value>'
 -- Environment variable: `LW6_USE_STYLE_XML'
 -- XML key: `use-style-xml'
     Type: boolean

     Default value: true

     If set, then style will be picked up from the map defined
     style.xml, if it exists. This is the default. Use force-time and
     force-background to override this and use user-defined values
     anyway.

4.8.8 use-texture
-----------------

 -- Command-line option: `--use-texture=<value>'
 -- Environment variable: `LW6_USE_TEXTURE'
 -- XML key: `use-texture'
     Type: boolean

     Default value: true

     Defines wether the map texture should be used. Of course if
     there's no map texture, the texture... won't be used. But if there
     is one, this parameter will force the game to ignore it and play
     with solid colors. This probably won't look as nice as the
     textured map in most cases, but some players might find it more
     readable and confortable to play when throwing eye candy away.


File: liquidwar6.info,  Node: Map rules.xml,  Next: Map hints.xml,  Prev: Map parameters,  Up: Reference

4.9 Map rules.xml
=================

4.9.1 boost-power
-----------------

 -- Command-line option: `--boost-power=<value>'
 -- Environment variable: `LW6_BOOST_POWER'
 -- XML key: `boost-power'
     Type: integer

     Default value: 3 Min value: 0 Max value: 10

     Defines how fast and powerfull the boost is. That is, if on
     'boost.png' it's pitch black and this parameter is set to 3, then
     fighters will move and act 3 times than what they would do
     normally.

4.9.2 color-conflict-mode
-------------------------

 -- Command-line option: `--color-conflict-mode=<value>'
 -- Environment variable: `LW6_COLOR_CONFLICT_MODE'
 -- XML key: `color-conflict-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     How to handle color conflicts, that is, when a player requests a
     color, but this color is already used, what should be done? If 0,
     wether a color already exists won't affect the color of a new
     cursor. If 1, then two players on the same computer will be
     allowed to share the same color/team, but if another computer is
     already playing with a color, any new computer will need to use
     another team. If 2, then it's impossible for a new cursor to use a
     pre-existing color, any new cursor will require a new color, if
     that color is already used, a new color will be picked randomly.

4.9.3 cursor-pot-init
---------------------

 -- Command-line option: `--cursor-pot-init=<value>'
 -- Environment variable: `LW6_CURSOR_POT_INIT'
 -- XML key: `cursor-pot-init'
     Type: integer

     Default value: 100000 Min value: 5000 Max value: 500000

     Defines the cursor potential at startup. Not really any reason to
     change it.  Theorically, there could be maps where the default
     value doesn't fit, but none has been seen yet.

4.9.4 danger-power
------------------

 -- Command-line option: `--danger-power=<value>'
 -- Environment variable: `LW6_DANGER_POWER'
 -- XML key: `danger-power'
     Type: integer

     Default value: 200 Min value: 0 Max value: 10000

     Defines how dangerous are the black zones defined in 'danger.png'.
     The value is used to decrease the fighter health at each move, so
     you should compare its value to something like 'fighter-attack'.
     Being on a dangerous zone is a bit like being attacked by an
     invisible and unknown ennemy.

4.9.5 fighter-attack
--------------------

 -- Command-line option: `--fighter-attack=<value>'
 -- Environment variable: `LW6_FIGHTER_ATTACK'
 -- XML key: `fighter-attack'
     Type: integer

     Default value: 500 Min value: 1 Max value: 10000

     Defines how hard fighters will attack others, that is, in one
     attack, how many life-points the attacked fighter will loose.
     Increasing this will cause your opponents to melt faster when you
     attack them. With a low value, it will take ages to take on your
     opponents. Different styles of game. Can radically change the
     gameplay.

4.9.6 fighter-defense
---------------------

 -- Command-line option: `--fighter-defense=<value>'
 -- Environment variable: `LW6_FIGHTER_DEFENSE'
 -- XML key: `fighter-defense'
     Type: integer

     Default value: 50 Min value: 0 Max value: 10000

     Defines how fast fighters will regenerate after an attack. When
     this parameter is set low, an attacked fighter, which is very dark
     and almost dead will take a very long time to regain energy. If
     the parameter is set high, it can almost instantaneously regain
     energy.

4.9.7 fighter-new-health
------------------------

 -- Command-line option: `--fighter-new-health=<value>'
 -- Environment variable: `LW6_FIGHTER_NEW_HEALTH'
 -- XML key: `fighter-new-health'
     Type: integer

     Default value: 5000 Min value: 1 Max value: 10000

     Defines how healthy fighters will be when they appear on the map.
     This can be either at the beginning of the game of when a fighter
     changes team. Setting this low will allow battefields to switch
     from one side to another very fast, for freshly gained fighters
     will be feeble and very likely to return to their original camp.
     To calibrate this parameter, keep in mind that the absolute
     maximum health a fighter can have is always 10000 (ten-thousands).

4.9.8 fighter-regenerate
------------------------

 -- Command-line option: `--fighter-regenerate=<value>'
 -- Environment variable: `LW6_FIGHTER_REGENERATE'
 -- XML key: `fighter-regenerate'
     Type: integer

     Default value: 5 Min value: 0 Max value: 10000

     Defines at which speed fighters will self-regenerate, without even
     begin packed together. This will allow lone fighters to regenerate
     a bit by hiding somewhere in the map. This is typically a low
     value, might even be 0.

4.9.9 frags-fade-out
--------------------

 -- Command-line option: `--frags-fade-out=<value>'
 -- Environment variable: `LW6_FRAGS_FADE_OUT'
 -- XML key: `frags-fade-out'
     Type: integer

     Default value: 100 Min value: 10 Max value: 100

     When a player looses (in deathmatch mode) all player points will be
     multiplicated by this percentage, for instance if it's 90 and
     player had 50 points, then player will only have 45 points, then
     points corresponding to the new death will be added/substrated to
     its total. This is to avoid players with thousands of points in
     advance, and keep everyone in the race. A low value will minimize
     the importance of game start. This is only used in modes where
     frags are distributed in a proportional way.

4.9.10 frags-mode
-----------------

 -- Command-line option: `--frags-mode=<value>'
 -- Environment variable: `LW6_FRAGS_MODE'
 -- XML key: `frags-mode'
     Type: integer

     Default value: 2 Min value: 0 Max value: 3

     Defines how points are calculated in deathmatch mode, 0 is old
     school simple mode. 1 is in a mode in which 1 point is attributed
     to every winner, and looser looses all the corresponding points
     (total is always 0). 2 isproportional mode, with a total of 0 kept
     constant, that is, loosers loose as many points as attributed to
     winners. 3 is a mode in which at each death, winners are
     attributed a number of points proportional to their fighters, and
     loosers scores remain untouched.

4.9.11 frags-to-distribute
--------------------------

 -- Command-line option: `--frags-to-distribute=<value>'
 -- Environment variable: `LW6_FRAGS_TO_DISTRIBUTE'
 -- XML key: `frags-to-distribute'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how many points will be distributed when in deathmatch
     mode. When a player looses, this amont of points will be
     substracted to its total, and the same amount of points will be
     distributed to other live players, proportionnally to how many
     fighters they have on the battlefield.

4.9.12 glue-power
-----------------

 -- Command-line option: `--glue-power=<value>'
 -- Environment variable: `LW6_GLUE_POWER'
 -- XML key: `glue-power'
     Type: integer

     Default value: 20 Min value: 0 Max value: 100

     Defines how sticky and powerfull the glue is. That is, if on
     'glue.png' it's pitch black and this parameter is set to 3, then
     fighters will take 3 steps to do what would normally take only one
     step.

4.9.13 max-cursor-pot
---------------------

 -- Command-line option: `--max-cursor-pot=<value>'
 -- Environment variable: `LW6_MAX_CURSOR_POT'
 -- XML key: `max-cursor-pot'
     Type: integer

     Default value: 1000000 Min value: 50000 Max value: 5000000

     Defines the maximum cursor potential. Not really any reason to
     change it. Any high value should produce the same results. Low
     values might reveal algorithm bugs and inconsistencies.

4.9.14 max-cursor-pot-offset
----------------------------

 -- Command-line option: `--max-cursor-pot-offset=<value>'
 -- Environment variable: `LW6_MAX_CURSOR_POT_OFFSET'
 -- XML key: `max-cursor-pot-offset'
     Type: integer

     Default value: 100 Min value: 1 Max value: 10000

     Defines the maximum cursor potential offset. The idea is that in
     some cases, the potential of a cursor can increase in burst mode,
     for instance to make this cursor more important than others, so
     that fighters rally to it, neglecting other cursors (talking about
     a multi-cursor controlled team). This parameter is here to limit
     this burst effect and avoid bugs.

4.9.15 max-nb-cursors
---------------------

 -- Command-line option: `--max-nb-cursors=<value>'
 -- Environment variable: `LW6_MAX_NB_CURSORS'
 -- XML key: `max-nb-cursors'
     Type: integer

     Default value: 26 Min value: 2 Max value: 26

     Defines the maximum number of cursors who can enter the game.
     Really makes sense in network games. Default value is 26, the
     maximum.

4.9.16 max-nb-nodes
-------------------

 -- Command-line option: `--max-nb-nodes=<value>'
 -- Environment variable: `LW6_MAX_NB_NODES'
 -- XML key: `max-nb-nodes'
     Type: integer

     Default value: 12 Min value: 2 Max value: 26

     Defines the maximum number of servers who can enter the game.
     Really makes sense in network games. Default value is 10, and
     should fit in most cases. Can be raised up to 26.

4.9.17 max-nb-teams
-------------------

 -- Command-line option: `--max-nb-teams=<value>'
 -- Environment variable: `LW6_MAX_NB_TEAMS'
 -- XML key: `max-nb-teams'
     Type: integer

     Default value: 10 Min value: 2 Max value: 10

     Defines the maximum number of teams who can enter the game. Really
     makes sense in network games. Default value is 10, the maximum.

4.9.18 max-round-delta
----------------------

 -- Command-line option: `--max-round-delta=<value>'
 -- Environment variable: `LW6_MAX_ROUND_DELTA'
 -- XML key: `max-round-delta'
     Type: integer

     Default value: 1000 Min value: 1 Max value: 10000

     This is the companion value of 'round-delta'. Will put an absolute
     limit to the delta, which (what did you think?) is of course
     incremented in some cases by the core algorithm. If in doubt,
     don't touch.

4.9.19 max-zone-size
--------------------

 -- Command-line option: `--max-zone-size=<value>'
 -- Environment variable: `LW6_MAX_ZONE_SIZE'
 -- XML key: `max-zone-size'
     Type: integer

     Default value: 8 Min value: 1 Max value: 64

     Defines the maximum zone size, which is an internal and rather
     technical parameter. The idea is that to optimize things, Liquid
     War 6 divides the battlefield in squares, where it can, and tries
     to make these squares as big as possible, the idea being that
     everywhere in this square, fighters follow the same intructions.
     Just a technical optimization. The problem is that setting it too
     high will reveal the optimization and its tradeoffs to the player,
     who will see the fighter behave strangely, following invisible
     paths.  Plus, it's ugly. Depending on your tastes (speed,
     look'n'feel) you'll prefer something nice or something fast. Note
     that anyways passed a certain value, this does not optimize
     anything anymore. In doubt, don't touch it.

4.9.20 medicine-power
---------------------

 -- Command-line option: `--medicine-power=<value>'
 -- Environment variable: `LW6_MEDICINE_POWER'
 -- XML key: `medicine-power'
     Type: integer

     Default value: 100 Min value: 0 Max value: 10000

     Defines how fast fighter will automatically regenerate on black
     zones defined in 'medicine.png'. The value is used to decrease the
     fighter health at each move, so you should compare its value to
     something like 'fighter-defense'.  Being on a medicined zone is a
     bit like being defended by an invisible and unknown friend.

4.9.21 moves-per-round
----------------------

 -- Command-line option: `--moves-per-round=<value>'
 -- Environment variable: `LW6_MOVES_PER_ROUND'
 -- XML key: `moves-per-round'
     Type: integer

     Default value: 2 Min value: 1 Max value: 50

     Defines how many times fighters move per round. Increasing this
     will just make fighters move faster, but won't change anything for
     the rest, that is keyboard and mouse responsivity, and network
     traffic will stay the same. Multiplying the number of moves per
     round by the number of rounds per second will give the number of
     moves per second, which is, in fact, how fast fighters move on the
     screen.

4.9.22 nb-attack-tries
----------------------

 -- Command-line option: `--nb-attack-tries=<value>'
 -- Environment variable: `LW6_NB_ATTACK_TRIES'
 -- XML key: `nb-attack-tries'
     Type: integer

     Default value: 3 Min value: 1 Max value: 7

     Defines how many tries a fighter will do before giving-up
     attacking and choosing another behvior (defense). By tries we
     mean: how many directions it will try. Going North? Going
     North-West? Setting this to a low value will make fighters
     somewhat less aggressive. This idea is that they'll prefer to
     switch to the next option, that is, defense/regeneration, if
     there's no opponent right in front of them.

4.9.23 nb-defense-tries
-----------------------

 -- Command-line option: `--nb-defense-tries=<value>'
 -- Environment variable: `LW6_NB_DEFENSE_TRIES'
 -- XML key: `nb-defense-tries'
     Type: integer

     Default value: 1 Min value: 1 Max value: 7

     Defines how many tries a fighter will do before giving-up
     attacking and choosing another behavior (do nothing). By tries we
     mean: how many directions it will try. Going North? Going
     North-West? Setting this to a low value, you'll need a very
     compact pack of fighters for regeneration to operate, else
     fighters will hang arround unhealthy.

4.9.24 nb-move-tries
--------------------

 -- Command-line option: `--nb-move-tries=<value>'
 -- Environment variable: `LW6_NB_MOVE_TRIES'
 -- XML key: `nb-move-tries'
     Type: integer

     Default value: 5 Min value: 3 Max value: 7

     Defines how many tries a fighter will do before giving-up moving
     and choosing another behvior (attack or defense). By tries we
     mean: how many directions it will try. Going North? Going
     North-West? Setting this to a low value, your fighters will look
     very stubborn and always try to move in one direction, neglecting
     the fact that they could dodge. This can lead to queues of fighters
     and other strange behaviors. On the other hand, setting it too
     high will cause fighter to always avoid the enemy, and groups of
     fighters will just pass each other without any fight. Matter of
     taste.

4.9.25 respawn-position-mode
----------------------------

 -- Command-line option: `--respawn-position-mode=<value>'
 -- Environment variable: `LW6_RESPAWN_POSITION_MODE'
 -- XML key: `respawn-position-mode'
     Type: integer

     Default value: 1 Min value: 0 Max value: 2

     Defines how teams are set up on the map when respawning. 0 means
     teams respect the pre-defined start positions. 1 means that a
     random position will be picked, among the existing positions. That
     is, red could take green's place. 2 means total randomness, teams
     can appear anywhere.

4.9.26 respawn-team
-------------------

 -- Command-line option: `--respawn-team=<value>'
 -- Environment variable: `LW6_RESPAWN_TEAM'
 -- XML key: `respawn-team'
     Type: integer

     Default value: 1 Min value: 0 Max value: 1

     Defines what to do when a team dies. If set to 0, team disappears
     forever, if set to 1, team reappears automatically with fresh
     fighters. It's a deathmatch mode, where the winner is not the one
     who stays alive the longest time, since it makes no real sens in
     this case, but the one who has died less often than others.

4.9.27 round-delta
------------------

 -- Command-line option: `--round-delta=<value>'
 -- Environment variable: `LW6_ROUND_DELTA'
 -- XML key: `round-delta'
     Type: integer

     Default value: 1 Min value: 0 Max value: 100

     Conditions by how much the cursor potential will be incremented
     each time gradient is spreaded. Sounds cryptic? It is. The idea is
     that at each time you move your cursor of 1 pixel, theorically,
     you'll need in the worst case to move of 1 more pixel to reach any
     point on the map. Of course this is not true but this is the
     default asumption, and gradient spread will fix that. Only in
     Liquid War 6 this is not even the worst case, for you can control
     your cursor with the mouse and cross walls. Whenever you cross a
     wall, you might have done a great distance from the fighters'
     point of view, if the map is a maze. Thus this parameter, which
     corrects things, experience shows it does give acceptable results
     to increase the cursor potential by more than one at each turn.
     Toy arround with this if you find fighters take wrong paths on some
     given map. If in doubt, don't touch.

4.9.28 rounds-per-sec
---------------------

 -- Command-line option: `--rounds-per-sec=<value>'
 -- Environment variable: `LW6_ROUNDS_PER_SEC'
 -- XML key: `rounds-per-sec'
     Type: integer

     Default value: 50 Min value: 1 Max value: 200

     Defines the overall speed of the game. All other settings being
     equal, raising this value will cause the game to behave faster.
     Everything will be faster, except probably the display since your
     computer will calculate more game positions in a given time and
     spend more CPU time. It will also increase network traffic. Values
     between 10 and 50 really make sense.

4.9.29 side-attack-factor
-------------------------

 -- Command-line option: `--side-attack-factor=<value>'
 -- Environment variable: `LW6_SIDE_ATTACK_FACTOR'
 -- XML key: `side-attack-factor'
     Type: integer

     Default value: 20 Min value: 0 Max value: 100

     Defines how hard fighters will attack sideways. It's an algorithm
     trick, fighters attack by default the opponent right in front, but
     if there's no fighter there, they will still try to attack someone
     else, maybe sideways. But doing this their attack is not as
     strong. This parameter enables you to tune this. This is a
     percentage.

4.9.30 side-defense-factor
--------------------------

 -- Command-line option: `--side-defense-factor=<value>'
 -- Environment variable: `LW6_SIDE_DEFENSE_FACTOR'
 -- XML key: `side-defense-factor'
     Type: integer

     Default value: 20 Min value: 0 Max value: 100

     Defines how fast fighters will regenerate, when being side by side
     instead of being right in front of the other. This is a percentage.

4.9.31 single-army-size
-----------------------

 -- Command-line option: `--single-army-size=<value>'
 -- Environment variable: `LW6_SINGLE_ARMY_SIZE'
 -- XML key: `single-army-size'
     Type: integer

     Default value: 30 Min value: 1 Max value: 95

     Defines the proportion of the whole available space, which will be
     occupied by an army at the beginning of the game. You can either
     imagine playing with almost empty maps, or play very crowded with
     almost no space left. This is a percentage, but will be multiplied
     by itself to get the actual surface. That is, 50 means 50%*50%,
     that is, a square of 1/2 the size of a square map, so it
     represents 25% (1/4) of the total surface.

4.9.32 spread-thread
--------------------

 -- Command-line option: `--spread-thread=<value>'
 -- Environment variable: `LW6_SPREAD_THREAD'
 -- XML key: `spread-thread'
     Type: integer

     Default value: 0 Min value: 0 Max value: 1

     If set to 1, the core algorithm with fire a separate thread to
     spread the gradient. By default this is turned off (set to 0).
     Consider this as an experimental feature, the program is already
     rather heavily threaded, turning this on will probably not offer
     any significant performance gain, even on SMP systems. This might
     change in the future.

4.9.33 spreads-per-round
------------------------

 -- Command-line option: `--spreads-per-round=<value>'
 -- Environment variable: `LW6_SPREADS_PER_ROUND'
 -- XML key: `spreads-per-round'
     Type: integer

     Default value: 3 Min value: 1 Max value: 12

     Defines how many times the gradient is spread per round. Gradient
     spread is a very Liquid War 6 specific feature, just remember that
     the more often you do it, the more accurately fighters will move.
     That is, you will be sure they really take the shortest path.
     Usually this does not have much effect, the default value should
     fit in most cases, but you might want to decrease it on very
     simple maps where the gradient is obvious, or increase it on
     complex maps where you want fighters to be real smart.

4.9.34 start-blue-x
-------------------

 -- Command-line option: `--start-blue-x=<value>'
 -- Environment variable: `LW6_START_BLUE_X'
 -- XML key: `start-blue-x'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     X start position for the blue team. This is a percentage of map
     width, value between 0 and 100.

4.9.35 start-blue-y
-------------------

 -- Command-line option: `--start-blue-y=<value>'
 -- Environment variable: `LW6_START_BLUE_Y'
 -- XML key: `start-blue-y'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     Y start position for the blue team. This is a percentage of map
     height, value between 0 and 100.

4.9.36 start-cyan-x
-------------------

 -- Command-line option: `--start-cyan-x=<value>'
 -- Environment variable: `LW6_START_CYAN_X'
 -- XML key: `start-cyan-x'
     Type: integer

     Default value: 35 Min value: 0 Max value: 100

     X start position for the cyan team. This is a percentage of map
     width, value between 0 and 100.

4.9.37 start-cyan-y
-------------------

 -- Command-line option: `--start-cyan-y=<value>'
 -- Environment variable: `LW6_START_CYAN_Y'
 -- XML key: `start-cyan-y'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     Y start position for the cyan team. This is a percentage of map
     height, value between 0 and 100.

4.9.38 start-green-x
--------------------

 -- Command-line option: `--start-green-x=<value>'
 -- Environment variable: `LW6_START_GREEN_X'
 -- XML key: `start-green-x'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     X start position for the green team. This is a percentage of map
     width, value between 0 and 100.

4.9.39 start-green-y
--------------------

 -- Command-line option: `--start-green-y=<value>'
 -- Environment variable: `LW6_START_GREEN_Y'
 -- XML key: `start-green-y'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     Y start position for the green team. This is a percentage of map
     height, value between 0 and 100.

4.9.40 start-lightblue-x
------------------------

 -- Command-line option: `--start-lightblue-x=<value>'
 -- Environment variable: `LW6_START_LIGHTBLUE_X'
 -- XML key: `start-lightblue-x'
     Type: integer

     Default value: 35 Min value: 0 Max value: 100

     X start position for the lightblue team. This is a percentage of
     map width, value between 0 and 100.

4.9.41 start-lightblue-y
------------------------

 -- Command-line option: `--start-lightblue-y=<value>'
 -- Environment variable: `LW6_START_LIGHTBLUE_Y'
 -- XML key: `start-lightblue-y'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     Y start position for the lightblue team. This is a percentage of
     map height, value between 0 and 100.

4.9.42 start-magenta-x
----------------------

 -- Command-line option: `--start-magenta-x=<value>'
 -- Environment variable: `LW6_START_MAGENTA_X'
 -- XML key: `start-magenta-x'
     Type: integer

     Default value: 65 Min value: 0 Max value: 100

     X start position for the magenta team. This is a percentage of map
     width, value between 0 and 100.

4.9.43 start-magenta-y
----------------------

 -- Command-line option: `--start-magenta-y=<value>'
 -- Environment variable: `LW6_START_MAGENTA_Y'
 -- XML key: `start-magenta-y'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     Y start position for the magenta team. This is a percentage of map
     height, value between 0 and 100.

4.9.44 start-orange-x
---------------------

 -- Command-line option: `--start-orange-x=<value>'
 -- Environment variable: `LW6_START_ORANGE_X'
 -- XML key: `start-orange-x'
     Type: integer

     Default value: 65 Min value: 0 Max value: 100

     X start position for the orange team. This is a percentage of map
     width, value between 0 and 100.

4.9.45 start-orange-y
---------------------

 -- Command-line option: `--start-orange-y=<value>'
 -- Environment variable: `LW6_START_ORANGE_Y'
 -- XML key: `start-orange-y'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     Y start position for the orange team. This is a percentage of map
     height, value between 0 and 100.

4.9.46 start-pink-x
-------------------

 -- Command-line option: `--start-pink-x=<value>'
 -- Environment variable: `LW6_START_PINK_X'
 -- XML key: `start-pink-x'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     X start position for the pink team. This is a percentage of map
     width, value between 0 and 100.

4.9.47 start-pink-y
-------------------

 -- Command-line option: `--start-pink-y=<value>'
 -- Environment variable: `LW6_START_PINK_Y'
 -- XML key: `start-pink-y'
     Type: integer

     Default value: 50 Min value: 0 Max value: 100

     Y start position for the pink team. This is a percentage of map
     height, value between 0 and 100.

4.9.48 start-position-mode
--------------------------

 -- Command-line option: `--start-position-mode=<value>'
 -- Environment variable: `LW6_START_POSITION_MODE'
 -- XML key: `start-position-mode'
     Type: integer

     Default value: 0 Min value: 0 Max value: 2

     Defines how teams are set up on the map at game startup. 0 means
     teams respect the pre-defined start positions. 1 means that a
     random position will be picked, among the existing positions. That
     is, red could take green's place. 2 means total randomness, teams
     can appear anywhere.

4.9.49 start-purple-x
---------------------

 -- Command-line option: `--start-purple-x=<value>'
 -- Environment variable: `LW6_START_PURPLE_X'
 -- XML key: `start-purple-x'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     X start position for the purple team. This is a percentage of map
     width, value between 0 and 100.

4.9.50 start-purple-y
---------------------

 -- Command-line option: `--start-purple-y=<value>'
 -- Environment variable: `LW6_START_PURPLE_Y'
 -- XML key: `start-purple-y'
     Type: integer

     Default value: 50 Min value: 0 Max value: 100

     Y start position for the purple team. This is a percentage of map
     height, value between 0 and 100.

4.9.51 start-red-x
------------------

 -- Command-line option: `--start-red-x=<value>'
 -- Environment variable: `LW6_START_RED_X'
 -- XML key: `start-red-x'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     X start position for the red team. This is a percentage of map
     width, value between 0 and 100.

4.9.52 start-red-y
------------------

 -- Command-line option: `--start-red-y=<value>'
 -- Environment variable: `LW6_START_RED_Y'
 -- XML key: `start-red-y'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     Y start position for the red team. This is a percentage of map
     height, value between 0 and 100.

4.9.53 start-yellow-x
---------------------

 -- Command-line option: `--start-yellow-x=<value>'
 -- Environment variable: `LW6_START_YELLOW_X'
 -- XML key: `start-yellow-x'
     Type: integer

     Default value: 10 Min value: 0 Max value: 100

     X start position for the yellow team. This is a percentage of map
     width, value between 0 and 100.

4.9.54 start-yellow-y
---------------------

 -- Command-line option: `--start-yellow-y=<value>'
 -- Environment variable: `LW6_START_YELLOW_Y'
 -- XML key: `start-yellow-y'
     Type: integer

     Default value: 90 Min value: 0 Max value: 100

     Y start position for the yellow team. This is a percentage of map
     height, value between 0 and 100.

4.9.55 team-profile-blue-aggressive
-----------------------------------

 -- Command-line option: `--team-profile-blue-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_BLUE_AGGRESSIVE'
 -- XML key: `team-profile-blue-aggressive'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how aggressive the blue team is. This is a percentage, if
     set to 200 then team will attack twice as much as any other team
     with the default value.  Setting this to a high value clearly
     advantages this team.

4.9.56 team-profile-blue-fast
-----------------------------

 -- Command-line option: `--team-profile-blue-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_BLUE_FAST'
 -- XML key: `team-profile-blue-fast'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Changes the speed of the blue team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.9.57 team-profile-blue-mobile
-------------------------------

 -- Command-line option: `--team-profile-blue-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_BLUE_MOBILE'
 -- XML key: `team-profile-blue-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the blue team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.9.58 team-profile-blue-vulnerable
-----------------------------------

 -- Command-line option: `--team-profile-blue-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_BLUE_VULNERABLE'
 -- XML key: `team-profile-blue-vulnerable'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how vulnerable the blue team is. This is a percentage, if
     set to 200 then team will be attacked twice as much as any other
     team with the default value. Setting this to a high value clearly
     disadvantages this team.

4.9.59 team-profile-cyan-aggressive
-----------------------------------

 -- Command-line option: `--team-profile-cyan-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_CYAN_AGGRESSIVE'
 -- XML key: `team-profile-cyan-aggressive'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how aggressive the cyan team is. This is a percentage, if
     set to 200 then team will attack twice as much as any other team
     with the default value.  Setting this to a high value clearly
     advantages this team.

4.9.60 team-profile-cyan-fast
-----------------------------

 -- Command-line option: `--team-profile-cyan-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_CYAN_FAST'
 -- XML key: `team-profile-cyan-fast'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Changes the speed of the cyan team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.9.61 team-profile-cyan-mobile
-------------------------------

 -- Command-line option: `--team-profile-cyan-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_CYAN_MOBILE'
 -- XML key: `team-profile-cyan-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the cyan team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.9.62 team-profile-cyan-vulnerable
-----------------------------------

 -- Command-line option: `--team-profile-cyan-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_CYAN_VULNERABLE'
 -- XML key: `team-profile-cyan-vulnerable'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how vulnerable the cyan team is. This is a percentage, if
     set to 200 then team will be attacked twice as much as any other
     team with the default value. Setting this to a high value clearly
     disadvantages this team.

4.9.63 team-profile-green-aggressive
------------------------------------

 -- Command-line option: `--team-profile-green-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_GREEN_AGGRESSIVE'
 -- XML key: `team-profile-green-aggressive'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how aggressive the green team is. This is a percentage, if
     set to 200 then team will attack twice as much as any other team
     with the default value.  Setting this to a high value clearly
     advantages this team.

4.9.64 team-profile-green-fast
------------------------------

 -- Command-line option: `--team-profile-green-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_GREEN_FAST'
 -- XML key: `team-profile-green-fast'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Changes the speed of the green team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.9.65 team-profile-green-mobile
--------------------------------

 -- Command-line option: `--team-profile-green-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_GREEN_MOBILE'
 -- XML key: `team-profile-green-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the green team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.9.66 team-profile-green-vulnerable
------------------------------------

 -- Command-line option: `--team-profile-green-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_GREEN_VULNERABLE'
 -- XML key: `team-profile-green-vulnerable'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how vulnerable the green team is. This is a percentage, if
     set to 200 then team will be attacked twice as much as any other
     team with the default value. Setting this to a high value clearly
     disadvantages this team.

4.9.67 team-profile-lightblue-aggressive
----------------------------------------

 -- Command-line option: `--team-profile-lightblue-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_LIGHTBLUE_AGGRESSIVE'
 -- XML key: `team-profile-lightblue-aggressive'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how aggressive the lightblue team is. This is a
     percentage, if set to 200 then team will attack twice as much as
     any other team with the default value. Setting this to a high
     value clearly advantages this team.

4.9.68 team-profile-lightblue-fast
----------------------------------

 -- Command-line option: `--team-profile-lightblue-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_LIGHTBLUE_FAST'
 -- XML key: `team-profile-lightblue-fast'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Changes the speed of the lightblue team. This is a percentage, if
     set to 50, then team will move twice slower than other teams with
     the default parameter.  Setting this high is very likely to
     advantage the team.

4.9.69 team-profile-lightblue-mobile
------------------------------------

 -- Command-line option: `--team-profile-lightblue-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_LIGHTBLUE_MOBILE'
 -- XML key: `team-profile-lightblue-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the lightblue team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.9.70 team-profile-lightblue-vulnerable
----------------------------------------

 -- Command-line option: `--team-profile-lightblue-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_LIGHTBLUE_VULNERABLE'
 -- XML key: `team-profile-lightblue-vulnerable'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how vulnerable the lightblue team is. This is a
     percentage, if set to 200 then team will be attacked twice as much
     as any other team with the default value. Setting this to a high
     value clearly disadvantages this team.

4.9.71 team-profile-magenta-aggressive
--------------------------------------

 -- Command-line option: `--team-profile-magenta-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_MAGENTA_AGGRESSIVE'
 -- XML key: `team-profile-magenta-aggressive'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how aggressive the magenta team is. This is a percentage,
     if set to 200 then team will attack twice as much as any other
     team with the default value. Setting this to a high value clearly
     advantages this team.

4.9.72 team-profile-magenta-fast
--------------------------------

 -- Command-line option: `--team-profile-magenta-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_MAGENTA_FAST'
 -- XML key: `team-profile-magenta-fast'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Changes the speed of the magenta team. This is a percentage, if
     set to 50, then team will move twice slower than other teams with
     the default parameter.  Setting this high is very likely to
     advantage the team.

4.9.73 team-profile-magenta-mobile
----------------------------------

 -- Command-line option: `--team-profile-magenta-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_MAGENTA_MOBILE'
 -- XML key: `team-profile-magenta-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the magenta team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.9.74 team-profile-magenta-vulnerable
--------------------------------------

 -- Command-line option: `--team-profile-magenta-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_MAGENTA_VULNERABLE'
 -- XML key: `team-profile-magenta-vulnerable'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how vulnerable the magenta team is. This is a percentage,
     if set to 200 then team will be attacked twice as much as any
     other team with the default value. Setting this to a high value
     clearly disadvantages this team.

4.9.75 team-profile-orange-aggressive
-------------------------------------

 -- Command-line option: `--team-profile-orange-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_ORANGE_AGGRESSIVE'
 -- XML key: `team-profile-orange-aggressive'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how aggressive the orange team is. This is a percentage,
     if set to 200 then team will attack twice as much as any other
     team with the default value.  Setting this to a high value clearly
     advantages this team.

4.9.76 team-profile-orange-fast
-------------------------------

 -- Command-line option: `--team-profile-orange-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_ORANGE_FAST'
 -- XML key: `team-profile-orange-fast'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Changes the speed of the orange team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.9.77 team-profile-orange-mobile
---------------------------------

 -- Command-line option: `--team-profile-orange-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_ORANGE_MOBILE'
 -- XML key: `team-profile-orange-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the orange team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.9.78 team-profile-orange-vulnerable
-------------------------------------

 -- Command-line option: `--team-profile-orange-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_ORANGE_VULNERABLE'
 -- XML key: `team-profile-orange-vulnerable'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how vulnerable the orange team is. This is a percentage,
     if set to 200 then team will be attacked twice as much as any
     other team with the default value. Setting this to a high value
     clearly disadvantages this team.

4.9.79 team-profile-pink-aggressive
-----------------------------------

 -- Command-line option: `--team-profile-pink-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PINK_AGGRESSIVE'
 -- XML key: `team-profile-pink-aggressive'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how aggressive the pink team is. This is a percentage, if
     set to 200 then team will attack twice as much as any other team
     with the default value.  Setting this to a high value clearly
     advantages this team.

4.9.80 team-profile-pink-fast
-----------------------------

 -- Command-line option: `--team-profile-pink-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PINK_FAST'
 -- XML key: `team-profile-pink-fast'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Changes the speed of the pink team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.9.81 team-profile-pink-mobile
-------------------------------

 -- Command-line option: `--team-profile-pink-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PINK_MOBILE'
 -- XML key: `team-profile-pink-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the pink team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.9.82 team-profile-pink-vulnerable
-----------------------------------

 -- Command-line option: `--team-profile-pink-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PINK_VULNERABLE'
 -- XML key: `team-profile-pink-vulnerable'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how vulnerable the pink team is. This is a percentage, if
     set to 200 then team will be attacked twice as much as any other
     team with the default value. Setting this to a high value clearly
     disadvantages this team.

4.9.83 team-profile-purple-aggressive
-------------------------------------

 -- Command-line option: `--team-profile-purple-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PURPLE_AGGRESSIVE'
 -- XML key: `team-profile-purple-aggressive'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how aggressive the purple team is. This is a percentage,
     if set to 200 then team will attack twice as much as any other
     team with the default value.  Setting this to a high value clearly
     advantages this team.

4.9.84 team-profile-purple-fast
-------------------------------

 -- Command-line option: `--team-profile-purple-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PURPLE_FAST'
 -- XML key: `team-profile-purple-fast'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Changes the speed of the purple team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.9.85 team-profile-purple-mobile
---------------------------------

 -- Command-line option: `--team-profile-purple-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PURPLE_MOBILE'
 -- XML key: `team-profile-purple-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the purple team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.9.86 team-profile-purple-vulnerable
-------------------------------------

 -- Command-line option: `--team-profile-purple-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_PURPLE_VULNERABLE'
 -- XML key: `team-profile-purple-vulnerable'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how vulnerable the purple team is. This is a percentage,
     if set to 200 then team will be attacked twice as much as any
     other team with the default value. Setting this to a high value
     clearly disadvantages this team.

4.9.87 team-profile-red-aggressive
----------------------------------

 -- Command-line option: `--team-profile-red-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_RED_AGGRESSIVE'
 -- XML key: `team-profile-red-aggressive'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how aggressive the red team is. This is a percentage, if
     set to 200 then team will attack twice as much as any other team
     with the default value.  Setting this to a high value clearly
     advantages this team.

4.9.88 team-profile-red-fast
----------------------------

 -- Command-line option: `--team-profile-red-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_RED_FAST'
 -- XML key: `team-profile-red-fast'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Changes the speed of the red team. This is a percentage, if set to
     50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.9.89 team-profile-red-mobile
------------------------------

 -- Command-line option: `--team-profile-red-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_RED_MOBILE'
 -- XML key: `team-profile-red-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the red team. If set to a high value
     team will appear more mobile and do more things, but it won't
     change its cruising speed. It's not obvious to tell wether this is
     an advantage or not, but it clearly changes the behavior.

4.9.90 team-profile-red-vulnerable
----------------------------------

 -- Command-line option: `--team-profile-red-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_RED_VULNERABLE'
 -- XML key: `team-profile-red-vulnerable'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how vulnerable the red team is. This is a percentage, if
     set to 200 then team will be attacked twice as much as any other
     team with the default value. Setting this to a high value clearly
     disadvantages this team.

4.9.91 team-profile-yellow-aggressive
-------------------------------------

 -- Command-line option: `--team-profile-yellow-aggressive=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_YELLOW_AGGRESSIVE'
 -- XML key: `team-profile-yellow-aggressive'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how aggressive the yellow team is. This is a percentage,
     if set to 200 then team will attack twice as much as any other
     team with the default value.  Setting this to a high value clearly
     advantages this team.

4.9.92 team-profile-yellow-fast
-------------------------------

 -- Command-line option: `--team-profile-yellow-fast=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_YELLOW_FAST'
 -- XML key: `team-profile-yellow-fast'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Changes the speed of the yellow team. This is a percentage, if set
     to 50, then team will move twice slower than other teams with the
     default parameter.  Setting this high is very likely to advantage
     the team.

4.9.93 team-profile-yellow-mobile
---------------------------------

 -- Command-line option: `--team-profile-yellow-mobile=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_YELLOW_MOBILE'
 -- XML key: `team-profile-yellow-mobile'
     Type: integer

     Default value: 0 Min value: -3 Max value: 3

     Increases (or decreases if negative) the number of
     move/attack/defense tries for the yellow team. If set to a high
     value team will appear more mobile and do more things, but it
     won't change its cruising speed. It's not obvious to tell wether
     this is an advantage or not, but it clearly changes the behavior.

4.9.94 team-profile-yellow-vulnerable
-------------------------------------

 -- Command-line option: `--team-profile-yellow-vulnerable=<value>'
 -- Environment variable: `LW6_TEAM_PROFILE_YELLOW_VULNERABLE'
 -- XML key: `team-profile-yellow-vulnerable'
     Type: integer

     Default value: 100 Min value: 10 Max value: 1000

     Defines how vulnerable the yellow team is. This is a percentage,
     if set to 200 then team will be attacked twice as much as any
     other team with the default value. Setting this to a high value
     clearly disadvantages this team.

4.9.95 total-armies-size
------------------------

 -- Command-line option: `--total-armies-size=<value>'
 -- Environment variable: `LW6_TOTAL_ARMIES_SIZE'
 -- XML key: `total-armies-size'
     Type: integer

     Default value: 60 Min value: 1 Max value: 95

     Defines the proportion of the whole available space, which can be
     occupied by all the armies present together. Setting this low,
     whenever a new team arrives on the map, fighters might be stolen
     to other teams, otherwise the ame would get too crowded. This
     allows you to play with reasonnably enough fighters with 2
     players, while still allowing interesting gameplay with many
     players. This is a percentage, but will be multiplied by itself to
     get the actual surface.  That is, 50 means 50%*50%, that is, a
     square of 1/2 the size of a square map, so it represents 25% (1/4)
     of the total surface.

4.9.96 total-time
-----------------

 -- Command-line option: `--total-time=<value>'
 -- Environment variable: `LW6_TOTAL_TIME'
 -- XML key: `total-time'
     Type: integer

     Default value: 900 Min value: 10 Max value: 864000

     Defines the maximum time of the game, in seconds. Note that in
     some cases, the game can end much earlier if some player has
     managed to win before the bell rings. Also, technically, this
     value will be translated into rounds and moves, and the game
     engine will wait until enough rounds and moves have been played.
     So if the computer is too slow and the desired speed is not
     reached, then the game will last for a longer time.

4.9.97 use-team-profiles
------------------------

 -- Command-line option: `--use-team-profiles=<value>'
 -- Environment variable: `LW6_USE_TEAM_PROFILES'
 -- XML key: `use-team-profiles'
     Type: integer

     Default value: 1 Min value: 0 Max value: 1

     If set, then all the team-profile-... values will be taken in
     account. This enables a mode in which teams behave differently
     according to their colors. If you disable this, then all teams
     will behave the same, which is more fair, but might not be as fun.

4.9.98 vertical-move
--------------------

 -- Command-line option: `--vertical-move=<value>'
 -- Environment variable: `LW6_VERTICAL_MOVE'
 -- XML key: `vertical-move'
     Type: integer

     Default value: 1 Min value: 0 Max value: 7

     Defines when to process a vertical move (along the Z 'depth'
     axis). If set to 0, fighters never spontaneously move along this
     axis. If set to 1, it will be tried just after the first move
     failed. If set to 2, it will be tried just after the second move
     failed. And so on.

4.9.99 x-polarity
-----------------

 -- Command-line option: `--x-polarity=<value>'
 -- Environment variable: `LW6_X_POLARITY'
 -- XML key: `x-polarity'
     Type: integer

     Default value: 0 Min value: -1 Max value: 1

     Defines how the map will be wrapped on the X (horizontal) axis. If
     set to 0, nothing is wrapped. If set to 1, the right and left
     borders are connected, any fighter can disappear on the right
     border and reappear on the left border, for instance. If set to
     -1, it will be wrapped but also inversed, that is on a 320x240
     map, a fighter disappearing on the left border at position (0,60)
     will reapper on the right border at position (319,180). You can
     combine it with 'y-polarity'.

4.9.100 y-polarity
------------------

 -- Command-line option: `--y-polarity=<value>'
 -- Environment variable: `LW6_Y_POLARITY'
 -- XML key: `y-polarity'
     Type: integer

     Default value: 0 Min value: -1 Max value: 1

     Defines how the map will be wrapped on the Y (vertical) axis. If
     set to 0, nothing is wrapped. If set to 1, the top and bottom
     borders are connected, any fighter can disappear on the top border
     and reappear on the bottom border, for instance. If set to -1, it
     will be wrapped but also inversed, that is on a 320x240 map, a
     fighter disappearing on the bottom border at position (40,239)
     will reapper on the top border at position (280,0). You can
     combine it with 'x-polarity'.

4.9.101 z-polarity
------------------

 -- Command-line option: `--z-polarity=<value>'
 -- Environment variable: `LW6_Z_POLARITY'
 -- XML key: `z-polarity'
     Type: integer

     Default value: 0 Min value: 0 Max value: 1

     Defines how the map will be wrapped on the Z (deep) axis. If set
     to 0, nothing is wrapped. If set to 1, when using a 4 layer map,
     for instance, fighters on layer 1 will be able to go directly to
     layer 4 even if layers 2 and 3 are filled with walls. A value of
     -1 is forbidden, this is not like x and y axis, it does not really
     make sense. Consider this an advanced setting which might save a
     layer in some tricky cases, the default value of 0 should fit in
     most cases.


File: liquidwar6.info,  Node: Map hints.xml,  Next: Map style.xml,  Prev: Map rules.xml,  Up: Reference

4.10 Map hints.xml
==================

4.10.1 background-color-auto
----------------------------

 -- Command-line option: `--background-color-auto=<value>'
 -- Environment variable: `LW6_BACKGROUND_COLOR_AUTO'
 -- XML key: `background-color-auto'
     Type: boolean

     Default value: true

     Defines wether hud colors will be set automatically from base and
     alternate colors. This is a time saver to keep map designers from
     requiring to redefined every single color in the game. You only
     need to set color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg. Then hud_color_frame_bg, hud_color_frame_fg,
     hud_color_text_bg and hud_color_text_fg will be automatically set.

4.10.2 downsize-using-bench-value
---------------------------------

 -- Command-line option: `--downsize-using-bench-value=<value>'
 -- Environment variable: `LW6_DOWNSIZE_USING_BENCH_VALUE'
 -- XML key: `downsize-using-bench-value'
     Type: boolean

     Default value: true

     If set, then the game will automatically downsize a map according
     to the 'bench-value' parameter. Downsizing means: a 1600x1200 maps
     becomes 200x150, for instance. Downsizing causes fighters to be
     bigger because map resolution is lower. This will avoid running
     the game on a too big map, with your computer not being able to
     handle it at the required speed.

4.10.3 downsize-using-fighter-scale
-----------------------------------

 -- Command-line option: `--downsize-using-fighter-scale=<value>'
 -- Environment variable: `LW6_DOWNSIZE_USING_FIGHTER_SCALE'
 -- XML key: `downsize-using-fighter-scale'
     Type: boolean

     Default value: false

     If set, then the game will automatically downsize a map according
     to the 'fighter-scale' parameter. Downsizing means: a 1600x1200
     maps becomes 200x150, for instance. Downsizing causes fighters to
     be bigger because map resolution is lower. This can be usefull if
     you don't want fighters to be too small.

4.10.4 fighter-scale
--------------------

 -- Command-line option: `--fighter-scale=<value>'
 -- Environment variable: `LW6_FIGHTER_SCALE'
 -- XML key: `fighter-scale'
     Type: float

     Default value: 1.0

     Defines how wide (in pixels) fighters must be. This parameter is
     very important and will largely condition the number of fighters
     on the map. It is used when loading the map. If it is, for
     instance, set to 1, there will be exactly a fighter per pixel on
     the screen. That is, if you play 640x480 on an empty map, the
     maximum fighters you could have is about 300000. The idea is that
     by changing the resolution, you also define the density of the
     map. In pratice, this is done in the hope that someone with a slow
     computer will pick up a low resolution and therefore play small
     levels. Conversely, someone with a brand new computer with
     powerfull CPU & GPU will use great resolutions and be happy with
     many fighters on the map. Still, changing the resolution after
     loading the map will not affet the number of fighters. Same for
     network games, the first player, who loads the map, defines its
     properties according to its own settings.

4.10.5 guess-colors
-------------------

 -- Command-line option: `--guess-colors=<value>'
 -- Environment variable: `LW6_GUESS_COLORS'
 -- XML key: `guess-colors'
     Type: boolean

     Default value: true

     Defines wether colors should be set automatically from texture
     colors. If set to true, then the program will try to pick up
     colors automatically from the texture, and will override the
     values of the color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg parameters. How these colors are picked up
     can't be garanteed, so if the map does not have strong contrast or
     if there can be any form of ambiguity, it's safe to set this to
     false and define one's own colors.

4.10.6 guess-moves-per-sec
--------------------------

 -- Command-line option: `--guess-moves-per-sec=<value>'
 -- Environment variable: `LW6_GUESS_MOVES_PER_SEC'
 -- XML key: `guess-moves-per-sec'
     Type: boolean

     Default value: true

     If set, then loader will use 'time-to-cross-level' to guess the
     game speed parameters.

4.10.7 hud-color-auto
---------------------

 -- Command-line option: `--hud-color-auto=<value>'
 -- Environment variable: `LW6_HUD_COLOR_AUTO'
 -- XML key: `hud-color-auto'
     Type: boolean

     Default value: true

     Defines wether hud colors will be set automatically from base and
     alternate colors. This is a time saver to keep map designers from
     requiring to redefined every single color in the game. You only
     need to set color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg. Then hud_color_frame_bg, hud_color_frame_fg,
     hud_color_text_bg and hud_color_text_fg will be automatically set.

4.10.8 max-map-height
---------------------

 -- Command-line option: `--max-map-height=<value>'
 -- Environment variable: `LW6_MAX_MAP_HEIGHT'
 -- XML key: `max-map-height'
     Type: integer

     Default value: 3000

     Allows you to give a maximum map height. When designing a map you
     might wonder: this is dumb I'm conceiving this map I know its
     height, why should I limit it? Now think of the play who plays on
     a old slowish computer with a tiny screen. He might redefine this
     himself, and does not necessarly wishes to fire Gimp to rescale
     the map.

4.10.9 max-map-surface
----------------------

 -- Command-line option: `--max-map-surface=<value>'
 -- Environment variable: `LW6_MAX_MAP_SURFACE'
 -- XML key: `max-map-surface'
     Type: integer

     Default value: 3000000

     Allows you to give a maximum map surface. Map surface is simply
     (width * height). This parameter is just here to save you the
     hassle of defining both 'max-map-width' and 'max-map-height' in a
     consistent manner.

4.10.10 max-map-width
---------------------

 -- Command-line option: `--max-map-width=<value>'
 -- Environment variable: `LW6_MAX_MAP_WIDTH'
 -- XML key: `max-map-width'
     Type: integer

     Default value: 4000

     Allows you to give a maximum map width. When designing a map you
     might wonder: this is dumb I'm conceiving this map I know its
     width, why should I limit it?  Now think of the play who plays on
     a old slowish computer with a tiny screen.  He might redefine this
     himself, and does not necessarly wishes to fire Gimp to rescale
     the map.

4.10.11 menu-color-auto
-----------------------

 -- Command-line option: `--menu-color-auto=<value>'
 -- Environment variable: `LW6_MENU_COLOR_AUTO'
 -- XML key: `menu-color-auto'
     Type: boolean

     Default value: true

     Defines wether menu colors will be set automatically from base and
     alternate colors. This is a time saver to keep map designers from
     requiring to redefined every single color in the game. You only
     need to set color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg. Then menu_color_default_bg,
     menu_color_default_fg, menu_color_selected_bg,
     menu_color_selected_fg, menu_color_disabled_bg and
     menu_color_disabled_fg will be automatically set.

4.10.12 min-map-height
----------------------

 -- Command-line option: `--min-map-height=<value>'
 -- Environment variable: `LW6_MIN_MAP_HEIGHT'
 -- XML key: `min-map-height'
     Type: integer

     Default value: 15

     Allows you to give a minimum map height. When designing a map you
     might wonder: this is dumb I'm conceiving this map I know its
     height, why should I limit it? Now think of the player who decided
     to play with highly-defined maps because he has a super calculator
     and a hudge screen. He might redefine this himself, and does not
     necessarly wishes to fire Gimp to rescale the map.

4.10.13 min-map-surface
-----------------------

 -- Command-line option: `--min-map-surface=<value>'
 -- Environment variable: `LW6_MIN_MAP_SURFACE'
 -- XML key: `min-map-surface'
     Type: integer

     Default value: 1200

     Allows you to give a minimum map surface. Map surface is simply
     (width * height). This parameter is just here to save you the
     hassle of defining both 'min-map-width' and 'min-map-height' in a
     consistent manner.

4.10.14 min-map-width
---------------------

 -- Command-line option: `--min-map-width=<value>'
 -- Environment variable: `LW6_MIN_MAP_WIDTH'
 -- XML key: `min-map-width'
     Type: integer

     Default value: 20

     Allows you to give a minimum map width. When designing a map you
     might wonder: this is dumb I'm conceiving this map I know its
     width, why should I limit it?  Now think of the player who decided
     to play with highly-defined maps because he has a super calculator
     and a hudge screen. He might redefine this himself, and does not
     necessarly wishes to fire Gimp to rescale the map.

4.10.15 resample
----------------

 -- Command-line option: `--resample=<value>'
 -- Environment variable: `LW6_RESAMPLE'
 -- XML key: `resample'
     Type: boolean

     Default value: true

     If set to true, maps will always be resampled to a size which
     depends on your screen resolution, zoom factor, and the rest. If
     false, maps will be set at the exact resolution of map.png.

4.10.16 speed
-------------

 -- Command-line option: `--speed=<value>'
 -- Environment variable: `LW6_SPEED'
 -- XML key: `speed'
     Type: float

     Default value: 1.0

     This parameter is the main parameter on which game speed depends.
     The map loader will garantee, by downscaling the map, that to
     cross the level (by crossing the level we mean, for instance,
     going from top-left corner to bottom-right corner in a straight
     line) a fighter will take a constant amount of time. Under the
     hood, the loader might of course rescale the map but it will also
     change game speed so that, at the end, fighters take a constant
     time to cross the level. This is, indeed, the most important
     thing, players do not care much if internally there are X or Y
     moves per second, the global game experience depends on how fast
     fighter movement looks on the screen. The default settings
     corresponds roughly to one second to cross the level. If you set
     this to 2.0, it will go twice faster.

4.10.17 system-color-auto
-------------------------

 -- Command-line option: `--system-color-auto=<value>'
 -- Environment variable: `LW6_SYSTEM_COLOR_AUTO'
 -- XML key: `system-color-auto'
     Type: boolean

     Default value: true

     Defines wether system colors will be set automatically from base
     and alternate colors. This is a time saver to keep map designers
     from requiring to redefined every single color in the game. You
     only need to set color-base-bg, color-base-fg, color-alternate-bg
     and color-alternate-fg. Then system_color_bg and system_color_fg
     will be automatically set.

4.10.18 upsize-using-bench-value
--------------------------------

 -- Command-line option: `--upsize-using-bench-value=<value>'
 -- Environment variable: `LW6_UPSIZE_USING_BENCH_VALUE'
 -- XML key: `upsize-using-bench-value'
     Type: boolean

     Default value: false

     If set, then the game will automatically upsize a map according to
     the 'fighter-scale' parameter. Upsizing means: a 160x120 maps
     becomes 400x300, for instance. Upsizing causes fighters to be
     smaller because map resolution is higher. This will avoid useless
     pixelish 'jumbo fighters' look when your computer is powerfull
     enough to do better.

4.10.19 upsize-using-fighter-scale
----------------------------------

 -- Command-line option: `--upsize-using-fighter-scale=<value>'
 -- Environment variable: `LW6_UPSIZE_USING_FIGHTER_SCALE'
 -- XML key: `upsize-using-fighter-scale'
     Type: boolean

     Default value: true

     If set, then the game will automatically upsize a map according to
     the 'fighter-scale' parameter. Upsizing means: a 160x120 maps
     becomes 400x300, for instance. Upsizing causes fighters to be
     smaller because map resolution is higher. This can be usefull if
     you don't want fighters to be too big.

4.10.20 view-color-auto
-----------------------

 -- Command-line option: `--view-color-auto=<value>'
 -- Environment variable: `LW6_VIEW_COLOR_AUTO'
 -- XML key: `view-color-auto'
     Type: boolean

     Default value: true

     Defines wether view colors will be set automatically from base and
     alternate colors. This is a time saver to keep map designers from
     requiring to redefined every single color in the game. You only
     need to set color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg. Then view_color_cursor_bg,
     view_color_cursor_fg, view_color_map_bg and view_color_map_fg will
     be automatically set.

4.10.21 wall-grease
-------------------

 -- Command-line option: `--wall-grease=<value>'
 -- Environment variable: `LW6_WALL_GREASE'
 -- XML key: `wall-grease'
     Type: integer

     Default value: 0 Min value: -5 Max value: 5

     This parameter allows you to make walls (aka map foreground)
     thicker, or thiner, when map is loaded. Indeed, when map are
     resampled, and especially when they are downscaled, some walls may
     disappear, or some passages may be blocked. The loader can't
     automatically figure out wether it's more important to keep an
     existing wall or to keep an open passage for fighters. This
     parameter helps doing so, if you set it to a low value, level will
     be less greasy, and many passages might open themselves. On the
     contrary, if grease is at a high level, then a thin line of almost
     isolated pixels might become a thick wall. There's no real
     garantee your wall or passage will always be present, but it's a
     same bet to assume on a 'tunnel-like' level one needs to set
     grease to a low value, and on a 'wide open' level with few walls
     one needs to set grease to a high value.


File: liquidwar6.info,  Node: Map style.xml,  Next: Advanced settings,  Prev: Map hints.xml,  Up: Reference

4.11 Map style.xml
==================

4.11.1 animation-density
------------------------

 -- Command-line option: `--animation-density=<value>'
 -- Environment variable: `LW6_ANIMATION_DENSITY'
 -- XML key: `animation-density'
     Type: float

     Default value: 1.0f Min value: 0 Max value: 10

     Density of the background animation, that is, for instance, if the
     background animation is about displaying bubbles, using a high
     value will display many bubbles. A value of 1.0 corresponds to the
     default setting.

4.11.2 animation-speed
----------------------

 -- Command-line option: `--animation-speed=<value>'
 -- Environment variable: `LW6_ANIMATION_SPEED'
 -- XML key: `animation-speed'
     Type: float

     Default value: 1.0f Min value: 0 Max value: 10

     Speed of the background animation, that is, for instance, if the
     background animation is about displaying bubbles, using a high
     value will cause bubbles to move very fast. A value of 1.0
     corresponds to the default setting.

4.11.3 background-color-root-bg
-------------------------------

 -- Command-line option: `--background-color-root-bg=<value>'
 -- Environment variable: `LW6_BACKGROUND_COLOR_ROOT_BG'
 -- XML key: `background-color-root-bg'
     Type: color

     Default value: #000

     Defines the main background color. This is, for instance, the
     color which will be used to clear the screen before drawing thing.
     Will be automatically guessed from the map texture if color-auto
     is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.4 background-color-root-fg
-------------------------------

 -- Command-line option: `--background-color-root-fg=<value>'
 -- Environment variable: `LW6_BACKGROUND_COLOR_ROOT_FG'
 -- XML key: `background-color-root-fg'
     Type: color

     Default value: #ccc

     Defines a color which will be used together with color-base-bg to
     compose the background. It can be wise to have a minimum contrast
     between this color and color-base-bg, but it is not mandatory,
     especially if other colors are manually redefined. Will be
     automatically guessed from the map texture if color-auto is set.
     Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.5 background-color-stuff-bg
--------------------------------

 -- Command-line option: `--background-color-stuff-bg=<value>'
 -- Environment variable: `LW6_BACKGROUND_COLOR_STUFF_BG'
 -- XML key: `background-color-stuff-bg'
     Type: color

     Default value: #333

     Defines a color which will be used together with
     color-alternate-fg to draw things (animations, sprites, text,
     whatever) in the background. It should be different enough from
     color-alternate-fg so that one can really distinguish these
     colors. Will be automatically guessed from the map texture if
     color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.6 background-color-stuff-fg
--------------------------------

 -- Command-line option: `--background-color-stuff-fg=<value>'
 -- Environment variable: `LW6_BACKGROUND_COLOR_STUFF_FG'
 -- XML key: `background-color-stuff-fg'
     Type: color

     Default value: #fff

     Defines a color which will be used to draw things (animations,
     sprites, text, whatever) in the background. It should be different
     enough from color-alternate-bg so that one can really distinguish
     these colors. Think of this as the sprite, the text, the
     whatever-needs-to-be-seen-uses-this color.  Will be automatically
     guessed from the map texture if color-auto is set. Can be #RGB,
     #RGBA, #RRGGBB or #RRGGBBAA.

4.11.7 background-style
-----------------------

 -- Command-line option: `--background-style=<value>'
 -- Environment variable: `LW6_BACKGROUND_STYLE'
 -- XML key: `background-style'
     Type: string

     Default value: bubbles

     The background defines, of course, what is displayed at the
     background, but it also conditions the colors used for other
     items, such as the menus for instance. The possible values are
     'void' and 'bubbles'.

4.11.8 blink-cursor
-------------------

 -- Command-line option: `--blink-cursor=<value>'
 -- Environment variable: `LW6_BLINK_CURSOR'
 -- XML key: `blink-cursor'
     Type: boolean

     Default value: false

     If set, then cursor will blink, allowing you to see what's under
     the cursor.  It's just a matter of taste, you might to always have
     your cursor displayed, or prefer to have it disappear from time to
     time so that you can see the action below

4.11.9 color-alternate-bg
-------------------------

 -- Command-line option: `--color-alternate-bg=<value>'
 -- Environment variable: `LW6_COLOR_ALTERNATE_BG'
 -- XML key: `color-alternate-bg'
     Type: color

     Default value: #333

     Defines the alternate color, more precisely, its bg (background)
     part. Colors are always defined by a bg/fg pair. Most colors in
     the game can be deduced from this one, usually to color a map you
     only need to define color-base-bg, color-base-fg,
     color-alternate-bg and color-alternate-fg.

4.11.10 color-alternate-fg
--------------------------

 -- Command-line option: `--color-alternate-fg=<value>'
 -- Environment variable: `LW6_COLOR_ALTERNATE_FG'
 -- XML key: `color-alternate-fg'
     Type: color

     Default value: #fff

     Defines the alternate color, more precisely, its fg (foreground)
     part. Colors are always defined by a bg/fg pair. Most colors in
     the game can be deduced from this one, usually to color a map you
     only need to define color-base-bg, color-base-fg,
     color-alternate-bg and color-alternate-fg.

4.11.11 color-base-bg
---------------------

 -- Command-line option: `--color-base-bg=<value>'
 -- Environment variable: `LW6_COLOR_BASE_BG'
 -- XML key: `color-base-bg'
     Type: color

     Default value: #000

     Defines the base color, more precisely, its bg (background) part.
     Colors are always defined by a bg/fg pair. Most colors in the game
     can be deduced from this one, usually to color a map you only need
     to define color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg.

4.11.12 color-base-fg
---------------------

 -- Command-line option: `--color-base-fg=<value>'
 -- Environment variable: `LW6_COLOR_BASE_FG'
 -- XML key: `color-base-fg'
     Type: color

     Default value: #ccc

     Defines the base color, more precisely, its fg (foreground) part.
     Colors are always defined by a bg/fg pair. Most colors in the game
     can be deduced from this one, usually to color a map you only need
     to define color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg.

4.11.13 colorize
----------------

 -- Command-line option: `--colorize=<value>'
 -- Environment variable: `LW6_COLORIZE'
 -- XML key: `colorize'
     Type: boolean

     Default value: true

     If set, then all background drawings including textures will use
     the background colors. This means, for instance, that if
     background colors are set automatically by color-auto from the map
     texture, then the background will adopt the same range of colors
     than the map itself. In short, the background will mimic the map.

4.11.14 colorize-cursor
-----------------------

 -- Command-line option: `--colorize-cursor=<value>'
 -- Environment variable: `LW6_COLORIZE_CURSOR'
 -- XML key: `colorize-cursor'
     Type: boolean

     Default value: true

     If set, then all cursors will use the automatic guessed colors, or
     the specified colors, but basically they won't be displayed using
     their native colors. This can be usefull for you can wish to use a
     generic non-colored texture for your cursor and let it be
     colorized automatically so that it's accorded to the level.

4.11.15 cursor-size
-------------------

 -- Command-line option: `--cursor-size=<value>'
 -- Environment variable: `LW6_CURSOR_SIZE'
 -- XML key: `cursor-size'
     Type: float

     Default value: 1.0f Min value: 0 Max value: 10

     Size of the cursors on the map. 1 is the default, setting it to a
     higher value will make cursors bigger, a lower value will make
     them smaller.

4.11.16 hidden-layer-alpha
--------------------------

 -- Command-line option: `--hidden-layer-alpha=<value>'
 -- Environment variable: `LW6_HIDDEN_LAYER_ALPHA'
 -- XML key: `hidden-layer-alpha'
     Type: float

     Default value: 0.1f Min value: 0 Max value: 1

     Whenever players are supposed to be hidden behind a wall, for
     instance if they are in layer 2 and layer 1 is filled with walls,
     it's still possible to see them, but with a low alpha value
     (almost transparent). This parameter allows you to trick this
     value, 0 will make these players absolutely invisible, 1 will make
     them totally opaque, like if they were on layer 1.

4.11.17 hud-color-frame-bg
--------------------------

 -- Command-line option: `--hud-color-frame-bg=<value>'
 -- Environment variable: `LW6_HUD_COLOR_FRAME_BG'
 -- XML key: `hud-color-frame-bg'
     Type: color

     Default value: #000

     Defines the background color for the hud frame. Ignored if
     hud-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.18 hud-color-frame-fg
--------------------------

 -- Command-line option: `--hud-color-frame-fg=<value>'
 -- Environment variable: `LW6_HUD_COLOR_FRAME_FG'
 -- XML key: `hud-color-frame-fg'
     Type: color

     Default value: #ccc

     Defines the foreground color for the hud frame. Ignored if
     hud-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.19 hud-color-text-bg
-------------------------

 -- Command-line option: `--hud-color-text-bg=<value>'
 -- Environment variable: `LW6_HUD_COLOR_TEXT_BG'
 -- XML key: `hud-color-text-bg'
     Type: color

     Default value: #333

     Defines the background color for hud text. Ignored if
     hud-color-auto is set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.20 hud-color-text-fg
-------------------------

 -- Command-line option: `--hud-color-text-fg=<value>'
 -- Environment variable: `LW6_HUD_COLOR_TEXT_FG'
 -- XML key: `hud-color-text-fg'
     Type: color

     Default value: #fff

     Defines the foreground color for hud text. Ignored if
     hud-color-auto is set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.21 hud-style
-----------------

 -- Command-line option: `--hud-style=<value>'
 -- Environment variable: `LW6_HUD_STYLE'
 -- XML key: `hud-style'
     Type: string

     Default value: floating

     The hud is where informations about the game are displayed. This
     means, who is winning, are other status-like informations.
     Possible values include 'floating' and 'tactical'.

4.11.22 keep-ratio
------------------

 -- Command-line option: `--keep-ratio=<value>'
 -- Environment variable: `LW6_KEEP_RATIO'
 -- XML key: `keep-ratio'
     Type: boolean

     Default value: true

     Defines wether the map should keep its ratio, or if it should be
     stretched to fill the shape of your screen.

4.11.23 menu-color-default-bg
-----------------------------

 -- Command-line option: `--menu-color-default-bg=<value>'
 -- Environment variable: `LW6_MENU_COLOR_DEFAULT_BG'
 -- XML key: `menu-color-default-bg'
     Type: color

     Default value: #333

     Defines the default background color for menus. Ignored if
     menu-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.24 menu-color-default-fg
-----------------------------

 -- Command-line option: `--menu-color-default-fg=<value>'
 -- Environment variable: `LW6_MENU_COLOR_DEFAULT_FG'
 -- XML key: `menu-color-default-fg'
     Type: color

     Default value: #fff

     Defines the default foreground color for menus. In fact, this is
     the main color for menu text, the color used to draw letters in
     menus. Ignored if menu-color-auto is set. Can be #RGB, #RGBA,
     #RRGGBB or #RRGGBBAA.

4.11.25 menu-color-disabled-bg
------------------------------

 -- Command-line option: `--menu-color-disabled-bg=<value>'
 -- Environment variable: `LW6_MENU_COLOR_DISABLED_BG'
 -- XML key: `menu-color-disabled-bg'
     Type: color

     Default value: #000

     Defines the background color for a disabled menu item. Ignored if
     menu-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.26 menu-color-disabled-fg
------------------------------

 -- Command-line option: `--menu-color-disabled-fg=<value>'
 -- Environment variable: `LW6_MENU_COLOR_DISABLED_FG'
 -- XML key: `menu-color-disabled-fg'
     Type: color

     Default value: #ccc

     Defines the foreground color for a disabled menu item. Ignored if
     menu-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.27 menu-color-selected-bg
------------------------------

 -- Command-line option: `--menu-color-selected-bg=<value>'
 -- Environment variable: `LW6_MENU_COLOR_SELECTED_BG'
 -- XML key: `menu-color-selected-bg'
     Type: color

     Default value: #fff

     Defines the background color for a selected menu item. Ignored if
     menu-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.28 menu-color-selected-fg
------------------------------

 -- Command-line option: `--menu-color-selected-fg=<value>'
 -- Environment variable: `LW6_MENU_COLOR_SELECTED_FG'
 -- XML key: `menu-color-selected-fg'
     Type: color

     Default value: #333

     Defines the foreground color for a selected menu item. Ignored if
     menu-color-auto is set. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.29 menu-style
------------------

 -- Command-line option: `--menu-style=<value>'
 -- Environment variable: `LW6_MENU_STYLE'
 -- XML key: `menu-style'
     Type: string

     Default value: cylinder

     The menu style is simply the name of the engine used to power the
     menu system.  The only possible value, for now, is 'cylinder'.

4.11.30 music-exclude
---------------------

 -- Command-line option: `--music-exclude=<value>'
 -- Environment variable: `LW6_MUSIC_EXCLUDE'
 -- XML key: `music-exclude'
     Type: string

     Default value: Chadburn

     If this string is found in a music file name, it will be excluded
     from the list when playing in random mode.

4.11.31 music-file
------------------

 -- Command-line option: `--music-file=<value>'
 -- Environment variable: `LW6_MUSIC_FILE'
 -- XML key: `music-file'
     Type: string

     Default value:

     Allows you to play a custom music file (typically your own ogg
     music) and override default game music. If file does not exist,
     game will use its internal music. The file will be searched for in
     the current 'music-path' but also in the current map directory. No
     absolute or even relative path are allowed, only a plain filename
     with no slash or backslash. Avoid special characters at all cost.

4.11.32 music-filter
--------------------

 -- Command-line option: `--music-filter=<value>'
 -- Environment variable: `LW6_MUSIC_FILTER'
 -- XML key: `music-filter'
     Type: string

     Default value:

     A music filter, used when files are played randomly. This is not a
     complex regex-enabled filter, just a plain string search. Even the
     '*' wildcard won't work. If you want precise control on what music
     file to play, please consider reorganizing your files and/or use
     the 'music-file' parameter.

4.11.33 pixelize
----------------

 -- Command-line option: `--pixelize=<value>'
 -- Environment variable: `LW6_PIXELIZE'
 -- XML key: `pixelize'
     Type: boolean

     Default value: false

     Depending on the renderer capabilities, will try to pixelize some
     parts of the game. This can be used to emulate the old LW5
     appearance.

4.11.34 system-color-bg
-----------------------

 -- Command-line option: `--system-color-bg=<value>'
 -- Environment variable: `LW6_SYSTEM_COLOR_BG'
 -- XML key: `system-color-bg'
     Type: color

     Default value: #333

     Defines the system background color, used when displaying system
     info, such as the number of frames per second. Can be #RGB, #RGBA,
     #RRGGBB or #RRGGBBAA.

4.11.35 system-color-fg
-----------------------

 -- Command-line option: `--system-color-fg=<value>'
 -- Environment variable: `LW6_SYSTEM_COLOR_FG'
 -- XML key: `system-color-fg'
     Type: color

     Default value: #fff

     Defines the system foreground color, used when displaying system
     info, such as the number of frames per second. This will typically
     be text color. Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.36 team-color-blue
-----------------------

 -- Command-line option: `--team-color-blue=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_BLUE'
 -- XML key: `team-color-blue'
     Type: color

     Default value: #00f

     Defines the color for the blue team. Syntax is HTML-like, #RGB or
     #RRGGBB.

4.11.37 team-color-cyan
-----------------------

 -- Command-line option: `--team-color-cyan=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_CYAN'
 -- XML key: `team-color-cyan'
     Type: color

     Default value: #0ff

     Defines the color for the cyan team. Syntax is HTML-like, #RGB or
     #RRGGBB.

4.11.38 team-color-dead
-----------------------

 -- Command-line option: `--team-color-dead=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_DEAD'
 -- XML key: `team-color-dead'
     Type: color

     Default value: #000

     Defines the color for the teams when they are dead. By default it
     is black, this means when a team is weak it becomes black. Syntax
     is HTML-like, #RGB or #RRGGBB.

4.11.39 team-color-green
------------------------

 -- Command-line option: `--team-color-green=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_GREEN'
 -- XML key: `team-color-green'
     Type: color

     Default value: #0f0

     Defines the color for the green team. Syntax is HTML-like, #RGB or
     #RRGGBB.

4.11.40 team-color-lightblue
----------------------------

 -- Command-line option: `--team-color-lightblue=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_LIGHTBLUE'
 -- XML key: `team-color-lightblue'
     Type: color

     Default value: #8bf

     Defines the color for the light blue team. Syntax is HTML-like,
     #RGB or #RRGGBB.

4.11.41 team-color-magenta
--------------------------

 -- Command-line option: `--team-color-magenta=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_MAGENTA'
 -- XML key: `team-color-magenta'
     Type: color

     Default value: #f0f

     Defines the color for the magenta team. Syntax is HTML-like, #RGB
     or #RRGGBB.

4.11.42 team-color-orange
-------------------------

 -- Command-line option: `--team-color-orange=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_ORANGE'
 -- XML key: `team-color-orange'
     Type: color

     Default value: #f80

     Defines the color for the orange team. Syntax is HTML-like, #RGB
     or #RRGGBB.

4.11.43 team-color-pink
-----------------------

 -- Command-line option: `--team-color-pink=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_PINK'
 -- XML key: `team-color-pink'
     Type: color

     Default value: #f8b

     Defines the color for the pink team. Syntax is HTML-like, #RGB or
     #RRGGBB.

4.11.44 team-color-purple
-------------------------

 -- Command-line option: `--team-color-purple=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_PURPLE'
 -- XML key: `team-color-purple'
     Type: color

     Default value: #b8f

     Defines the color for the purple team. Syntax is HTML-like, #RGB
     or #RRGGBB.

4.11.45 team-color-red
----------------------

 -- Command-line option: `--team-color-red=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_RED'
 -- XML key: `team-color-red'
     Type: color

     Default value: #f00

     Defines the color for the red team. Syntax is HTML-like, #RGB or
     #RRGGBB.

4.11.46 team-color-yellow
-------------------------

 -- Command-line option: `--team-color-yellow=<value>'
 -- Environment variable: `LW6_TEAM_COLOR_YELLOW'
 -- XML key: `team-color-yellow'
     Type: color

     Default value: #ff0

     Defines the color for the yellow team. Syntax is HTML-like, #RGB
     or #RRGGBB.

4.11.47 view-color-cursor-bg
----------------------------

 -- Command-line option: `--view-color-cursor-bg=<value>'
 -- Environment variable: `LW6_VIEW_COLOR_CURSOR_BG'
 -- XML key: `view-color-cursor-bg'
     Type: color

     Default value: #333

     Defines the background cursor color. Will typically be used to
     draw the shape of the cursor. Ignored if view-color-auto is set.
     Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.48 view-color-cursor-fg
----------------------------

 -- Command-line option: `--view-color-cursor-fg=<value>'
 -- Environment variable: `LW6_VIEW_COLOR_CURSOR_FG'
 -- XML key: `view-color-cursor-fg'
     Type: color

     Default value: #fff

     Defines the foreground cursor color. Will typically be used to
     draw text in the cursor. Ignored if view-color-auto is set. Can be
     #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.49 view-color-map-bg
-------------------------

 -- Command-line option: `--view-color-map-bg=<value>'
 -- Environment variable: `LW6_VIEW_COLOR_MAP_BG'
 -- XML key: `view-color-map-bg'
     Type: color

     Default value: #000

     Defines the background map color. If there's no map texture
     defined or if use-texture is false, this is the color of the
     places where armies will go.  Ignored if view-color-auto is set.
     Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.50 view-color-map-fg
-------------------------

 -- Command-line option: `--view-color-map-fg=<value>'
 -- Environment variable: `LW6_VIEW_COLOR_MAP_FG'
 -- XML key: `view-color-map-fg'
     Type: color

     Default value: #ccc

     Defines the foreground map color. If there's no map texture
     defined or if use-texture is false, this is the color of walls,
     what armies can't go through. Ignored if view-color-auto is set.
     Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.11.51 view-style
------------------

 -- Command-line option: `--view-style=<value>'
 -- Environment variable: `LW6_VIEW_STYLE'
 -- XML key: `view-style'
     Type: string

     Default value: flat

     The view style conditions which renderer is used for the map, the
     area where fighters are displayed. This is not the graphics
     backend. Indeed, the graphics backend defines which technical tool
     one uses (which library) one runs, wether this parameter says what
     kind of rendering one wants.

4.11.52 x-wrap
--------------

 -- Command-line option: `--x-wrap=<value>'
 -- Environment variable: `LW6_X_WRAP'
 -- XML key: `x-wrap'
     Type: boolean

     Default value: true

     Defines wether the map should be wrapped on the x axis. This is
     the companion of 'x-polarity', if no polarity is defined, map
     can't be wrapped, but in some cases, one might wish to have a map
     with polarity but without wrapping if, for instance, textures do
     not tile nicely.

4.11.53 y-wrap
--------------

 -- Command-line option: `--y-wrap=<value>'
 -- Environment variable: `LW6_Y_WRAP'
 -- XML key: `y-wrap'
     Type: boolean

     Default value: true

     Defines wether the map should be wrapped on the y axis. This is
     the companion of 'y-polarity', if no polarity is defined, map
     can't be wrapped, but in some cases, one might wish to have a map
     with polarity but without wrapping if, for instance, textures do
     not tile nicely.

4.11.54 zoom
------------

 -- Command-line option: `--zoom=<value>'
 -- Environment variable: `LW6_ZOOM'
 -- XML key: `zoom'
     Type: float

     Default value: 1.0f

     Defines the map zoom. If lower than 1.0, map will occupy only a
     fraction of the screen, if greater than 1.0, some areas will be
     outside the screen, and the player will need to scroll through it.

4.11.55 zoom-max
----------------

 -- Command-line option: `--zoom-max=<value>'
 -- Environment variable: `LW6_ZOOM_MAX'
 -- XML key: `zoom-max'
     Type: float

     Default value: 30.0f

     Defines the max map zoom. If set to a high value, you'll be able to
     dynamically view the map with hudge fighters, seeing only a
     fraction of the level.

4.11.56 zoom-min
----------------

 -- Command-line option: `--zoom-min=<value>'
 -- Environment variable: `LW6_ZOOM_MIN'
 -- XML key: `zoom-min'
     Type: float

     Default value: 0.3f

     Defines the min map zoom. If set to a low value, you'll be able to
     dynamically view a very small, reduced map.

