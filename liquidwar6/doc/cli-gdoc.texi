@deftypefun {int} {lw6cli_init} (lw6cli_backend_t * @var{backend})
@var{backend}:  backend to use

Initializes a client backend. Must be performed before any other call.

@strong{Return value:}  1 on success, 0 on failure
@end deftypefun

@deftypefun {void} {lw6cli_quit} (lw6cli_backend_t * @var{backend})
@var{backend}:  unitialize a cli backend

Closes a cli, but does not free all ressources.
@end deftypefun

@deftypefun {int} {lw6cli_process_oob} (lw6cli_backend_t * @var{backend}, lw6nod_info_t * @var{node_info}, lw6cli_oob_data_t * @var{oob_data})
@var{backend}:  backend to use

@var{node_info}:  information on the current node

@var{oob_data}:  data of the out-of-band request

Processes the required out-of-band tasks, this typically, for a client,
includes broadcasting. Depending on parameters passed in oob_data, might
actually do a broadcast or simply call a given host and see what's the answer.
A typicall exchange is PING then INFO and finally LIST. It's the responsability
of the client to take the OOB initiative and contact the server.

@strong{Return value:}  1 on success, 0 on failure.
@end deftypefun

@deftypefun {lw6cnx_connection_t *} {lw6cli_open} (lw6cli_backend_t * @var{backend}, const char * @var{local_url}, const char * @var{remote_url}, const char * @var{remote_ip}, int @var{remote_port}, const char * @var{password}, u_int64_t @var{local_id}, u_int64_t @var{remote_id}, int @var{dns_ok}, int @var{network_reliability}, lw6cnx_recv_callback_t @var{recv_callback_func}, void * @var{recv_callback_data})
@var{backend}:  backend to use

@var{local_url}:  our local public url

@var{remote_url}:  the remote url we want to connect to

@var{remote_ip}:  remote IP address

@var{remote_port}:  remote IP port

@var{password}:  password to use (if needed)

@var{local_id}:  our local id

@var{remote_id}:  the remote id

@var{dns_ok}:  wether the remote announced URL matches DNS information

@var{network_reliability}:  network reliability (the highest, the better)

@var{recv_callback_func}:  callback func to be called when data is received

@var{recv_callback_data}:  pointer on additionnal data to pass to callback func

Opens a connection with a remote host. Be carefull with the implementation
of @code{recv_callback_func}, it should be at least reentrant, and when it accesses
shared data, use locks.

@strong{Return value:}  new object.
@end deftypefun

@deftypefun {void} {lw6cli_close} (lw6cli_backend_t * @var{backend}, lw6cnx_connection_t * @var{connection})
@var{backend}:  backend to use

@var{connection}:  connection to use

Closes a connection, this will free the connection object.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6cli_send} (lw6cli_backend_t * @var{backend}, lw6cnx_connection_t * @var{connection}, int64_t @var{now}, u_int32_t @var{physical_ticket_sig}, u_int32_t @var{logical_ticket_sig}, u_int64_t @var{logical_from_id}, u_int64_t @var{logical_to_id}, const char * @var{message})
@var{backend}:  backend to use

@var{connection}:  connection to use

@var{now}:  current timestamp

@var{physical_ticket_sig}:  signature of physical sender

@var{logical_ticket_sig}:  signature of logical sender

@var{logical_from_id}:  id of logical sender

@var{logical_to_id}:  id of logicial target

@var{message}:  text of message to send

Sends a message to a peer over a given connection.

@strong{Return value:}  1 on success, 0 on failure.
@end deftypefun

@deftypefun {void} {lw6cli_poll} (lw6cli_backend_t * @var{backend}, lw6cnx_connection_t * @var{connection})
@var{backend}:  backend to use

@var{connection}:  connection to use

Performs required duty on connection, depending on the backend,
this can include sending messages and/or receiving them.
Must be called on a regular basis.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {char *} {lw6cli_repr} (lw6cli_backend_t * @var{backend}, lw6cnx_connection_t * @var{connection})
@var{backend}:  backend to use

@var{connection}:  connection to represent

Gives a human readable representation of the connection.

@strong{Return value:}  dynamically allocated string.
@end deftypefun

@deftypefun {lw6cli_oob_t *} {lw6cli_oob_new} (const char * @var{public_url}, lw6cli_verify_callback_func_t @var{verify_callback_func}, void * @var{verify_callback_data})
@var{public_url}:  the address of the distant server to test

@var{verify_callback_func}:  a function which will be called when a node has been verified

@var{verify_callback_data}:  additionnal data passed to the callback func

Create a new OOB structure, copying required objects.
We need to make copies for this is for usage in a 
separate thread. The thread member is not set
here since the right way to do things is first to
set up data then to fire the thread.

@strong{Return value:}  new object
@end deftypefun

@deftypefun {void} {lw6cli_oob_free} (lw6cli_oob_t * @var{oob})
@var{oob}:  the object to free

Frees an OOB structure.

@strong{Return value:}  none
@end deftypefun

@deftypefun {char *} {lw6cli_default_backends} ()

Returns the list of the default cli backends.

@strong{Return value:}  comma separated string, must not be freed.
@end deftypefun

@deftypefun {lw6sys_assoc_t *} {lw6cli_get_backends} (int @var{argc}, const char * [] @var{argv})
@var{argc}:  argc, as passed to @code{main}

@var{argv}:  argv, as passed to @code{main}

List available cli backends. The hash contains pairs with id and name
for each backend. The id is the technical key you can use to
load the backend, the name is something more readable you can display
in an interface. The backend objects themselves are not instanciated
by this (in fact, they are, but released on the fly) you need to
load and initialize them afterwards.

@strong{Return value:}  hash containing id/name pairs.
@end deftypefun

@deftypefun {lw6cli_backend_t *} {lw6cli_create_backend} (int @var{argc}, const char * [] @var{argv}, const char * @var{name})
@var{argc}:  argc, as passed to @code{main}

@var{argv}:  argv, as passed to @code{main}

@var{name}:  string containing cli key, typically got from @code{lw6cli_get_backends}

Creates a cli backend, this is just about loading the dynamic
library if needed, and/or check cli engine is available, and
connect to it. It does not perform initialization.

@strong{Return value:}  cli backend.
@end deftypefun

@deftypefun {void} {lw6cli_destroy_backend} (lw6cli_backend_t * @var{backend})
@var{backend}:  backend to destroy

Destroys a cli backend.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6cli_test} (int @var{mode})
@var{mode}:  0 for check only, 1 for full test

Runs the @code{cli} module test suite.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

