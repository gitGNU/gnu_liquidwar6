

  
@deftp {Struct} {lw6ldr_entry_s}

    
Contains informations about a map, but just the minimum to, for instance, display it in a menu entry.     
@end deftp

@defcv {Member} {lw6ldr_entry_s} {metadata}
@strong{Type:} @code{lw6map_metadata_t}

@strong{Definition:} @code{lw6map_metadata_t lw6ldr_entry_s::metadata}


The map metadata.         
        
@end defcv

@defcv {Member} {lw6ldr_entry_s} {absolute_path}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6ldr_entry_s::absolute_path}


The map absolute path, use this to load it.         
        
@end defcv

@defcv {Member} {lw6ldr_entry_s} {relative_path}
@strong{Type:} @code{char *}

@strong{Definition:} @code{char* lw6ldr_entry_s::relative_path}


The map relative path, store this in config file.         
        
@end defcv

@defcv {Member} {lw6ldr_entry_s} {has_subdirs}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_entry_s::has_subdirs}


Wether the entry has subdirs (and consequently, isn't a map)         
        
@end defcv

@defcv {Member} {lw6ldr_entry_s} {nb_submaps}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_entry_s::nb_submaps}


Number of sub mpas within this map.         
        
@end defcv

@defcv {Member} {lw6ldr_entry_s} {forbidden}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_entry_s::forbidden}


Wether it is forbidden (eg, not enough exp).         
        
@end defcv



  
@deftp {Struct} {lw6ldr_hints_s}

    
Content of hints.xml stored into a C struct.     
@end deftp

@defcv {Member} {lw6ldr_hints_s} {resample}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::resample}


Wether to resample the map on the fly when loaded.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {min_map_width}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::min_map_width}


Minimum map width.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {max_map_width}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::max_map_width}


Maximum map width.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {min_map_height}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::min_map_height}


Minimum map height.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {max_map_height}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::max_map_height}


Maximum map height.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {min_map_surface}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::min_map_surface}


Minimum map surface.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {max_map_surface}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::max_map_surface}


Maximum map surface.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {fighter_scale}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6ldr_hints_s::fighter_scale}


Use greater or smaller fighters.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {downsize_using_fighter_scale}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::downsize_using_fighter_scale}


Wether to downsize the map, if needed, using fighter scale.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {upsize_using_fighter_scale}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::upsize_using_fighter_scale}


Wether to upsize the map, if needed, using fighter scale.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {downsize_using_bench_value}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::downsize_using_bench_value}


Wether to downsize the map, if needed, using bench value.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {upsize_using_bench_value}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::upsize_using_bench_value}


Wether to upsize the map, if needed, using bench value.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {guess_colors}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::guess_colors}


Wether to guess colors from the map.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {background_color_auto}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::background_color_auto}


Wether to set up background colors automatically.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {hud_color_auto}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::hud_color_auto}


Wether to set up hud colors automatically.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {menu_color_auto}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::menu_color_auto}


Wether to set up menu colors automatically.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {view_color_auto}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::view_color_auto}


Wether to set up view colors automatically.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {system_color_auto}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::system_color_auto}


Wether to set up system colors automatically.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {wall_grease}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::wall_grease}


Wall grease used when rescaling.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {guess_moves_per_sec}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_hints_s::guess_moves_per_sec}


Guess the moves per sec value automatically.         
        
@end defcv

@defcv {Member} {lw6ldr_hints_s} {speed}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6ldr_hints_s::speed}


Global speed.         
        
@end defcv



  
@deftp {Struct} {lw6ldr_resampler_s}

    
Almost internal struct use to handler the resampling process. It has informations about the source, the target, and the ratio between them. It basically contains informations about how to scale.     
@end deftp

@defcv {Member} {lw6ldr_resampler_s} {target_w}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_resampler_s::target_w}


Target width.         
        
@end defcv

@defcv {Member} {lw6ldr_resampler_s} {target_h}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_resampler_s::target_h}


Target height.         
        
@end defcv

@defcv {Member} {lw6ldr_resampler_s} {source_w}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_resampler_s::source_w}


Source width.         
        
@end defcv

@defcv {Member} {lw6ldr_resampler_s} {source_h}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_resampler_s::source_h}


Source height.         
        
@end defcv

@defcv {Member} {lw6ldr_resampler_s} {scale_x}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6ldr_resampler_s::scale_x}


Ratio for the X axis (target_w/source_w).         
        
@end defcv

@defcv {Member} {lw6ldr_resampler_s} {scale_y}
@strong{Type:} @code{float}

@strong{Definition:} @code{float lw6ldr_resampler_s::scale_y}


Ratio for the Y axis (target_h/source_h).         
        
@end defcv



  
@deftp {Struct} {lw6ldr_use_s}

    
What files to use when loading a map.     
@end deftp

@defcv {Member} {lw6ldr_use_s} {use_texture}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_use_s::use_texture}


Wether to use texture.jpeg.         
        
@end defcv

@defcv {Member} {lw6ldr_use_s} {use_cursor_texture}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_use_s::use_cursor_texture}


Wether to use cursor-texture.jpeg.         
        
@end defcv

@defcv {Member} {lw6ldr_use_s} {use_rules_xml}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_use_s::use_rules_xml}


Wether to use rules.xml.         
        
@end defcv

@defcv {Member} {lw6ldr_use_s} {use_hints_xml}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_use_s::use_hints_xml}


Wether to use hints.xml.         
        
@end defcv

@defcv {Member} {lw6ldr_use_s} {use_style_xml}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_use_s::use_style_xml}


Wether to use style.xml.         
        
@end defcv

@defcv {Member} {lw6ldr_use_s} {use_teams_xml}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_use_s::use_teams_xml}


Wether to use teams.xml.         
        
@end defcv

@defcv {Member} {lw6ldr_use_s} {use_music_file}
@strong{Type:} @code{int}

@strong{Definition:} @code{int lw6ldr_use_s::use_music_file}


Wether to use the map specific music file.         
        
@end defcv


